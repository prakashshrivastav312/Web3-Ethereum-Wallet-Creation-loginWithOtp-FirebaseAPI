{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateSwapID = exports.calculateRandomNumberHash = exports.sha3 = exports.sha256 = exports.sha256ripemd160 = exports.ensureHex = exports.isHex = exports.reverseHex = exports.reverseArray = exports.hexXor = exports.num2VarInt = exports.num2hexstring = exports.int2hex = exports.hexstring2str = exports.str2hexstring = exports.ab2hexstring = exports.hexstring2ab = exports.str2ab = exports.ab2str = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _encHex = _interopRequireDefault(require(\"crypto-js/enc-hex\"));\n\nvar _ripemd = _interopRequireDefault(require(\"crypto-js/ripemd160\"));\n\nvar _sha = _interopRequireDefault(require(\"crypto-js/sha256\"));\n\nvar _sha2 = _interopRequireDefault(require(\"crypto-js/sha3\"));\n\nvar crypto = _interopRequireWildcard(require(\"../crypto\"));\n/**\n * @param {arrayBuffer} buf\n * @returns {string} ASCII string\n */\n\n\nvar ab2str = function ab2str(buf) {\n  var numArr = [];\n\n  for (var i = 0, len = buf.length; i < len; i++) {\n    numArr.push(buf[i]);\n  }\n\n  String.fromCharCode.apply(null, numArr);\n};\n/**\n * @param {string} str - ASCII string\n * @returns {arrayBuffer}\n */\n\n\nexports.ab2str = ab2str;\n\nvar str2ab = function str2ab(str) {\n  if (typeof str !== \"string\") {\n    throw new Error(\"str2ab expects a string\");\n  }\n\n  var result = new Uint8Array(str.length);\n\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n\n  return result;\n};\n/**\n * @param {string} str - HEX string\n * @returns {number[]}\n */\n\n\nexports.str2ab = str2ab;\n\nvar hexstring2ab = function hexstring2ab(str) {\n  ensureHex(str);\n  if (!str.length) return new Uint8Array();\n  var iters = str.length / 2;\n  var result = new Uint8Array(iters);\n\n  for (var i = 0; i < iters; i++) {\n    result[i] = parseInt(str.substring(0, 2), 16);\n    str = str.substring(2);\n  }\n\n  return result;\n};\n/**\n * @param {arrayBuffer} arr\n * @returns {string} HEX string\n */\n\n\nexports.hexstring2ab = hexstring2ab;\n\nvar ab2hexstring = function ab2hexstring(arr) {\n  if ((0, _typeof2[\"default\"])(arr) !== \"object\") {\n    throw new Error(\"ab2hexstring expects an array\");\n  }\n\n  var result = \"\";\n\n  for (var i = 0; i < arr.length; i++) {\n    var str = arr[i].toString(16);\n    str = str.length === 0 ? \"00\" : str.length === 1 ? \"0\" + str : str;\n    result += str;\n  }\n\n  return result;\n};\n/**\n * @param {string} str - ASCII string\n * @returns {string} HEX string\n */\n\n\nexports.ab2hexstring = ab2hexstring;\n\nvar str2hexstring = function str2hexstring(str) {\n  return ab2hexstring(str2ab(str));\n};\n/**\n * @param {string} hexstring - HEX string\n * @returns {string} ASCII string\n */\n\n\nexports.str2hexstring = str2hexstring;\n\nvar hexstring2str = function hexstring2str(hexstring) {\n  return ab2str(hexstring2ab(hexstring));\n};\n/**\n * convert an integer to big endian hex and add leading zeros\n * @param {Number} num\n * @returns {string}\n */\n\n\nexports.hexstring2str = hexstring2str;\n\nvar int2hex = function int2hex(num) {\n  if (typeof num !== \"number\") {\n    throw new Error(\"int2hex expects a number\");\n  }\n\n  var h = num.toString(16);\n  return h.length % 2 ? \"0\" + h : h;\n};\n/**\n * Converts a number to a big endian hexstring of a suitable size, optionally little endian\n * @param {Number} num\n * @param {Number} size - The required size in bytes, eg 1 for Uint8, 2 for Uint16. Defaults to 1.\n * @param {Boolean} littleEndian - Encode the hex in little endian form\n * @return {string}\n */\n\n\nexports.int2hex = int2hex;\n\nvar num2hexstring = function num2hexstring(num) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var littleEndian = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (typeof num !== \"number\") throw new Error(\"num must be numeric\");\n  if (num < 0) throw new RangeError(\"num is unsigned (>= 0)\");\n  if (size % 1 !== 0) throw new Error(\"size must be a whole integer\");\n  if (!Number.isSafeInteger(num)) throw new RangeError(\"num (\".concat(num, \") must be a safe integer\"));\n  size = size * 2;\n  var hexstring = num.toString(16);\n  hexstring = hexstring.length % size === 0 ? hexstring : (\"0\".repeat(size) + hexstring).substring(hexstring.length);\n  if (littleEndian) hexstring = reverseHex(hexstring);\n  return hexstring;\n};\n/**\n * Converts a number to a variable length Int. Used for array length header\n * @param {Number} num - The number\n * @returns {string} hexstring of the variable Int.\n */\n\n\nexports.num2hexstring = num2hexstring;\n\nvar num2VarInt = function num2VarInt(num) {\n  if (num < 0xfd) {\n    return num2hexstring(num);\n  } else if (num <= 0xffff) {\n    // uint16\n    return \"fd\" + num2hexstring(num, 2, true);\n  } else if (num <= 0xffffffff) {\n    // uint32\n    return \"fe\" + num2hexstring(num, 4, true);\n  } else {\n    // uint64\n    return \"ff\" + num2hexstring(num, 8, true);\n  }\n};\n/**\n * XORs two hexstrings\n * @param {string} str1 - HEX string\n * @param {string} str2 - HEX string\n * @returns {string} XOR output as a HEX string\n */\n\n\nexports.num2VarInt = num2VarInt;\n\nvar hexXor = function hexXor(str1, str2) {\n  ensureHex(str1);\n  ensureHex(str2);\n  if (str1.length !== str2.length) throw new Error(\"strings are disparate lengths\");\n  var result = [];\n\n  for (var i = 0; i < str1.length; i += 2) {\n    result.push(parseInt(str1.substr(i, 2), 16) ^ parseInt(str2.substr(i, 2), 16));\n  }\n\n  return ab2hexstring(result);\n};\n/**\n * Reverses an array. Accepts arrayBuffer.\n * @param {Array} arr\n * @returns {Uint8Array}\n */\n\n\nexports.hexXor = hexXor;\n\nvar reverseArray = function reverseArray(arr) {\n  if ((0, _typeof2[\"default\"])(arr) !== \"object\" || !arr.length) throw new Error(\"reverseArray expects an array\");\n  var result = new Uint8Array(arr.length);\n\n  for (var i = 0; i < arr.length; i++) {\n    result[i] = arr[arr.length - 1 - i];\n  }\n\n  return result;\n};\n/**\n * Reverses a HEX string, treating 2 chars as a byte.\n * @example\n * reverseHex('abcdef') = 'efcdab'\n * @param {string} hex - HEX string\n * @return {string} HEX string reversed in 2s.\n */\n\n\nexports.reverseArray = reverseArray;\n\nvar reverseHex = function reverseHex(hex) {\n  ensureHex(hex);\n  var out = \"\";\n\n  for (var i = hex.length - 2; i >= 0; i -= 2) {\n    out += hex.substr(i, 2);\n  }\n\n  return out;\n};\n\nexports.reverseHex = reverseHex;\nvar hexRegex = /^([0-9A-Fa-f]{2})*$/;\n/**\n * Checks if input is a hexstring. Empty string is considered a hexstring.\n * @example\n * isHex('0101') = true\n * isHex('') = true\n * isHex('0x01') = false\n * @param {string} str\n * @return {boolean}\n */\n\nvar isHex = function isHex(str) {\n  try {\n    return hexRegex.test(str);\n  } catch (err) {\n    return false;\n  }\n};\n/**\n * Throws an error if input is not hexstring.\n * @param {string} str\n */\n\n\nexports.isHex = isHex;\n\nvar ensureHex = function ensureHex(str) {\n  if (!isHex(str)) throw new Error(\"Expected a hexstring but got \".concat(str));\n};\n/**\n * Computes a SHA256 followed by a RIPEMD160.\n * @param {string} hex message to hash\n * @returns {string} hash output\n */\n\n\nexports.ensureHex = ensureHex;\n\nvar sha256ripemd160 = function sha256ripemd160(hex) {\n  if (typeof hex !== \"string\") throw new Error(\"sha256ripemd160 expects a string\");\n  if (hex.length % 2 !== 0) throw new Error(\"invalid hex string length: \".concat(hex));\n\n  var hexEncoded = _encHex[\"default\"].parse(hex);\n\n  var ProgramSha256 = (0, _sha[\"default\"])(hexEncoded);\n  return (0, _ripemd[\"default\"])(ProgramSha256).toString();\n};\n/**\n * Computes a single SHA256 digest.\n * @param {string} hex message to hash\n * @returns {string} hash output\n */\n\n\nexports.sha256ripemd160 = sha256ripemd160;\n\nvar sha256 = function sha256(hex) {\n  if (typeof hex !== \"string\") throw new Error(\"sha256 expects a hex string\");\n  if (hex.length % 2 !== 0) throw new Error(\"invalid hex string length: \".concat(hex));\n\n  var hexEncoded = _encHex[\"default\"].parse(hex);\n\n  return (0, _sha[\"default\"])(hexEncoded).toString();\n};\n/**\n * Computes a single SHA3 (Keccak) digest.\n * @param {string} hex message to hash\n * @returns {string} hash output\n */\n\n\nexports.sha256 = sha256;\n\nvar sha3 = function sha3(hex) {\n  if (typeof hex !== \"string\") throw new Error(\"sha3 expects a hex string\");\n  if (hex.length % 2 !== 0) throw new Error(\"invalid hex string length: \".concat(hex));\n\n  var hexEncoded = _encHex[\"default\"].parse(hex);\n\n  return (0, _sha2[\"default\"])(hexEncoded).toString();\n};\n/**\n * Computes sha256 of random number and timestamp\n * @param {String} randomNumber\n * @param {Number} timestamp\n * @returns {string} sha256 result\n */\n\n\nexports.sha3 = sha3;\n\nvar calculateRandomNumberHash = function calculateRandomNumberHash(randomNumber, timestamp) {\n  var timestampHexStr = timestamp.toString(16);\n  var timestampHexStrFormat = timestampHexStr;\n\n  for (var i = 0; i < 16 - timestampHexStr.length; i++) {\n    timestampHexStrFormat = \"0\" + timestampHexStrFormat;\n  }\n\n  var timestampBytes = Buffer.from(timestampHexStrFormat, \"hex\");\n  var newBuffer = Buffer.concat([Buffer.from(randomNumber, \"hex\"), timestampBytes]);\n  return sha256(newBuffer.toString(\"hex\"));\n};\n/**\n * Computes swapID\n * @param {String} randomNumberHash\n * @param {String} sender\n * @param {String} senderOtherChain\n * @returns {string} sha256 result\n */\n\n\nexports.calculateRandomNumberHash = calculateRandomNumberHash;\n\nvar calculateSwapID = function calculateSwapID(randomNumberHash, sender, senderOtherChain) {\n  var randomNumberHashBytes = Buffer.from(randomNumberHash, \"hex\");\n  var senderBytes = crypto.decodeAddress(sender);\n  var sendOtherChainBytes = Buffer.from(senderOtherChain.toLowerCase(), \"utf8\");\n  var newBuffer = Buffer.concat([randomNumberHashBytes, senderBytes, sendOtherChainBytes]);\n  return sha256(newBuffer.toString(\"hex\"));\n};\n\nexports.calculateSwapID = calculateSwapID;","map":{"version":3,"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","calculateSwapID","calculateRandomNumberHash","sha3","sha256","sha256ripemd160","ensureHex","isHex","reverseHex","reverseArray","hexXor","num2VarInt","num2hexstring","int2hex","hexstring2str","str2hexstring","ab2hexstring","hexstring2ab","str2ab","ab2str","_typeof2","_encHex","_ripemd","_sha","_sha2","crypto","buf","numArr","i","len","length","push","String","fromCharCode","apply","str","Error","result","Uint8Array","strLen","charCodeAt","iters","parseInt","substring","arr","toString","hexstring","num","h","size","arguments","undefined","littleEndian","RangeError","Number","isSafeInteger","concat","repeat","str1","str2","substr","hex","out","hexRegex","test","err","hexEncoded","parse","ProgramSha256","randomNumber","timestamp","timestampHexStr","timestampHexStrFormat","timestampBytes","Buffer","from","newBuffer","randomNumberHash","sender","senderOtherChain","randomNumberHashBytes","senderBytes","decodeAddress","sendOtherChainBytes","toLowerCase"],"sources":["C:/Users/acer/node_modules/@binance-chain/javascript-sdk/lib/utils/cryptoHelper.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateSwapID = exports.calculateRandomNumberHash = exports.sha3 = exports.sha256 = exports.sha256ripemd160 = exports.ensureHex = exports.isHex = exports.reverseHex = exports.reverseArray = exports.hexXor = exports.num2VarInt = exports.num2hexstring = exports.int2hex = exports.hexstring2str = exports.str2hexstring = exports.ab2hexstring = exports.hexstring2ab = exports.str2ab = exports.ab2str = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _encHex = _interopRequireDefault(require(\"crypto-js/enc-hex\"));\n\nvar _ripemd = _interopRequireDefault(require(\"crypto-js/ripemd160\"));\n\nvar _sha = _interopRequireDefault(require(\"crypto-js/sha256\"));\n\nvar _sha2 = _interopRequireDefault(require(\"crypto-js/sha3\"));\n\nvar crypto = _interopRequireWildcard(require(\"../crypto\"));\n\n/**\n * @param {arrayBuffer} buf\n * @returns {string} ASCII string\n */\nvar ab2str = function ab2str(buf) {\n  var numArr = [];\n\n  for (var i = 0, len = buf.length; i < len; i++) {\n    numArr.push(buf[i]);\n  }\n\n  String.fromCharCode.apply(null, numArr);\n};\n/**\n * @param {string} str - ASCII string\n * @returns {arrayBuffer}\n */\n\n\nexports.ab2str = ab2str;\n\nvar str2ab = function str2ab(str) {\n  if (typeof str !== \"string\") {\n    throw new Error(\"str2ab expects a string\");\n  }\n\n  var result = new Uint8Array(str.length);\n\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n\n  return result;\n};\n/**\n * @param {string} str - HEX string\n * @returns {number[]}\n */\n\n\nexports.str2ab = str2ab;\n\nvar hexstring2ab = function hexstring2ab(str) {\n  ensureHex(str);\n  if (!str.length) return new Uint8Array();\n  var iters = str.length / 2;\n  var result = new Uint8Array(iters);\n\n  for (var i = 0; i < iters; i++) {\n    result[i] = parseInt(str.substring(0, 2), 16);\n    str = str.substring(2);\n  }\n\n  return result;\n};\n/**\n * @param {arrayBuffer} arr\n * @returns {string} HEX string\n */\n\n\nexports.hexstring2ab = hexstring2ab;\n\nvar ab2hexstring = function ab2hexstring(arr) {\n  if ((0, _typeof2[\"default\"])(arr) !== \"object\") {\n    throw new Error(\"ab2hexstring expects an array\");\n  }\n\n  var result = \"\";\n\n  for (var i = 0; i < arr.length; i++) {\n    var str = arr[i].toString(16);\n    str = str.length === 0 ? \"00\" : str.length === 1 ? \"0\" + str : str;\n    result += str;\n  }\n\n  return result;\n};\n/**\n * @param {string} str - ASCII string\n * @returns {string} HEX string\n */\n\n\nexports.ab2hexstring = ab2hexstring;\n\nvar str2hexstring = function str2hexstring(str) {\n  return ab2hexstring(str2ab(str));\n};\n/**\n * @param {string} hexstring - HEX string\n * @returns {string} ASCII string\n */\n\n\nexports.str2hexstring = str2hexstring;\n\nvar hexstring2str = function hexstring2str(hexstring) {\n  return ab2str(hexstring2ab(hexstring));\n};\n/**\n * convert an integer to big endian hex and add leading zeros\n * @param {Number} num\n * @returns {string}\n */\n\n\nexports.hexstring2str = hexstring2str;\n\nvar int2hex = function int2hex(num) {\n  if (typeof num !== \"number\") {\n    throw new Error(\"int2hex expects a number\");\n  }\n\n  var h = num.toString(16);\n  return h.length % 2 ? \"0\" + h : h;\n};\n/**\n * Converts a number to a big endian hexstring of a suitable size, optionally little endian\n * @param {Number} num\n * @param {Number} size - The required size in bytes, eg 1 for Uint8, 2 for Uint16. Defaults to 1.\n * @param {Boolean} littleEndian - Encode the hex in little endian form\n * @return {string}\n */\n\n\nexports.int2hex = int2hex;\n\nvar num2hexstring = function num2hexstring(num) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var littleEndian = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (typeof num !== \"number\") throw new Error(\"num must be numeric\");\n  if (num < 0) throw new RangeError(\"num is unsigned (>= 0)\");\n  if (size % 1 !== 0) throw new Error(\"size must be a whole integer\");\n  if (!Number.isSafeInteger(num)) throw new RangeError(\"num (\".concat(num, \") must be a safe integer\"));\n  size = size * 2;\n  var hexstring = num.toString(16);\n  hexstring = hexstring.length % size === 0 ? hexstring : (\"0\".repeat(size) + hexstring).substring(hexstring.length);\n  if (littleEndian) hexstring = reverseHex(hexstring);\n  return hexstring;\n};\n/**\n * Converts a number to a variable length Int. Used for array length header\n * @param {Number} num - The number\n * @returns {string} hexstring of the variable Int.\n */\n\n\nexports.num2hexstring = num2hexstring;\n\nvar num2VarInt = function num2VarInt(num) {\n  if (num < 0xfd) {\n    return num2hexstring(num);\n  } else if (num <= 0xffff) {\n    // uint16\n    return \"fd\" + num2hexstring(num, 2, true);\n  } else if (num <= 0xffffffff) {\n    // uint32\n    return \"fe\" + num2hexstring(num, 4, true);\n  } else {\n    // uint64\n    return \"ff\" + num2hexstring(num, 8, true);\n  }\n};\n/**\n * XORs two hexstrings\n * @param {string} str1 - HEX string\n * @param {string} str2 - HEX string\n * @returns {string} XOR output as a HEX string\n */\n\n\nexports.num2VarInt = num2VarInt;\n\nvar hexXor = function hexXor(str1, str2) {\n  ensureHex(str1);\n  ensureHex(str2);\n  if (str1.length !== str2.length) throw new Error(\"strings are disparate lengths\");\n  var result = [];\n\n  for (var i = 0; i < str1.length; i += 2) {\n    result.push(parseInt(str1.substr(i, 2), 16) ^ parseInt(str2.substr(i, 2), 16));\n  }\n\n  return ab2hexstring(result);\n};\n/**\n * Reverses an array. Accepts arrayBuffer.\n * @param {Array} arr\n * @returns {Uint8Array}\n */\n\n\nexports.hexXor = hexXor;\n\nvar reverseArray = function reverseArray(arr) {\n  if ((0, _typeof2[\"default\"])(arr) !== \"object\" || !arr.length) throw new Error(\"reverseArray expects an array\");\n  var result = new Uint8Array(arr.length);\n\n  for (var i = 0; i < arr.length; i++) {\n    result[i] = arr[arr.length - 1 - i];\n  }\n\n  return result;\n};\n/**\n * Reverses a HEX string, treating 2 chars as a byte.\n * @example\n * reverseHex('abcdef') = 'efcdab'\n * @param {string} hex - HEX string\n * @return {string} HEX string reversed in 2s.\n */\n\n\nexports.reverseArray = reverseArray;\n\nvar reverseHex = function reverseHex(hex) {\n  ensureHex(hex);\n  var out = \"\";\n\n  for (var i = hex.length - 2; i >= 0; i -= 2) {\n    out += hex.substr(i, 2);\n  }\n\n  return out;\n};\n\nexports.reverseHex = reverseHex;\nvar hexRegex = /^([0-9A-Fa-f]{2})*$/;\n/**\n * Checks if input is a hexstring. Empty string is considered a hexstring.\n * @example\n * isHex('0101') = true\n * isHex('') = true\n * isHex('0x01') = false\n * @param {string} str\n * @return {boolean}\n */\n\nvar isHex = function isHex(str) {\n  try {\n    return hexRegex.test(str);\n  } catch (err) {\n    return false;\n  }\n};\n/**\n * Throws an error if input is not hexstring.\n * @param {string} str\n */\n\n\nexports.isHex = isHex;\n\nvar ensureHex = function ensureHex(str) {\n  if (!isHex(str)) throw new Error(\"Expected a hexstring but got \".concat(str));\n};\n/**\n * Computes a SHA256 followed by a RIPEMD160.\n * @param {string} hex message to hash\n * @returns {string} hash output\n */\n\n\nexports.ensureHex = ensureHex;\n\nvar sha256ripemd160 = function sha256ripemd160(hex) {\n  if (typeof hex !== \"string\") throw new Error(\"sha256ripemd160 expects a string\");\n  if (hex.length % 2 !== 0) throw new Error(\"invalid hex string length: \".concat(hex));\n\n  var hexEncoded = _encHex[\"default\"].parse(hex);\n\n  var ProgramSha256 = (0, _sha[\"default\"])(hexEncoded);\n  return (0, _ripemd[\"default\"])(ProgramSha256).toString();\n};\n/**\n * Computes a single SHA256 digest.\n * @param {string} hex message to hash\n * @returns {string} hash output\n */\n\n\nexports.sha256ripemd160 = sha256ripemd160;\n\nvar sha256 = function sha256(hex) {\n  if (typeof hex !== \"string\") throw new Error(\"sha256 expects a hex string\");\n  if (hex.length % 2 !== 0) throw new Error(\"invalid hex string length: \".concat(hex));\n\n  var hexEncoded = _encHex[\"default\"].parse(hex);\n\n  return (0, _sha[\"default\"])(hexEncoded).toString();\n};\n/**\n * Computes a single SHA3 (Keccak) digest.\n * @param {string} hex message to hash\n * @returns {string} hash output\n */\n\n\nexports.sha256 = sha256;\n\nvar sha3 = function sha3(hex) {\n  if (typeof hex !== \"string\") throw new Error(\"sha3 expects a hex string\");\n  if (hex.length % 2 !== 0) throw new Error(\"invalid hex string length: \".concat(hex));\n\n  var hexEncoded = _encHex[\"default\"].parse(hex);\n\n  return (0, _sha2[\"default\"])(hexEncoded).toString();\n};\n/**\n * Computes sha256 of random number and timestamp\n * @param {String} randomNumber\n * @param {Number} timestamp\n * @returns {string} sha256 result\n */\n\n\nexports.sha3 = sha3;\n\nvar calculateRandomNumberHash = function calculateRandomNumberHash(randomNumber, timestamp) {\n  var timestampHexStr = timestamp.toString(16);\n  var timestampHexStrFormat = timestampHexStr;\n\n  for (var i = 0; i < 16 - timestampHexStr.length; i++) {\n    timestampHexStrFormat = \"0\" + timestampHexStrFormat;\n  }\n\n  var timestampBytes = Buffer.from(timestampHexStrFormat, \"hex\");\n  var newBuffer = Buffer.concat([Buffer.from(randomNumber, \"hex\"), timestampBytes]);\n  return sha256(newBuffer.toString(\"hex\"));\n};\n/**\n * Computes swapID\n * @param {String} randomNumberHash\n * @param {String} sender\n * @param {String} senderOtherChain\n * @returns {string} sha256 result\n */\n\n\nexports.calculateRandomNumberHash = calculateRandomNumberHash;\n\nvar calculateSwapID = function calculateSwapID(randomNumberHash, sender, senderOtherChain) {\n  var randomNumberHashBytes = Buffer.from(randomNumberHash, \"hex\");\n  var senderBytes = crypto.decodeAddress(sender);\n  var sendOtherChainBytes = Buffer.from(senderOtherChain.toLowerCase(), \"utf8\");\n  var newBuffer = Buffer.concat([randomNumberHashBytes, senderBytes, sendOtherChainBytes]);\n  return sha256(newBuffer.toString(\"hex\"));\n};\n\nexports.calculateSwapID = calculateSwapID;"],"mappings":"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"},"metadata":{},"sourceType":"script"}