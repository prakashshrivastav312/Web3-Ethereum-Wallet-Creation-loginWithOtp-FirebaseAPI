{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n/** @typedef {import('./generated-types').CodecName} CodecName */\n\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\n\nconst varint = require('varint');\n\nconst intTable = require('./int-table');\n\nconst codecNameToCodeVarint = require('./varint-table');\n\nconst util = require('./util');\n\nconst uint8ArrayConcat = require('uint8arrays/concat');\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\n\n\nfunction addPrefix(multicodecStrOrCode, data) {\n  let prefix;\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode);\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length);\n}\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\n\n\nfunction rmPrefix(data) {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n}\n/**\n * Get the codec of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\n\n\nfunction getCodec(prefixedData) {\n  const code = varint.decode(prefixedData);\n  const codecName = intTable.get(code);\n\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`);\n  }\n\n  return codecName;\n}\n/**\n * Get the name of the codec.\n *\n * @param {CodecNumber} codec\n * @returns {CodecName|undefined}\n */\n\n\nfunction getName(codec) {\n  return intTable.get(codec);\n}\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecNumber}\n */\n\n\nfunction getNumber(name) {\n  const code = codecNameToCodeVarint[name];\n\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found');\n  }\n\n  return varint.decode(code);\n}\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecNumber}\n */\n\n\nfunction getCode(prefixedData) {\n  return varint.decode(prefixedData);\n}\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} codecName\n * @returns {Uint8Array}\n */\n\n\nfunction getCodeVarint(codecName) {\n  const code = codecNameToCodeVarint[codecName];\n\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found');\n  }\n\n  return code;\n}\n/**\n * Get the varint of a code.\n *\n * @param {CodecNumber} code\n * @returns {Array.<number>}\n */\n\n\nfunction getVarint(code) {\n  return varint.encode(code);\n} // Make the constants top-level constants\n\n\nconst constants = require('./constants'); // Human friendly names for printing, e.g. in error messages\n\n\nconst print = require('./print');\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  print,\n  ...constants\n};","map":{"version":3,"names":["varint","require","intTable","codecNameToCodeVarint","util","uint8ArrayConcat","addPrefix","multicodecStrOrCode","data","prefix","Uint8Array","varintUint8ArrayEncode","Error","length","rmPrefix","decode","slice","bytes","getCodec","prefixedData","code","codecName","get","undefined","getName","codec","getNumber","name","getCode","getCodeVarint","getVarint","encode","constants","print","module","exports"],"sources":["C:/Users/acer/node_modules/ipld-dag-pb/node_modules/multicodec/src/index.js"],"sourcesContent":["/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\n\nconst varint = require('varint')\nconst intTable = require('./int-table')\nconst codecNameToCodeVarint = require('./varint-table')\nconst util = require('./util')\nconst uint8ArrayConcat = require('uint8arrays/concat')\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix (multicodecStrOrCode, data) {\n  let prefix\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix (data) {\n  varint.decode(data)\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec (prefixedData) {\n  const code = varint.decode(prefixedData)\n  const codecName = intTable.get(code)\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`)\n  }\n  return codecName\n}\n\n/**\n * Get the name of the codec.\n *\n * @param {CodecNumber} codec\n * @returns {CodecName|undefined}\n */\nfunction getName (codec) {\n  return intTable.get(codec)\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecNumber}\n */\nfunction getNumber (name) {\n  const code = codecNameToCodeVarint[name]\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found')\n  }\n  return varint.decode(code)\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecNumber}\n */\nfunction getCode (prefixedData) {\n  return varint.decode(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} codecName\n * @returns {Uint8Array}\n */\nfunction getCodeVarint (codecName) {\n  const code = codecNameToCodeVarint[codecName]\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found')\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecNumber} code\n * @returns {Array.<number>}\n */\nfunction getVarint (code) {\n  return varint.encode(code)\n}\n\n// Make the constants top-level constants\nconst constants = require('./constants')\n\n// Human friendly names for printing, e.g. in error messages\nconst print = require('./print')\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  print,\n  ...constants\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}