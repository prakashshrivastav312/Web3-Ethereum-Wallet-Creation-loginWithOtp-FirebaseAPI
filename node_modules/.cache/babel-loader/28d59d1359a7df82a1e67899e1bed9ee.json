{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.revokeAccountSponsorship = revokeAccountSponsorship;\nexports.revokeTrustlineSponsorship = revokeTrustlineSponsorship;\nexports.revokeOfferSponsorship = revokeOfferSponsorship;\nexports.revokeDataSponsorship = revokeDataSponsorship;\nexports.revokeClaimableBalanceSponsorship = revokeClaimableBalanceSponsorship;\nexports.revokeLiquidityPoolSponsorship = revokeLiquidityPoolSponsorship;\nexports.revokeSignerSponsorship = revokeSignerSponsorship;\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _strkey = require('../strkey');\n\nvar _keypair = require('../keypair');\n\nvar _asset = require('../asset');\n\nvar _liquidity_pool_id = require('../liquidity_pool_id');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Create a \"revoke sponsorship\" operation for an account.\n *\n * @function\n * @alias Operation.revokeAccountSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The sponsored account ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeAccountSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n * });\n *\n */\n\n\nfunction revokeAccountSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.account(new _stellarXdr_generated2.default.LedgerKeyAccount({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId()\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Create a \"revoke sponsorship\" operation for a trustline.\n *\n * @function\n * @alias Operation.revokeTrustlineSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the trustline.\n * @param {Asset | LiquidityPoolId} opts.asset - The trustline asset.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeTrustlineSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   asset: new StellarBase.LiquidityPoolId(\n *     'USDUSD',\n *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n *   )\n * });\n *\n */\n\n\nfunction revokeTrustlineSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  var asset = void 0;\n\n  if (opts.asset instanceof _asset.Asset) {\n    asset = opts.asset.toTrustLineXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_id.LiquidityPoolId) {\n    asset = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be an Asset or LiquidityPoolId');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.trustline(new _stellarXdr_generated2.default.LedgerKeyTrustLine({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    asset: asset\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Create a \"revoke sponsorship\" operation for an offer.\n *\n * @function\n * @alias Operation.revokeOfferSponsorship\n * @param {object} opts Options object\n * @param {string} opts.seller - The account ID which created the offer.\n * @param {string} opts.offerId - The offer ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeOfferSponsorship({\n *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   offerId: '1234'\n * });\n *\n */\n\n\nfunction revokeOfferSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.seller)) {\n    throw new Error('seller is invalid');\n  }\n\n  if (!(0, _isString2.default)(opts.offerId)) {\n    throw new Error('offerId is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.offer(new _stellarXdr_generated2.default.LedgerKeyOffer({\n    sellerId: _keypair.Keypair.fromPublicKey(opts.seller).xdrAccountId(),\n    offerId: _stellarXdr_generated2.default.Int64.fromString(opts.offerId)\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Create a \"revoke sponsorship\" operation for a data entry.\n *\n * @function\n * @alias Operation.revokeDataSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the data entry.\n * @param {string} opts.name - The name of the data entry\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeDataSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   name: 'foo'\n * });\n *\n */\n\n\nfunction revokeDataSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  if (!(0, _isString2.default)(opts.name) || opts.name.length > 64) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.data(new _stellarXdr_generated2.default.LedgerKeyData({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    dataName: opts.name\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Create a \"revoke sponsorship\" operation for a claimable balance.\n *\n * @function\n * @alias Operation.revokeClaimableBalanceSponsorship\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The sponsored claimable balance ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeClaimableBalanceSponsorship({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\n\n\nfunction revokeClaimableBalanceSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!(0, _isString2.default)(opts.balanceId)) {\n    throw new Error('balanceId is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.claimableBalance(new _stellarXdr_generated2.default.LedgerKeyClaimableBalance({\n    balanceId: _stellarXdr_generated2.default.ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Creates a \"revoke sponsorship\" operation for a liquidity pool.\n *\n * @function\n * @alias Operation.revokeLiquidityPoolSponsorship\n * @param {object} opts â€“ Options object.\n * @param {string} opts.liquidityPoolId - The sponsored liquidity pool ID in 'hex' string.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr Operation.\n *\n * @example\n * const op = Operation.revokeLiquidityPoolSponsorship({\n *   liquidityPoolId: 'dd7b1ab831c273310ddbec6f97870aa83c2fbd78ce22aded37ecbf4f3380fac7',\n * });\n *\n */\n\n\nfunction revokeLiquidityPoolSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!(0, _isString2.default)(opts.liquidityPoolId)) {\n    throw new Error('liquidityPoolId is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.liquidityPool(new _stellarXdr_generated2.default.LedgerKeyLiquidityPool({\n    liquidityPoolId: _stellarXdr_generated2.default.PoolId.fromXDR(opts.liquidityPoolId, 'hex')\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {\n    body: _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Create a \"revoke sponsorship\" operation for a signer.\n *\n * @function\n * @alias Operation.revokeSignerSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.\n * @param {object} opts.signer - The signer whose sponsorship is being removed.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeSignerSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   signer: {\n *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'\n *   }\n * })\n *\n */\n\n\nfunction revokeSignerSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  var key = void 0;\n\n  if (opts.signer.ed25519PublicKey) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n      throw new Error('signer.ed25519PublicKey is invalid.');\n    }\n\n    var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeEd25519(rawKey);\n  } else if (opts.signer.preAuthTx) {\n    var buffer = void 0;\n\n    if ((0, _isString2.default)(opts.signer.preAuthTx)) {\n      buffer = Buffer.from(opts.signer.preAuthTx, 'hex');\n    } else {\n      buffer = opts.signer.preAuthTx;\n    }\n\n    if (!(Buffer.isBuffer(buffer) && buffer.length === 32)) {\n      throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n    }\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypePreAuthTx(buffer);\n  } else if (opts.signer.sha256Hash) {\n    var _buffer = void 0;\n\n    if ((0, _isString2.default)(opts.signer.sha256Hash)) {\n      _buffer = Buffer.from(opts.signer.sha256Hash, 'hex');\n    } else {\n      _buffer = opts.signer.sha256Hash;\n    }\n\n    if (!(Buffer.isBuffer(_buffer) && _buffer.length === 32)) {\n      throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n    }\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeHashX(_buffer);\n  } else {\n    throw new Error('signer is invalid');\n  }\n\n  var signer = new _stellarXdr_generated2.default.RevokeSponsorshipOpSigner({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    signerKey: key\n  });\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipSigner(signer);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","revokeAccountSponsorship","revokeTrustlineSponsorship","revokeOfferSponsorship","revokeDataSponsorship","revokeClaimableBalanceSponsorship","revokeLiquidityPoolSponsorship","revokeSignerSponsorship","_isString","require","_isString2","_interopRequireDefault","_stellarXdr_generated","_stellarXdr_generated2","_strkey","_keypair","_asset","_liquidity_pool_id","obj","__esModule","default","opts","arguments","length","undefined","StrKey","isValidEd25519PublicKey","account","Error","ledgerKey","LedgerKey","LedgerKeyAccount","accountId","Keypair","fromPublicKey","xdrAccountId","op","RevokeSponsorshipOp","revokeSponsorshipLedgerEntry","opAttributes","body","OperationBody","revokeSponsorship","setSourceAccount","Operation","asset","Asset","toTrustLineXDRObject","LiquidityPoolId","toXDRObject","TypeError","trustline","LedgerKeyTrustLine","seller","offerId","offer","LedgerKeyOffer","sellerId","Int64","fromString","name","data","LedgerKeyData","dataName","balanceId","claimableBalance","LedgerKeyClaimableBalance","ClaimableBalanceId","fromXDR","liquidityPoolId","liquidityPool","LedgerKeyLiquidityPool","PoolId","key","signer","ed25519PublicKey","rawKey","decodeEd25519PublicKey","SignerKey","signerKeyTypeEd25519","preAuthTx","buffer","Buffer","from","isBuffer","signerKeyTypePreAuthTx","sha256Hash","_buffer","signerKeyTypeHashX","RevokeSponsorshipOpSigner","signerKey","revokeSponsorshipSigner"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operations/revoke_sponsorship.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.revokeAccountSponsorship = revokeAccountSponsorship;\nexports.revokeTrustlineSponsorship = revokeTrustlineSponsorship;\nexports.revokeOfferSponsorship = revokeOfferSponsorship;\nexports.revokeDataSponsorship = revokeDataSponsorship;\nexports.revokeClaimableBalanceSponsorship = revokeClaimableBalanceSponsorship;\nexports.revokeLiquidityPoolSponsorship = revokeLiquidityPoolSponsorship;\nexports.revokeSignerSponsorship = revokeSignerSponsorship;\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _strkey = require('../strkey');\n\nvar _keypair = require('../keypair');\n\nvar _asset = require('../asset');\n\nvar _liquidity_pool_id = require('../liquidity_pool_id');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a \"revoke sponsorship\" operation for an account.\n *\n * @function\n * @alias Operation.revokeAccountSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The sponsored account ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeAccountSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n * });\n *\n */\nfunction revokeAccountSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.account(new _stellarXdr_generated2.default.LedgerKeyAccount({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId()\n  }));\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a trustline.\n *\n * @function\n * @alias Operation.revokeTrustlineSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the trustline.\n * @param {Asset | LiquidityPoolId} opts.asset - The trustline asset.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeTrustlineSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   asset: new StellarBase.LiquidityPoolId(\n *     'USDUSD',\n *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n *   )\n * });\n *\n */\nfunction revokeTrustlineSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  var asset = void 0;\n  if (opts.asset instanceof _asset.Asset) {\n    asset = opts.asset.toTrustLineXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_id.LiquidityPoolId) {\n    asset = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be an Asset or LiquidityPoolId');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.trustline(new _stellarXdr_generated2.default.LedgerKeyTrustLine({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    asset: asset\n  }));\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for an offer.\n *\n * @function\n * @alias Operation.revokeOfferSponsorship\n * @param {object} opts Options object\n * @param {string} opts.seller - The account ID which created the offer.\n * @param {string} opts.offerId - The offer ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeOfferSponsorship({\n *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   offerId: '1234'\n * });\n *\n */\nfunction revokeOfferSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.seller)) {\n    throw new Error('seller is invalid');\n  }\n  if (!(0, _isString2.default)(opts.offerId)) {\n    throw new Error('offerId is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.offer(new _stellarXdr_generated2.default.LedgerKeyOffer({\n    sellerId: _keypair.Keypair.fromPublicKey(opts.seller).xdrAccountId(),\n    offerId: _stellarXdr_generated2.default.Int64.fromString(opts.offerId)\n  }));\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a data entry.\n *\n * @function\n * @alias Operation.revokeDataSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the data entry.\n * @param {string} opts.name - The name of the data entry\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeDataSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   name: 'foo'\n * });\n *\n */\nfunction revokeDataSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  if (!(0, _isString2.default)(opts.name) || opts.name.length > 64) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.data(new _stellarXdr_generated2.default.LedgerKeyData({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    dataName: opts.name\n  }));\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a claimable balance.\n *\n * @function\n * @alias Operation.revokeClaimableBalanceSponsorship\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The sponsored claimable balance ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeClaimableBalanceSponsorship({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction revokeClaimableBalanceSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!(0, _isString2.default)(opts.balanceId)) {\n    throw new Error('balanceId is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.claimableBalance(new _stellarXdr_generated2.default.LedgerKeyClaimableBalance({\n    balanceId: _stellarXdr_generated2.default.ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  }));\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Creates a \"revoke sponsorship\" operation for a liquidity pool.\n *\n * @function\n * @alias Operation.revokeLiquidityPoolSponsorship\n * @param {object} opts â€“ Options object.\n * @param {string} opts.liquidityPoolId - The sponsored liquidity pool ID in 'hex' string.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr Operation.\n *\n * @example\n * const op = Operation.revokeLiquidityPoolSponsorship({\n *   liquidityPoolId: 'dd7b1ab831c273310ddbec6f97870aa83c2fbd78ce22aded37ecbf4f3380fac7',\n * });\n *\n */\nfunction revokeLiquidityPoolSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!(0, _isString2.default)(opts.liquidityPoolId)) {\n    throw new Error('liquidityPoolId is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.liquidityPool(new _stellarXdr_generated2.default.LedgerKeyLiquidityPool({\n    liquidityPoolId: _stellarXdr_generated2.default.PoolId.fromXDR(opts.liquidityPoolId, 'hex')\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {\n    body: _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op)\n  };\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a signer.\n *\n * @function\n * @alias Operation.revokeSignerSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.\n * @param {object} opts.signer - The signer whose sponsorship is being removed.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeSignerSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   signer: {\n *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'\n *   }\n * })\n *\n */\nfunction revokeSignerSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var key = void 0;\n  if (opts.signer.ed25519PublicKey) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n      throw new Error('signer.ed25519PublicKey is invalid.');\n    }\n    var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeEd25519(rawKey);\n  } else if (opts.signer.preAuthTx) {\n    var buffer = void 0;\n    if ((0, _isString2.default)(opts.signer.preAuthTx)) {\n      buffer = Buffer.from(opts.signer.preAuthTx, 'hex');\n    } else {\n      buffer = opts.signer.preAuthTx;\n    }\n\n    if (!(Buffer.isBuffer(buffer) && buffer.length === 32)) {\n      throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n    }\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypePreAuthTx(buffer);\n  } else if (opts.signer.sha256Hash) {\n    var _buffer = void 0;\n    if ((0, _isString2.default)(opts.signer.sha256Hash)) {\n      _buffer = Buffer.from(opts.signer.sha256Hash, 'hex');\n    } else {\n      _buffer = opts.signer.sha256Hash;\n    }\n\n    if (!(Buffer.isBuffer(_buffer) && _buffer.length === 32)) {\n      throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n    }\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeHashX(_buffer);\n  } else {\n    throw new Error('signer is invalid');\n  }\n\n  var signer = new _stellarXdr_generated2.default.RevokeSponsorshipOpSigner({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    signerKey: key\n  });\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipSigner(signer);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}