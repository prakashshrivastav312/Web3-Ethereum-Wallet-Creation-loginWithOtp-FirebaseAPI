{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = __importStar(require(\"lodash\"));\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst utils_1 = require(\"./utils\");\n\nconst common_1 = require(\"../common\");\n\nconst pathfind_1 = __importDefault(require(\"./parse/pathfind\"));\n\nconst NotFoundError = common_1.errors.NotFoundError;\nconst ValidationError = common_1.errors.ValidationError;\n\nfunction addParams(request, result) {\n  return _.defaults(Object.assign({}, result, {\n    source_account: request.source_account,\n    source_currencies: request.source_currencies\n  }), {\n    destination_amount: request.destination_amount\n  });\n}\n\nfunction requestPathFind(connection, pathfind) {\n  const destinationAmount = Object.assign({\n    value: pathfind.destination.amount.currency === 'XRP' ? common_1.dropsToXrp('-1') : '-1'\n  }, pathfind.destination.amount);\n  const request = {\n    command: 'ripple_path_find',\n    source_account: pathfind.source.address,\n    destination_account: pathfind.destination.address,\n    destination_amount: common_1.toRippledAmount(destinationAmount)\n  };\n\n  if (typeof request.destination_amount === 'object' && !request.destination_amount.issuer) {\n    request.destination_amount.issuer = request.destination_account;\n  }\n\n  if (pathfind.source.currencies && pathfind.source.currencies.length > 0) {\n    request.source_currencies = pathfind.source.currencies.map(amount => utils_1.renameCounterpartyToIssuer(amount));\n  }\n\n  if (pathfind.source.amount) {\n    if (pathfind.destination.amount.value != null) {\n      throw new ValidationError('Cannot specify both source.amount' + ' and destination.amount.value in getPaths');\n    }\n\n    request.send_max = common_1.toRippledAmount(pathfind.source.amount);\n\n    if (typeof request.send_max !== 'string' && !request.send_max.issuer) {\n      request.send_max.issuer = pathfind.source.address;\n    }\n  }\n\n  return connection.request(request).then(paths => addParams(request, paths));\n}\n\nfunction addDirectXrpPath(paths, xrpBalance) {\n  const destinationAmount = paths.destination_amount;\n\n  if (new bignumber_js_1.default(xrpBalance).isGreaterThanOrEqualTo(destinationAmount)) {\n    paths.alternatives.unshift({\n      paths_computed: [],\n      source_amount: paths.destination_amount\n    });\n  }\n\n  return paths;\n}\n\nfunction isRippledIOUAmount(amount) {\n  return typeof amount === 'object' && amount.currency && amount.currency !== 'XRP';\n}\n\nfunction conditionallyAddDirectXRPPath(connection, address, paths) {\n  if (isRippledIOUAmount(paths.destination_amount) || !paths.destination_currencies.includes('XRP')) {\n    return Promise.resolve(paths);\n  }\n\n  return utils_1.getXRPBalance(connection, address, undefined).then(xrpBalance => addDirectXrpPath(paths, xrpBalance));\n}\n\nfunction filterSourceFundsLowPaths(pathfind, paths) {\n  if (pathfind.source.amount && pathfind.destination.amount.value == null && paths.alternatives) {\n    paths.alternatives = paths.alternatives.filter(alt => {\n      if (!alt.source_amount) {\n        return false;\n      }\n\n      const pathfindSourceAmountValue = new bignumber_js_1.default(pathfind.source.amount.currency === 'XRP' ? common_1.xrpToDrops(pathfind.source.amount.value) : pathfind.source.amount.value);\n      const altSourceAmountValue = new bignumber_js_1.default(typeof alt.source_amount === 'string' ? alt.source_amount : alt.source_amount.value);\n      return altSourceAmountValue.eq(pathfindSourceAmountValue);\n    });\n  }\n\n  return paths;\n}\n\nfunction formatResponse(pathfind, paths) {\n  if (paths.alternatives && paths.alternatives.length > 0) {\n    return pathfind_1.default(paths);\n  }\n\n  if (paths.destination_currencies != null && !paths.destination_currencies.includes(pathfind.destination.amount.currency)) {\n    throw new NotFoundError('No paths found. ' + 'The destination_account does not accept ' + pathfind.destination.amount.currency + ', they only accept: ' + paths.destination_currencies.join(', '));\n  } else if (paths.source_currencies && paths.source_currencies.length > 0) {\n    throw new NotFoundError('No paths found. Please ensure' + ' that the source_account has sufficient funds to execute' + ' the payment in one of the specified source_currencies. If it does' + ' there may be insufficient liquidity in the network to execute' + ' this payment right now');\n  } else {\n    throw new NotFoundError('No paths found.' + ' Please ensure that the source_account has sufficient funds to' + ' execute the payment. If it does there may be insufficient liquidity' + ' in the network to execute this payment right now');\n  }\n}\n\nfunction getPaths(pathfind) {\n  common_1.validate.getPaths({\n    pathfind\n  });\n  const address = pathfind.source.address;\n  return requestPathFind(this.connection, pathfind).then(paths => conditionallyAddDirectXRPPath(this.connection, address, paths)).then(paths => filterSourceFundsLowPaths(pathfind, paths)).then(paths => formatResponse(pathfind, paths));\n}\n\nexports.default = getPaths;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAQA;;AASA,MAAMA,aAAa,GAAGC,gBAAOD,aAA7B;AACA,MAAME,eAAe,GAAGD,gBAAOC,eAA/B;;AAEA,SAASC,SAAT,CACEC,OADF,EAEEC,MAFF,EAE8B;EAE5B,OAAOC,CAAC,CAACC,QAAF,CACLC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,MAAlB,EAA0B;IACxBK,cAAc,EAAEN,OAAO,CAACM,cADA;IAExBC,iBAAiB,EAAEP,OAAO,CAACO;EAFH,CAA1B,CADK,EAKL;IAACC,kBAAkB,EAAER,OAAO,CAACQ;EAA7B,CALK,CAAP;AAOD;;AAED,SAASC,eAAT,CACEC,UADF,EAEEC,QAFF,EAEoB;EAElB,MAAMC,iBAAiB,GAAWR,MAAM,CAACC,MAAP,CAChC;IAEEQ,KAAK,EACHF,QAAQ,CAACG,WAAT,CAAqBC,MAArB,CAA4BC,QAA5B,KAAyC,KAAzC,GAAiDnB,oBAAW,IAAX,CAAjD,GAAoE;EAHxE,CADgC,EAMhCc,QAAQ,CAACG,WAAT,CAAqBC,MANW,CAAlC;EAQA,MAAMf,OAAO,GAAoB;IAC/BiB,OAAO,EAAE,kBADsB;IAE/BX,cAAc,EAAEK,QAAQ,CAACO,MAAT,CAAgBC,OAFD;IAG/BC,mBAAmB,EAAET,QAAQ,CAACG,WAAT,CAAqBK,OAHX;IAI/BX,kBAAkB,EAAEX,yBAAgBe,iBAAhB;EAJW,CAAjC;;EAMA,IACE,OAAOZ,OAAO,CAACQ,kBAAf,KAAsC,QAAtC,IACA,CAACR,OAAO,CAACQ,kBAAR,CAA2Ba,MAF9B,EAGE;IAIArB,OAAO,CAACQ,kBAAR,CAA2Ba,MAA3B,GAAoCrB,OAAO,CAACoB,mBAA5C;EACD;;EACD,IAAIT,QAAQ,CAACO,MAAT,CAAgBI,UAAhB,IAA8BX,QAAQ,CAACO,MAAT,CAAgBI,UAAhB,CAA2BC,MAA3B,GAAoC,CAAtE,EAAyE;IACvEvB,OAAO,CAACO,iBAAR,GAA4BI,QAAQ,CAACO,MAAT,CAAgBI,UAAhB,CAA2BE,GAA3B,CAAgCT,MAAD,IACzDU,mCAA2BV,MAA3B,CAD0B,CAA5B;EAGD;;EACD,IAAIJ,QAAQ,CAACO,MAAT,CAAgBH,MAApB,EAA4B;IAC1B,IAAIJ,QAAQ,CAACG,WAAT,CAAqBC,MAArB,CAA4BF,KAA5B,IAAqC,IAAzC,EAA+C;MAC7C,MAAM,IAAIf,eAAJ,CACJ,sCACE,2CAFE,CAAN;IAID;;IACDE,OAAO,CAAC0B,QAAR,GAAmB7B,yBAAgBc,QAAQ,CAACO,MAAT,CAAgBH,MAAhC,CAAnB;;IACA,IAAI,OAAOf,OAAO,CAAC0B,QAAf,KAA4B,QAA5B,IAAwC,CAAC1B,OAAO,CAAC0B,QAAR,CAAiBL,MAA9D,EAAsE;MACpErB,OAAO,CAAC0B,QAAR,CAAiBL,MAAjB,GAA0BV,QAAQ,CAACO,MAAT,CAAgBC,OAA1C;IACD;EACF;;EAED,OAAOT,UAAU,CAACV,OAAX,CAAmBA,OAAnB,EAA4B2B,IAA5B,CAAkCC,KAAD,IAAW7B,SAAS,CAACC,OAAD,EAAU4B,KAAV,CAArD,CAAP;AACD;;AAED,SAASC,gBAAT,CACED,KADF,EAEEE,UAFF,EAEoB;EAGlB,MAAMlB,iBAAiB,GAAGgB,KAAK,CAACpB,kBAAhC;;EAEA,IAAI,IAAIuB,sBAAJ,CAAcD,UAAd,EAA0BE,sBAA1B,CAAiDpB,iBAAjD,CAAJ,EAAyE;IACvEgB,KAAK,CAACK,YAAN,CAAmBC,OAAnB,CAA2B;MACzBC,cAAc,EAAE,EADS;MAEzBC,aAAa,EAAER,KAAK,CAACpB;IAFI,CAA3B;EAID;;EACD,OAAOoB,KAAP;AACD;;AAED,SAASS,kBAAT,CAA4BtB,MAA5B,EAAiD;EAE/C,OACE,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,QAArC,IAAiDD,MAAM,CAACC,QAAP,KAAoB,KADvE;AAGD;;AAED,SAASsB,6BAAT,CACE5B,UADF,EAEES,OAFF,EAGES,KAHF,EAG6B;EAE3B,IACES,kBAAkB,CAACT,KAAK,CAACpB,kBAAP,CAAlB,IACA,CAACoB,KAAK,CAACW,sBAAN,CAA6BC,QAA7B,CAAsC,KAAtC,CAFH,EAGE;IACA,OAAOC,OAAO,CAACC,OAAR,CAAgBd,KAAhB,CAAP;EACD;;EACD,OAAOH,sBAAcf,UAAd,EAA0BS,OAA1B,EAAmCwB,SAAnC,EAA8ChB,IAA9C,CAAoDG,UAAD,IACxDD,gBAAgB,CAACD,KAAD,EAAQE,UAAR,CADX,CAAP;AAGD;;AAED,SAASc,yBAAT,CACEjC,QADF,EAEEiB,KAFF,EAE6B;EAE3B,IACEjB,QAAQ,CAACO,MAAT,CAAgBH,MAAhB,IACAJ,QAAQ,CAACG,WAAT,CAAqBC,MAArB,CAA4BF,KAA5B,IAAqC,IADrC,IAEAe,KAAK,CAACK,YAHR,EAIE;IACAL,KAAK,CAACK,YAAN,GAAqBL,KAAK,CAACK,YAAN,CAAmBY,MAAnB,CAA2BC,GAAD,IAAQ;MACrD,IAAI,CAACA,GAAG,CAACV,aAAT,EAAwB;QACtB,OAAO,KAAP;MACD;;MACD,MAAMW,yBAAyB,GAAG,IAAIhB,sBAAJ,CAChCpB,QAAQ,CAACO,MAAT,CAAgBH,MAAhB,CAAuBC,QAAvB,KAAoC,KAApC,GACInB,oBAAWc,QAAQ,CAACO,MAAT,CAAgBH,MAAhB,CAAuBF,KAAlC,CADJ,GAEIF,QAAQ,CAACO,MAAT,CAAgBH,MAAhB,CAAuBF,KAHK,CAAlC;MAKA,MAAMmC,oBAAoB,GAAG,IAAIjB,sBAAJ,CAC3B,OAAOe,GAAG,CAACV,aAAX,KAA6B,QAA7B,GACIU,GAAG,CAACV,aADR,GAEIU,GAAG,CAACV,aAAJ,CAAkBvB,KAHK,CAA7B;MAKA,OAAOmC,oBAAoB,CAACC,EAArB,CAAwBF,yBAAxB,CAAP;IACD,CAfoB,CAArB;EAgBD;;EACD,OAAOnB,KAAP;AACD;;AAED,SAASsB,cAAT,CAAwBvC,QAAxB,EAA4CiB,KAA5C,EAAuE;EACrE,IAAIA,KAAK,CAACK,YAAN,IAAsBL,KAAK,CAACK,YAAN,CAAmBV,MAAnB,GAA4B,CAAtD,EAAyD;IACvD,OAAO4B,mBAAcvB,KAAd,CAAP;EACD;;EACD,IACEA,KAAK,CAACW,sBAAN,IAAgC,IAAhC,IACA,CAACX,KAAK,CAACW,sBAAN,CAA6BC,QAA7B,CACC7B,QAAQ,CAACG,WAAT,CAAqBC,MAArB,CAA4BC,QAD7B,CAFH,EAKE;IACA,MAAM,IAAIpB,aAAJ,CACJ,qBACE,0CADF,GAEEe,QAAQ,CAACG,WAAT,CAAqBC,MAArB,CAA4BC,QAF9B,GAGE,sBAHF,GAIEY,KAAK,CAACW,sBAAN,CAA6Ba,IAA7B,CAAkC,IAAlC,CALE,CAAN;EAOD,CAbD,MAaO,IAAIxB,KAAK,CAACrB,iBAAN,IAA2BqB,KAAK,CAACrB,iBAAN,CAAwBgB,MAAxB,GAAiC,CAAhE,EAAmE;IACxE,MAAM,IAAI3B,aAAJ,CACJ,kCACE,0DADF,GAEE,oEAFF,GAGE,gEAHF,GAIE,yBALE,CAAN;EAOD,CARM,MAQA;IACL,MAAM,IAAIA,aAAJ,CACJ,oBACE,gEADF,GAEE,sEAFF,GAGE,mDAJE,CAAN;EAMD;AACF;;AAED,SAASyD,QAAT,CAAmC1C,QAAnC,EAAqD;EACnDd,kBAASwD,QAAT,CAAkB;IAAC1C;EAAD,CAAlB;EAEA,MAAMQ,OAAO,GAAGR,QAAQ,CAACO,MAAT,CAAgBC,OAAhC;EACA,OAAOV,eAAe,CAAC,KAAKC,UAAN,EAAkBC,QAAlB,CAAf,CACJgB,IADI,CACEC,KAAD,IACJU,6BAA6B,CAAC,KAAK5B,UAAN,EAAkBS,OAAlB,EAA2BS,KAA3B,CAF1B,EAIJD,IAJI,CAIEC,KAAD,IAAWgB,yBAAyB,CAACjC,QAAD,EAAWiB,KAAX,CAJrC,EAKJD,IALI,CAKEC,KAAD,IAAWsB,cAAc,CAACvC,QAAD,EAAWiB,KAAX,CAL1B,CAAP;AAMD;;AAED0B,kBAAeD,QAAf","names":["NotFoundError","common_1","ValidationError","addParams","request","result","_","defaults","Object","assign","source_account","source_currencies","destination_amount","requestPathFind","connection","pathfind","destinationAmount","value","destination","amount","currency","command","source","address","destination_account","issuer","currencies","length","map","utils_1","send_max","then","paths","addDirectXrpPath","xrpBalance","bignumber_js_1","isGreaterThanOrEqualTo","alternatives","unshift","paths_computed","source_amount","isRippledIOUAmount","conditionallyAddDirectXRPPath","destination_currencies","includes","Promise","resolve","undefined","filterSourceFundsLowPaths","filter","alt","pathfindSourceAmountValue","altSourceAmountValue","eq","formatResponse","pathfind_1","join","getPaths","exports"],"sourceRoot":"","sources":["../../../src/ledger/pathfind.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}