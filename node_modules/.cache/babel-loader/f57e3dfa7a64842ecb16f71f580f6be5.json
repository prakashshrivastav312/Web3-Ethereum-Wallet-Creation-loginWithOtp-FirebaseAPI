{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAccountBalance = exports.getAllAccounts = exports.getAccountsByCustomerId = exports.unfreezeAccount = exports.freezeAccount = exports.deactivateAccount = exports.activateAccount = exports.deleteBlockedAmountForAccount = exports.deleteBlockedAmountWithTransaction = exports.deleteBlockedAmount = exports.blockAmount = exports.getBlockedAmountsByAccountId = exports.createAccounts = exports.updateAccount = exports.generateAccount = exports.createAccount = exports.getAccountById = void 0;\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n\nconst BlockageTransaction_1 = require(\"../model/request/BlockageTransaction\");\n\nconst CreateAccountsBatch_1 = require(\"../model/request/CreateAccountsBatch\");\n\nconst UpdateAccount_1 = require(\"../model/request/UpdateAccount\");\n\nconst SubscriptionType_1 = require(\"../model/response/ledger/SubscriptionType\");\n\nconst offchain_1 = require(\"../offchain\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst subscription_1 = require(\"./subscription\");\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getAccountByAccountId\" target=\"_blank\">Tatum API documentation</a>\n */\n\n\nconst getAccountById = async id => tatum_1.get(`/v3/ledger/account/${id}`);\n\nexports.getAccountById = getAccountById;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/createAccount\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst createAccount = async account => tatum_1.post('/v3/ledger/account', account, model_1.CreateAccount);\n\nexports.createAccount = createAccount;\n/**\n * Abstraction unification endpoint for creating new ledger account, optionally added wallet generation, generating deposit blockchain address\n * and register incoming TX webhook notification.\n * @param account Account to be created.\n * @param generateNewWallet If new wallet should be created as well\n * @param testnet if we are using testnet or not\n * @param webhookUrl optional URL, where webhook will be post for every incoming blockchain transaction to the address\n */\n\nconst generateAccount = async function (account) {\n  let generateNewWallet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let testnet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let webhookUrl = arguments.length > 3 ? arguments[3] : undefined;\n  let w;\n\n  if (generateNewWallet) {\n    // @ts-ignore\n    w = await wallet_1.generateWallet(account.currency, testnet); // @ts-ignore\n\n    account.xpub = w.xpub || w.address;\n  }\n\n  const a = await exports.createAccount(account);\n  const address = await offchain_1.generateDepositAddress(a.id);\n\n  if (webhookUrl) {\n    await subscription_1.createNewSubscription({\n      type: SubscriptionType_1.SubscriptionType.ACCOUNT_INCOMING_BLOCKCHAIN_TRANSACTION,\n      attr: {\n        url: webhookUrl,\n        id: a.id\n      }\n    });\n  }\n\n  return {\n    account: a,\n    address,\n    wallet: w\n  };\n};\n\nexports.generateAccount = generateAccount;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/updateAccountByAccountId\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst updateAccount = async (id, account) => tatum_1.put(`/v3/ledger/account/${id}`, account, UpdateAccount_1.UpdateAccount);\n\nexports.updateAccount = updateAccount;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/createAccountBatch\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst createAccounts = async accounts => tatum_1.post('/v3/ledger/account/batch', accounts, CreateAccountsBatch_1.CreateAccountsBatch);\n\nexports.createAccounts = createAccounts;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getBlockAmount\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getBlockedAmountsByAccountId = async function (id) {\n  let pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return tatum_1.get(`/v3/ledger/account/block/${id}?pageSize=${pageSize}&offset=${offset}`);\n};\n\nexports.getBlockedAmountsByAccountId = getBlockedAmountsByAccountId;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/blockAmount\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst blockAmount = async (id, block) => tatum_1.post(`/v3/ledger/account/block/${id}`, block, model_1.BlockAmount);\n\nexports.blockAmount = blockAmount;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/deleteBlockAmount\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst deleteBlockedAmount = async id => tatum_1.httpDelete(`/v3/ledger/account/block/${id}`);\n\nexports.deleteBlockedAmount = deleteBlockedAmount;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/unblockAmountWithTransaction\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst deleteBlockedAmountWithTransaction = async (id, txData) => tatum_1.put(`/v3/ledger/account/block/${id}`, txData, BlockageTransaction_1.BlockageTransaction);\n\nexports.deleteBlockedAmountWithTransaction = deleteBlockedAmountWithTransaction;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/deleteAllBlockAmount\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst deleteBlockedAmountForAccount = async id => tatum_1.httpDelete(`/v3/ledger/account/block/account/${id}`);\n\nexports.deleteBlockedAmountForAccount = deleteBlockedAmountForAccount;\n/**\n * Activates deactivated account. If active account is deactivated nothing will happen.\n *\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/activateAccount\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst activateAccount = async id => tatum_1.put(`v3/ledger/account/${id}/activate`);\n\nexports.activateAccount = activateAccount;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/deactivateAccount\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst deactivateAccount = async id => tatum_1.put(`/v3/ledger/account/${id}/deactivate`);\n\nexports.deactivateAccount = deactivateAccount;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/freezeAccount\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst freezeAccount = async id => tatum_1.put(`/v3/ledger/account/${id}/freeze`);\n\nexports.freezeAccount = freezeAccount;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/unfreezeAccount\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst unfreezeAccount = async id => tatum_1.put(`/v3/ledger/account/${id}/unfreeze`);\n\nexports.unfreezeAccount = unfreezeAccount;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getAccountsByCustomerId\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getAccountsByCustomerId = async function (id) {\n  let pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return tatum_1.get(`/v3/ledger/account/customer/${id}?pageSize=${pageSize}&offset=${offset}`);\n};\n\nexports.getAccountsByCustomerId = getAccountsByCustomerId;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getAllAccounts\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getAllAccounts = async function () {\n  let pageSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return tatum_1.get(`/v3/ledger/account?pageSize=${pageSize}&offset=${offset}`);\n};\n\nexports.getAllAccounts = getAllAccounts;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getAccountBalance\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getAccountBalance = async id => tatum_1.get(`/v3/ledger/account/${id}/balance`);\n\nexports.getAccountBalance = getAccountBalance;","map":{"version":3,"mappings":"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","names":["getAccountById","id","tatum_1","exports","createAccount","account","model_1","generateAccount","generateNewWallet","testnet","webhookUrl","w","wallet_1","currency","xpub","address","a","offchain_1","subscription_1","type","SubscriptionType_1","ACCOUNT_INCOMING_BLOCKCHAIN_TRANSACTION","attr","url","wallet","updateAccount","UpdateAccount_1","createAccounts","accounts","CreateAccountsBatch_1","getBlockedAmountsByAccountId","pageSize","offset","blockAmount","block","deleteBlockedAmount","deleteBlockedAmountWithTransaction","txData","BlockageTransaction_1","deleteBlockedAmountForAccount","activateAccount","deactivateAccount","freezeAccount","unfreezeAccount","getAccountsByCustomerId","getAllAccounts","getAccountBalance"],"sourceRoot":"","sources":["../../../src/ledger/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}