{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareXrpSignedTransaction = exports.signXrpKMSTransaction = exports.sendXrpTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst ripple_lib_1 = require(\"ripple-lib\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n/**\n * Send Xrp transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\n\nconst sendXrpTransaction = async body => {\n  return blockchain_1.xrpBroadcast(await exports.prepareXrpSignedTransaction(body));\n};\n\nexports.sendXrpTransaction = sendXrpTransaction;\n/**\n * Sign Xrp pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param secret secret key to sign transaction with.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signXrpKMSTransaction = async (tx, secret) => {\n  if (tx.chain !== model_1.Currency.XRP) {\n    throw Error('Unsupported chain.');\n  }\n\n  const rippleAPI = new ripple_lib_1.RippleAPI();\n  return rippleAPI.sign(tx.serializedTransaction, secret).signedTransaction;\n};\n\nexports.signXrpKMSTransaction = signXrpKMSTransaction;\n/**\n * Sign Xrp transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXrpSignedTransaction = async body => {\n  await tatum_1.validateBody(body, model_1.TransferXrp);\n  const {\n    fromAccount,\n    fromSecret,\n    to,\n    amount,\n    fee,\n    sourceTag,\n    destinationTag\n  } = body;\n  const f = fee ? fee : new bignumber_js_1.default((await blockchain_1.xrpGetFee()).drops.base_fee).dividedBy(1000000).toString();\n  const payment = {\n    source: {\n      address: fromAccount,\n      maxAmount: {\n        currency: 'XRP',\n        value: amount\n      },\n      tag: sourceTag\n    },\n    destination: {\n      address: to,\n      amount: {\n        currency: 'XRP',\n        value: amount\n      },\n      tag: destinationTag\n    }\n  };\n  const accountInfo = await blockchain_1.xrpGetAccountInfo(fromAccount);\n  const sequence = accountInfo.account_data.Sequence;\n  const maxLedgerVersion = (accountInfo.ledger_current_index || accountInfo.ledger_index) + 500;\n  const rippleAPI = new ripple_lib_1.RippleAPI();\n  const prepared = await rippleAPI.preparePayment(fromAccount, payment, {\n    fee: f,\n    sequence,\n    maxLedgerVersion\n  });\n  const signed = await rippleAPI.sign(prepared.txJSON, fromSecret);\n  return signed.signedTransaction;\n};\n\nexports.prepareXrpSignedTransaction = prepareXrpSignedTransaction; // TODO: add support for ModifyAccount and TrustLine","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;AAEA;;;;;;;;AAMO,MAAMA,kBAAkB,GAAG,MAAOC,IAAP,IAA4B;EAC1D,OAAOC,0BAAa,MAAMC,oCAA4BF,IAA5B,CAAnB,CAAP;AACH,CAFM;;AAAME,6BAAkBH,kBAAlB;AAIb;;;;;;;AAMO,MAAMI,qBAAqB,GAAG,OAAOC,EAAP,EAA2BC,MAA3B,KAA6C;EAC9E,IAAID,EAAE,CAACE,KAAH,KAAaC,iBAASC,GAA1B,EAA+B;IAC3B,MAAMC,KAAK,CAAC,oBAAD,CAAX;EACH;;EACD,MAAMC,SAAS,GAAG,IAAIC,sBAAJ,EAAlB;EACA,OAAOD,SAAS,CAACE,IAAV,CAAeR,EAAE,CAACS,qBAAlB,EAAyCR,MAAzC,EAAiDS,iBAAxD;AACH,CANM;;AAAMZ,gCAAqBC,qBAArB;AAQb;;;;;;AAKO,MAAMY,2BAA2B,GAAG,MAAOf,IAAP,IAA4B;EACnE,MAAMgB,qBAAahB,IAAb,EAAmBO,mBAAnB,CAAN;EACA,MAAM;IACFU,WADE;IAEFC,UAFE;IAGFC,EAHE;IAIFC,MAJE;IAKFC,GALE;IAMFC,SANE;IAOFC;EAPE,IAQFvB,IARJ;EAUA,MAAMwB,CAAC,GAAGH,GAAG,GAAGA,GAAH,GAAS,IAAII,sBAAJ,CAAc,CAAC,MAAMxB,wBAAP,EAAoByB,KAApB,CAA0BC,QAAxC,EAAkDC,SAAlD,CAA4D,OAA5D,EAAqEC,QAArE,EAAtB;EACA,MAAMC,OAAO,GAAY;IACrBC,MAAM,EAAE;MACJC,OAAO,EAAEf,WADL;MAEJgB,SAAS,EAAE;QACPC,QAAQ,EAAE,KADH;QAEPC,KAAK,EAAEf;MAFA,CAFP;MAMJgB,GAAG,EAAEd;IAND,CADa;IASrBe,WAAW,EAAE;MACTL,OAAO,EAAEb,EADA;MAETC,MAAM,EAAE;QACJc,QAAQ,EAAE,KADN;QAEJC,KAAK,EAAEf;MAFH,CAFC;MAMTgB,GAAG,EAAEb;IANI;EATQ,CAAzB;EAkBA,MAAMe,WAAW,GAAG,MAAMrC,+BAAkBgB,WAAlB,CAA1B;EACA,MAAMsB,QAAQ,GAAGD,WAAW,CAACE,YAAZ,CAAyBC,QAA1C;EACA,MAAMC,gBAAgB,GAAG,CAACJ,WAAW,CAACK,oBAAZ,IAAoCL,WAAW,CAACM,YAAjD,IAAiE,GAA1F;EACA,MAAMlC,SAAS,GAAG,IAAIC,sBAAJ,EAAlB;EACA,MAAMkC,QAAQ,GAAG,MAAMnC,SAAS,CAACoC,cAAV,CAAyB7B,WAAzB,EAAsCa,OAAtC,EAA+C;IAClET,GAAG,EAAEG,CAD6D;IAElEe,QAFkE;IAGlEG;EAHkE,CAA/C,CAAvB;EAKA,MAAMK,MAAM,GAAG,MAAMrC,SAAS,CAACE,IAAV,CAAeiC,QAAQ,CAACG,MAAxB,EAAgC9B,UAAhC,CAArB;EACA,OAAO6B,MAAM,CAACjC,iBAAd;AACH,CA1CM;;AAAMZ,sCAA2Ba,2BAA3B,C,CA4Cb","names":["sendXrpTransaction","body","blockchain_1","exports","signXrpKMSTransaction","tx","secret","chain","model_1","XRP","Error","rippleAPI","ripple_lib_1","sign","serializedTransaction","signedTransaction","prepareXrpSignedTransaction","tatum_1","fromAccount","fromSecret","to","amount","fee","sourceTag","destinationTag","f","bignumber_js_1","drops","base_fee","dividedBy","toString","payment","source","address","maxAmount","currency","value","tag","destination","accountInfo","sequence","account_data","Sequence","maxLedgerVersion","ledger_current_index","ledger_index","prepared","preparePayment","signed","txJSON"],"sourceRoot":"","sources":["../../../src/transaction/xrp.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}