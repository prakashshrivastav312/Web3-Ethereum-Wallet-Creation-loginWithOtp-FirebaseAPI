{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidAddress = exports.isValidSecret = exports.schemaValidate = void 0;\n\nconst _ = __importStar(require(\"lodash\"));\n\nconst assert = __importStar(require(\"assert\"));\n\nconst {\n  Validator\n} = require('jsonschema');\n\nconst errors_1 = require(\"./errors\");\n\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\n\nconst utils_1 = require(\"./utils\");\n\nObject.defineProperty(exports, \"isValidSecret\", {\n  enumerable: true,\n  get: function () {\n    return utils_1.isValidSecret;\n  }\n});\n\nfunction loadSchemas() {\n  const schemas = [require('./schemas/objects/tx-json.json'), require('./schemas/objects/transaction-type.json'), require('./schemas/objects/hash128.json'), require('./schemas/objects/hash256.json'), require('./schemas/objects/sequence.json'), require('./schemas/objects/ticket-sequence.json'), require('./schemas/objects/signature.json'), require('./schemas/objects/issue.json'), require('./schemas/objects/ledger-version.json'), require('./schemas/objects/max-adjustment.json'), require('./schemas/objects/memo.json'), require('./schemas/objects/memos.json'), require('./schemas/objects/public-key.json'), require('./schemas/objects/private-key.json'), require('./schemas/objects/uint32.json'), require('./schemas/objects/value.json'), require('./schemas/objects/source-adjustment.json'), require('./schemas/objects/destination-adjustment.json'), require('./schemas/objects/tag.json'), require('./schemas/objects/lax-amount.json'), require('./schemas/objects/lax-lax-amount.json'), require('./schemas/objects/min-adjustment.json'), require('./schemas/objects/source-exact-adjustment.json'), require('./schemas/objects/destination-exact-adjustment.json'), require('./schemas/objects/destination-address-tag.json'), require('./schemas/objects/transaction-hash.json'), require('./schemas/objects/address.json'), require('./schemas/objects/x-address.json'), require('./schemas/objects/classic-address.json'), require('./schemas/objects/adjustment.json'), require('./schemas/objects/quality.json'), require('./schemas/objects/amount.json'), require('./schemas/objects/amountbase.json'), require('./schemas/objects/balance.json'), require('./schemas/objects/blob.json'), require('./schemas/objects/currency.json'), require('./schemas/objects/signed-value.json'), require('./schemas/objects/orderbook.json'), require('./schemas/objects/instructions.json'), require('./schemas/objects/settings-plus-memos.json'), require('./schemas/specifications/settings.json'), require('./schemas/specifications/payment.json'), require('./schemas/specifications/get-payment.json'), require('./schemas/specifications/escrow-cancellation.json'), require('./schemas/specifications/order-cancellation.json'), require('./schemas/specifications/order.json'), require('./schemas/specifications/escrow-execution.json'), require('./schemas/specifications/escrow-creation.json'), require('./schemas/specifications/payment-channel-create.json'), require('./schemas/specifications/payment-channel-fund.json'), require('./schemas/specifications/payment-channel-claim.json'), require('./schemas/specifications/check-create.json'), require('./schemas/specifications/check-cash.json'), require('./schemas/specifications/check-cancel.json'), require('./schemas/specifications/trustline.json'), require('./schemas/specifications/deposit-preauth.json'), require('./schemas/specifications/account-delete.json'), require('./schemas/output/sign.json'), require('./schemas/output/submit.json'), require('./schemas/output/get-account-info.json'), require('./schemas/output/get-account-objects.json'), require('./schemas/output/get-balances.json'), require('./schemas/output/get-balance-sheet.json'), require('./schemas/output/get-ledger.json'), require('./schemas/output/get-orderbook.json'), require('./schemas/output/get-orders.json'), require('./schemas/output/order-change.json'), require('./schemas/output/get-payment-channel.json'), require('./schemas/output/prepare.json'), require('./schemas/output/ledger-event.json'), require('./schemas/output/get-paths.json'), require('./schemas/output/get-server-info.json'), require('./schemas/output/get-settings.json'), require('./schemas/output/orderbook-orders.json'), require('./schemas/output/outcome.json'), require('./schemas/output/get-transaction.json'), require('./schemas/output/get-transactions.json'), require('./schemas/output/get-trustlines.json'), require('./schemas/output/sign-payment-channel-claim.json'), require('./schemas/output/verify-payment-channel-claim.json'), require('./schemas/input/get-balances.json'), require('./schemas/input/get-balance-sheet.json'), require('./schemas/input/get-ledger.json'), require('./schemas/input/get-orders.json'), require('./schemas/input/get-orderbook.json'), require('./schemas/input/get-paths.json'), require('./schemas/input/get-payment-channel.json'), require('./schemas/input/api-options.json'), require('./schemas/input/get-settings.json'), require('./schemas/input/get-account-info.json'), require('./schemas/input/get-account-objects.json'), require('./schemas/input/get-transaction.json'), require('./schemas/input/get-transactions.json'), require('./schemas/input/get-trustlines.json'), require('./schemas/input/prepare-payment.json'), require('./schemas/input/prepare-order.json'), require('./schemas/input/prepare-trustline.json'), require('./schemas/input/prepare-order-cancellation.json'), require('./schemas/input/prepare-settings.json'), require('./schemas/input/prepare-escrow-creation.json'), require('./schemas/input/prepare-escrow-cancellation.json'), require('./schemas/input/prepare-escrow-execution.json'), require('./schemas/input/prepare-payment-channel-create.json'), require('./schemas/input/prepare-payment-channel-fund.json'), require('./schemas/input/prepare-payment-channel-claim.json'), require('./schemas/input/prepare-check-create.json'), require('./schemas/input/prepare-check-cash.json'), require('./schemas/input/prepare-check-cancel.json'), require('./schemas/input/prepare-ticket-create.json'), require('./schemas/input/compute-ledger-hash.json'), require('./schemas/input/sign.json'), require('./schemas/input/submit.json'), require('./schemas/input/generate-address.json'), require('./schemas/input/sign-payment-channel-claim.json'), require('./schemas/input/verify-payment-channel-claim.json'), require('./schemas/input/combine.json')];\n  const titles = schemas.map(schema => schema.title);\n  const duplicates = Object.keys(_.pickBy(_.countBy(titles), count => count > 1));\n  assert.ok(duplicates.length === 0, 'Duplicate schemas for: ' + duplicates);\n  const validator = new Validator();\n\n  validator.customFormats.xAddress = function (instance) {\n    if (instance == null) {\n      return true;\n    }\n\n    return ripple_address_codec_1.isValidXAddress(instance);\n  };\n\n  validator.customFormats.classicAddress = function (instance) {\n    if (instance == null) {\n      return true;\n    }\n\n    return isValidAddress(instance);\n  };\n\n  validator.customFormats.secret = function (instance) {\n    if (instance == null) {\n      return true;\n    }\n\n    return utils_1.isValidSecret(instance);\n  };\n\n  schemas.forEach(schema => validator.addSchema(schema, '/' + schema.title));\n  return validator;\n}\n\nconst schemaValidator = loadSchemas();\n\nfunction schemaValidate(schemaName, object) {\n  const schema = schemaValidator.getSchema('/' + schemaName);\n\n  if (schema == null) {\n    throw new errors_1.ValidationError('no schema for ' + schemaName);\n  }\n\n  const result = schemaValidator.validate(object, schema);\n\n  if (!result.valid) {\n    throw new errors_1.ValidationError(result.errors.join());\n  }\n}\n\nexports.schemaValidate = schemaValidate;\n\nfunction isValidAddress(address) {\n  return ripple_address_codec_1.isValidXAddress(address) || ripple_address_codec_1.isValidClassicAddress(address);\n}\n\nexports.isValidAddress = isValidAddress;","map":{"version":3,"mappings":"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","names":["Validator","require","Object","enumerable","get","utils_1","loadSchemas","schemas","titles","map","schema","title","duplicates","keys","_","pickBy","countBy","count","assert","ok","length","validator","customFormats","xAddress","instance","ripple_address_codec_1","classicAddress","isValidAddress","secret","forEach","addSchema","schemaValidator","schemaValidate","schemaName","object","getSchema","errors_1","result","validate","valid","errors","join","exports","address"],"sourceRoot":"","sources":["../../../src/common/schema-validator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}