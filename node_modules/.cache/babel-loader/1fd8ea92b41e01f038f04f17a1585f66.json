{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.setTrustLineFlags = setTrustLineFlags;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Creates a trustline flag configuring operation.\n *\n * For the flags, set them to true to enable them and false to disable them. Any\n * unmodified operations will be marked `undefined` in the result.\n *\n * Note that you can only **clear** the clawbackEnabled flag set; it must be set\n * account-wide via operations.SetOptions (setting\n * xdr.AccountFlags.clawbackEnabled).\n *\n * @function\n * @alias Operation.setTrustLineFlags\n *\n * @param {object} opts - Options object\n * @param {string} opts.trustor     - the account whose trustline this is\n * @param {Asset}  opts.asset       - the asset on the trustline\n * @param {object} opts.flags       - the set of flags to modify\n *\n * @param {bool}   [opts.flags.authorized]  - authorize account to perform\n *     transactions with its credit\n * @param {bool}   [opts.flags.authorizedToMaintainLiabilities] - authorize\n *     account to maintain and reduce liabilities for its credit\n * @param {bool}   [opts.flags.clawbackEnabled] - stop claimable balances on\n *     this trustlines from having clawbacks enabled (this flag can only be set\n *     to false!)\n * @param {string} [opts.source] - The source account for the operation.\n *                                 Defaults to the transaction's source account.\n *\n * @note You must include at least one flag.\n *\n * @return {xdr.SetTrustLineFlagsOp}\n *\n * @link xdr.AccountFlags\n * @link xdr.TrustLineFlags\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#set-trustline-flags-operation\n * @see https://developers.stellar.org/docs/start/list-of-operations/#set-options\n */\n\n\nfunction setTrustLineFlags() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n\n  if (_typeof(opts.flags) !== 'object' || Object.keys(opts.flags).length === 0) {\n    throw new Error('opts.flags must be an map of boolean flags to modify');\n  }\n\n  var mapping = {\n    authorized: _stellarXdr_generated2.default.TrustLineFlags.authorizedFlag(),\n    authorizedToMaintainLiabilities: _stellarXdr_generated2.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n    clawbackEnabled: _stellarXdr_generated2.default.TrustLineFlags.trustlineClawbackEnabledFlag()\n  };\n  /* eslint no-bitwise: \"off\" */\n\n  var clearFlag = 0;\n  var setFlag = 0;\n  Object.keys(opts.flags).forEach(function (flagName) {\n    if (!Object.prototype.hasOwnProperty.call(mapping, flagName)) {\n      throw new Error('unsupported flag name specified: ' + flagName);\n    }\n\n    var flagValue = opts.flags[flagName];\n    var bit = mapping[flagName].value;\n\n    if (flagValue === true) {\n      setFlag |= bit;\n    } else if (flagValue === false) {\n      clearFlag |= bit;\n    }\n  });\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.clearFlags = clearFlag;\n  attributes.setFlags = setFlag;\n  var opAttributes = {\n    body: _stellarXdr_generated2.default.OperationBody.setTrustLineFlags(new _stellarXdr_generated2.default.SetTrustLineFlagsOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","setTrustLineFlags","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_keypair","__esModule","default","opts","arguments","length","undefined","attributes","flags","keys","Error","mapping","authorized","TrustLineFlags","authorizedFlag","authorizedToMaintainLiabilities","authorizedToMaintainLiabilitiesFlag","clawbackEnabled","trustlineClawbackEnabledFlag","clearFlag","setFlag","forEach","flagName","hasOwnProperty","call","flagValue","bit","trustor","Keypair","fromPublicKey","xdrAccountId","asset","toXDRObject","clearFlags","setFlags","opAttributes","body","OperationBody","SetTrustLineFlagsOp","setSourceAccount","Operation"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operations/set_trustline_flags.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.setTrustLineFlags = setTrustLineFlags;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a trustline flag configuring operation.\n *\n * For the flags, set them to true to enable them and false to disable them. Any\n * unmodified operations will be marked `undefined` in the result.\n *\n * Note that you can only **clear** the clawbackEnabled flag set; it must be set\n * account-wide via operations.SetOptions (setting\n * xdr.AccountFlags.clawbackEnabled).\n *\n * @function\n * @alias Operation.setTrustLineFlags\n *\n * @param {object} opts - Options object\n * @param {string} opts.trustor     - the account whose trustline this is\n * @param {Asset}  opts.asset       - the asset on the trustline\n * @param {object} opts.flags       - the set of flags to modify\n *\n * @param {bool}   [opts.flags.authorized]  - authorize account to perform\n *     transactions with its credit\n * @param {bool}   [opts.flags.authorizedToMaintainLiabilities] - authorize\n *     account to maintain and reduce liabilities for its credit\n * @param {bool}   [opts.flags.clawbackEnabled] - stop claimable balances on\n *     this trustlines from having clawbacks enabled (this flag can only be set\n *     to false!)\n * @param {string} [opts.source] - The source account for the operation.\n *                                 Defaults to the transaction's source account.\n *\n * @note You must include at least one flag.\n *\n * @return {xdr.SetTrustLineFlagsOp}\n *\n * @link xdr.AccountFlags\n * @link xdr.TrustLineFlags\n * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#set-trustline-flags-operation\n * @see https://developers.stellar.org/docs/start/list-of-operations/#set-options\n */\nfunction setTrustLineFlags() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var attributes = {};\n\n  if (_typeof(opts.flags) !== 'object' || Object.keys(opts.flags).length === 0) {\n    throw new Error('opts.flags must be an map of boolean flags to modify');\n  }\n\n  var mapping = {\n    authorized: _stellarXdr_generated2.default.TrustLineFlags.authorizedFlag(),\n    authorizedToMaintainLiabilities: _stellarXdr_generated2.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n    clawbackEnabled: _stellarXdr_generated2.default.TrustLineFlags.trustlineClawbackEnabledFlag()\n  };\n\n  /* eslint no-bitwise: \"off\" */\n  var clearFlag = 0;\n  var setFlag = 0;\n\n  Object.keys(opts.flags).forEach(function (flagName) {\n    if (!Object.prototype.hasOwnProperty.call(mapping, flagName)) {\n      throw new Error('unsupported flag name specified: ' + flagName);\n    }\n\n    var flagValue = opts.flags[flagName];\n    var bit = mapping[flagName].value;\n    if (flagValue === true) {\n      setFlag |= bit;\n    } else if (flagValue === false) {\n      clearFlag |= bit;\n    }\n  });\n\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.clearFlags = clearFlag;\n  attributes.setFlags = setFlag;\n\n  var opAttributes = {\n    body: _stellarXdr_generated2.default.OperationBody.setTrustLineFlags(new _stellarXdr_generated2.default.SetTrustLineFlagsOp(attributes))\n  };\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}