{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.payment = payment;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Create a payment operation.\n *\n * @function\n * @alias Operation.payment\n * @see https://developers.stellar.org/docs/start/list-of-operations/#payment\n *\n * @param {object}  opts - Options object\n * @param {string}  opts.destination  - The destination account ID.\n * @param {Asset}   opts.asset        - The asset to send.\n * @param {string}  opts.amount       - The amount to send.\n * @param {bool}    [opts.withMuxing] - Indicates that some parameters (either\n *     the `destination` or `source`, in this case) are M... addresses that\n *     should be interpreted fully as a muxed account. By default, this option\n *     is disabled until muxed accounts are mature.\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting payment operation (xdr.PaymentOp)\n */\n\n\nfunction payment(opts) {\n  if (!opts.asset) {\n    throw new Error('Must provide an asset for a payment operation');\n  }\n\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n\n  var attributes = {};\n\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination, opts.withMuxing);\n  } catch (e) {\n    throw new Error('destination is invalid; did you forget to enable muxing?');\n  }\n\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  var paymentOp = new _stellarXdr_generated2.default.PaymentOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.payment(paymentOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","payment","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_decode_encode_muxed_account","obj","__esModule","default","opts","asset","Error","isValidAmount","amount","TypeError","constructAmountRequirementsError","attributes","destination","decodeAddressToMuxedAccount","withMuxing","e","toXDRObject","_toXDRAmount","paymentOp","PaymentOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operations/payment.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.payment = payment;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a payment operation.\n *\n * @function\n * @alias Operation.payment\n * @see https://developers.stellar.org/docs/start/list-of-operations/#payment\n *\n * @param {object}  opts - Options object\n * @param {string}  opts.destination  - The destination account ID.\n * @param {Asset}   opts.asset        - The asset to send.\n * @param {string}  opts.amount       - The amount to send.\n * @param {bool}    [opts.withMuxing] - Indicates that some parameters (either\n *     the `destination` or `source`, in this case) are M... addresses that\n *     should be interpreted fully as a muxed account. By default, this option\n *     is disabled until muxed accounts are mature.\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting payment operation (xdr.PaymentOp)\n */\nfunction payment(opts) {\n  if (!opts.asset) {\n    throw new Error('Must provide an asset for a payment operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n\n  var attributes = {};\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination, opts.withMuxing);\n  } catch (e) {\n    throw new Error('destination is invalid; did you forget to enable muxing?');\n  }\n\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  var paymentOp = new _stellarXdr_generated2.default.PaymentOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.payment(paymentOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,oCAAD,CAAnC;;AAEA,IAAIC,sBAAsB,GAAGC,sBAAsB,CAACH,qBAAD,CAAnD;;AAEA,IAAII,4BAA4B,GAAGH,OAAO,CAAC,qCAAD,CAA1C;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEE,OAAO,EAAEF;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASN,OAAT,CAAiBS,IAAjB,EAAuB;EACrB,IAAI,CAACA,IAAI,CAACC,KAAV,EAAiB;IACf,MAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;EACD;;EACD,IAAI,CAAC,KAAKC,aAAL,CAAmBH,IAAI,CAACI,MAAxB,CAAL,EAAsC;IACpC,MAAM,IAAIC,SAAJ,CAAc,KAAKC,gCAAL,CAAsC,QAAtC,CAAd,CAAN;EACD;;EAED,IAAIC,UAAU,GAAG,EAAjB;;EACA,IAAI;IACFA,UAAU,CAACC,WAAX,GAAyB,CAAC,GAAGZ,4BAA4B,CAACa,2BAAjC,EAA8DT,IAAI,CAACQ,WAAnE,EAAgFR,IAAI,CAACU,UAArF,CAAzB;EACD,CAFD,CAEE,OAAOC,CAAP,EAAU;IACV,MAAM,IAAIT,KAAJ,CAAU,0DAAV,CAAN;EACD;;EAEDK,UAAU,CAACN,KAAX,GAAmBD,IAAI,CAACC,KAAL,CAAWW,WAAX,EAAnB;EACAL,UAAU,CAACH,MAAX,GAAoB,KAAKS,YAAL,CAAkBb,IAAI,CAACI,MAAvB,CAApB;EACA,IAAIU,SAAS,GAAG,IAAIpB,sBAAsB,CAACK,OAAvB,CAA+BgB,SAAnC,CAA6CR,UAA7C,CAAhB;EAEA,IAAIS,YAAY,GAAG,EAAnB;EACAA,YAAY,CAACC,IAAb,GAAoBvB,sBAAsB,CAACK,OAAvB,CAA+BmB,aAA/B,CAA6C3B,OAA7C,CAAqDuB,SAArD,CAApB;EACA,KAAKK,gBAAL,CAAsBH,YAAtB,EAAoChB,IAApC;EAEA,OAAO,IAAIN,sBAAsB,CAACK,OAAvB,CAA+BqB,SAAnC,CAA6CJ,YAA7C,CAAP;AACD"},"metadata":{},"sourceType":"script"}