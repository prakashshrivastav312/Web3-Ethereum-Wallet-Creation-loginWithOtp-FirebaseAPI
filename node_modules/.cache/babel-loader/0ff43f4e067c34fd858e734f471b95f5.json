{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst typeFields_1 = require('../typeFields');\n\nconst globalXpub = require('./global/globalXpub');\n\nconst unsignedTx = require('./global/unsignedTx');\n\nconst finalScriptSig = require('./input/finalScriptSig');\n\nconst finalScriptWitness = require('./input/finalScriptWitness');\n\nconst nonWitnessUtxo = require('./input/nonWitnessUtxo');\n\nconst partialSig = require('./input/partialSig');\n\nconst porCommitment = require('./input/porCommitment');\n\nconst sighashType = require('./input/sighashType');\n\nconst tapKeySig = require('./input/tapKeySig');\n\nconst tapLeafScript = require('./input/tapLeafScript');\n\nconst tapMerkleRoot = require('./input/tapMerkleRoot');\n\nconst tapScriptSig = require('./input/tapScriptSig');\n\nconst witnessUtxo = require('./input/witnessUtxo');\n\nconst tapTree = require('./output/tapTree');\n\nconst bip32Derivation = require('./shared/bip32Derivation');\n\nconst checkPubkey = require('./shared/checkPubkey');\n\nconst redeemScript = require('./shared/redeemScript');\n\nconst tapBip32Derivation = require('./shared/tapBip32Derivation');\n\nconst tapInternalKey = require('./shared/tapInternalKey');\n\nconst witnessScript = require('./shared/witnessScript');\n\nconst globals = {\n  unsignedTx,\n  globalXpub,\n  // pass an Array of key bytes that require pubkey beside the key\n  checkPubkey: checkPubkey.makeChecker([])\n};\nexports.globals = globals;\nconst inputs = {\n  nonWitnessUtxo,\n  partialSig,\n  sighashType,\n  finalScriptSig,\n  finalScriptWitness,\n  porCommitment,\n  witnessUtxo,\n  bip32Derivation: bip32Derivation.makeConverter(typeFields_1.InputTypes.BIP32_DERIVATION),\n  redeemScript: redeemScript.makeConverter(typeFields_1.InputTypes.REDEEM_SCRIPT),\n  witnessScript: witnessScript.makeConverter(typeFields_1.InputTypes.WITNESS_SCRIPT),\n  checkPubkey: checkPubkey.makeChecker([typeFields_1.InputTypes.PARTIAL_SIG, typeFields_1.InputTypes.BIP32_DERIVATION]),\n  tapKeySig,\n  tapScriptSig,\n  tapLeafScript,\n  tapBip32Derivation: tapBip32Derivation.makeConverter(typeFields_1.InputTypes.TAP_BIP32_DERIVATION),\n  tapInternalKey: tapInternalKey.makeConverter(typeFields_1.InputTypes.TAP_INTERNAL_KEY),\n  tapMerkleRoot\n};\nexports.inputs = inputs;\nconst outputs = {\n  bip32Derivation: bip32Derivation.makeConverter(typeFields_1.OutputTypes.BIP32_DERIVATION),\n  redeemScript: redeemScript.makeConverter(typeFields_1.OutputTypes.REDEEM_SCRIPT),\n  witnessScript: witnessScript.makeConverter(typeFields_1.OutputTypes.WITNESS_SCRIPT),\n  checkPubkey: checkPubkey.makeChecker([typeFields_1.OutputTypes.BIP32_DERIVATION]),\n  tapBip32Derivation: tapBip32Derivation.makeConverter(typeFields_1.OutputTypes.TAP_BIP32_DERIVATION),\n  tapTree,\n  tapInternalKey: tapInternalKey.makeConverter(typeFields_1.OutputTypes.TAP_INTERNAL_KEY)\n};\nexports.outputs = outputs;","map":{"version":3,"names":["Object","defineProperty","exports","value","typeFields_1","require","globalXpub","unsignedTx","finalScriptSig","finalScriptWitness","nonWitnessUtxo","partialSig","porCommitment","sighashType","tapKeySig","tapLeafScript","tapMerkleRoot","tapScriptSig","witnessUtxo","tapTree","bip32Derivation","checkPubkey","redeemScript","tapBip32Derivation","tapInternalKey","witnessScript","globals","makeChecker","inputs","makeConverter","InputTypes","BIP32_DERIVATION","REDEEM_SCRIPT","WITNESS_SCRIPT","PARTIAL_SIG","TAP_BIP32_DERIVATION","TAP_INTERNAL_KEY","outputs","OutputTypes"],"sources":["C:/Users/acer/node_modules/bip174/src/lib/converter/index.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst typeFields_1 = require('../typeFields');\nconst globalXpub = require('./global/globalXpub');\nconst unsignedTx = require('./global/unsignedTx');\nconst finalScriptSig = require('./input/finalScriptSig');\nconst finalScriptWitness = require('./input/finalScriptWitness');\nconst nonWitnessUtxo = require('./input/nonWitnessUtxo');\nconst partialSig = require('./input/partialSig');\nconst porCommitment = require('./input/porCommitment');\nconst sighashType = require('./input/sighashType');\nconst tapKeySig = require('./input/tapKeySig');\nconst tapLeafScript = require('./input/tapLeafScript');\nconst tapMerkleRoot = require('./input/tapMerkleRoot');\nconst tapScriptSig = require('./input/tapScriptSig');\nconst witnessUtxo = require('./input/witnessUtxo');\nconst tapTree = require('./output/tapTree');\nconst bip32Derivation = require('./shared/bip32Derivation');\nconst checkPubkey = require('./shared/checkPubkey');\nconst redeemScript = require('./shared/redeemScript');\nconst tapBip32Derivation = require('./shared/tapBip32Derivation');\nconst tapInternalKey = require('./shared/tapInternalKey');\nconst witnessScript = require('./shared/witnessScript');\nconst globals = {\n  unsignedTx,\n  globalXpub,\n  // pass an Array of key bytes that require pubkey beside the key\n  checkPubkey: checkPubkey.makeChecker([]),\n};\nexports.globals = globals;\nconst inputs = {\n  nonWitnessUtxo,\n  partialSig,\n  sighashType,\n  finalScriptSig,\n  finalScriptWitness,\n  porCommitment,\n  witnessUtxo,\n  bip32Derivation: bip32Derivation.makeConverter(\n    typeFields_1.InputTypes.BIP32_DERIVATION,\n  ),\n  redeemScript: redeemScript.makeConverter(\n    typeFields_1.InputTypes.REDEEM_SCRIPT,\n  ),\n  witnessScript: witnessScript.makeConverter(\n    typeFields_1.InputTypes.WITNESS_SCRIPT,\n  ),\n  checkPubkey: checkPubkey.makeChecker([\n    typeFields_1.InputTypes.PARTIAL_SIG,\n    typeFields_1.InputTypes.BIP32_DERIVATION,\n  ]),\n  tapKeySig,\n  tapScriptSig,\n  tapLeafScript,\n  tapBip32Derivation: tapBip32Derivation.makeConverter(\n    typeFields_1.InputTypes.TAP_BIP32_DERIVATION,\n  ),\n  tapInternalKey: tapInternalKey.makeConverter(\n    typeFields_1.InputTypes.TAP_INTERNAL_KEY,\n  ),\n  tapMerkleRoot,\n};\nexports.inputs = inputs;\nconst outputs = {\n  bip32Derivation: bip32Derivation.makeConverter(\n    typeFields_1.OutputTypes.BIP32_DERIVATION,\n  ),\n  redeemScript: redeemScript.makeConverter(\n    typeFields_1.OutputTypes.REDEEM_SCRIPT,\n  ),\n  witnessScript: witnessScript.makeConverter(\n    typeFields_1.OutputTypes.WITNESS_SCRIPT,\n  ),\n  checkPubkey: checkPubkey.makeChecker([\n    typeFields_1.OutputTypes.BIP32_DERIVATION,\n  ]),\n  tapBip32Derivation: tapBip32Derivation.makeConverter(\n    typeFields_1.OutputTypes.TAP_BIP32_DERIVATION,\n  ),\n  tapTree,\n  tapInternalKey: tapInternalKey.makeConverter(\n    typeFields_1.OutputTypes.TAP_INTERNAL_KEY,\n  ),\n};\nexports.outputs = outputs;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}