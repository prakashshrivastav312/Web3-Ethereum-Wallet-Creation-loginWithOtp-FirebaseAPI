{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flowSendTransaction = exports.flowSendCustomTransaction = exports.sendFlowNftBurnToken = exports.sendFlowNftTransferToken = exports.sendFlowNftMintMultipleToken = exports.sendFlowNftMintToken = exports.getFlowNftTokenByAddress = exports.getFlowNftMetadata = exports.flowAddPublicKeyToAccount = exports.flowCreateAccountFromPublicKey = exports.flowSignKMSTransaction = exports.getFlowApiSigner = exports.getFlowSigner = exports.flowSign = exports.FlowTxType = void 0; // @ts-ignore\n\nconst fcl = __importStar(require(\"@onflow/fcl\")); // @ts-ignore\n\n\nconst types = __importStar(require(\"@onflow/types\")); // @ts-ignore\n\n\nconst util_encode_key_1 = require(\"@onflow/util-encode-key\");\n\nconst elliptic = __importStar(require(\"elliptic\"));\n\nconst sha3_1 = require(\"sha3\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst model_1 = require(\"../model\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst flowTransaction_1 = require(\"./flowTransaction\");\n\nvar FlowTxType;\n\n(function (FlowTxType) {\n  FlowTxType[FlowTxType[\"CREATE_ACCOUNT\"] = 0] = \"CREATE_ACCOUNT\";\n  FlowTxType[FlowTxType[\"ADD_PK_TO_ACCOUNT\"] = 1] = \"ADD_PK_TO_ACCOUNT\";\n  FlowTxType[FlowTxType[\"TRANSFER\"] = 2] = \"TRANSFER\";\n  FlowTxType[FlowTxType[\"DEPLOY_NFT\"] = 3] = \"DEPLOY_NFT\";\n  FlowTxType[FlowTxType[\"MINT_NFT\"] = 4] = \"MINT_NFT\";\n  FlowTxType[FlowTxType[\"MINT_MULTIPLE_NFT\"] = 5] = \"MINT_MULTIPLE_NFT\";\n  FlowTxType[FlowTxType[\"BURN_NFT\"] = 6] = \"BURN_NFT\";\n  FlowTxType[FlowTxType[\"TRANSFER_NFT\"] = 7] = \"TRANSFER_NFT\";\n  FlowTxType[FlowTxType[\"CUSTOM_TX\"] = 8] = \"CUSTOM_TX\";\n})(FlowTxType = exports.FlowTxType || (exports.FlowTxType = {}));\n\nconst flowSign = (pk, msg) => {\n  const keyPair = new elliptic.ec('secp256k1').keyFromPrivate(pk);\n  const signature = keyPair.sign(new sha3_1.SHA3(256).update(msg).digest());\n  const r = signature.r.toArrayLike(Buffer, 'be', 32);\n  const s = signature.s.toArrayLike(Buffer, 'be', 32);\n  return Buffer.concat([r, s]).toString('hex');\n};\n\nexports.flowSign = flowSign;\n\nconst getFlowSigner = function (pk, address) {\n  let keyId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return {\n    signer: account => {\n      return Object.assign(Object.assign({}, account), {\n        tempId: `${address}-${keyId}`,\n        addr: fcl.sansPrefix(address),\n        keyId: Number(keyId),\n        signingFunction: async data => {\n          return {\n            addr: fcl.withPrefix(address),\n            keyId: Number(keyId),\n            signature: exports.flowSign(pk, Buffer.from(data.message, 'hex'))\n          };\n        }\n      });\n    }\n  };\n};\n\nexports.getFlowSigner = getFlowSigner;\n\nconst getFlowApiSigner = isPayer => {\n  const keyHash = Date.now();\n\n  const signer = async account => {\n    const {\n      address,\n      keyId\n    } = await blockchain_1.flowGetSignKey(isPayer);\n\n    if (!isPayer) {\n      process.env[`FLOW_PROPOSAL_KEY_${keyHash}`] = `${keyId}`;\n    }\n\n    return Object.assign(Object.assign({}, account), {\n      tempId: `${address}-${keyId}`,\n      addr: fcl.sansPrefix(address),\n      keyId,\n      signingFunction: async data => {\n        return {\n          addr: fcl.withPrefix(address),\n          keyId: Number(keyId),\n          signature: (await blockchain_1.flowSignWithKey(data.message, isPayer)).signature\n        };\n      }\n    });\n  };\n\n  return {\n    signer,\n    keyHash: `FLOW_PROPOSAL_KEY_${keyHash}`\n  };\n};\n\nexports.getFlowApiSigner = getFlowApiSigner;\n\nconst sendTransaction = async (testnet, _ref) => {\n  let {\n    code,\n    args,\n    proposer,\n    authorizations,\n    payer,\n    keyHash\n  } = _ref;\n  fcl.config().put('accessNode.api', testnet ? 'https://access-testnet.onflow.org' : 'https://access-mainnet-beta.onflow.org');\n  let response;\n\n  try {\n    response = await fcl.send([fcl.transaction(code), fcl.args(args.map(arg => fcl.arg(arg.type === 'UInt64' ? parseInt(arg.value) : arg.value, arg.type === 'Array' ? types[arg.type](types[arg.subType]) : types[arg.type]))), fcl.proposer(proposer), fcl.authorizations(authorizations), fcl.payer(payer), fcl.limit(1000)]);\n  } catch (e) {\n    try {\n      if (keyHash) {\n        await blockchain_1.flowBroadcastTx('', undefined, keyHash ? parseInt(process.env[keyHash] || '0') : undefined);\n        delete process.env[keyHash];\n      } // eslint-disable-next-line no-empty\n\n    } catch (_) {}\n\n    throw e;\n  }\n\n  const {\n    transactionId\n  } = response;\n\n  try {\n    const {\n      error,\n      events\n    } = await fcl.tx(response).onceSealed();\n    return {\n      id: transactionId,\n      error,\n      events\n    };\n  } finally {\n    try {\n      if (keyHash) {\n        await blockchain_1.flowBroadcastTx(transactionId, undefined, keyHash ? parseInt(process.env[keyHash] || '0') : undefined);\n        delete process.env[keyHash];\n      } // eslint-disable-next-line no-empty\n\n    } catch (_) {}\n  }\n};\n\nconst sendScript = async (testnet, code, args) => {\n  fcl.config().put('accessNode.api', testnet ? 'https://access-testnet.onflow.org' : 'https://access-mainnet-beta.onflow.org');\n  const response = await fcl.send([fcl.script(code), fcl.args(args.map(arg => fcl.arg(arg.type === 'UInt64' ? parseInt(arg.value) : arg.value, types[arg.type])))]);\n  return fcl.decode(response);\n};\n\nconst flowSignKMSTransaction = async (tx, privateKeys, testnet) => {\n  if (tx.chain !== model_1.Currency.FLOW) {\n    throw Error('Unsupported chain.');\n  }\n\n  const {\n    type,\n    body\n  } = JSON.parse(tx.serializedTransaction);\n\n  switch (type) {\n    case FlowTxType.CREATE_ACCOUNT:\n      return await exports.flowCreateAccountFromPublicKey(testnet, body.publicKey, body.account, privateKeys[0]);\n\n    case FlowTxType.ADD_PK_TO_ACCOUNT:\n      return await exports.flowAddPublicKeyToAccount(testnet, body.publicKey, body.account, privateKeys[0]);\n\n    case FlowTxType.TRANSFER:\n      return await exports.flowSendTransaction(testnet, Object.assign(Object.assign({}, body), {\n        privateKey: privateKeys[0]\n      }));\n\n    case FlowTxType.TRANSFER_NFT:\n      return await exports.sendFlowNftTransferToken(testnet, Object.assign(Object.assign({}, body), {\n        privateKey: privateKeys[0]\n      }));\n\n    case FlowTxType.MINT_NFT:\n      return await exports.sendFlowNftMintToken(testnet, Object.assign(Object.assign({}, body), {\n        privateKey: privateKeys[0]\n      }));\n\n    case FlowTxType.MINT_MULTIPLE_NFT:\n      return await exports.sendFlowNftMintMultipleToken(testnet, Object.assign(Object.assign({}, body), {\n        privateKey: privateKeys[0]\n      }));\n\n    case FlowTxType.BURN_NFT:\n      return await exports.sendFlowNftBurnToken(testnet, Object.assign(Object.assign({}, body), {\n        privateKey: privateKeys[0]\n      }));\n\n    default:\n      return await exports.flowSendCustomTransaction(testnet, Object.assign(Object.assign({}, body), {\n        privateKey: privateKeys[0]\n      }));\n  }\n};\n\nexports.flowSignKMSTransaction = flowSignKMSTransaction;\n/**\n * Create account on the FLOW network. It automatically creates 100 0-weight proposal keys, which are managed by Tatum API - index 1-100.\n * Main 1000 weight authorizer key is stored as a first one on index 0.\n * @param testnet if we use testnet or not\n * @param publicKey public key to assign to address as authorizer (1000 weight) key\n * @param signerAddress address of the authorizer creator of the address on the chain\n * @param signerPrivateKey private key of the authorizer creator of the address on the chain\n * @param proposer function to obtain proposer key from\n * @param payer function to obtain payer key from\n */\n\nconst flowCreateAccountFromPublicKey = async (testnet, publicKey, signerAddress, signerPrivateKey, proposer, payer) => {\n  var _a;\n\n  const code = flowTransaction_1.prepareCreateAccountWithFUSDFromPublicKeyTxTemplate(testnet);\n  const encodedPublicKey = util_encode_key_1.encodeKey(publicKey, util_encode_key_1.ECDSA_secp256k1, util_encode_key_1.SHA3_256, 1000);\n  const args = [{\n    type: 'String',\n    value: encodedPublicKey\n  }];\n  const auth = exports.getFlowSigner(signerPrivateKey, signerAddress).signer;\n  const {\n    signer: proposalSigner,\n    keyHash\n  } = proposer ? proposer(false) : exports.getFlowApiSigner(false);\n  const result = await sendTransaction(testnet, {\n    code,\n    args,\n    proposer: proposer ? proposer(false) : proposalSigner,\n    authorizations: [auth],\n    payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,\n    keyHash\n  });\n\n  if (result.error) {\n    throw new Error(result.error);\n  }\n\n  return {\n    txId: result.id,\n    address: (_a = result.events.find(e => e.type === 'flow.AccountCreated')) === null || _a === void 0 ? void 0 : _a.data.address\n  };\n};\n\nexports.flowCreateAccountFromPublicKey = flowCreateAccountFromPublicKey;\n/**\n * Add public key to existing blockchain address with defined weight\n * @param testnet\n * @param publicKey key to add\n * @param signerAddress address of the authorizer key\n * @param signerPrivateKey key of the authorize key\n * @param weight defaults to 1000 - weight of the key\n * @param proposer function to obtain proposer key from\n * @param payer function to obtain payer key from\n */\n\nconst flowAddPublicKeyToAccount = async function (testnet, publicKey, signerAddress, signerPrivateKey) {\n  let weight = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let proposer = arguments.length > 5 ? arguments[5] : undefined;\n  let payer = arguments.length > 6 ? arguments[6] : undefined;\n  const code = flowTransaction_1.prepareAddPublicKeyToAccountTxTemplate();\n  const encodedPublicKey = util_encode_key_1.encodeKey(publicKey, util_encode_key_1.ECDSA_secp256k1, util_encode_key_1.SHA3_256, weight);\n  const args = [{\n    type: 'String',\n    value: encodedPublicKey\n  }];\n  const auth = exports.getFlowSigner(signerPrivateKey, signerAddress).signer;\n  const {\n    signer: proposalSigner,\n    keyHash\n  } = proposer ? proposer(false) : exports.getFlowApiSigner(false);\n  const result = await sendTransaction(testnet, {\n    code,\n    args,\n    proposer: proposer ? proposer(false) : proposalSigner,\n    authorizations: [auth],\n    keyHash,\n    payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer\n  });\n\n  if (result.error) {\n    throw new Error(result.error);\n  }\n\n  return {\n    txId: result.id,\n    address: result.events[0].data.address\n  };\n};\n\nexports.flowAddPublicKeyToAccount = flowAddPublicKeyToAccount;\n\nconst getFlowNftMetadata = async (testnet, account, id, tokenType) => {\n  const code = flowTransaction_1.metadataFlowNftTokenScript(testnet);\n  const args = [{\n    type: 'Address',\n    value: account\n  }, {\n    type: 'UInt64',\n    value: id\n  }, {\n    type: 'String',\n    value: tokenType\n  }];\n  return await sendScript(testnet, code, args);\n};\n\nexports.getFlowNftMetadata = getFlowNftMetadata;\n\nconst getFlowNftTokenByAddress = async (testnet, account, tokenType) => {\n  const code = flowTransaction_1.tokenByAddressFlowNftTokenScript(testnet);\n  const args = [{\n    type: 'Address',\n    value: account\n  }, {\n    type: 'String',\n    value: tokenType\n  }];\n  return await sendScript(testnet, code, args);\n};\n\nexports.getFlowNftTokenByAddress = getFlowNftTokenByAddress;\n/**\n * Send Flow NFT mint token transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param proposer function to obtain proposer key from\n * @param payer function to obtain payer key from\n * @returns txId id of the transaction in the blockchain\n */\n\nconst sendFlowNftMintToken = async (testnet, body, proposer, payer) => {\n  var _a;\n\n  await tatum_1.validateBody(body, model_1.FlowMintNft);\n  const code = flowTransaction_1.mintFlowNftTokenTxTemplate(testnet);\n  const {\n    url,\n    contractAddress: tokenType,\n    to,\n    mnemonic,\n    index,\n    account,\n    privateKey\n  } = body;\n  const args = [{\n    type: 'Address',\n    value: to\n  }, {\n    type: 'String',\n    value: url\n  }, {\n    type: 'String',\n    value: tokenType\n  }];\n  const pk = mnemonic && index && index >= 0 ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, mnemonic, index) : privateKey;\n  const auth = exports.getFlowSigner(pk, account).signer;\n  const {\n    signer: proposalSigner,\n    keyHash\n  } = proposer ? proposer(false) : exports.getFlowApiSigner(false);\n  const result = await sendTransaction(testnet, {\n    code,\n    args,\n    proposer: proposer ? proposer(false) : proposalSigner,\n    authorizations: [auth],\n    keyHash,\n    payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer\n  });\n\n  if (result.error) {\n    throw new Error(result.error);\n  }\n\n  return {\n    txId: result.id,\n    tokenId: `${(_a = result.events.find(e => e.type.includes('TatumMultiNFT.Minted'))) === null || _a === void 0 ? void 0 : _a.data.id}`\n  };\n};\n\nexports.sendFlowNftMintToken = sendFlowNftMintToken;\n/**\n * Send Flow NFT mint multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param proposer function to obtain proposer key from\n * @param payer function to obtain payer key from\n * @returns txId id of the transaction in the blockchain\n */\n\nconst sendFlowNftMintMultipleToken = async (testnet, body, proposer, payer) => {\n  await tatum_1.validateBody(body, model_1.FlowMintMultipleNft);\n  const code = flowTransaction_1.mintFlowMultipleNftTokenTxTemplate(testnet);\n  const {\n    url,\n    contractAddress: tokenType,\n    to,\n    mnemonic,\n    index,\n    account,\n    privateKey\n  } = body;\n  const args = [{\n    type: 'Array',\n    subType: 'Address',\n    value: to\n  }, {\n    type: 'Array',\n    subType: 'String',\n    value: url\n  }, {\n    type: 'String',\n    value: tokenType\n  }];\n  const pk = mnemonic && index && index >= 0 ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, mnemonic, index) : privateKey;\n  const {\n    signer: proposalSigner,\n    keyHash\n  } = proposer ? proposer(false) : exports.getFlowApiSigner(false);\n  const auth = exports.getFlowSigner(pk, account).signer;\n  const result = await sendTransaction(testnet, {\n    code,\n    args,\n    proposer: proposer ? proposer(false) : proposalSigner,\n    authorizations: [auth],\n    payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,\n    keyHash\n  });\n\n  if (result.error) {\n    throw new Error(result.error);\n  }\n\n  return {\n    txId: result.id,\n    tokenId: result.events.filter(e => e.type.includes('TatumMultiNFT.Minted')).map(e => e.data.id)\n  };\n};\n\nexports.sendFlowNftMintMultipleToken = sendFlowNftMintMultipleToken;\n/**\n * Send Flow NFT transfer token transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param proposer function to obtain proposer key from\n * @param payer function to obtain payer key from\n * @returns {txId: string, events: any[]} id of the transaction in the blockchain and events this tx produced\n */\n\nconst sendFlowNftTransferToken = async (testnet, body, proposer, payer) => {\n  await tatum_1.validateBody(body, model_1.FlowTransferNft);\n  const code = flowTransaction_1.transferFlowNftTokenTxTemplate(testnet);\n  const {\n    tokenId,\n    to,\n    mnemonic,\n    index,\n    account,\n    privateKey\n  } = body;\n  const args = [{\n    type: 'Address',\n    value: to\n  }, {\n    type: 'UInt64',\n    value: tokenId\n  }];\n  const pk = mnemonic && index && index >= 0 ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, mnemonic, index) : privateKey;\n  const {\n    signer: proposalSigner,\n    keyHash\n  } = proposer ? proposer(false) : exports.getFlowApiSigner(false);\n  const auth = exports.getFlowSigner(pk, account).signer;\n  const result = await sendTransaction(testnet, {\n    code,\n    args,\n    proposer: proposer ? proposer(false) : proposalSigner,\n    authorizations: [auth],\n    payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,\n    keyHash\n  });\n\n  if (result.error) {\n    throw new Error(result.error);\n  }\n\n  return {\n    txId: result.id\n  };\n};\n\nexports.sendFlowNftTransferToken = sendFlowNftTransferToken;\n/**\n * Send Flow NFT burn token transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param proposer function to obtain proposer key from\n * @param payer function to obtain payer key from\n * @returns txId id of the transaction in the blockchain\n */\n\nconst sendFlowNftBurnToken = async (testnet, body, proposer, payer) => {\n  await tatum_1.validateBody(body, model_1.FlowBurnNft);\n  const code = flowTransaction_1.burnFlowNftTokenTxTemplate(testnet);\n  const {\n    tokenId,\n    contractAddress: tokenType,\n    mnemonic,\n    index,\n    account,\n    privateKey\n  } = body;\n  const args = [{\n    type: 'UInt64',\n    value: tokenId\n  }, {\n    type: 'String',\n    value: tokenType\n  }];\n  const pk = mnemonic && index && index >= 0 ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, mnemonic, index) : privateKey;\n  const {\n    signer: proposalSigner,\n    keyHash\n  } = proposer ? proposer(false) : exports.getFlowApiSigner(false);\n  const auth = exports.getFlowSigner(pk, account).signer;\n  const result = await sendTransaction(testnet, {\n    code,\n    args,\n    proposer: proposer ? proposer(false) : proposalSigner,\n    authorizations: [auth],\n    payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,\n    keyHash\n  });\n\n  if (result.error) {\n    throw new Error(result.error);\n  }\n\n  return {\n    txId: result.id\n  };\n};\n\nexports.sendFlowNftBurnToken = sendFlowNftBurnToken;\n/**\n * Send custom transaction to the FLOW network\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param proposer function to obtain proposer key from\n * @param payer function to obtain payer key from\n * @returns txId id of the transaction in the blockchain\n */\n\nconst flowSendCustomTransaction = async (testnet, body, proposer, payer) => {\n  await tatum_1.validateBody(body, model_1.TransferFlowCustomTx);\n  const pk = body.privateKey || (await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, body.mnemonic, body.index));\n  const auth = exports.getFlowSigner(pk, body.account).signer;\n  const {\n    signer: proposalSigner,\n    keyHash\n  } = proposer ? proposer(false) : exports.getFlowApiSigner(false);\n  const result = await sendTransaction(testnet, {\n    code: body.transaction,\n    args: body.args,\n    proposer: proposer ? proposer(false) : proposalSigner,\n    authorizations: [auth],\n    keyHash,\n    payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer\n  });\n\n  if (result.error) {\n    throw new Error(result.error);\n  }\n\n  return {\n    txId: result.id,\n    events: result.events\n  };\n};\n\nexports.flowSendCustomTransaction = flowSendCustomTransaction;\n/**\n * Send FLOW or FUSD from account to account.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param proposer function to obtain proposer key from\n * @param payer function to obtain payer key from\n * @returns txId id of the transaction in the blockchain\n */\n\nconst flowSendTransaction = async (testnet, body, proposer, payer) => {\n  await tatum_1.validateBody(body, model_1.TransferFlow);\n  let tokenAddress;\n  let tokenName;\n  let tokenStorage;\n\n  if (body.currency === model_1.Currency.FLOW) {\n    tokenAddress = testnet ? constants_1.FLOW_TESTNET_ADDRESSES.FlowToken : constants_1.FLOW_MAINNET_ADDRESSES.FlowToken;\n    tokenName = 'FlowToken';\n    tokenStorage = 'flowToken';\n  } else {\n    tokenAddress = testnet ? constants_1.FLOW_TESTNET_ADDRESSES.FUSD : constants_1.FLOW_MAINNET_ADDRESSES.FUSD;\n    tokenName = 'FUSD';\n    tokenStorage = 'fusd';\n  }\n\n  const code = flowTransaction_1.prepareTransferFlowTxTemplate(testnet, tokenAddress, tokenName, tokenStorage);\n  const args = [{\n    value: parseFloat(body.amount).toFixed(8),\n    type: 'UFix64'\n  }, {\n    value: body.to,\n    type: 'Address'\n  }];\n  const pk = body.privateKey || (await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, body.mnemonic, body.index));\n  const {\n    signer: proposalSigner,\n    keyHash\n  } = proposer ? proposer(false) : exports.getFlowApiSigner(false);\n  const auth = exports.getFlowSigner(pk, body.account).signer;\n  const result = await sendTransaction(testnet, {\n    code,\n    args,\n    proposer: proposer ? proposer(false) : proposalSigner,\n    authorizations: [auth],\n    payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,\n    keyHash\n  });\n\n  if (result.error) {\n    throw new Error(result.error);\n  }\n\n  return {\n    txId: result.id\n  };\n};\n\nexports.flowSendTransaction = flowSendTransaction;","map":{"version":3,"mappings":"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","names":["FlowTxType","exports","flowSign","pk","msg","keyPair","elliptic","ec","keyFromPrivate","signature","sign","sha3_1","update","digest","r","toArrayLike","Buffer","s","concat","toString","getFlowSigner","address","keyId","signer","account","tempId","addr","fcl","sansPrefix","Number","signingFunction","data","withPrefix","from","message","getFlowApiSigner","isPayer","keyHash","Date","now","blockchain_1","process","env","sendTransaction","testnet","code","args","proposer","authorizations","payer","config","put","response","send","transaction","map","arg","type","parseInt","value","types","subType","limit","e","undefined","_","transactionId","error","events","tx","onceSealed","id","sendScript","script","decode","flowSignKMSTransaction","privateKeys","chain","model_1","FLOW","Error","body","JSON","parse","serializedTransaction","CREATE_ACCOUNT","publicKey","ADD_PK_TO_ACCOUNT","TRANSFER","Object","privateKey","TRANSFER_NFT","MINT_NFT","MINT_MULTIPLE_NFT","BURN_NFT","flowCreateAccountFromPublicKey","signerAddress","signerPrivateKey","flowTransaction_1","encodedPublicKey","util_encode_key_1","auth","proposalSigner","result","txId","find","_a","flowAddPublicKeyToAccount","weight","getFlowNftMetadata","tokenType","getFlowNftTokenByAddress","sendFlowNftMintToken","tatum_1","url","contractAddress","to","mnemonic","index","wallet_1","tokenId","includes","sendFlowNftMintMultipleToken","filter","sendFlowNftTransferToken","sendFlowNftBurnToken","flowSendCustomTransaction","flowSendTransaction","tokenAddress","tokenName","tokenStorage","currency","constants_1","FlowToken","FUSD","parseFloat","amount","toFixed"],"sourceRoot":"","sources":["../../../src/transaction/flow.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}