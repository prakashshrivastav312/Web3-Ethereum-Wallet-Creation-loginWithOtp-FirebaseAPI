{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = __importStar(require(\"./utils\"));\n\nconst ValidationError = utils.common.errors.ValidationError;\nconst claimFlags = utils.common.txFlags.PaymentChannelClaim;\n\nconst common_1 = require(\"../common\");\n\nfunction createPaymentChannelClaimTransaction(account, claim) {\n  const txJSON = {\n    Account: account,\n    TransactionType: 'PaymentChannelClaim',\n    Channel: claim.channel,\n    Flags: 0\n  };\n\n  if (claim.balance != null) {\n    txJSON.Balance = common_1.xrpToDrops(claim.balance);\n  }\n\n  if (claim.amount != null) {\n    txJSON.Amount = common_1.xrpToDrops(claim.amount);\n  }\n\n  if (Boolean(claim.signature) !== Boolean(claim.publicKey)) {\n    throw new ValidationError('\"signature\" and \"publicKey\" fields on' + ' PaymentChannelClaim must only be specified together.');\n  }\n\n  if (claim.signature != null) {\n    txJSON.Signature = claim.signature;\n  }\n\n  if (claim.publicKey != null) {\n    txJSON.PublicKey = claim.publicKey;\n  }\n\n  if (claim.renew === true && claim.close === true) {\n    throw new ValidationError('\"renew\" and \"close\" flags on PaymentChannelClaim' + ' are mutually exclusive');\n  }\n\n  if (claim.renew === true) {\n    txJSON.Flags |= claimFlags.Renew;\n  }\n\n  if (claim.close === true) {\n    txJSON.Flags |= claimFlags.Close;\n  }\n\n  return txJSON;\n}\n\nfunction preparePaymentChannelClaim(address, paymentChannelClaim) {\n  let instructions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  try {\n    common_1.validate.preparePaymentChannelClaim({\n      address,\n      paymentChannelClaim,\n      instructions\n    });\n    const txJSON = createPaymentChannelClaimTransaction(address, paymentChannelClaim);\n    return utils.prepareTransaction(txJSON, this, instructions);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\nexports.default = preparePaymentChannelClaim;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA,MAAMA,eAAe,GAAGC,KAAK,CAACC,MAAN,CAAaC,MAAb,CAAoBH,eAA5C;AACA,MAAMI,UAAU,GAAGH,KAAK,CAACC,MAAN,CAAaG,OAAb,CAAqBC,mBAAxC;;AACA;;AAcA,SAASC,oCAAT,CACEC,OADF,EAEEC,KAFF,EAE4B;EAE1B,MAAMC,MAAM,GAAoB;IAC9BC,OAAO,EAAEH,OADqB;IAE9BI,eAAe,EAAE,qBAFa;IAG9BC,OAAO,EAAEJ,KAAK,CAACK,OAHe;IAI9BC,KAAK,EAAE;EAJuB,CAAhC;;EAOA,IAAIN,KAAK,CAACO,OAAN,IAAiB,IAArB,EAA2B;IACzBN,MAAM,CAACO,OAAP,GAAiBC,oBAAWT,KAAK,CAACO,OAAjB,CAAjB;EACD;;EACD,IAAIP,KAAK,CAACU,MAAN,IAAgB,IAApB,EAA0B;IACxBT,MAAM,CAACU,MAAP,GAAgBF,oBAAWT,KAAK,CAACU,MAAjB,CAAhB;EACD;;EAED,IAAIE,OAAO,CAACZ,KAAK,CAACa,SAAP,CAAP,KAA6BD,OAAO,CAACZ,KAAK,CAACc,SAAP,CAAxC,EAA2D;IACzD,MAAM,IAAIvB,eAAJ,CACJ,0CACE,uDAFE,CAAN;EAID;;EAED,IAAIS,KAAK,CAACa,SAAN,IAAmB,IAAvB,EAA6B;IAC3BZ,MAAM,CAACc,SAAP,GAAmBf,KAAK,CAACa,SAAzB;EACD;;EACD,IAAIb,KAAK,CAACc,SAAN,IAAmB,IAAvB,EAA6B;IAC3Bb,MAAM,CAACe,SAAP,GAAmBhB,KAAK,CAACc,SAAzB;EACD;;EAED,IAAId,KAAK,CAACiB,KAAN,KAAgB,IAAhB,IAAwBjB,KAAK,CAACkB,KAAN,KAAgB,IAA5C,EAAkD;IAChD,MAAM,IAAI3B,eAAJ,CACJ,qDACE,yBAFE,CAAN;EAID;;EAED,IAAIS,KAAK,CAACiB,KAAN,KAAgB,IAApB,EAA0B;IACxBhB,MAAM,CAACK,KAAP,IAAgBX,UAAU,CAACwB,KAA3B;EACD;;EACD,IAAInB,KAAK,CAACkB,KAAN,KAAgB,IAApB,EAA0B;IACxBjB,MAAM,CAACK,KAAP,IAAgBX,UAAU,CAACyB,KAA3B;EACD;;EAED,OAAOnB,MAAP;AACD;;AAED,SAASoB,0BAAT,CAEEC,OAFF,EAGEC,mBAHF,EAIiC;EAAA,IAA/BC,YAA+B,uEAAF,EAAE;;EAE/B,IAAI;IACFf,kBAASY,0BAAT,CAAoC;MAClCC,OADkC;MAElCC,mBAFkC;MAGlCC;IAHkC,CAApC;IAKA,MAAMvB,MAAM,GAAGH,oCAAoC,CACjDwB,OADiD,EAEjDC,mBAFiD,CAAnD;IAIA,OAAO/B,KAAK,CAACiC,kBAAN,CAAyBxB,MAAzB,EAAiC,IAAjC,EAAuCuB,YAAvC,CAAP;EACD,CAXD,CAWE,OAAOE,CAAP,EAAU;IACV,OAAOC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAAP;EACD;AACF;;AAEDG,kBAAeR,0BAAf","names":["ValidationError","utils","common","errors","claimFlags","txFlags","PaymentChannelClaim","createPaymentChannelClaimTransaction","account","claim","txJSON","Account","TransactionType","Channel","channel","Flags","balance","Balance","common_1","amount","Amount","Boolean","signature","publicKey","Signature","PublicKey","renew","close","Renew","Close","preparePaymentChannelClaim","address","paymentChannelClaim","instructions","prepareTransaction","e","Promise","reject","exports"],"sourceRoot":"","sources":["../../../src/transaction/payment-channel-claim.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}