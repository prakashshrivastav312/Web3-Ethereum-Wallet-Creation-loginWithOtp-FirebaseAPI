{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = __importStar(require(\"./utils\"));\n\nconst common_1 = require(\"../common\");\n\nfunction getTrustlineBalanceAmount(trustline) {\n  return {\n    currency: trustline.specification.currency,\n    counterparty: trustline.specification.counterparty,\n    value: trustline.state.balance\n  };\n}\n\nfunction formatBalances(options, balances) {\n  const result = balances.trustlines.map(getTrustlineBalanceAmount);\n\n  if (!(options.counterparty || options.currency && options.currency !== 'XRP')) {\n    const xrpBalance = {\n      currency: 'XRP',\n      value: balances.xrp\n    };\n    result.unshift(xrpBalance);\n  }\n\n  if (options.limit && result.length > options.limit) {\n    const toRemove = result.length - options.limit;\n    result.splice(-toRemove, toRemove);\n  }\n\n  return result;\n}\n\nfunction getLedgerVersionHelper(connection, optionValue) {\n  if (optionValue != null && optionValue !== null) {\n    return Promise.resolve(optionValue);\n  }\n\n  return connection.getLedgerVersion();\n}\n\nfunction getBalances(address) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  common_1.validate.getTrustlines({\n    address,\n    options\n  });\n  address = common_1.ensureClassicAddress(address);\n  return Promise.all([getLedgerVersionHelper(this.connection, options.ledgerVersion).then(ledgerVersion => utils.getXRPBalance(this.connection, address, ledgerVersion)), this.getTrustlines(address, options)]).then(results => formatBalances(options, {\n    xrp: results[0],\n    trustlines: results[1]\n  }));\n}\n\nexports.default = getBalances;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAcA,SAASA,yBAAT,CAAmCC,SAAnC,EAAgE;EAC9D,OAAO;IACLC,QAAQ,EAAED,SAAS,CAACE,aAAV,CAAwBD,QAD7B;IAELE,YAAY,EAAEH,SAAS,CAACE,aAAV,CAAwBC,YAFjC;IAGLC,KAAK,EAAEJ,SAAS,CAACK,KAAV,CAAgBC;EAHlB,CAAP;AAKD;;AAED,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,QAAjC,EAAyC;EACvC,MAAMC,MAAM,GAAGD,QAAQ,CAACE,UAAT,CAAoBC,GAApB,CAAwBb,yBAAxB,CAAf;;EACA,IACE,EAAES,OAAO,CAACL,YAAR,IAAyBK,OAAO,CAACP,QAAR,IAAoBO,OAAO,CAACP,QAAR,KAAqB,KAApE,CADF,EAEE;IACA,MAAMY,UAAU,GAAG;MACjBZ,QAAQ,EAAE,KADO;MAEjBG,KAAK,EAAEK,QAAQ,CAACK;IAFC,CAAnB;IAIAJ,MAAM,CAACK,OAAP,CAAeF,UAAf;EACD;;EACD,IAAIL,OAAO,CAACQ,KAAR,IAAiBN,MAAM,CAACO,MAAP,GAAgBT,OAAO,CAACQ,KAA7C,EAAoD;IAClD,MAAME,QAAQ,GAAGR,MAAM,CAACO,MAAP,GAAgBT,OAAO,CAACQ,KAAzC;IACAN,MAAM,CAACS,MAAP,CAAc,CAACD,QAAf,EAAyBA,QAAzB;EACD;;EACD,OAAOR,MAAP;AACD;;AAED,SAASU,sBAAT,CACEC,UADF,EAEEC,WAFF,EAEsB;EAEpB,IAAIA,WAAW,IAAI,IAAf,IAAuBA,WAAW,KAAK,IAA3C,EAAiD;IAC/C,OAAOC,OAAO,CAACC,OAAR,CAAgBF,WAAhB,CAAP;EACD;;EACD,OAAOD,UAAU,CAACI,gBAAX,EAAP;AACD;;AAED,SAASC,WAAT,CAEEC,OAFF,EAGoC;EAAA,IAAlCnB,OAAkC,uEAAF,EAAE;EAElCoB,kBAASC,aAAT,CAAuB;IAACF,OAAD;IAAUnB;EAAV,CAAvB;EAOAmB,OAAO,GAAGC,8BAAqBD,OAArB,CAAV;EAEA,OAAOJ,OAAO,CAACO,GAAR,CAAY,CACjBV,sBAAsB,CACpB,KAAKC,UADe,EAEpBb,OAAO,CAACuB,aAFY,CAAtB,CAGEC,IAHF,CAGQD,aAAD,IACLE,KAAK,CAACC,aAAN,CAAoB,KAAKb,UAAzB,EAAqCM,OAArC,EAA8CI,aAA9C,CAJF,CADiB,EAOjB,KAAKF,aAAL,CAAmBF,OAAnB,EAA4BnB,OAA5B,CAPiB,CAAZ,EAQJwB,IARI,CAQEG,OAAD,IACN5B,cAAc,CAACC,OAAD,EAAU;IAACM,GAAG,EAAEqB,OAAO,CAAC,CAAD,CAAb;IAAkBxB,UAAU,EAAEwB,OAAO,CAAC,CAAD;EAArC,CAAV,CATT,CAAP;AAWD;;AAEDC,kBAAeV,WAAf","names":["getTrustlineBalanceAmount","trustline","currency","specification","counterparty","value","state","balance","formatBalances","options","balances","result","trustlines","map","xrpBalance","xrp","unshift","limit","length","toRemove","splice","getLedgerVersionHelper","connection","optionValue","Promise","resolve","getLedgerVersion","getBalances","address","common_1","getTrustlines","all","ledgerVersion","then","utils","getXRPBalance","results","exports"],"sourceRoot":"","sources":["../../../src/ledger/balances.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}