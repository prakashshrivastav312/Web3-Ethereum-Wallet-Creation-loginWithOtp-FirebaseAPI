{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst common_1 = require(\"../common\");\n\nconst utils_1 = require(\"./utils\");\n\nfunction formatBalanceSheet(balanceSheet) {\n  const result = {};\n\n  if (balanceSheet.balances != null) {\n    result.balances = [];\n    Object.entries(balanceSheet.balances).forEach(entry => {\n      const [counterparty, balances] = entry;\n      balances.forEach(balance => {\n        result.balances.push(Object.assign({\n          counterparty\n        }, balance));\n      });\n    });\n  }\n\n  if (balanceSheet.assets != null) {\n    result.assets = [];\n    Object.entries(balanceSheet.assets).forEach(_ref => {\n      let [counterparty, assets] = _ref;\n      assets.forEach(balance => {\n        result.assets.push(Object.assign({\n          counterparty\n        }, balance));\n      });\n    });\n  }\n\n  if (balanceSheet.obligations != null) {\n    result.obligations = Object.entries(balanceSheet.obligations).map(_ref2 => {\n      let [currency, value] = _ref2;\n      return {\n        currency,\n        value\n      };\n    });\n  }\n\n  return result;\n}\n\nfunction getBalanceSheet(address) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return __awaiter(this, void 0, void 0, function* () {\n    common_1.validate.getBalanceSheet({\n      address,\n      options\n    });\n    options = yield utils_1.ensureLedgerVersion.call(this, options);\n    const response = yield this.request('gateway_balances', {\n      account: address,\n      strict: true,\n      hotwallet: options.excludeAddresses,\n      ledger_index: options.ledgerVersion\n    });\n    return formatBalanceSheet(response);\n  });\n}\n\nexports.default = getBalanceSheet;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AA0BA,SAASA,kBAAT,CAA4BC,YAA5B,EAAsD;EACpD,MAAMC,MAAM,GAAoB,EAAhC;;EAEA,IAAID,YAAY,CAACE,QAAb,IAAyB,IAA7B,EAAmC;IACjCD,MAAM,CAACC,QAAP,GAAkB,EAAlB;IACAC,MAAM,CAACC,OAAP,CAAeJ,YAAY,CAACE,QAA5B,EAAsCG,OAAtC,CAA8CC,KAAK,IAAG;MACpD,MAAM,CAACC,YAAD,EAAeL,QAAf,IAA2BI,KAAjC;MACAJ,QAAQ,CAACG,OAAT,CAAkBG,OAAD,IAAY;QAC3BP,MAAM,CAACC,QAAP,CAAgBO,IAAhB,CAAqBN,MAAM,CAACO,MAAP,CAAc;UAACH;QAAD,CAAd,EAA8BC,OAA9B,CAArB;MACD,CAFD;IAGD,CALD;EAMD;;EACD,IAAIR,YAAY,CAACW,MAAb,IAAuB,IAA3B,EAAiC;IAC/BV,MAAM,CAACU,MAAP,GAAgB,EAAhB;IACAR,MAAM,CAACC,OAAP,CAAeJ,YAAY,CAACW,MAA5B,EAAoCN,OAApC,CAA4C,QAA2B;MAAA,IAA1B,CAACE,YAAD,EAAeI,MAAf,CAA0B;MACrEA,MAAM,CAACN,OAAP,CAAgBG,OAAD,IAAY;QACzBP,MAAM,CAACU,MAAP,CAAcF,IAAd,CAAmBN,MAAM,CAACO,MAAP,CAAc;UAACH;QAAD,CAAd,EAA8BC,OAA9B,CAAnB;MACD,CAFD;IAGD,CAJD;EAKD;;EACD,IAAIR,YAAY,CAACY,WAAb,IAA4B,IAAhC,EAAsC;IACpCX,MAAM,CAACW,WAAP,GAAqBT,MAAM,CAACC,OAAP,CAAeJ,YAAY,CAACY,WAA5B,EAAoEC,GAApE,CACnB;MAAA,IAAC,CAACC,QAAD,EAAWC,KAAX,CAAD;MAAA,OAAwB;QAACD,QAAD;QAAWC;MAAX,CAAxB;IAAA,CADmB,CAArB;EAGD;;EAED,OAAOd,MAAP;AACD;;AAED,SAAee,eAAf,CAEEC,OAFF,EAGmC;EAAA,IAAjCC,OAAiC,uEAAF,EAAE;;IAGjCC,kBAASH,eAAT,CAAyB;MAACC,OAAD;MAAUC;IAAV,CAAzB;IACAA,OAAO,GAAG,MAAME,4BAAoBC,IAApB,CAAyB,IAAzB,EAA+BH,OAA/B,CAAhB;IAEA,MAAMI,QAAQ,GAAG,MAAM,KAAKC,OAAL,CAAa,kBAAb,EAAiC;MACtDC,OAAO,EAAEP,OAD6C;MAEtDQ,MAAM,EAAE,IAF8C;MAGtDC,SAAS,EAAER,OAAO,CAACS,gBAHmC;MAItDC,YAAY,EAAEV,OAAO,CAACW;IAJgC,CAAjC,CAAvB;IAOA,OAAO9B,kBAAkB,CAACuB,QAAD,CAAzB;EACD;AAAA;;AAEDQ,kBAAed,eAAf","names":["formatBalanceSheet","balanceSheet","result","balances","Object","entries","forEach","entry","counterparty","balance","push","assign","assets","obligations","map","currency","value","getBalanceSheet","address","options","common_1","utils_1","call","response","request","account","strict","hotwallet","excludeAddresses","ledger_index","ledgerVersion","exports"],"sourceRoot":"","sources":["../../../src/ledger/balance-sheet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}