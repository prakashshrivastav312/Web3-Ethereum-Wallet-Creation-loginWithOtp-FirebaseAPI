{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StructBinaryCodec = void 0;\n\nconst typesystem_1 = require(\"../typesystem\");\n\nclass StructBinaryCodec {\n  constructor(binaryCodec) {\n    this.binaryCodec = binaryCodec;\n  }\n\n  decodeTopLevel(buffer, type) {\n    let [decoded, length] = this.decodeNested(buffer, type);\n    return decoded;\n  }\n\n  decodeNested(buffer, type) {\n    let originalBuffer = buffer;\n    let offset = 0;\n    let fieldDefinitions = type.fields;\n    let fields = [];\n\n    for (const fieldDefinition of fieldDefinitions) {\n      let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, fieldDefinition.type);\n      let field = new typesystem_1.StructField(decoded, fieldDefinition.name);\n      fields.push(field);\n      offset += decodedLength;\n      buffer = originalBuffer.slice(offset);\n    }\n\n    let struct = new typesystem_1.Struct(type, fields);\n    return [struct, offset];\n  }\n\n  encodeNested(struct) {\n    let buffers = [];\n    let fields = struct.getFields();\n\n    for (const field of fields) {\n      let fieldBuffer = this.binaryCodec.encodeNested(field.value);\n      buffers.push(fieldBuffer);\n    }\n\n    let buffer = Buffer.concat(buffers);\n    return buffer;\n  }\n\n  encodeTopLevel(struct) {\n    return this.encodeNested(struct);\n  }\n\n}\n\nexports.StructBinaryCodec = StructBinaryCodec;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAGA,MAAaA,iBAAb,CAA8B;EAG1BC,YAAYC,WAAZ,EAAoC;IAChC,KAAKA,WAAL,GAAmBA,WAAnB;EACH;;EAEDC,cAAc,CAACC,MAAD,EAAiBC,IAAjB,EAAiC;IAC3C,IAAI,CAACC,OAAD,EAAUC,MAAV,IAAoB,KAAKC,YAAL,CAAkBJ,MAAlB,EAA0BC,IAA1B,CAAxB;IACA,OAAOC,OAAP;EACH;;EAEDE,YAAY,CAACJ,MAAD,EAAiBC,IAAjB,EAAiC;IACzC,IAAII,cAAc,GAAGL,MAArB;IACA,IAAIM,MAAM,GAAG,CAAb;IAEA,IAAIC,gBAAgB,GAAGN,IAAI,CAACO,MAA5B;IACA,IAAIA,MAAM,GAAkB,EAA5B;;IAEA,KAAK,MAAMC,eAAX,IAA8BF,gBAA9B,EAAgD;MAC5C,IAAI,CAACL,OAAD,EAAUQ,aAAV,IAA2B,KAAKZ,WAAL,CAAiBM,YAAjB,CAA8BJ,MAA9B,EAAsCS,eAAe,CAACR,IAAtD,CAA/B;MACA,IAAIU,KAAK,GAAG,IAAIC,wBAAJ,CAAgBV,OAAhB,EAAyBO,eAAe,CAACI,IAAzC,CAAZ;MACAL,MAAM,CAACM,IAAP,CAAYH,KAAZ;MACAL,MAAM,IAAII,aAAV;MACAV,MAAM,GAAGK,cAAc,CAACU,KAAf,CAAqBT,MAArB,CAAT;IACH;;IAED,IAAIU,MAAM,GAAG,IAAIJ,mBAAJ,CAAWX,IAAX,EAAiBO,MAAjB,CAAb;IACA,OAAO,CAACQ,MAAD,EAASV,MAAT,CAAP;EACH;;EAEDW,YAAY,CAACD,MAAD,EAAe;IACvB,IAAIE,OAAO,GAAa,EAAxB;IACA,IAAIV,MAAM,GAAGQ,MAAM,CAACG,SAAP,EAAb;;IAEA,KAAK,MAAMR,KAAX,IAAoBH,MAApB,EAA4B;MACxB,IAAIY,WAAW,GAAG,KAAKtB,WAAL,CAAiBmB,YAAjB,CAA8BN,KAAK,CAACU,KAApC,CAAlB;MACAH,OAAO,CAACJ,IAAR,CAAaM,WAAb;IACH;;IAED,IAAIpB,MAAM,GAAGsB,MAAM,CAACC,MAAP,CAAcL,OAAd,CAAb;IACA,OAAOlB,MAAP;EACH;;EAEDwB,cAAc,CAACR,MAAD,EAAe;IACzB,OAAO,KAAKC,YAAL,CAAkBD,MAAlB,CAAP;EACH;;AA9CyB;;AAA9BS","names":["StructBinaryCodec","constructor","binaryCodec","decodeTopLevel","buffer","type","decoded","length","decodeNested","originalBuffer","offset","fieldDefinitions","fields","fieldDefinition","decodedLength","field","typesystem_1","name","push","slice","struct","encodeNested","buffers","getFields","fieldBuffer","value","Buffer","concat","encodeTopLevel","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/struct.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}