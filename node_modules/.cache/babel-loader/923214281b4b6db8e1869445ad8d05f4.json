{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeLedgerData = exports.ledgerHash = exports.transactionTreeHash = exports.accountStateHash = void 0;\n\nvar assert = require(\"assert\");\n\nvar shamap_1 = require(\"./shamap\");\n\nvar hash_prefixes_1 = require(\"./hash-prefixes\");\n\nvar hashes_1 = require(\"./hashes\");\n\nvar binary_1 = require(\"./binary\");\n\nvar hash_256_1 = require(\"./types/hash-256\");\n\nvar st_object_1 = require(\"./types/st-object\");\n\nvar uint_64_1 = require(\"./types/uint-64\");\n\nvar uint_32_1 = require(\"./types/uint-32\");\n\nvar uint_8_1 = require(\"./types/uint-8\");\n\nvar binary_parser_1 = require(\"./serdes/binary-parser\");\n\nvar bigInt = require(\"big-integer\");\n/**\n * Computes the hash of a list of objects\n *\n * @param itemizer Converts an item into a format that can be added to SHAMap\n * @param itemsJson Array of items to add to a SHAMap\n * @returns the hash of the SHAMap\n */\n\n\nfunction computeHash(itemizer, itemsJson) {\n  var map = new shamap_1.ShaMap();\n  itemsJson.forEach(function (item) {\n    return map.addItem.apply(map, itemizer(item));\n  });\n  return map.hash();\n}\n/**\n * Convert a transaction into an index and an item\n *\n * @param json transaction with metadata\n * @returns a tuple of index and item to be added to SHAMap\n */\n\n\nfunction transactionItemizer(json) {\n  assert.ok(json.hash);\n  var index = hash_256_1.Hash256.from(json.hash);\n  var item = {\n    hashPrefix: function () {\n      return hash_prefixes_1.HashPrefix.transaction;\n    },\n    toBytesSink: function (sink) {\n      var serializer = new binary_1.BinarySerializer(sink);\n      serializer.writeLengthEncoded(st_object_1.STObject.from(json));\n      serializer.writeLengthEncoded(st_object_1.STObject.from(json.metaData));\n    }\n  };\n  return [index, item, undefined];\n}\n/**\n * Convert an entry to a pair Hash256 and ShaMapNode\n *\n * @param json JSON describing a ledger entry item\n * @returns a tuple of index and item to be added to SHAMap\n */\n\n\nfunction entryItemizer(json) {\n  var index = hash_256_1.Hash256.from(json.index);\n  var bytes = (0, binary_1.serializeObject)(json);\n  var item = {\n    hashPrefix: function () {\n      return hash_prefixes_1.HashPrefix.accountStateEntry;\n    },\n    toBytesSink: function (sink) {\n      sink.put(bytes);\n    }\n  };\n  return [index, item, undefined];\n}\n/**\n * Function computing the hash of a transaction tree\n *\n * @param param An array of transaction objects to hash\n * @returns A Hash256 object\n */\n\n\nfunction transactionTreeHash(param) {\n  var itemizer = transactionItemizer;\n  return computeHash(itemizer, param);\n}\n\nexports.transactionTreeHash = transactionTreeHash;\n/**\n * Function computing the hash of accountState\n *\n * @param param A list of accountStates hash\n * @returns A Hash256 object\n */\n\nfunction accountStateHash(param) {\n  var itemizer = entryItemizer;\n  return computeHash(itemizer, param);\n}\n\nexports.accountStateHash = accountStateHash;\n/**\n * Serialize and hash a ledger header\n *\n * @param header a ledger header\n * @returns the hash of header\n */\n\nfunction ledgerHash(header) {\n  var hash = new hashes_1.Sha512Half();\n  hash.put(hash_prefixes_1.HashPrefix.ledgerHeader);\n  assert.ok(header.parent_close_time !== undefined);\n  assert.ok(header.close_flags !== undefined);\n  uint_32_1.UInt32.from(header.ledger_index).toBytesSink(hash);\n  uint_64_1.UInt64.from(bigInt(String(header.total_coins))).toBytesSink(hash);\n  hash_256_1.Hash256.from(header.parent_hash).toBytesSink(hash);\n  hash_256_1.Hash256.from(header.transaction_hash).toBytesSink(hash);\n  hash_256_1.Hash256.from(header.account_hash).toBytesSink(hash);\n  uint_32_1.UInt32.from(header.parent_close_time).toBytesSink(hash);\n  uint_32_1.UInt32.from(header.close_time).toBytesSink(hash);\n  uint_8_1.UInt8.from(header.close_time_resolution).toBytesSink(hash);\n  uint_8_1.UInt8.from(header.close_flags).toBytesSink(hash);\n  return hash.finish();\n}\n\nexports.ledgerHash = ledgerHash;\n/**\n * Decodes a serialized ledger header\n *\n * @param binary A serialized ledger header\n * @returns A JSON object describing a ledger header\n */\n\nfunction decodeLedgerData(binary) {\n  assert.ok(typeof binary === 'string', 'binary must be a hex string');\n  var parser = new binary_parser_1.BinaryParser(binary);\n  return {\n    ledger_index: parser.readUInt32(),\n    total_coins: parser.readType(uint_64_1.UInt64).valueOf().toString(),\n    parent_hash: parser.readType(hash_256_1.Hash256).toHex(),\n    transaction_hash: parser.readType(hash_256_1.Hash256).toHex(),\n    account_hash: parser.readType(hash_256_1.Hash256).toHex(),\n    parent_close_time: parser.readUInt32(),\n    close_time: parser.readUInt32(),\n    close_time_resolution: parser.readUInt8(),\n    close_flags: parser.readUInt8()\n  };\n}\n\nexports.decodeLedgerData = decodeLedgerData;","map":{"version":3,"mappings":"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","names":["computeHash","itemizer","itemsJson","map","shamap_1","forEach","item","addItem","apply","hash","transactionItemizer","json","assert","ok","index","hash_256_1","from","hashPrefix","hash_prefixes_1","transaction","toBytesSink","sink","serializer","binary_1","writeLengthEncoded","st_object_1","metaData","undefined","entryItemizer","bytes","accountStateEntry","put","transactionTreeHash","param","exports","accountStateHash","ledgerHash","header","hashes_1","ledgerHeader","parent_close_time","close_flags","uint_32_1","ledger_index","uint_64_1","bigInt","String","total_coins","parent_hash","transaction_hash","account_hash","close_time","uint_8_1","close_time_resolution","finish","decodeLedgerData","binary","parser","binary_parser_1","readUInt32","readType","valueOf","toString","toHex","readUInt8"],"sourceRoot":"","sources":["../src/ledger-hashes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}