{"ast":null,"code":"import { BigNumber, providers, utils } from \"ethers\";\nimport { parseCeloTransaction } from \"./transactions\";\nexport class CeloProvider extends providers.JsonRpcProvider {\n  constructor(url, network) {\n    super(url, network); // Override certain block formatting properties that don't exist on Celo blocks\n    // Reaches into https://github.com/ethers-io/ethers.js/blob/master/packages/providers/src.ts/formatter.ts\n\n    const blockFormat = this.formatter.formats.block;\n\n    blockFormat.gasLimit = () => BigNumber.from(0);\n\n    blockFormat.nonce = () => \"\";\n\n    blockFormat.difficulty = () => 0;\n  }\n  /**\n   * Override to parse transaction correctly\n   * https://github.com/ethers-io/ethers.js/blob/master/packages/providers/src.ts/base-provider.ts\n   */\n\n\n  async sendTransaction(signedTransaction) {\n    await this.getNetwork();\n    const signedTx = await Promise.resolve(signedTransaction);\n    const hexTx = utils.hexlify(signedTx);\n    const tx = parseCeloTransaction(signedTx);\n\n    try {\n      const hash = await this.perform(\"sendTransaction\", {\n        signedTransaction: hexTx\n      });\n      return this._wrapTransaction(tx, hash);\n    } catch (error) {\n      error.transaction = tx;\n      error.transactionHash = tx.hash;\n      throw error;\n    }\n  }\n  /**\n   * Override to handle alternative gas currencies\n   * getGasPrice in https://github.com/ethers-io/ethers.js/blob/master/packages/providers/src.ts/base-provider.ts\n   */\n\n\n  async getGasPrice(feeCurrencyAddress) {\n    await this.getNetwork();\n    const params = feeCurrencyAddress ? {\n      feeCurrencyAddress\n    } : {};\n    return BigNumber.from(await this.perform(\"getGasPrice\", params));\n  }\n  /**\n   * Override to handle alternative gas currencies\n   * prepareRequest in https://github.com/ethers-io/ethers.js/blob/master/packages/providers/src.ts/json-rpc-provider.ts\n   */\n\n\n  prepareRequest(method, params) {\n    if (method === \"getGasPrice\") {\n      const param = params.feeCurrencyAddress ? [params.feeCurrencyAddress] : [];\n      return [\"eth_gasPrice\", param];\n    }\n\n    return super.prepareRequest(method, params);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,KAA/B,QAA4C,QAA5C;AACA,SAASC,oBAAT,QAAqC,gBAArC;AAEA,OAAM,MAAOC,YAAP,SAA4BH,SAAS,CAACI,eAAtC,CAAqD;EACzDC,YACEC,GADF,EAEEC,OAFF,EAEgC;IAE9B,MAAMD,GAAN,EAAWC,OAAX,EAF8B,CAI9B;IACA;;IACA,MAAMC,WAAW,GAAG,KAAKC,SAAL,CAAeC,OAAf,CAAuBC,KAA3C;;IACAH,WAAW,CAACI,QAAZ,GAAuB,MAAMb,SAAS,CAACc,IAAV,CAAe,CAAf,CAA7B;;IACAL,WAAW,CAACM,KAAZ,GAAoB,MAAM,EAA1B;;IACAN,WAAW,CAACO,UAAZ,GAAyB,MAAM,CAA/B;EACD;EAED;;;;;;EAIqB,MAAfC,eAAe,CACnBC,iBADmB,EACwB;IAE3C,MAAM,KAAKC,UAAL,EAAN;IACA,MAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAgBJ,iBAAhB,CAAvB;IACA,MAAMK,KAAK,GAAGrB,KAAK,CAACsB,OAAN,CAAcJ,QAAd,CAAd;IACA,MAAMK,EAAE,GAAGtB,oBAAoB,CAACiB,QAAD,CAA/B;;IACA,IAAI;MACF,MAAMM,IAAI,GAAG,MAAM,KAAKC,OAAL,CAAa,iBAAb,EAAgC;QACjDT,iBAAiB,EAAEK;MAD8B,CAAhC,CAAnB;MAGA,OAAO,KAAKK,gBAAL,CAAsBH,EAAtB,EAA0BC,IAA1B,CAAP;IACD,CALD,CAKE,OAAOG,KAAP,EAAc;MACdA,KAAK,CAACC,WAAN,GAAoBL,EAApB;MACAI,KAAK,CAACE,eAAN,GAAwBN,EAAE,CAACC,IAA3B;MACA,MAAMG,KAAN;IACD;EACF;EAED;;;;;;EAIiB,MAAXG,WAAW,CAACC,kBAAD,EAA4B;IAC3C,MAAM,KAAKd,UAAL,EAAN;IACA,MAAMe,MAAM,GAAGD,kBAAkB,GAAG;MAAEA;IAAF,CAAH,GAA4B,EAA7D;IACA,OAAOjC,SAAS,CAACc,IAAV,CAAe,MAAM,KAAKa,OAAL,CAAa,aAAb,EAA4BO,MAA5B,CAArB,CAAP;EACD;EAED;;;;;;EAIAC,cAAc,CAACC,MAAD,EAAcF,MAAd,EAAyB;IACrC,IAAIE,MAAM,KAAK,aAAf,EAA8B;MAC5B,MAAMC,KAAK,GAAGH,MAAM,CAACD,kBAAP,GACV,CAACC,MAAM,CAACD,kBAAR,CADU,GAEV,EAFJ;MAGA,OAAO,CAAC,cAAD,EAAiBI,KAAjB,CAAP;IACD;;IAED,OAAO,MAAMF,cAAN,CAAqBC,MAArB,EAA6BF,MAA7B,CAAP;EACD;;AA7DwD","names":["BigNumber","providers","utils","parseCeloTransaction","CeloProvider","JsonRpcProvider","constructor","url","network","blockFormat","formatter","formats","block","gasLimit","from","nonce","difficulty","sendTransaction","signedTransaction","getNetwork","signedTx","Promise","resolve","hexTx","hexlify","tx","hash","perform","_wrapTransaction","error","transaction","transactionHash","getGasPrice","feeCurrencyAddress","params","prepareRequest","method","param"],"sourceRoot":"","sources":["../../../src/lib/CeloProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}