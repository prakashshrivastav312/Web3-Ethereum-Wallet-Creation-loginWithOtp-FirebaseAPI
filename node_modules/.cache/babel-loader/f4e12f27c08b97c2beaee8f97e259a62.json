{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendEgldOffchainTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst common_1 = require(\"./common\");\n\nconst kms_1 = require(\"./kms\");\n/**\n * Send EGLD transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the EGLD Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically\n */\n\n\nconst sendEgldOffchainTransaction = async (testnet, body, provider) => {\n  if (body.signatureId) {\n    return kms_1.offchainTransferEgldKMS(body);\n  }\n\n  await tatum_1.validateBody(body, model_1.EgldTransferOffchain);\n\n  const {\n    mnemonic,\n    index,\n    fromPrivateKey,\n    gasLimit,\n    gasPrice\n  } = body,\n        withdrawal = __rest(body, [\"mnemonic\", \"index\", \"fromPrivateKey\", \"gasLimit\", \"gasPrice\"]);\n\n  const {\n    value,\n    receiver\n  } = withdrawal;\n  const fromPriv = mnemonic && index !== undefined ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.EGLD, testnet, mnemonic, index) : fromPrivateKey;\n  const fee = {\n    gasLimit: `${gasLimit || '50000'}`,\n    gasPrice: `${gasPrice || '1000000000'}`\n  };\n  const txData = await transaction_1.prepareEgldSignedTransaction({\n    amount: value,\n    fromPrivateKey: fromPriv,\n    fee,\n    to: receiver\n  }, provider); // @ts-ignore\n\n  withdrawal.fee = new bignumber_js_1.default(fee.gasLimit).multipliedBy(fee.gasPrice).toString();\n  const {\n    id\n  } = await common_1.offchainStoreWithdrawal(withdrawal);\n\n  try {\n    return Object.assign(Object.assign({}, await common_1.offchainBroadcast({\n      txData,\n      withdrawalId: id,\n      currency: model_1.Currency.EGLD\n    })), {\n      id\n    });\n  } catch (e) {\n    console.error(e);\n\n    try {\n      await common_1.offchainCancelWithdrawal(id);\n    } catch (e1) {\n      console.log(e);\n      return {\n        id\n      };\n    }\n  }\n};\n\nexports.sendEgldOffchainTransaction = sendEgldOffchainTransaction;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AAEA;;;;;;;;;;AAQO,MAAMA,2BAA2B,GAAG,OAAOC,OAAP,EAAyBC,IAAzB,EAAqDC,QAArD,KAA0E;EACjH,IAAID,IAAI,CAACE,WAAT,EAAsB;IAClB,OAAOC,8BAAwBH,IAAxB,CAAP;EACH;;EACD,MAAMI,qBAAaJ,IAAb,EAAmBK,4BAAnB,CAAN;;EACA,MAAM;IACFC,QADE;IACQC,KADR;IACeC,cADf;IAC+BC,QAD/B;IACyCC;EADzC,IAEFV,IAFJ;EAAA,MAC4DW,UAAU,UAClEX,IADkE,EADhE,+DACgE,CADtE;;EAGA,MAAM;IAACY,KAAD;IAAQC;EAAR,IAAoBF,UAA1B;EAEA,MAAMG,QAAQ,GAAGR,QAAQ,IAAIC,KAAK,KAAKQ,SAAtB,GAAkC,MAAMC,wCAA+BX,iBAASY,IAAxC,EAA8ClB,OAA9C,EAAuDO,QAAvD,EAAiEC,KAAjE,CAAxC,GAAkHC,cAAnI;EAEA,MAAMU,GAAG,GAAG;IACRT,QAAQ,EAAE,GAAGA,QAAQ,IAAI,OAAO,EADxB;IAERC,QAAQ,EAAE,GAAGA,QAAQ,IAAI,YAAY;EAF7B,CAAZ;EAIA,MAAMS,MAAM,GAAG,MAAMC,2CAA6B;IAC9CC,MAAM,EAAET,KADsC;IAE9CJ,cAAc,EAAEM,QAF8B;IAG9CI,GAH8C;IAI9CI,EAAE,EAAET;EAJ0C,CAA7B,EAKlBZ,QALkB,CAArB,CAhBiH,CAsBjH;;EACAU,UAAU,CAACO,GAAX,GAAiB,IAAIK,sBAAJ,CAAcL,GAAG,CAACT,QAAlB,EAA4Be,YAA5B,CAAyCN,GAAG,CAACR,QAA7C,EAAuDe,QAAvD,EAAjB;EACA,MAAM;IAACC;EAAD,IAAO,MAAMC,iCAAwBhB,UAAxB,CAAnB;;EACA,IAAI;IACA,uCAAW,MAAMgB,2BAAkB;MAACR,MAAD;MAASS,YAAY,EAAEF,EAAvB;MAA2BG,QAAQ,EAAExB,iBAASY;IAA9C,CAAlB,CAAjB,GAAuF;MAAES;IAAF,CAAvF;EACH,CAFD,CAEE,OAAOI,CAAP,EAAU;IACRC,OAAO,CAACC,KAAR,CAAcF,CAAd;;IACA,IAAI;MACA,MAAMH,kCAAyBD,EAAzB,CAAN;IACH,CAFD,CAEE,OAAOO,EAAP,EAAW;MACTF,OAAO,CAACG,GAAR,CAAYJ,CAAZ;MACA,OAAO;QAACJ;MAAD,CAAP;IACH;EACJ;AACJ,CApCM;;AAAMS,sCAA2BrC,2BAA3B","names":["sendEgldOffchainTransaction","testnet","body","provider","signatureId","kms_1","tatum_1","model_1","mnemonic","index","fromPrivateKey","gasLimit","gasPrice","withdrawal","value","receiver","fromPriv","undefined","wallet_1","EGLD","fee","txData","transaction_1","amount","to","bignumber_js_1","multipliedBy","toString","id","common_1","withdrawalId","currency","e","console","error","e1","log","exports"],"sourceRoot":"","sources":["../../../src/offchain/egld.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}