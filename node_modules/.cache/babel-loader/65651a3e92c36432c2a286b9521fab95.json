{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst core = require('../../caver-core');\n\nconst Method = require('../../caver-core-method');\n/**\n * A class that can invoke Net RPC Calls.\n * @class\n * @hideconstructor\n */\n\n\nconst Net = function Net() {\n  const _this = this;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  core.packageInit(this, args);\n  const netMethods = [\n  /**\n   * Returns the network identifier (network ID) of the Klaytn Node.\n   *\n   * @memberof Net\n   * @method getNetworkId\n   * @instance\n   *\n   * @example\n   * const result = await caver.rpc.net.getNetworkId()\n   *\n   * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\n   * @return {Promise<number>} The network id.\n   */\n  new Method({\n    name: 'getNetworkId',\n    call: 'net_networkID',\n    params: 0\n  }), new Method({\n    name: 'getNetworkID',\n    call: 'net_networkID',\n    params: 0\n  }),\n  /**\n   * Returns `true` if the Klaytn Node is actively listening for network connections.\n   *\n   * @memberof Net\n   * @method isListening\n   * @instance\n   *\n   * @example\n   * const result = await caver.rpc.net.isListening()\n   *\n   * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\n   * @return {Promise<boolean>} `true` when listening, otherwise `false`.\n   */\n  new Method({\n    name: 'isListening',\n    call: 'net_listening',\n    params: 0\n  }),\n  /**\n   * Returns the number of peers currently connected to the Klaytn Node.\n   *\n   * @memberof Net\n   * @method getPeerCount\n   * @instance\n   *\n   * @example\n   * const result = await caver.rpc.net.getPeerCount()\n   *\n   * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\n   * @return {Promise<string>} The number of connected peers in hex.\n   */\n  new Method({\n    name: 'getPeerCount',\n    call: 'net_peerCount',\n    params: 0\n  }),\n  /**\n   * Returns the number of connected nodes by type and the total number of connected nodes with key/value pairs.\n   *\n   * @memberof Net\n   * @method getPeerCountByType\n   * @instance\n   *\n   * @example\n   * const result = await caver.rpc.net.getPeerCountByType()\n   *\n   * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\n   * @return {Promise<object>} The number of connected peers by type as well as the total number of connected peers.\n   */\n  new Method({\n    name: 'getPeerCountByType',\n    call: 'net_peerCountByType',\n    params: 0\n  })];\n  netMethods.forEach(function (method) {\n    method.attachToObject(_this);\n    method.setRequestManager(_this._requestManager);\n  });\n};\n\nmodule.exports = Net;","map":{"version":3,"names":["core","require","Method","Net","_this","args","packageInit","netMethods","name","call","params","forEach","method","attachToObject","setRequestManager","_requestManager","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-rpc/src/net.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst core = require('../../caver-core')\nconst Method = require('../../caver-core-method')\n\n/**\n * A class that can invoke Net RPC Calls.\n * @class\n * @hideconstructor\n */\nconst Net = function Net(...args) {\n    const _this = this\n\n    core.packageInit(this, args)\n\n    const netMethods = [\n        /**\n         * Returns the network identifier (network ID) of the Klaytn Node.\n         *\n         * @memberof Net\n         * @method getNetworkId\n         * @instance\n         *\n         * @example\n         * const result = await caver.rpc.net.getNetworkId()\n         *\n         * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\n         * @return {Promise<number>} The network id.\n         */\n        new Method({\n            name: 'getNetworkId',\n            call: 'net_networkID',\n            params: 0,\n        }),\n        new Method({\n            name: 'getNetworkID',\n            call: 'net_networkID',\n            params: 0,\n        }),\n        /**\n         * Returns `true` if the Klaytn Node is actively listening for network connections.\n         *\n         * @memberof Net\n         * @method isListening\n         * @instance\n         *\n         * @example\n         * const result = await caver.rpc.net.isListening()\n         *\n         * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\n         * @return {Promise<boolean>} `true` when listening, otherwise `false`.\n         */\n        new Method({\n            name: 'isListening',\n            call: 'net_listening',\n            params: 0,\n        }),\n        /**\n         * Returns the number of peers currently connected to the Klaytn Node.\n         *\n         * @memberof Net\n         * @method getPeerCount\n         * @instance\n         *\n         * @example\n         * const result = await caver.rpc.net.getPeerCount()\n         *\n         * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\n         * @return {Promise<string>} The number of connected peers in hex.\n         */\n        new Method({\n            name: 'getPeerCount',\n            call: 'net_peerCount',\n            params: 0,\n        }),\n        /**\n         * Returns the number of connected nodes by type and the total number of connected nodes with key/value pairs.\n         *\n         * @memberof Net\n         * @method getPeerCountByType\n         * @instance\n         *\n         * @example\n         * const result = await caver.rpc.net.getPeerCountByType()\n         *\n         * @param {function} [callback] Optional callback, returns an error object as the first parameter and the result as the second.\n         * @return {Promise<object>} The number of connected peers by type as well as the total number of connected peers.\n         */\n        new Method({\n            name: 'getPeerCountByType',\n            call: 'net_peerCountByType',\n            params: 0,\n        }),\n    ]\n\n    netMethods.forEach(function(method) {\n        method.attachToObject(_this)\n        method.setRequestManager(_this._requestManager)\n    })\n}\n\nmodule.exports = Net\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,yBAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,GAAG,GAAG,SAASA,GAAT,GAAsB;EAC9B,MAAMC,KAAK,GAAG,IAAd;;EAD8B,kCAANC,IAAM;IAANA,IAAM;EAAA;;EAG9BL,IAAI,CAACM,WAAL,CAAiB,IAAjB,EAAuBD,IAAvB;EAEA,MAAME,UAAU,GAAG;EACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,IAAIL,MAAJ,CAAW;IACPM,IAAI,EAAE,cADC;IAEPC,IAAI,EAAE,eAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CAde,EAmBf,IAAIR,MAAJ,CAAW;IACPM,IAAI,EAAE,cADC;IAEPC,IAAI,EAAE,eAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CAnBe;EAwBf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,IAAIR,MAAJ,CAAW;IACPM,IAAI,EAAE,aADC;IAEPC,IAAI,EAAE,eAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CArCe;EA0Cf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,IAAIR,MAAJ,CAAW;IACPM,IAAI,EAAE,cADC;IAEPC,IAAI,EAAE,eAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CAvDe;EA4Df;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,IAAIR,MAAJ,CAAW;IACPM,IAAI,EAAE,oBADC;IAEPC,IAAI,EAAE,qBAFC;IAGPC,MAAM,EAAE;EAHD,CAAX,CAzEe,CAAnB;EAgFAH,UAAU,CAACI,OAAX,CAAmB,UAASC,MAAT,EAAiB;IAChCA,MAAM,CAACC,cAAP,CAAsBT,KAAtB;IACAQ,MAAM,CAACE,iBAAP,CAAyBV,KAAK,CAACW,eAA/B;EACH,CAHD;AAIH,CAzFD;;AA2FAC,MAAM,CAACC,OAAP,GAAiBd,GAAjB"},"metadata":{},"sourceType":"script"}