{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst _ = require('lodash');\n\nconst WeightedPublicKey = require('./weightedPublicKey');\n\nconst utils = require('../../../caver-utils');\n\nconst {\n  ACCOUNT_KEY_TAG,\n  fillWeightedMultiSigOptionsForMultiSig\n} = require('./accountKeyHelper');\n\nconst MAXIMUM_WEIGTHED_KEYS_LENGTH = 10;\n/**\n * Representing an AccountKeyWeightedMultiSig.\n * @class\n * @hideconstructor\n */\n\nclass AccountKeyWeightedMultiSig {\n  /**\n   * Decodes an RLP-encoded AccountKeyWeightedMultiSig string.\n   *\n   * @example\n   * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.decode('0x{encoded account key}')\n   *\n   * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyWeightedMultiSig string.\n   * @return {AccountKeyWeightedMultiSig}\n   */\n  static decode(rlpEncodedKey) {\n    rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n    if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) throw new Error(`Cannot decode to AccountKeyWeightedMultiSig. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG}: ${rlpEncodedKey}`);\n    const [threshold, multiSigkeys] = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length)}`);\n    const weightedPublicKeys = multiSigkeys.map(weightedPublicKey => {\n      return new WeightedPublicKey(weightedPublicKey[0], weightedPublicKey[1]);\n    });\n    return new AccountKeyWeightedMultiSig(threshold, weightedPublicKeys);\n  }\n  /**\n   * Creates an instance of AccountKeyWeighedMultiSig.\n   *\n   * @example\n   * const publicKeyArray = [ '0x{public key1}', '0x{public key2}' ]\n   * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray)\n   *\n   * // with options\n   * const publicKeyArray = [ '0x{public key1}', '0x{public key2}' ]\n   * // For option object, you can use `new caver.account.weightedMultiSigOptions(2, [1, 1])`\n   * // instead of `{ threshold: 2, weights: [1, 1] }`.\n   * const options = { threshold: 2, weights: [1, 1] }\n   * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options)\n   *\n   * @param {Array.<string>} publicKeyArray - An array of public key strings.\n   * @param {WeightedMultiSigOptions|object} [options] - An options which defines threshold and weight.\n   * @return {AccountKeyWeightedMultiSig}\n   */\n\n\n  static fromPublicKeysAndOptions(publicKeyArray, options) {\n    options = fillWeightedMultiSigOptionsForMultiSig(publicKeyArray.length, options);\n\n    if (publicKeyArray.length !== options.weights.length) {\n      throw new Error(`The length of public keys is not equal to the length of weight array.`);\n    }\n\n    const weightedPublicKeys = [];\n\n    for (let i = 0; i < publicKeyArray.length; i++) {\n      const weightedPublicKey = new WeightedPublicKey(options.weights[i], publicKeyArray[i]);\n      weightedPublicKeys.push(weightedPublicKey);\n    }\n\n    return new AccountKeyWeightedMultiSig(options.threshold, weightedPublicKeys);\n  }\n  /**\n   * Create an instance of AccountKeyWeightedMultiSig.\n   * @param {number} threshold - The threshold of accountKey.\n   * @param {Array.<WeightedPublicKey>} weightedPublicKeys - An array of instances of WeightedPublicKeys\n   */\n\n\n  constructor(threshold, weightedPublicKeys) {\n    this.threshold = threshold;\n    this.weightedPublicKeys = weightedPublicKeys || [];\n  }\n  /**\n   * @type {Number}\n   */\n\n\n  get threshold() {\n    return this._threshold;\n  }\n\n  set threshold(t) {\n    this._threshold = utils.hexToNumber(t);\n  }\n  /**\n   * @type {Array.<WeightedPublicKey>}\n   */\n\n\n  get weightedPublicKeys() {\n    return this._weightedPublicKeys;\n  }\n\n  set weightedPublicKeys(wps) {\n    if (!_.isArray(wps)) throw new Error(`Invalid weighted public keys type. Please use an array for weightedPublicKeys.`);\n    if (wps.length > MAXIMUM_WEIGTHED_KEYS_LENGTH) throw new Error(`Invalid weighted public keys: The number of keys exceeds the limit (${MAXIMUM_WEIGTHED_KEYS_LENGTH}).`);\n\n    for (const wp of wps) {\n      if (!(wp instanceof WeightedPublicKey)) throw new Error(`Invalid type of weighted public keys.`);\n    }\n\n    this._weightedPublicKeys = wps;\n  }\n  /**\n   * Returns an RLP-encoded AccountKeyWeightedMultiSig string.\n   *\n   * @example\n   * const encoding = accountKeyWeightedMultiSig.getRLPEncoding()\n   *\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    if (this.threshold === undefined) throw new Error('threshold should be specified for a multisig account');\n    if (this.weightedPublicKeys.length === 0) throw new Error('weightedPublicKeys should be specified for a multisig account');\n    const encodedMultisigPublicKeys = [];\n\n    for (const weightedPublicKey of this.weightedPublicKeys) {\n      if (weightedPublicKey.weight === undefined) throw new Error('weight should be specified for a multisig account');\n      if (weightedPublicKey.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account');\n      const compressedPublicKey = utils.compressPublicKey(weightedPublicKey.publicKey);\n      encodedMultisigPublicKeys.push([Bytes.fromNat(utils.numberToHex(weightedPublicKey.weight)), compressedPublicKey]);\n    }\n\n    return ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG + RLP.encode([Bytes.fromNat(utils.numberToHex(this.threshold)), encodedMultisigPublicKeys]).slice(2);\n  }\n\n}\n\nmodule.exports = AccountKeyWeightedMultiSig;","map":{"version":3,"names":["RLP","require","Bytes","_","WeightedPublicKey","utils","ACCOUNT_KEY_TAG","fillWeightedMultiSigOptionsForMultiSig","MAXIMUM_WEIGTHED_KEYS_LENGTH","AccountKeyWeightedMultiSig","decode","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","Error","threshold","multiSigkeys","slice","length","weightedPublicKeys","map","weightedPublicKey","fromPublicKeysAndOptions","publicKeyArray","options","weights","i","push","constructor","_threshold","t","hexToNumber","_weightedPublicKeys","wps","isArray","wp","getRLPEncoding","undefined","encodedMultisigPublicKeys","weight","publicKey","compressedPublicKey","compressPublicKey","fromNat","numberToHex","encode","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyWeightedMultiSig.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst _ = require('lodash')\nconst WeightedPublicKey = require('./weightedPublicKey')\nconst utils = require('../../../caver-utils')\nconst { ACCOUNT_KEY_TAG, fillWeightedMultiSigOptionsForMultiSig } = require('./accountKeyHelper')\n\nconst MAXIMUM_WEIGTHED_KEYS_LENGTH = 10\n\n/**\n * Representing an AccountKeyWeightedMultiSig.\n * @class\n * @hideconstructor\n */\nclass AccountKeyWeightedMultiSig {\n    /**\n     * Decodes an RLP-encoded AccountKeyWeightedMultiSig string.\n     *\n     * @example\n     * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.decode('0x{encoded account key}')\n     *\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyWeightedMultiSig string.\n     * @return {AccountKeyWeightedMultiSig}\n     */\n    static decode(rlpEncodedKey) {\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG))\n            throw new Error(\n                `Cannot decode to AccountKeyWeightedMultiSig. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG}: ${rlpEncodedKey}`\n            )\n\n        const [threshold, multiSigkeys] = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length)}`)\n        const weightedPublicKeys = multiSigkeys.map(weightedPublicKey => {\n            return new WeightedPublicKey(weightedPublicKey[0], weightedPublicKey[1])\n        })\n        return new AccountKeyWeightedMultiSig(threshold, weightedPublicKeys)\n    }\n\n    /**\n     * Creates an instance of AccountKeyWeighedMultiSig.\n     *\n     * @example\n     * const publicKeyArray = [ '0x{public key1}', '0x{public key2}' ]\n     * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray)\n     *\n     * // with options\n     * const publicKeyArray = [ '0x{public key1}', '0x{public key2}' ]\n     * // For option object, you can use `new caver.account.weightedMultiSigOptions(2, [1, 1])`\n     * // instead of `{ threshold: 2, weights: [1, 1] }`.\n     * const options = { threshold: 2, weights: [1, 1] }\n     * const accountKey = caver.account.accountKey.accountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options)\n     *\n     * @param {Array.<string>} publicKeyArray - An array of public key strings.\n     * @param {WeightedMultiSigOptions|object} [options] - An options which defines threshold and weight.\n     * @return {AccountKeyWeightedMultiSig}\n     */\n    static fromPublicKeysAndOptions(publicKeyArray, options) {\n        options = fillWeightedMultiSigOptionsForMultiSig(publicKeyArray.length, options)\n        if (publicKeyArray.length !== options.weights.length) {\n            throw new Error(`The length of public keys is not equal to the length of weight array.`)\n        }\n\n        const weightedPublicKeys = []\n\n        for (let i = 0; i < publicKeyArray.length; i++) {\n            const weightedPublicKey = new WeightedPublicKey(options.weights[i], publicKeyArray[i])\n            weightedPublicKeys.push(weightedPublicKey)\n        }\n\n        return new AccountKeyWeightedMultiSig(options.threshold, weightedPublicKeys)\n    }\n\n    /**\n     * Create an instance of AccountKeyWeightedMultiSig.\n     * @param {number} threshold - The threshold of accountKey.\n     * @param {Array.<WeightedPublicKey>} weightedPublicKeys - An array of instances of WeightedPublicKeys\n     */\n    constructor(threshold, weightedPublicKeys) {\n        this.threshold = threshold\n\n        this.weightedPublicKeys = weightedPublicKeys || []\n    }\n\n    /**\n     * @type {Number}\n     */\n    get threshold() {\n        return this._threshold\n    }\n\n    set threshold(t) {\n        this._threshold = utils.hexToNumber(t)\n    }\n\n    /**\n     * @type {Array.<WeightedPublicKey>}\n     */\n    get weightedPublicKeys() {\n        return this._weightedPublicKeys\n    }\n\n    set weightedPublicKeys(wps) {\n        if (!_.isArray(wps)) throw new Error(`Invalid weighted public keys type. Please use an array for weightedPublicKeys.`)\n        if (wps.length > MAXIMUM_WEIGTHED_KEYS_LENGTH)\n            throw new Error(`Invalid weighted public keys: The number of keys exceeds the limit (${MAXIMUM_WEIGTHED_KEYS_LENGTH}).`)\n        for (const wp of wps) {\n            if (!(wp instanceof WeightedPublicKey)) throw new Error(`Invalid type of weighted public keys.`)\n        }\n        this._weightedPublicKeys = wps\n    }\n\n    /**\n     * Returns an RLP-encoded AccountKeyWeightedMultiSig string.\n     *\n     * @example\n     * const encoding = accountKeyWeightedMultiSig.getRLPEncoding()\n     *\n     * @return {string}\n     */\n    getRLPEncoding() {\n        if (this.threshold === undefined) throw new Error('threshold should be specified for a multisig account')\n        if (this.weightedPublicKeys.length === 0) throw new Error('weightedPublicKeys should be specified for a multisig account')\n\n        const encodedMultisigPublicKeys = []\n        for (const weightedPublicKey of this.weightedPublicKeys) {\n            if (weightedPublicKey.weight === undefined) throw new Error('weight should be specified for a multisig account')\n            if (weightedPublicKey.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account')\n\n            const compressedPublicKey = utils.compressPublicKey(weightedPublicKey.publicKey)\n\n            encodedMultisigPublicKeys.push([Bytes.fromNat(utils.numberToHex(weightedPublicKey.weight)), compressedPublicKey])\n        }\n\n        return (\n            ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG +\n            RLP.encode([Bytes.fromNat(utils.numberToHex(this.threshold)), encodedMultisigPublicKeys]).slice(2)\n        )\n    }\n}\n\nmodule.exports = AccountKeyWeightedMultiSig\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}