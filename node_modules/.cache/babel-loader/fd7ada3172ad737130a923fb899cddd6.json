{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListBinaryCodec = void 0;\n\nconst typesystem_1 = require(\"../typesystem\");\n\nconst constants_1 = require(\"./constants\");\n/**\n * Encodes and decodes \"List\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\n\n\nclass ListBinaryCodec {\n  constructor(binaryCodec) {\n    this.binaryCodec = binaryCodec;\n  }\n\n  decodeNested(buffer, type) {\n    let typeParameter = type.getFirstTypeParameter();\n    let result = [];\n    let numItems = buffer.readUInt32BE();\n    this.binaryCodec.constraints.checkListLength(numItems);\n    let originalBuffer = buffer;\n    let offset = constants_1.SizeOfU32;\n    buffer = originalBuffer.slice(offset);\n\n    for (let i = 0; i < numItems; i++) {\n      let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, typeParameter);\n      result.push(decoded);\n      offset += decodedLength;\n      buffer = originalBuffer.slice(offset);\n    }\n\n    return [new typesystem_1.List(type, result), offset];\n  }\n\n  decodeTopLevel(buffer, type) {\n    let typeParameter = type.getFirstTypeParameter();\n    let result = [];\n    let originalBuffer = buffer;\n    let offset = 0;\n\n    while (buffer.length > 0) {\n      let [decoded, decodedLength] = this.binaryCodec.decodeNested(buffer, typeParameter);\n      result.push(decoded);\n      offset += decodedLength;\n      buffer = originalBuffer.slice(offset);\n      this.binaryCodec.constraints.checkListLength(result.length);\n    }\n\n    return new typesystem_1.List(type, result);\n  }\n\n  encodeNested(list) {\n    this.binaryCodec.constraints.checkListLength(list.getLength());\n    let lengthBuffer = Buffer.alloc(constants_1.SizeOfU32);\n    lengthBuffer.writeUInt32BE(list.getLength());\n    let itemsBuffers = [];\n\n    for (const item of list.getItems()) {\n      let itemBuffer = this.binaryCodec.encodeNested(item);\n      itemsBuffers.push(itemBuffer);\n    }\n\n    let buffer = Buffer.concat([lengthBuffer, ...itemsBuffers]);\n    return buffer;\n  }\n\n  encodeTopLevel(list) {\n    this.binaryCodec.constraints.checkListLength(list.getLength());\n    let itemsBuffers = [];\n\n    for (const item of list.getItems()) {\n      let itemBuffer = this.binaryCodec.encodeNested(item);\n      itemsBuffers.push(itemBuffer);\n    }\n\n    let buffer = Buffer.concat(itemsBuffers);\n    return buffer;\n  }\n\n}\n\nexports.ListBinaryCodec = ListBinaryCodec;","map":{"version":3,"mappings":"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","names":["ListBinaryCodec","constructor","binaryCodec","decodeNested","buffer","type","typeParameter","getFirstTypeParameter","result","numItems","readUInt32BE","constraints","checkListLength","originalBuffer","offset","constants_1","slice","i","decoded","decodedLength","push","typesystem_1","decodeTopLevel","length","encodeNested","list","getLength","lengthBuffer","Buffer","alloc","writeUInt32BE","itemsBuffers","item","getItems","itemBuffer","concat","encodeTopLevel","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/list.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}