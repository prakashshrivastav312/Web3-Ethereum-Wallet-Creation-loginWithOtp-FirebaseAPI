{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst multibase = require('multibase');\n\nconst multicodec = require('multicodec');\n\nconst multihash = require('multihashes');\n\nconst globSource = require('ipfs-utils/src/files/glob-source');\n\nconst urlSource = require('ipfs-utils/src/files/url-source');\n/**\n * @param {import(\"./lib/core\").ClientOptions} options\n */\n\n\nfunction ipfsClient() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    shutdown: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options)\n  };\n}\n\nObject.assign(ipfsClient, {\n  CID,\n  multiaddr,\n  multibase,\n  multicodec,\n  multihash,\n  globSource,\n  urlSource\n});\nmodule.exports = ipfsClient;\n/**\n * @typedef {Object} HttpOptions\n * @property {Headers | Record<string, string>} [headers] - An object or [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) instance that can be used to set custom HTTP headers. Note that this option can also be [configured globally](#custom-headers) via the constructor options.\n * @property {URLSearchParams | Record<string, string>} [searchParams] - An object or [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) instance that can be used to add additional query parameters to the query string sent with each request.\n *\n * @typedef {import('ipfs-core/src/utils').AbortOptions} AbortOptions}\n */\n\n/**\n * This is an utility type that can be used to derive type of the HTTP Client\n * API from the Core API. It takes type of the API factory (from ipfs-core),\n * derives API from it's return type and extends it last `options` parameter\n * with `HttpOptions`.\n *\n * This can be used to avoid (re)typing API interface when implementing it in\n * http client e.g you can annotate `ipfs.addAll` implementation with\n *\n * `@type {Implements<typeof import('ipfs-core/src/components/add-all')>}`\n *\n * **Caution**: This supports APIs with up to four parameters and last optional\n * `options` parameter, anything else will result to `never` type.\n *\n * @template {(config:any) => any} APIFactory\n * @typedef {APIWithExtraOptions<ReturnType<APIFactory>, HttpOptions>} Implements\n */\n\n/**\n * @template Key\n * @template {(config:any) => any} APIFactory\n * @typedef {import('./interface').APIMethodWithExtraOptions<ReturnType<APIFactory>, Key, HttpOptions>} ImplementsMethod\n */\n\n/**\n * @template API, Extra\n * @typedef {import('./interface').APIWithExtraOptions<API, Extra>} APIWithExtraOptions\n */","map":{"version":3,"names":["CID","require","multiaddr","multibase","multicodec","multihash","globSource","urlSource","ipfsClient","options","add","addAll","bitswap","block","bootstrap","cat","commands","config","dag","dht","diag","dns","files","get","getEndpointConfig","id","key","log","ls","mount","name","object","pin","ping","pubsub","refs","repo","resolve","stats","stop","shutdown","swarm","version","Object","assign","module","exports"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/index.js"],"sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst multihash = require('multihashes')\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\n\n/**\n * @param {import(\"./lib/core\").ClientOptions} options\n */\nfunction ipfsClient (options = {}) {\n  return {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    shutdown: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options)\n  }\n}\n\nObject.assign(ipfsClient, { CID, multiaddr, multibase, multicodec, multihash, globSource, urlSource })\n\nmodule.exports = ipfsClient\n\n/**\n * @typedef {Object} HttpOptions\n * @property {Headers | Record<string, string>} [headers] - An object or [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) instance that can be used to set custom HTTP headers. Note that this option can also be [configured globally](#custom-headers) via the constructor options.\n * @property {URLSearchParams | Record<string, string>} [searchParams] - An object or [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) instance that can be used to add additional query parameters to the query string sent with each request.\n *\n * @typedef {import('ipfs-core/src/utils').AbortOptions} AbortOptions}\n */\n\n/**\n * This is an utility type that can be used to derive type of the HTTP Client\n * API from the Core API. It takes type of the API factory (from ipfs-core),\n * derives API from it's return type and extends it last `options` parameter\n * with `HttpOptions`.\n *\n * This can be used to avoid (re)typing API interface when implementing it in\n * http client e.g you can annotate `ipfs.addAll` implementation with\n *\n * `@type {Implements<typeof import('ipfs-core/src/components/add-all')>}`\n *\n * **Caution**: This supports APIs with up to four parameters and last optional\n * `options` parameter, anything else will result to `never` type.\n *\n * @template {(config:any) => any} APIFactory\n * @typedef {APIWithExtraOptions<ReturnType<APIFactory>, HttpOptions>} Implements\n */\n\n/**\n * @template Key\n * @template {(config:any) => any} APIFactory\n * @typedef {import('./interface').APIMethodWithExtraOptions<ReturnType<APIFactory>, Key, HttpOptions>} ImplementsMethod\n */\n\n/**\n * @template API, Extra\n * @typedef {import('./interface').APIWithExtraOptions<API, Extra>} APIWithExtraOptions\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}