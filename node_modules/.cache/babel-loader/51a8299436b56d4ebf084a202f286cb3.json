{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendTransaction = exports.storeData = void 0;\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n\nconst bsc_1 = require(\"./bsc\");\n\nconst celo_1 = require(\"./celo\");\n\nconst eth_1 = require(\"./eth\");\n\nconst one_1 = require(\"./one\");\n\nconst polygon_1 = require(\"./polygon\");\n\nconst tron_1 = require(\"./tron\");\n\nconst xdc_1 = require(\"./xdc\");\n\nconst klaytn_1 = require(\"./klaytn\");\n/**\n * Store any arbitrary data on the blockchain.\n * @param testnet if we are on testnet or not\n * @param body Body of the transaction.\n * @param provider Optional provider to use for broadcasting signed tx to the blockchain.\n */\n\n\nconst storeData = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateRecord);\n\n  switch (body.chain) {\n    case model_1.Currency.ETH:\n      return await eth_1.sendStoreDataTransaction(body, provider);\n\n    case model_1.Currency.CELO:\n      return await celo_1.sendCeloStoreDataSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.BSC:\n      return await bsc_1.sendBscStoreDataTransaction(body, provider);\n\n    case model_1.Currency.KLAY:\n      return await klaytn_1.sendKlaytnStoreDataTransaction(testnet, body, provider);\n\n    case model_1.Currency.XDC:\n      return await xdc_1.sendXdcStoreDataTransaction(body, provider);\n\n    case model_1.Currency.ONE:\n      return await one_1.sendOneStoreDataTransaction(testnet, body, provider);\n\n    case model_1.Currency.MATIC:\n      return await polygon_1.sendPolygonStoreDataTransaction(testnet, body, provider);\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.storeData = storeData;\n/**\n * Perform any native asset transaction.\n * @param testnet if we are on testnet or not\n * @param chain Blockchain to work with. ETH,CELO,MATIC,ONE,TRON,BSC supported now.\n * @param body Body of the transaction.\n * @param provider Optional provider to use for broadcasting signed tx to the blockchain.\n */\n\nconst sendTransaction = async (testnet, chain, body, provider) => {\n  switch (chain) {\n    case model_1.Currency.CELO:\n      {\n        const b = body;\n        b.feeCurrency = model_1.Currency.CELO;\n        return b.contractAddress ? celo_1.sendCeloErc20Transaction(testnet, b) : celo_1.sendCeloOrcUsdTransaction(testnet, b, provider);\n      }\n\n    case model_1.Currency.ETH:\n      {\n        const b = body;\n        return b.contractAddress ? eth_1.sendCustomErc20Transaction(b, provider) : eth_1.sendEthOrErc20Transaction(b, provider);\n      }\n\n    case model_1.Currency.MATIC:\n      {\n        const b = body;\n        return b.contractAddress ? polygon_1.sendPolygonTransferErc20SignedTransaction(testnet, b, provider) : polygon_1.sendPolygonTransaction(testnet, b, provider);\n      }\n\n    case model_1.Currency.KLAY:\n      {\n        const b = body;\n        return b.contractAddress ? klaytn_1.sendKlaytnTransferErc20SignedTransaction(testnet, b, provider) : klaytn_1.sendKlaytnTransaction(testnet, b, provider);\n      }\n\n    case model_1.Currency.ONE:\n      {\n        const b = body;\n        return b.contractAddress ? one_1.sendOneTransfer20SignedTransaction(testnet, b, provider) : one_1.sendOneTransaction(testnet, b, provider);\n      }\n\n    case model_1.Currency.TRON:\n      // @ts-ignore\n      if (body.contractAddress) {\n        throw new Error('Cannot work with TRON and contract address');\n      }\n\n      return tron_1.sendTronTransaction(testnet, body);\n\n    case model_1.Currency.BSC:\n      {\n        const b = body;\n        return b.contractAddress ? bsc_1.sendCustomBep20Transaction(b, provider) : bsc_1.sendBscOrBep20Transaction(b, provider);\n      }\n\n    default:\n      throw new Error('Unsupported blockchain.');\n  }\n};\n\nexports.sendTransaction = sendTransaction;","map":{"version":3,"mappings":"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","names":["storeData","testnet","body","provider","tatum_1","model_1","chain","ETH","eth_1","CELO","celo_1","BSC","bsc_1","KLAY","klaytn_1","XDC","xdc_1","ONE","one_1","MATIC","polygon_1","Error","exports","sendTransaction","b","feeCurrency","contractAddress","TRON","tron_1"],"sourceRoot":"","sources":["../../../src/transaction/abstraction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}