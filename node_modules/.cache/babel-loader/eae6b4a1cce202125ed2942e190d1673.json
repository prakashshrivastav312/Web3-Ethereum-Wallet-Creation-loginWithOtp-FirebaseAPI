{"ast":null,"code":"'use strict';\n\nconst withIs = require('class-is');\n\nconst sortLinks = require('./sortLinks');\n\nconst DAGLink = require('../dag-link/dagLink');\n\nconst {\n  serializeDAGNode\n} = require('../serialize.js');\n\nconst toDAGLink = require('./toDagLink');\n\nconst addLink = require('./addLink');\n\nconst rmLink = require('./rmLink');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nclass DAGNode {\n  constructor(data) {\n    let links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let serializedSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (!data) {\n      data = new Uint8Array(0);\n    }\n\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data);\n    }\n\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!');\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!');\n    }\n\n    links = links.map(link => {\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n    });\n    sortLinks(links);\n    Object.defineProperties(this, {\n      Data: {\n        value: data,\n        writable: false,\n        enumerable: true\n      },\n      Links: {\n        value: links,\n        writable: false,\n        enumerable: true\n      },\n      _serializedSize: {\n        value: serializedSize,\n        writable: true,\n        enumerable: false\n      },\n      _size: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this.Links.map(l => l.toJSON()),\n        size: this.size\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  toString() {\n    return `DAGNode <data: \"${uint8ArrayToString(this.Data, 'base64urlpad')}\", links: ${this.Links.length}, size: ${this.size}>`;\n  }\n\n  _invalidateCached() {\n    this._serializedSize = null;\n    this._size = null;\n  }\n\n  addLink(link) {\n    this._invalidateCached();\n\n    return addLink(this, link);\n  }\n\n  rmLink(link) {\n    this._invalidateCached();\n\n    return rmLink(this, link);\n  } // @returns {Promise.<DAGLink>}\n\n\n  toDAGLink(options) {\n    return toDAGLink(this, options);\n  }\n\n  serialize() {\n    return serializeDAGNode(this);\n  }\n\n  get size() {\n    if (this._size === null) {\n      if (this._serializedSize === null) {\n        this._serializedSize = this.serialize().length;\n      }\n\n      this._size = this.Links.reduce((sum, l) => sum + l.Tsize, this._serializedSize);\n    }\n\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});","map":{"version":3,"names":["withIs","require","sortLinks","DAGLink","serializeDAGNode","toDAGLink","addLink","rmLink","uint8ArrayFromString","uint8ArrayToString","DAGNode","constructor","data","links","serializedSize","Uint8Array","Error","map","link","isDAGLink","util","createDagLinkFromB58EncodedHash","Object","defineProperties","Data","value","writable","enumerable","Links","_serializedSize","_size","toJSON","_json","freeze","l","size","assign","toString","length","_invalidateCached","options","serialize","reduce","sum","Tsize","exports","module","className","symbolName"],"sources":["C:/Users/acer/node_modules/ipld-dag-pb/src/dag-node/dagNode.js"],"sourcesContent":["'use strict'\n\nconst withIs = require('class-is')\nconst sortLinks = require('./sortLinks')\nconst DAGLink = require('../dag-link/dagLink')\nconst { serializeDAGNode } = require('../serialize.js')\nconst toDAGLink = require('./toDagLink')\nconst addLink = require('./addLink')\nconst rmLink = require('./rmLink')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\n\nclass DAGNode {\n  constructor (data, links = [], serializedSize = null) {\n    if (!data) {\n      data = new Uint8Array(0)\n    }\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data)\n    }\n\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!')\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!')\n    }\n\n    links = links.map((link) => {\n      return DAGLink.isDAGLink(link)\n        ? link\n        : DAGLink.util.createDagLinkFromB58EncodedHash(link)\n    })\n    sortLinks(links)\n\n    Object.defineProperties(this, {\n      Data: { value: data, writable: false, enumerable: true },\n      Links: { value: links, writable: false, enumerable: true },\n      _serializedSize: { value: serializedSize, writable: true, enumerable: false },\n      _size: { value: null, writable: true, enumerable: false }\n    })\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this.Links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${uint8ArrayToString(this.Data, 'base64urlpad')}\", links: ${this.Links.length}, size: ${this.size}>`\n  }\n\n  _invalidateCached () {\n    this._serializedSize = null\n    this._size = null\n  }\n\n  addLink (link) {\n    this._invalidateCached()\n    return addLink(this, link)\n  }\n\n  rmLink (link) {\n    this._invalidateCached()\n    return rmLink(this, link)\n  }\n\n  // @returns {Promise.<DAGLink>}\n  toDAGLink (options) {\n    return toDAGLink(this, options)\n  }\n\n  serialize () {\n    return serializeDAGNode(this)\n  }\n\n  get size () {\n    if (this._size === null) {\n      if (this._serializedSize === null) {\n        this._serializedSize = this.serialize().length\n      }\n      this._size = this.Links.reduce((sum, l) => sum + l.Tsize, this._serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}