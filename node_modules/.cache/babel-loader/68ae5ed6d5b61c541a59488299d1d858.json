{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RippleAPI = void 0;\n\nconst events_1 = require(\"events\");\n\nconst common_1 = require(\"./common\");\n\nconst server_1 = require(\"./server/server\");\n\nconst transaction_1 = __importDefault(require(\"./ledger/transaction\"));\n\nconst transactions_1 = __importDefault(require(\"./ledger/transactions\"));\n\nconst trustlines_1 = __importDefault(require(\"./ledger/trustlines\"));\n\nconst balances_1 = __importDefault(require(\"./ledger/balances\"));\n\nconst balance_sheet_1 = __importDefault(require(\"./ledger/balance-sheet\"));\n\nconst pathfind_1 = __importDefault(require(\"./ledger/pathfind\"));\n\nconst orders_1 = __importDefault(require(\"./ledger/orders\"));\n\nconst orderbook_1 = require(\"./ledger/orderbook\");\n\nconst settings_1 = require(\"./ledger/settings\");\n\nconst accountinfo_1 = __importDefault(require(\"./ledger/accountinfo\"));\n\nconst accountobjects_1 = __importDefault(require(\"./ledger/accountobjects\"));\n\nconst payment_channel_1 = __importDefault(require(\"./ledger/payment-channel\"));\n\nconst payment_1 = __importDefault(require(\"./transaction/payment\"));\n\nconst trustline_1 = __importDefault(require(\"./transaction/trustline\"));\n\nconst order_1 = __importDefault(require(\"./transaction/order\"));\n\nconst ordercancellation_1 = __importDefault(require(\"./transaction/ordercancellation\"));\n\nconst escrow_creation_1 = __importDefault(require(\"./transaction/escrow-creation\"));\n\nconst escrow_execution_1 = __importDefault(require(\"./transaction/escrow-execution\"));\n\nconst escrow_cancellation_1 = __importDefault(require(\"./transaction/escrow-cancellation\"));\n\nconst payment_channel_create_1 = __importDefault(require(\"./transaction/payment-channel-create\"));\n\nconst payment_channel_fund_1 = __importDefault(require(\"./transaction/payment-channel-fund\"));\n\nconst payment_channel_claim_1 = __importDefault(require(\"./transaction/payment-channel-claim\"));\n\nconst check_create_1 = __importDefault(require(\"./transaction/check-create\"));\n\nconst check_cancel_1 = __importDefault(require(\"./transaction/check-cancel\"));\n\nconst check_cash_1 = __importDefault(require(\"./transaction/check-cash\"));\n\nconst settings_2 = __importDefault(require(\"./transaction/settings\"));\n\nconst ticket_1 = __importDefault(require(\"./transaction/ticket\"));\n\nconst sign_1 = __importDefault(require(\"./transaction/sign\"));\n\nconst combine_1 = __importDefault(require(\"./transaction/combine\"));\n\nconst submit_1 = __importDefault(require(\"./transaction/submit\"));\n\nconst utils_1 = require(\"./offline/utils\");\n\nconst derive_1 = require(\"./offline/derive\");\n\nconst ledgerhash_1 = __importDefault(require(\"./offline/ledgerhash\"));\n\nconst sign_payment_channel_claim_1 = __importDefault(require(\"./offline/sign-payment-channel-claim\"));\n\nconst verify_payment_channel_claim_1 = __importDefault(require(\"./offline/verify-payment-channel-claim\"));\n\nconst ledger_1 = __importDefault(require(\"./ledger/ledger\"));\n\nconst rangeset_1 = __importDefault(require(\"./common/rangeset\"));\n\nconst ledgerUtils = __importStar(require(\"./ledger/utils\"));\n\nconst transactionUtils = __importStar(require(\"./transaction/utils\"));\n\nconst schemaValidator = __importStar(require(\"./common/schema-validator\"));\n\nconst serverinfo_1 = require(\"./common/serverinfo\");\n\nconst utils_2 = require(\"./ledger/utils\");\n\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\n\nconst hashes_1 = require(\"./common/hashes\");\n\nconst wallet_generation_1 = __importDefault(require(\"./wallet/wallet-generation\"));\n\nfunction getCollectKeyFromCommand(command) {\n  switch (command) {\n    case 'account_offers':\n    case 'book_offers':\n      return 'offers';\n\n    case 'account_lines':\n      return 'lines';\n\n    default:\n      return undefined;\n  }\n}\n\nclass RippleAPI extends events_1.EventEmitter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.generateAddress = utils_1.generateAddress;\n    this.generateXAddress = utils_1.generateXAddress;\n    this.connect = server_1.connect;\n    this.disconnect = server_1.disconnect;\n    this.isConnected = server_1.isConnected;\n    this.getServerInfo = serverinfo_1.getServerInfo;\n    this.getFee = serverinfo_1.getFee;\n    this.getLedgerVersion = server_1.getLedgerVersion;\n    this.getTransaction = transaction_1.default;\n    this.getTransactions = transactions_1.default;\n    this.getTrustlines = trustlines_1.default;\n    this.getBalances = balances_1.default;\n    this.getBalanceSheet = balance_sheet_1.default;\n    this.getPaths = pathfind_1.default;\n    this.getOrderbook = orderbook_1.getOrderbook;\n    this.getOrders = orders_1.default;\n    this.getSettings = settings_1.getSettings;\n    this.getAccountInfo = accountinfo_1.default;\n    this.getAccountObjects = accountobjects_1.default;\n    this.getPaymentChannel = payment_channel_1.default;\n    this.getLedger = ledger_1.default;\n    this.parseAccountFlags = settings_1.parseAccountFlags;\n    this.preparePayment = payment_1.default;\n    this.prepareTrustline = trustline_1.default;\n    this.prepareOrder = order_1.default;\n    this.prepareOrderCancellation = ordercancellation_1.default;\n    this.prepareEscrowCreation = escrow_creation_1.default;\n    this.prepareEscrowExecution = escrow_execution_1.default;\n    this.prepareEscrowCancellation = escrow_cancellation_1.default;\n    this.preparePaymentChannelCreate = payment_channel_create_1.default;\n    this.preparePaymentChannelFund = payment_channel_fund_1.default;\n    this.preparePaymentChannelClaim = payment_channel_claim_1.default;\n    this.prepareCheckCreate = check_create_1.default;\n    this.prepareCheckCash = check_cash_1.default;\n    this.prepareCheckCancel = check_cancel_1.default;\n    this.prepareTicketCreate = ticket_1.default;\n    this.prepareSettings = settings_2.default;\n    this.sign = sign_1.default;\n    this.combine = combine_1.default;\n    this.submit = submit_1.default;\n    this.deriveKeypair = derive_1.deriveKeypair;\n    this.deriveAddress = derive_1.deriveAddress;\n    this.computeLedgerHash = ledgerhash_1.default;\n    this.signPaymentChannelClaim = sign_payment_channel_claim_1.default;\n    this.verifyPaymentChannelClaim = verify_payment_channel_claim_1.default;\n    this.generateFaucetWallet = wallet_generation_1.default;\n    this.errors = common_1.errors;\n    this.xrpToDrops = common_1.xrpToDrops;\n    this.dropsToXrp = common_1.dropsToXrp;\n    this.rippleTimeToISO8601 = common_1.rippleTimeToISO8601;\n    this.iso8601ToRippleTime = common_1.iso8601ToRippleTime;\n    this.txFlags = common_1.txFlags;\n    this.accountSetFlags = common_1.constants.AccountSetFlags;\n    this.isValidAddress = schemaValidator.isValidAddress;\n    this.isValidSecret = schemaValidator.isValidSecret;\n    common_1.validate.apiOptions(options);\n    this._feeCushion = options.feeCushion || 1.2;\n    this._maxFeeXRP = options.maxFeeXRP || '2';\n    const serverURL = options.server;\n\n    if (serverURL != null) {\n      this.connection = new common_1.Connection(serverURL, options);\n      this.connection.on('ledgerClosed', message => {\n        this.emit('ledger', server_1.formatLedgerClose(message));\n      });\n      this.connection.on('error', (errorCode, errorMessage, data) => {\n        this.emit('error', errorCode, errorMessage, data);\n      });\n      this.connection.on('connected', () => {\n        this.emit('connected');\n      });\n      this.connection.on('disconnected', code => {\n        let finalCode = code;\n\n        if (finalCode === 1005 || finalCode === 4000) {\n          finalCode = 1000;\n        }\n\n        this.emit('disconnected', finalCode);\n      });\n    } else {\n      this.connection = new common_1.Connection(null, options);\n    }\n  }\n\n  request(command) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.connection.request(Object.assign(Object.assign({}, params), {\n        command,\n        account: params.account ? common_1.ensureClassicAddress(params.account) : undefined\n      }));\n    });\n  }\n\n  hasNextPage(currentResponse) {\n    return !!currentResponse.marker;\n  }\n\n  requestNextPage(command) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let currentResponse = arguments.length > 2 ? arguments[2] : undefined;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!currentResponse.marker) {\n        return Promise.reject(new common_1.errors.NotFoundError('response does not have a next page'));\n      }\n\n      const nextPageParams = Object.assign({}, params, {\n        marker: currentResponse.marker\n      });\n      return this.request(command, nextPageParams);\n    });\n  }\n\n  prepareTransaction(txJSON) {\n    let instructions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return transactionUtils.prepareTransaction(txJSON, this, instructions);\n    });\n  }\n\n  convertStringToHex(string) {\n    return transactionUtils.convertStringToHex(string);\n  }\n\n  _requestAll(command) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      const collectKey = options.collect || getCollectKeyFromCommand(command);\n\n      if (!collectKey) {\n        throw new common_1.errors.ValidationError(`no collect key for command ${command}`);\n      }\n\n      const countTo = params.limit != null ? params.limit : Infinity;\n      let count = 0;\n      let marker = params.marker;\n      let lastBatchLength;\n      const results = [];\n\n      do {\n        const countRemaining = utils_2.clamp(countTo - count, 10, 400);\n        const repeatProps = Object.assign(Object.assign({}, params), {\n          limit: countRemaining,\n          marker\n        });\n        const singleResult = yield this.request(command, repeatProps);\n        const collectedData = singleResult[collectKey];\n        marker = singleResult['marker'];\n        results.push(singleResult);\n        const isExpectedFormat = Array.isArray(collectedData);\n\n        if (isExpectedFormat) {\n          count += collectedData.length;\n          lastBatchLength = collectedData.length;\n        } else {\n          lastBatchLength = 0;\n        }\n      } while (!!marker && count < countTo && lastBatchLength !== 0);\n\n      return results;\n    });\n  }\n\n}\n\nexports.RippleAPI = RippleAPI;\nRippleAPI._PRIVATE = {\n  validate: common_1.validate,\n  RangeSet: rangeset_1.default,\n  ledgerUtils,\n  schemaValidator\n};\nRippleAPI.renameCounterpartyToIssuer = utils_2.renameCounterpartyToIssuer;\nRippleAPI.formatBidsAndAsks = orderbook_1.formatBidsAndAsks;\nRippleAPI.deriveXAddress = derive_1.deriveXAddress;\nRippleAPI.deriveClassicAddress = derive_1.deriveAddress;\nRippleAPI.classicAddressToXAddress = ripple_address_codec_1.classicAddressToXAddress;\nRippleAPI.xAddressToClassicAddress = ripple_address_codec_1.xAddressToClassicAddress;\nRippleAPI.isValidXAddress = ripple_address_codec_1.isValidXAddress;\nRippleAPI.isValidClassicAddress = ripple_address_codec_1.isValidClassicAddress;\nRippleAPI.encodeSeed = ripple_address_codec_1.encodeSeed;\nRippleAPI.decodeSeed = ripple_address_codec_1.decodeSeed;\nRippleAPI.encodeAccountID = ripple_address_codec_1.encodeAccountID;\nRippleAPI.decodeAccountID = ripple_address_codec_1.decodeAccountID;\nRippleAPI.encodeNodePublic = ripple_address_codec_1.encodeNodePublic;\nRippleAPI.decodeNodePublic = ripple_address_codec_1.decodeNodePublic;\nRippleAPI.encodeAccountPublic = ripple_address_codec_1.encodeAccountPublic;\nRippleAPI.decodeAccountPublic = ripple_address_codec_1.decodeAccountPublic;\nRippleAPI.encodeXAddress = ripple_address_codec_1.encodeXAddress;\nRippleAPI.decodeXAddress = ripple_address_codec_1.decodeXAddress;\nRippleAPI.computeBinaryTransactionHash = hashes_1.computeBinaryTransactionHash;\nRippleAPI.computeTransactionHash = hashes_1.computeTransactionHash;\nRippleAPI.computeBinaryTransactionSigningHash = hashes_1.computeBinaryTransactionSigningHash;\nRippleAPI.computeAccountLedgerObjectID = hashes_1.computeAccountLedgerObjectID;\nRippleAPI.computeSignerListLedgerObjectID = hashes_1.computeSignerListLedgerObjectID;\nRippleAPI.computeOrderID = hashes_1.computeOrderID;\nRippleAPI.computeTrustlineHash = hashes_1.computeTrustlineHash;\nRippleAPI.computeTransactionTreeHash = hashes_1.computeTransactionTreeHash;\nRippleAPI.computeStateTreeHash = hashes_1.computeStateTreeHash;\nRippleAPI.computeLedgerHash = ledgerhash_1.default;\nRippleAPI.computeEscrowHash = hashes_1.computeEscrowHash;\nRippleAPI.computePaymentChannelHash = hashes_1.computePaymentChannelHash;\nRippleAPI.txFlags = common_1.txFlags;\nRippleAPI.accountSetFlags = common_1.constants.AccountSetFlags;","map":{"version":3,"mappings":"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","names":["getCollectKeyFromCommand","command","undefined","RippleAPI","events_1","constructor","options","utils_1","server_1","serverinfo_1","transaction_1","transactions_1","trustlines_1","balances_1","balance_sheet_1","pathfind_1","orderbook_1","orders_1","settings_1","accountinfo_1","accountobjects_1","payment_channel_1","ledger_1","payment_1","trustline_1","order_1","ordercancellation_1","escrow_creation_1","escrow_execution_1","escrow_cancellation_1","payment_channel_create_1","payment_channel_fund_1","payment_channel_claim_1","check_create_1","check_cash_1","check_cancel_1","ticket_1","settings_2","sign_1","combine_1","submit_1","derive_1","ledgerhash_1","sign_payment_channel_claim_1","verify_payment_channel_claim_1","wallet_generation_1","common_1","AccountSetFlags","schemaValidator","isValidAddress","isValidSecret","apiOptions","_feeCushion","feeCushion","_maxFeeXRP","maxFeeXRP","serverURL","server","connection","on","message","emit","errorCode","errorMessage","data","code","finalCode","request","params","Object","account","hasNextPage","currentResponse","marker","requestNextPage","Promise","reject","NotFoundError","nextPageParams","assign","prepareTransaction","txJSON","instructions","transactionUtils","convertStringToHex","string","_requestAll","collectKey","collect","ValidationError","countTo","limit","Infinity","count","lastBatchLength","results","countRemaining","utils_2","repeatProps","singleResult","collectedData","push","isExpectedFormat","Array","isArray","length","exports","validate","RangeSet","rangeset_1","ledgerUtils","ripple_address_codec_1","hashes_1"],"sourceRoot":"","sources":["../../src/api.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}