{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transferHexToBase58Address = exports.signTrxKMSTransaction = exports.prepareTronUpdateCashbackForAuthorTrc721SignedTransaction = exports.prepareTronMintMultipleTrc721SignedTransaction = exports.prepareTronBurnTrc721SignedTransaction = exports.prepareTronTransferTrc721SignedTransaction = exports.prepareTronMintTrc721SignedTransaction = exports.prepareTronMintCashbackTrc721SignedTransaction = exports.prepareTronDeployMarketplaceListingSignedTransaction = exports.prepareTronGenerateCustodialWalletSignedTransaction = exports.prepareTronDeployTrc721SignedTransaction = exports.prepareTronCreateTrc20SignedKMSTransaction = exports.prepareTronCreateTrc10SignedKMSTransaction = exports.prepareTronTrc20SignedKMSTransaction = exports.prepareTronTrc10SignedKMSTransaction = exports.prepareTronFreezeKMSTransaction = exports.prepareTronSignedKMSTransaction = exports.prepareTronCreateTrc20SignedTransaction = exports.prepareTronCreateTrc10SignedTransaction = exports.prepareTronTrc20SignedTransaction = exports.prepareTronCustodialTransferBatch = exports.prepareTronSmartContractInvocation = exports.getTronTrc20ContractDecimals = exports.tronGetAccountTrc20Address = exports.prepareTronTrc10SignedTransaction = exports.prepareTronFreezeTransaction = exports.prepareTronSignedTransaction = exports.sendTronUpdateCashbackForAuthorTrc721SignedTransaction = exports.sendTronMintMultipleTrc721SignedTransaction = exports.sendTronBurnTrc721SignedTransaction = exports.sendTronTransferTrc721SignedTransaction = exports.sendTronMintTrc721SignedTransaction = exports.sendTronMintCashbackTrc721SignedTransaction = exports.sendTronDeployMarketplaceListingSignedTransaction = exports.sendTronGenerateCustodialWalletSignedTransaction = exports.sendTronDeployTrc721SignedTransaction = exports.convertAddressToHex = exports.convertAddressFromHex = exports.signTronKMSTransaction = exports.createTronTrc20Transaction = exports.createTronTrc10Transaction = exports.sendTronTrc20Transaction = exports.sendTronTrc10Transaction = exports.freezeTronTransaction = exports.sendTronTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst marketplace_1 = require(\"../contracts/marketplace\");\n\nconst token_abi_1 = __importDefault(require(\"../contracts/trc20/token_abi\"));\n\nconst token_bytecode_1 = __importDefault(require(\"../contracts/trc20/token_bytecode\"));\n\nconst trc721_abi_1 = __importDefault(require(\"../contracts/trc721/trc721_abi\"));\n\nconst trc721_bytecode_1 = __importDefault(require(\"../contracts/trc721/trc721_bytecode\"));\n\nconst model_1 = require(\"../model\");\n\nconst wallet_1 = require(\"../wallet\"); // tslint:disable-next-line:no-var-requires\n\n\nconst TronWeb = require('tronweb');\n\nconst prepareTronWeb = (testnet, provider) => {\n  const HttpProvider = TronWeb.providers.HttpProvider;\n  const url = provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/tron/node/${process.env.TATUM_API_KEY}`;\n  const fullNode = new HttpProvider(url);\n  const solidityNode = new HttpProvider(url);\n  const eventServer = new HttpProvider(url);\n  const tronWeb = new TronWeb(fullNode, solidityNode, eventServer);\n  tronWeb.setHeader({\n    'TRON-PRO-API-KEY': process.env.TRON_PRO_API_KEY\n  });\n  return tronWeb;\n};\n/**\n * Send Tron transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\n\nconst sendTronTransaction = async (testnet, body) => {\n  return blockchain_1.tronBroadcast(await exports.prepareTronSignedTransaction(testnet, body), body.signatureId);\n};\n\nexports.sendTronTransaction = sendTronTransaction;\n/**\n * Send Tron Freeze balance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst freezeTronTransaction = async (testnet, body) => {\n  return blockchain_1.tronBroadcast(await exports.prepareTronFreezeTransaction(testnet, body), body.signatureId);\n};\n\nexports.freezeTronTransaction = freezeTronTransaction;\n/**\n * Send Tron TRC10 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendTronTrc10Transaction = async (testnet, body) => {\n  return blockchain_1.tronBroadcast(await exports.prepareTronTrc10SignedTransaction(testnet, body), body.signatureId);\n};\n\nexports.sendTronTrc10Transaction = sendTronTrc10Transaction;\n/**\n * Send Tron TRC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendTronTrc20Transaction = async (testnet, body) => {\n  return blockchain_1.tronBroadcast(await exports.prepareTronTrc20SignedTransaction(testnet, body), body.signatureId);\n};\n\nexports.sendTronTrc20Transaction = sendTronTrc20Transaction;\n/**\n * Create Tron TRC10 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst createTronTrc10Transaction = async (testnet, body) => {\n  return blockchain_1.tronBroadcast(await exports.prepareTronCreateTrc10SignedTransaction(testnet, body), body.signatureId);\n};\n\nexports.createTronTrc10Transaction = createTronTrc10Transaction;\n/**\n * Create Tron TRC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst createTronTrc20Transaction = async (testnet, body) => {\n  return blockchain_1.tronBroadcast(await exports.prepareTronCreateTrc20SignedTransaction(testnet, body), body.signatureId);\n};\n\nexports.createTronTrc20Transaction = createTronTrc20Transaction;\n/**\n * Sign Tron pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signTronKMSTransaction = async (tx, fromPrivateKey, testnet) => {\n  if (tx.chain !== model_1.Currency.TRON) {\n    throw Error('Unsupported chain.');\n  }\n\n  const tronWeb = prepareTronWeb(testnet);\n  const transactionConfig = JSON.parse(tx.serializedTransaction);\n  return JSON.stringify(await tronWeb.trx.sign(transactionConfig, fromPrivateKey));\n};\n\nexports.signTronKMSTransaction = signTronKMSTransaction;\n\nconst convertAddressFromHex = address => TronWeb.address.fromHex(address);\n\nexports.convertAddressFromHex = convertAddressFromHex;\n\nconst convertAddressToHex = address => TronWeb.address.toHex(address);\n\nexports.convertAddressToHex = convertAddressToHex;\n/**\n * Send Tron deploy trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendTronDeployTrc721SignedTransaction = async (testnet, body) => await blockchain_1.tronBroadcast(await exports.prepareTronDeployTrc721SignedTransaction(testnet, body), body.signatureId);\n\nexports.sendTronDeployTrc721SignedTransaction = sendTronDeployTrc721SignedTransaction;\n/**\n * Send Tron generate custodial wallet transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendTronGenerateCustodialWalletSignedTransaction = async (testnet, body, provider) => await blockchain_1.tronBroadcast(await exports.prepareTronGenerateCustodialWalletSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendTronGenerateCustodialWalletSignedTransaction = sendTronGenerateCustodialWalletSignedTransaction;\n/**\n * Deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum provider will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendTronDeployMarketplaceListingSignedTransaction = async (testnet, body, provider) => await blockchain_1.tronBroadcast(await exports.prepareTronDeployMarketplaceListingSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendTronDeployMarketplaceListingSignedTransaction = sendTronDeployMarketplaceListingSignedTransaction;\n/**\n * Send Tron mint cashback trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendTronMintCashbackTrc721SignedTransaction = async (testnet, body) => await blockchain_1.tronBroadcast(await exports.prepareTronMintCashbackTrc721SignedTransaction(testnet, body), body.signatureId);\n\nexports.sendTronMintCashbackTrc721SignedTransaction = sendTronMintCashbackTrc721SignedTransaction;\n/**\n * Send Tron mint trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendTronMintTrc721SignedTransaction = async (testnet, body) => await blockchain_1.tronBroadcast(await exports.prepareTronMintTrc721SignedTransaction(testnet, body), body.signatureId);\n\nexports.sendTronMintTrc721SignedTransaction = sendTronMintTrc721SignedTransaction;\n/**\n * Send Tron transfer trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendTronTransferTrc721SignedTransaction = async (testnet, body) => await blockchain_1.tronBroadcast(await exports.prepareTronTransferTrc721SignedTransaction(testnet, body), body.signatureId);\n\nexports.sendTronTransferTrc721SignedTransaction = sendTronTransferTrc721SignedTransaction;\n/**\n * Send Tron burn trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendTronBurnTrc721SignedTransaction = async (testnet, body) => await blockchain_1.tronBroadcast(await exports.prepareTronBurnTrc721SignedTransaction(testnet, body), body.signatureId);\n\nexports.sendTronBurnTrc721SignedTransaction = sendTronBurnTrc721SignedTransaction;\n/**\n * Send Tron mint multiple trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendTronMintMultipleTrc721SignedTransaction = async (testnet, body) => await blockchain_1.tronBroadcast(await exports.prepareTronMintMultipleTrc721SignedTransaction(testnet, body), body.signatureId);\n\nexports.sendTronMintMultipleTrc721SignedTransaction = sendTronMintMultipleTrc721SignedTransaction;\n/**\n * Send Tron update cashback for author trc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendTronUpdateCashbackForAuthorTrc721SignedTransaction = async (testnet, body) => await blockchain_1.tronBroadcast(await exports.prepareTronUpdateCashbackForAuthorTrc721SignedTransaction(testnet, body), body.signatureId);\n\nexports.sendTronUpdateCashbackForAuthorTrc721SignedTransaction = sendTronUpdateCashbackForAuthorTrc721SignedTransaction;\n/**\n * Sign Tron transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferTron);\n  const {\n    fromPrivateKey,\n    to,\n    amount\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.sendTrx(to, tronWeb.toSun(amount), tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey)));\n  return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));\n};\n\nexports.prepareTronSignedTransaction = prepareTronSignedTransaction;\n/**\n * Sign Tron Freeze balance transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider optional provider to enter. if not present, Tatum provider will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronFreezeTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.FreezeTron);\n  const {\n    fromPrivateKey,\n    receiver,\n    amount,\n    resource,\n    duration\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.freezeBalance(tronWeb.toSun(parseFloat(amount)), duration, resource, tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey)), receiver);\n  return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));\n};\n\nexports.prepareTronFreezeTransaction = prepareTronFreezeTransaction;\n/**\n * Sign Tron TRC10 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param precision\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronTrc10SignedTransaction = async (testnet, body, precision, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferTronTrc10);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    amount\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.sendToken(to, new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(precision || (await getTrc10Precision(testnet, tokenId)))), tokenId, tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey)));\n  return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));\n};\n\nexports.prepareTronTrc10SignedTransaction = prepareTronTrc10SignedTransaction;\n/**\n * Get TRC20 balance for the given tron address.\n * @param testnet mainnet or testnet version\n * @param address the address whose balance is returned\n * @param contractAddress the TRC20 contract address\n * @param provider\n */\n\nconst tronGetAccountTrc20Address = async (testnet, address, contractAddress, provider) => {\n  if (!contractAddress) {\n    throw new Error('Contract address not set.');\n  }\n\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(contractAddress);\n  const contractInstance = await tronWeb.contract().at(contractAddress);\n  return await contractInstance.balanceOf(address).call();\n};\n\nexports.tronGetAccountTrc20Address = tronGetAccountTrc20Address;\n\nconst getTronTrc20ContractDecimals = async (testnet, contractAddress, provider) => {\n  if (!contractAddress) {\n    throw new Error('Contract address not set.');\n  }\n\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(contractAddress);\n  const contractInstance = await tronWeb.contract().at(contractAddress);\n  return await contractInstance.decimals().call();\n};\n\nexports.getTronTrc20ContractDecimals = getTronTrc20ContractDecimals;\n/**\n * Sign Tron custodial transfer transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param feeLimit\n * @param from\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronSmartContractInvocation = async (testnet, body, feeLimit, from, provider) => {\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(body.contractAddress);\n  const sender = from || tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(body.fromPrivateKey));\n  const {\n    transaction\n  } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(body.contractAddress), body.methodName, {\n    feeLimit: tronWeb.toSun(feeLimit),\n    from: sender,\n    callValue: tronWeb.toSun(body.amount || 0)\n  }, body.params, sender);\n\n  if (body.signatureId) {\n    return JSON.stringify(transaction);\n  }\n\n  return JSON.stringify(await tronWeb.trx.sign(transaction, body.fromPrivateKey));\n};\n\nexports.prepareTronSmartContractInvocation = prepareTronSmartContractInvocation;\n/**\n * Sign Tron custodial transfer batch transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param feeLimit\n * @param from\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronCustodialTransferBatch = async (testnet, body, feeLimit, from, provider) => {\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(body.contractAddress);\n  const sender = from || tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(body.fromPrivateKey));\n  const {\n    transaction\n  } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(body.contractAddress), 'transferBatch(address[],uint256[],address[],uint256[],uint256[])', {\n    feeLimit: tronWeb.toSun(feeLimit),\n    from: sender\n  }, [{\n    type: 'address[]',\n    value: body.params[0].map(tronWeb.address.toHex)\n  }, {\n    type: 'uint256[]',\n    value: body.params[1]\n  }, {\n    type: 'address[]',\n    value: body.params[2].map(tronWeb.address.toHex)\n  }, {\n    type: 'uint256[]',\n    value: body.params[3]\n  }, {\n    type: 'uint256[]',\n    value: body.params[4]\n  }], sender);\n\n  if (body.signatureId) {\n    return JSON.stringify(transaction);\n  }\n\n  return JSON.stringify(await tronWeb.trx.sign(transaction, body.fromPrivateKey));\n};\n\nexports.prepareTronCustodialTransferBatch = prepareTronCustodialTransferBatch;\n/**\n * Sign Tron TRC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronTrc20SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferTronTrc20);\n  const {\n    fromPrivateKey,\n    to,\n    tokenAddress,\n    amount,\n    feeLimit\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(tokenAddress);\n  const contractInstance = await tronWeb.contract().at(tokenAddress);\n  const decimals = await contractInstance.decimals().call();\n  const {\n    transaction\n  } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(tokenAddress), 'transfer(address,uint256)', {\n    feeLimit: tronWeb.toSun(feeLimit),\n    from: tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey))\n  }, [{\n    type: 'address',\n    value: tronWeb.address.toHex(to)\n  }, {\n    type: 'uint256',\n    value: `0x${new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(decimals)).toString(16)}`\n  }], tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey)));\n  return JSON.stringify(await tronWeb.trx.sign(transaction, fromPrivateKey));\n};\n\nexports.prepareTronTrc20SignedTransaction = prepareTronTrc20SignedTransaction;\n/**\n * Sign create Tron TRC10 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronCreateTrc10SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateTronTrc10);\n  const {\n    fromPrivateKey,\n    name,\n    abbreviation,\n    description,\n    url,\n    totalSupply,\n    decimals\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.createToken({\n    name,\n    abbreviation,\n    description,\n    url,\n    totalSupply: new bignumber_js_1.default(totalSupply).multipliedBy(new bignumber_js_1.default(10).pow(decimals)),\n    trxRatio: 1,\n    tokenRatio: 1,\n    saleStart: Date.now() + 60000,\n    saleEnd: Date.now() + 100000,\n    freeBandwidth: 0,\n    freeBandwidthLimit: 0,\n    frozenAmount: 0,\n    frozenDuration: 0,\n    precision: decimals\n  }, tronWeb.address.fromPrivateKey(fromPrivateKey));\n  return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));\n};\n\nexports.prepareTronCreateTrc10SignedTransaction = prepareTronCreateTrc10SignedTransaction;\n/**\n * Sign create Tron TRC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronCreateTrc20SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateTronTrc20);\n  const {\n    fromPrivateKey,\n    name,\n    decimals,\n    recipient,\n    symbol,\n    totalSupply\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.createSmartContract({\n    feeLimit: 1000000000,\n    callValue: 0,\n    userFeePercentage: 100,\n    originEnergyLimit: 1,\n    abi: JSON.stringify(token_abi_1.default),\n    bytecode: token_bytecode_1.default,\n    parameters: [name, symbol, decimals, tronWeb.address.toHex(recipient), totalSupply],\n    name\n  }, tronWeb.address.fromPrivateKey(fromPrivateKey));\n  return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));\n};\n\nexports.prepareTronCreateTrc20SignedTransaction = prepareTronCreateTrc20SignedTransaction;\n/**\n * Prepare Tron transaction for KMS. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronSignedKMSTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferTron);\n  const {\n    from,\n    to,\n    amount\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.sendTrx(to, tronWeb.toSun(amount), from);\n  return JSON.stringify(tx);\n};\n\nexports.prepareTronSignedKMSTransaction = prepareTronSignedKMSTransaction;\n/**\n * Prepare Tron Freeze balance transaction for KMS. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronFreezeKMSTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.FreezeTron);\n  const {\n    from,\n    receiver,\n    amount,\n    resource,\n    duration\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.freezeBalance(tronWeb.toSun(parseFloat(amount)), duration, resource, from, receiver);\n  return JSON.stringify(tx);\n};\n\nexports.prepareTronFreezeKMSTransaction = prepareTronFreezeKMSTransaction;\n/**\n * Prepare Tron TRC10 transaction for KMS. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param precision\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronTrc10SignedKMSTransaction = async (testnet, body, precision, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferTronTrc10);\n  const {\n    from,\n    to,\n    tokenId,\n    amount\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.sendToken(to, new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(precision || (await getTrc10Precision(testnet, tokenId)))), tokenId, from);\n  return JSON.stringify(tx);\n};\n\nexports.prepareTronTrc10SignedKMSTransaction = prepareTronTrc10SignedKMSTransaction;\n/**\n * Prepare Tron TRC20 transaction for KMS. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronTrc20SignedKMSTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferTronTrc20);\n  const {\n    from,\n    to,\n    tokenAddress,\n    amount,\n    feeLimit\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(tokenAddress);\n  const contractInstance = await tronWeb.contract().at(tokenAddress);\n  const decimals = await contractInstance.decimals().call();\n  const {\n    transaction\n  } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(tokenAddress), 'transfer(address,uint256)', {\n    feeLimit: tronWeb.toSun(feeLimit),\n    from\n  }, [{\n    type: 'address',\n    value: tronWeb.address.toHex(to)\n  }, {\n    type: 'uint256',\n    value: `0x${new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(decimals)).toString(16)}`\n  }], from);\n  return JSON.stringify(transaction);\n};\n\nexports.prepareTronTrc20SignedKMSTransaction = prepareTronTrc20SignedKMSTransaction;\n/**\n * Prepare create Tron TRC10 transaction for KMS. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronCreateTrc10SignedKMSTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateTronTrc10);\n  const {\n    from,\n    name,\n    abbreviation,\n    description,\n    url,\n    totalSupply,\n    decimals\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.createToken({\n    name,\n    abbreviation,\n    description,\n    url,\n    totalSupply: new bignumber_js_1.default(totalSupply).multipliedBy(new bignumber_js_1.default(10).pow(decimals)),\n    trxRatio: 1,\n    tokenRatio: 1,\n    saleStart: Date.now() + 60000,\n    saleEnd: Date.now() + 100000,\n    freeBandwidth: 0,\n    freeBandwidthLimit: 0,\n    frozenAmount: 0,\n    frozenDuration: 0,\n    precision: decimals\n  }, from);\n  return JSON.stringify(tx);\n};\n\nexports.prepareTronCreateTrc10SignedKMSTransaction = prepareTronCreateTrc10SignedKMSTransaction;\n/**\n * Prepare create Tron TRC20 transaction for KMS. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronCreateTrc20SignedKMSTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateTronTrc20);\n  const {\n    from,\n    name,\n    decimals,\n    recipient,\n    symbol,\n    totalSupply\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.createSmartContract({\n    feeLimit: 1000000000,\n    callValue: 0,\n    userFeePercentage: 100,\n    originEnergyLimit: 1,\n    abi: JSON.stringify(token_abi_1.default),\n    bytecode: token_bytecode_1.default,\n    parameters: [name, symbol, decimals, tronWeb.address.toHex(recipient), totalSupply],\n    name\n  }, from);\n  return JSON.stringify(tx);\n};\n\nexports.prepareTronCreateTrc20SignedKMSTransaction = prepareTronCreateTrc20SignedKMSTransaction;\n/**\n * Sign Tron deploy trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronDeployTrc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TronDeployTrc721);\n  const {\n    fromPrivateKey,\n    name,\n    symbol,\n    feeLimit,\n    signatureId,\n    from\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.createSmartContract({\n    feeLimit: tronWeb.toSun(feeLimit),\n    callValue: 0,\n    userFeePercentage: 100,\n    originEnergyLimit: 1,\n    abi: JSON.stringify(trc721_abi_1.default),\n    bytecode: trc721_bytecode_1.default,\n    parameters: [name, symbol],\n    name\n  }, from || tronWeb.address.fromPrivateKey(fromPrivateKey));\n\n  if (signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  return JSON.stringify(await tronWeb.trx.sign(tx, fromPrivateKey));\n};\n\nexports.prepareTronDeployTrc721SignedTransaction = prepareTronDeployTrc721SignedTransaction;\n/**\n * Sign Tron generate custodial wallet transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronGenerateCustodialWalletSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.GenerateTronCustodialAddress);\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const {\n    abi,\n    code\n  } = wallet_1.obtainCustodialAddressType(body);\n  const tx = await tronWeb.transactionBuilder.createSmartContract({\n    feeLimit: tronWeb.toSun(body.feeLimit || 100),\n    callValue: 0,\n    userFeePercentage: 100,\n    originEnergyLimit: 1,\n    abi: JSON.stringify(abi),\n    bytecode: code,\n    parameters: [],\n    name: 'CustodialWallet'\n  }, body.from || tronWeb.address.fromPrivateKey(body.fromPrivateKey));\n\n  if (body.signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  return JSON.stringify(await tronWeb.trx.sign(tx, body.fromPrivateKey));\n};\n\nexports.prepareTronGenerateCustodialWalletSignedTransaction = prepareTronGenerateCustodialWalletSignedTransaction;\n/**\n * Sign TRON deploy new smart contract for NFT marketplace transaction. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum provider will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareTronDeployMarketplaceListingSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployTronMarketplaceListing);\n  const tronWeb = prepareTronWeb(testnet, provider);\n  const tx = await tronWeb.transactionBuilder.createSmartContract({\n    feeLimit: tronWeb.toSun(body.feeLimit || 300),\n    callValue: 0,\n    userFeePercentage: 100,\n    originEnergyLimit: 1,\n    abi: JSON.stringify(marketplace_1.listing.abi),\n    bytecode: marketplace_1.listing.data,\n    parameters: [body.marketplaceFee, body.feeRecipient],\n    name: 'CustodialWallet'\n  }, body.from || tronWeb.address.fromPrivateKey(body.fromPrivateKey));\n\n  if (body.signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  return JSON.stringify(await tronWeb.trx.sign(tx, body.fromPrivateKey));\n};\n\nexports.prepareTronDeployMarketplaceListingSignedTransaction = prepareTronDeployMarketplaceListingSignedTransaction;\n/**\n * Sign Tron deploy trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronMintCashbackTrc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TronMintTrc721);\n  const {\n    fromPrivateKey,\n    url,\n    to,\n    tokenId,\n    contractAddress,\n    feeLimit,\n    from,\n    signatureId,\n    authorAddresses,\n    cashbackValues\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(contractAddress);\n  const sender = from || tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey));\n  const cb = [];\n\n  for (const c of cashbackValues) {\n    cb.push(`0x${new bignumber_js_1.default(c).multipliedBy(1e6).toString(16)}`);\n  }\n\n  const {\n    transaction\n  } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(contractAddress), 'mintWithCashback(address,uint256,string,address[],uint256[])', {\n    feeLimit: tronWeb.toSun(feeLimit),\n    from: sender\n  }, [{\n    type: 'address',\n    value: tronWeb.address.toHex(to)\n  }, {\n    type: 'uint256',\n    value: `0x${new bignumber_js_1.default(tokenId).toString(16)}`\n  }, {\n    type: 'string',\n    value: url\n  }, {\n    type: 'address[]',\n    value: authorAddresses === null || authorAddresses === void 0 ? void 0 : authorAddresses.map(a => tronWeb.address.toHex(a))\n  }, {\n    type: 'uint256[]',\n    value: cb\n  }], sender);\n  return JSON.stringify(signatureId ? transaction : await tronWeb.trx.sign(transaction, fromPrivateKey));\n};\n\nexports.prepareTronMintCashbackTrc721SignedTransaction = prepareTronMintCashbackTrc721SignedTransaction;\n/**\n * Sign Tron mint trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronMintTrc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TronMintTrc721);\n  const {\n    fromPrivateKey,\n    url,\n    to,\n    tokenId,\n    contractAddress,\n    from,\n    feeLimit,\n    signatureId\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(contractAddress);\n  const sender = from || tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey));\n  const {\n    transaction\n  } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(contractAddress), 'mintWithTokenURI(address,uint256,string)', {\n    feeLimit: tronWeb.toSun(feeLimit),\n    from: sender\n  }, [{\n    type: 'address',\n    value: tronWeb.address.toHex(to)\n  }, {\n    type: 'uint256',\n    value: `0x${new bignumber_js_1.default(tokenId).toString(16)}`\n  }, {\n    type: 'string',\n    value: url\n  }], sender);\n  return JSON.stringify(signatureId ? transaction : await tronWeb.trx.sign(transaction, fromPrivateKey));\n};\n\nexports.prepareTronMintTrc721SignedTransaction = prepareTronMintTrc721SignedTransaction;\n/**\n * Sign Tron transfer trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronTransferTrc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TronTransferTrc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    feeLimit,\n    from,\n    signatureId,\n    value\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(contractAddress);\n  const sender = from || tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey));\n  const {\n    transaction\n  } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(contractAddress), 'safeTransfer(address,uint256)', {\n    feeLimit: tronWeb.toSun(feeLimit),\n    from: sender,\n    callValue: value ? `0x${new bignumber_js_1.default(value).multipliedBy(1e6).toString(16)}` : 0\n  }, [{\n    type: 'address',\n    value: tronWeb.address.toHex(to)\n  }, {\n    type: 'uint256',\n    value: `0x${new bignumber_js_1.default(tokenId).toString(16)}`\n  }], sender);\n  return JSON.stringify(signatureId ? transaction : await tronWeb.trx.sign(transaction, fromPrivateKey));\n};\n\nexports.prepareTronTransferTrc721SignedTransaction = prepareTronTransferTrc721SignedTransaction;\n/**\n * Sign Tron burn trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronBurnTrc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TronBurnTrc721);\n  const {\n    fromPrivateKey,\n    tokenId,\n    contractAddress,\n    feeLimit,\n    from,\n    signatureId\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(contractAddress);\n  const sender = from || tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey));\n  const {\n    transaction\n  } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(contractAddress), 'burn(uint256)', {\n    feeLimit: tronWeb.toSun(feeLimit),\n    from: sender\n  }, [{\n    type: 'uint256',\n    value: `0x${new bignumber_js_1.default(tokenId).toString(16)}`\n  }], sender);\n  return JSON.stringify(signatureId ? transaction : await tronWeb.trx.sign(transaction, fromPrivateKey));\n};\n\nexports.prepareTronBurnTrc721SignedTransaction = prepareTronBurnTrc721SignedTransaction;\n/**\n * Sign Tron mint multiple trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronMintMultipleTrc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TronMintMultipleTrc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    feeLimit,\n    from,\n    signatureId\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(contractAddress);\n  const sender = from || tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey));\n  const {\n    transaction\n  } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(contractAddress), 'mintMultiple(address[],uint256[],string[])', {\n    feeLimit: tronWeb.toSun(feeLimit),\n    from: sender\n  }, [{\n    type: 'address[]',\n    value: to.map(a => tronWeb.address.toHex(a))\n  }, {\n    type: 'uint256[]',\n    value: tokenId.map(t => `0x${new bignumber_js_1.default(t).toString(16)}`)\n  }, {\n    type: 'string[]',\n    value: url\n  }], sender);\n  return JSON.stringify(signatureId ? transaction : await tronWeb.trx.sign(transaction, fromPrivateKey));\n};\n\nexports.prepareTronMintMultipleTrc721SignedTransaction = prepareTronMintMultipleTrc721SignedTransaction;\n/**\n * Sign Tron update cashback for author trc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareTronUpdateCashbackForAuthorTrc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TronUpdateCashbackTrc721);\n  const {\n    fromPrivateKey,\n    cashbackValue,\n    tokenId,\n    contractAddress,\n    feeLimit,\n    from,\n    signatureId\n  } = body;\n  const tronWeb = prepareTronWeb(testnet, provider);\n  tronWeb.setAddress(contractAddress);\n  const sender = from || tronWeb.address.fromHex(tronWeb.address.fromPrivateKey(fromPrivateKey));\n  const {\n    transaction\n  } = await tronWeb.transactionBuilder.triggerSmartContract(tronWeb.address.toHex(contractAddress), 'updateCashbackForAuthor(uint256,uint256)', {\n    feeLimit: tronWeb.toSun(feeLimit),\n    from: sender\n  }, [{\n    type: 'uint256',\n    value: `0x${new bignumber_js_1.default(tokenId).toString(16)}`\n  }, {\n    type: 'uint256',\n    value: `0x${new bignumber_js_1.default(cashbackValue).multipliedBy(1e6).toString(16)}`\n  }], sender);\n  return JSON.stringify(signatureId ? transaction : await tronWeb.trx.sign(transaction, fromPrivateKey));\n};\n\nexports.prepareTronUpdateCashbackForAuthorTrc721SignedTransaction = prepareTronUpdateCashbackForAuthorTrc721SignedTransaction;\n/**\n * Sign Tron pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signTrxKMSTransaction = async (tx, fromPrivateKey, testnet) => {\n  if (tx.chain !== model_1.Currency.TRON) {\n    throw Error('Unsupported chain.');\n  }\n\n  const transactionConfig = JSON.parse(tx.serializedTransaction);\n  const tronWeb = prepareTronWeb(testnet);\n  return JSON.stringify(await tronWeb.trx.sign(transactionConfig, fromPrivateKey));\n};\n\nexports.signTrxKMSTransaction = signTrxKMSTransaction;\n\nconst transferHexToBase58Address = address => TronWeb.address.fromHex(address);\n\nexports.transferHexToBase58Address = transferHexToBase58Address;\n\nconst getTrc10Precision = async (testnet, tokenId) => {\n  const config = {\n    method: 'GET',\n    url: `/v1/assets/${tokenId}`,\n    baseURL: `${testnet ? 'https://api.shasta.trongrid.io' : 'https://api.trongrid.io'}`,\n    headers: {\n      'content-type': 'application/json',\n      'TRON-PRO-API-KEY': process.env.TRON_PRO_API_KEY\n    }\n  };\n  const {\n    data\n  } = (await tatum_1.axios.request(config)).data;\n\n  if (!(data === null || data === void 0 ? void 0 : data.length)) {\n    throw new Error('No such asset.');\n  }\n\n  return data[0].precision;\n  throw new Error('Get TRC10 precision error.');\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAmBA,sC,CAGA;;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,MAAMC,cAAc,GAAG,CAACC,OAAD,EAAmBC,QAAnB,KAAwC;EAC3D,MAAMC,YAAY,GAAGL,OAAO,CAACM,SAAR,CAAkBD,YAAvC;EACA,MAAME,GAAG,GAAGH,QAAQ,IAAI,GAAGI,OAAO,CAACC,GAAR,CAAYC,aAAZ,IAA6BC,yBAAa,iBAAiBH,OAAO,CAACC,GAAR,CAAYG,aAAa,EAA/G;EACA,MAAMC,QAAQ,GAAG,IAAIR,YAAJ,CAAiBE,GAAjB,CAAjB;EACA,MAAMO,YAAY,GAAG,IAAIT,YAAJ,CAAiBE,GAAjB,CAArB;EACA,MAAMQ,WAAW,GAAG,IAAIV,YAAJ,CAAiBE,GAAjB,CAApB;EACA,MAAMS,OAAO,GAAG,IAAIhB,OAAJ,CAAYa,QAAZ,EAAsBC,YAAtB,EAAoCC,WAApC,CAAhB;EACAC,OAAO,CAACC,SAAR,CAAkB;IAAC,oBAAoBT,OAAO,CAACC,GAAR,CAAYS;EAAjC,CAAlB;EACA,OAAOF,OAAP;AACH,CATD;AAWA;;;;;;;;;AAOO,MAAMG,mBAAmB,GAAG,OAAOhB,OAAP,EAAyBiB,IAAzB,KAA+C;EAC9E,OAAOC,2BAAc,MAAMC,qCAA6BnB,OAA7B,EAAsCiB,IAAtC,CAApB,EAAiEA,IAAI,CAACG,WAAtE,CAAP;AACH,CAFM;;AAAMD,8BAAmBH,mBAAnB;AAIb;;;;;;;;AAOO,MAAMK,qBAAqB,GAAG,OAAOrB,OAAP,EAAyBiB,IAAzB,KAA6C;EAC9E,OAAOC,2BAAc,MAAMC,qCAA6BnB,OAA7B,EAAsCiB,IAAtC,CAApB,EAAiEA,IAAI,CAACG,WAAtE,CAAP;AACH,CAFM;;AAAMD,gCAAqBE,qBAArB;AAIb;;;;;;;;AAOO,MAAMC,wBAAwB,GAAG,OAAOtB,OAAP,EAAyBiB,IAAzB,KAAoD;EACxF,OAAOC,2BAAc,MAAMC,0CAAkCnB,OAAlC,EAA2CiB,IAA3C,CAApB,EAAsEA,IAAI,CAACG,WAA3E,CAAP;AACH,CAFM;;AAAMD,mCAAwBG,wBAAxB;AAIb;;;;;;;;AAOO,MAAMC,wBAAwB,GAAG,OAAOvB,OAAP,EAAyBiB,IAAzB,KAAoD;EACxF,OAAOC,2BAAc,MAAMC,0CAAkCnB,OAAlC,EAA2CiB,IAA3C,CAApB,EAAsEA,IAAI,CAACG,WAA3E,CAAP;AACH,CAFM;;AAAMD,mCAAwBI,wBAAxB;AAIb;;;;;;;;AAOO,MAAMC,0BAA0B,GAAG,OAAOxB,OAAP,EAAyBiB,IAAzB,KAAkD;EACxF,OAAOC,2BAAc,MAAMC,gDAAwCnB,OAAxC,EAAiDiB,IAAjD,CAApB,EAA4EA,IAAI,CAACG,WAAjF,CAAP;AACH,CAFM;;AAAMD,qCAA0BK,0BAA1B;AAIb;;;;;;;;AAOO,MAAMC,0BAA0B,GAAG,OAAOzB,OAAP,EAAyBiB,IAAzB,KAAkD;EACxF,OAAOC,2BAAc,MAAMC,gDAAwCnB,OAAxC,EAAiDiB,IAAjD,CAApB,EAA4EA,IAAI,CAACG,WAAjF,CAAP;AACH,CAFM;;AAAMD,qCAA0BM,0BAA1B;AAIb;;;;;;;;AAOO,MAAMC,sBAAsB,GAAG,OAAOC,EAAP,EAA2BC,cAA3B,EAAmD5B,OAAnD,KAAuE;EACzG,IAAI2B,EAAE,CAACE,KAAH,KAAaC,iBAASC,IAA1B,EAAgC;IAC5B,MAAMC,KAAK,CAAC,oBAAD,CAAX;EACH;;EACD,MAAMnB,OAAO,GAAGd,cAAc,CAACC,OAAD,CAA9B;EACA,MAAMiC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWR,EAAE,CAACS,qBAAd,CAA1B;EACA,OAAOF,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBN,iBAAjB,EAAoCL,cAApC,CAArB,CAAP;AACH,CAPM;;AAAMT,iCAAsBO,sBAAtB;;AASN,MAAMc,qBAAqB,GAAIC,OAAD,IAAqB5C,OAAO,CAAC4C,OAAR,CAAgBC,OAAhB,CAAwBD,OAAxB,CAAnD;;AAAMtB,gCAAqBqB,qBAArB;;AAEN,MAAMG,mBAAmB,GAAIF,OAAD,IAAqB5C,OAAO,CAAC4C,OAAR,CAAgBG,KAAhB,CAAsBH,OAAtB,CAAjD;;AAAMtB,8BAAmBwB,mBAAnB;AAEb;;;;;;;;AAOO,MAAME,qCAAqC,GAAG,OAAO7C,OAAP,EAAyBiB,IAAzB,KACjD,MAAMC,2BAAc,MAAMC,iDAAyCnB,OAAzC,EAAkDiB,IAAlD,CAApB,EAA6EA,IAAI,CAACG,WAAlF,CADH;;AAAMD,gDAAqC0B,qCAArC;AAGb;;;;;;;;AAOO,MAAMC,gDAAgD,GAAG,OAAO9C,OAAP,EAAyBiB,IAAzB,EAA6DhB,QAA7D,KAC5D,MAAMiB,2BAAc,MAAMC,4DAAoDnB,OAApD,EAA6DiB,IAA7D,EAAmEhB,QAAnE,CAApB,EAAkGgB,IAAI,CAACG,WAAvG,CADH;;AAAMD,2DAAgD2B,gDAAhD;AAGb;;;;;;;;AAOO,MAAMC,iDAAiD,GAAG,OAAO/C,OAAP,EAAyBiB,IAAzB,EAA6DhB,QAA7D,KAC7D,MAAMiB,2BAAc,MAAMC,6DAAqDnB,OAArD,EAA8DiB,IAA9D,EAAoEhB,QAApE,CAApB,EAAmGgB,IAAI,CAACG,WAAxG,CADH;;AAAMD,4DAAiD4B,iDAAjD;AAGb;;;;;;;;AAOO,MAAMC,2CAA2C,GAAG,OAAOhD,OAAP,EAAyBiB,IAAzB,KACvD,MAAMC,2BAAc,MAAMC,uDAA+CnB,OAA/C,EAAwDiB,IAAxD,CAApB,EAAmFA,IAAI,CAACG,WAAxF,CADH;;AAAMD,sDAA2C6B,2CAA3C;AAGb;;;;;;;;AAOO,MAAMC,mCAAmC,GAAG,OAAOjD,OAAP,EAAyBiB,IAAzB,KAC/C,MAAMC,2BAAc,MAAMC,+CAAuCnB,OAAvC,EAAgDiB,IAAhD,CAApB,EAA2EA,IAAI,CAACG,WAAhF,CADH;;AAAMD,8CAAmC8B,mCAAnC;AAGb;;;;;;;;AAOO,MAAMC,uCAAuC,GAAG,OAAOlD,OAAP,EAAyBiB,IAAzB,KACnD,MAAMC,2BAAc,MAAMC,mDAA2CnB,OAA3C,EAAoDiB,IAApD,CAApB,EAA+EA,IAAI,CAACG,WAApF,CADH;;AAAMD,kDAAuC+B,uCAAvC;AAGb;;;;;;;;AAOO,MAAMC,mCAAmC,GAAG,OAAOnD,OAAP,EAAyBiB,IAAzB,KAC/C,MAAMC,2BAAc,MAAMC,+CAAuCnB,OAAvC,EAAgDiB,IAAhD,CAApB,EAA2EA,IAAI,CAACG,WAAhF,CADH;;AAAMD,8CAAmCgC,mCAAnC;AAGb;;;;;;;;AAOO,MAAMC,2CAA2C,GAAG,OAAOpD,OAAP,EAAyBiB,IAAzB,KACvD,MAAMC,2BAAc,MAAMC,uDAA+CnB,OAA/C,EAAwDiB,IAAxD,CAApB,EAAmFA,IAAI,CAACG,WAAxF,CADH;;AAAMD,sDAA2CiC,2CAA3C;AAGb;;;;;;;;AAOO,MAAMC,sDAAsD,GAAG,OAAOrD,OAAP,EAAyBiB,IAAzB,KAClE,MAAMC,2BAAc,MAAMC,kEAA0DnB,OAA1D,EAAmEiB,IAAnE,CAApB,EAA8FA,IAAI,CAACG,WAAnG,CADH;;AAAMD,iEAAsDkC,sDAAtD;AAGb;;;;;;;;AAOO,MAAMC,4BAA4B,GAAG,OAAOtD,OAAP,EAAyBiB,IAAzB,EAA6ChB,QAA7C,KAAkE;EAC1G,MAAMsD,qBAAatC,IAAb,EAAmBa,oBAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEF4B,EAFE;IAGFC;EAHE,IAIFxC,IAJJ;EAMA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2BC,OAA3B,CACbH,EADa,EAEb3C,OAAO,CAAC+C,KAAR,CAAcH,MAAd,CAFa,EAGb5C,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB,CAHa,CAAjB;EAIA,OAAOM,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBZ,EAAjB,EAAqBC,cAArB,CAArB,CAAP;AACH,CAdM;;AAAMT,uCAA4BmC,4BAA5B;AAgBb;;;;;;;;AAOO,MAAMO,4BAA4B,GAAG,OAAO7D,OAAP,EAAyBiB,IAAzB,EAA2ChB,QAA3C,KAAgE;EACxG,MAAMsD,qBAAatC,IAAb,EAAmBa,kBAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEFkC,QAFE;IAGFL,MAHE;IAIFM,QAJE;IAKFC;EALE,IAMF/C,IANJ;EAQA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2BO,aAA3B,CACbpD,OAAO,CAAC+C,KAAR,CAAcM,UAAU,CAACT,MAAD,CAAxB,CADa,EAEbO,QAFa,EAGbD,QAHa,EAIblD,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB,CAJa,EAKbkC,QALa,CAAjB;EAOA,OAAO5B,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBZ,EAAjB,EAAqBC,cAArB,CAArB,CAAP;AACH,CAnBM;;AAAMT,uCAA4B0C,4BAA5B;AAqBb;;;;;;;;AAOO,MAAMM,iCAAiC,GAAG,OAAOnE,OAAP,EAAyBiB,IAAzB,EAAkDmD,SAAlD,EAAsEnE,QAAtE,KAA2F;EACxI,MAAMsD,qBAAatC,IAAb,EAAmBa,yBAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEF4B,EAFE;IAGFa,OAHE;IAIFZ;EAJE,IAKFxC,IALJ;EAOA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2BY,SAA3B,CACbd,EADa,EAEb,IAAIe,sBAAJ,CAAcd,MAAd,EAAsBe,YAAtB,CAAmC,IAAID,sBAAJ,CAAc,EAAd,EAAkBE,GAAlB,CAAsBL,SAAS,KAAI,MAAMM,iBAAiB,CAAC1E,OAAD,EAAUqE,OAAV,CAA3B,CAA/B,CAAnC,CAFa,EAGbA,OAHa,EAIbxD,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB,CAJa,CAAjB;EAKA,OAAOM,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBZ,EAAjB,EAAqBC,cAArB,CAArB,CAAP;AACH,CAhBM;;AAAMT,4CAAiCgD,iCAAjC;AAkBb;;;;;;;;AAOO,MAAMQ,0BAA0B,GAAG,OACzC3E,OADyC,EAEtCyC,OAFsC,EAGzCmC,eAHyC,EAIzC3E,QAJyC,KAKtC;EACH,IAAI,CAAC2E,eAAL,EAAsB;IACrB,MAAM,IAAI5C,KAAJ,CAAU,2BAAV,CAAN;EACA;;EACD,MAAMnB,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmBD,eAAnB;EACA,MAAME,gBAAgB,GAAG,MAAMjE,OAAO,CAACkE,QAAR,GAAmBC,EAAnB,CAAsBJ,eAAtB,CAA/B;EACA,OAAO,MAAME,gBAAgB,CAACG,SAAjB,CAA2BxC,OAA3B,EAAoCyC,IAApC,EAAb;AACA,CAbM;;AAAM/D,qCAA0BwD,0BAA1B;;AAeN,MAAMQ,4BAA4B,GAAG,OAAOnF,OAAP,EAAyB4E,eAAzB,EAAkD3E,QAAlD,KAAuE;EAC/G,IAAI,CAAC2E,eAAL,EAAsB;IAClB,MAAM,IAAI5C,KAAJ,CAAU,2BAAV,CAAN;EACH;;EACD,MAAMnB,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmBD,eAAnB;EACA,MAAME,gBAAgB,GAAG,MAAMjE,OAAO,CAACkE,QAAR,GAAmBC,EAAnB,CAAsBJ,eAAtB,CAA/B;EACA,OAAO,MAAME,gBAAgB,CAACM,QAAjB,GAA4BF,IAA5B,EAAb;AACH,CARM;;AAAM/D,uCAA4BgE,4BAA5B;AAUb;;;;;;;;;;AASO,MAAME,kCAAkC,GAAG,OAAOrF,OAAP,EAAyBiB,IAAzB,EAA8DqE,QAA9D,EAAgFC,IAAhF,EAA+FtF,QAA/F,KAAoH;EAClK,MAAMY,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmB5D,IAAI,CAAC2D,eAAxB;EACA,MAAMY,MAAM,GAAGD,IAAI,IAAI1E,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BX,IAAI,CAACW,cAApC,CAAxB,CAAvB;EACA,MAAM;IAAC6D;EAAD,IAAgB,MAAM5E,OAAO,CAAC6C,kBAAR,CAA2BgC,oBAA3B,CACxB7E,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsB3B,IAAI,CAAC2D,eAA3B,CADwB,EAExB3D,IAAI,CAAC0E,UAFmB,EAGxB;IACIL,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADd;IAEIC,IAAI,EAAEC,MAFV;IAGII,SAAS,EAAE/E,OAAO,CAAC+C,KAAR,CAAc3C,IAAI,CAACwC,MAAL,IAAe,CAA7B;EAHf,CAHwB,EAQxBxC,IAAI,CAAC4E,MARmB,EASxBL,MATwB,CAA5B;;EAWA,IAAIvE,IAAI,CAACG,WAAT,EAAsB;IAClB,OAAOc,IAAI,CAACG,SAAL,CAAeoD,WAAf,CAAP;EACH;;EACD,OAAOvD,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBkD,WAAjB,EAA8BxE,IAAI,CAACW,cAAnC,CAArB,CAAP;AACH,CAnBM;;AAAMT,6CAAkCkE,kCAAlC;AAqBb;;;;;;;;;;AASO,MAAMS,iCAAiC,GAAG,OAAO9F,OAAP,EAAyBiB,IAAzB,EAA8DqE,QAA9D,EAAgFC,IAAhF,EAA+FtF,QAA/F,KAAoH;EACjK,MAAMY,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmB5D,IAAI,CAAC2D,eAAxB;EACA,MAAMY,MAAM,GAAGD,IAAI,IAAI1E,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BX,IAAI,CAACW,cAApC,CAAxB,CAAvB;EACA,MAAM;IAAC6D;EAAD,IAAgB,MAAM5E,OAAO,CAAC6C,kBAAR,CAA2BgC,oBAA3B,CACxB7E,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsB3B,IAAI,CAAC2D,eAA3B,CADwB,EAExB,kEAFwB,EAGxB;IACIU,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADd;IAEIC,IAAI,EAAEC;EAFV,CAHwB,EAOxB,CACI;IAACO,IAAI,EAAE,WAAP;IAAoBC,KAAK,EAAE/E,IAAI,CAAC4E,MAAL,CAAY,CAAZ,EAAeI,GAAf,CAAmBpF,OAAO,CAAC4B,OAAR,CAAgBG,KAAnC;EAA3B,CADJ,EAEI;IAACmD,IAAI,EAAE,WAAP;IAAoBC,KAAK,EAAE/E,IAAI,CAAC4E,MAAL,CAAY,CAAZ;EAA3B,CAFJ,EAGI;IAACE,IAAI,EAAE,WAAP;IAAoBC,KAAK,EAAE/E,IAAI,CAAC4E,MAAL,CAAY,CAAZ,EAAeI,GAAf,CAAmBpF,OAAO,CAAC4B,OAAR,CAAgBG,KAAnC;EAA3B,CAHJ,EAII;IAACmD,IAAI,EAAE,WAAP;IAAoBC,KAAK,EAAE/E,IAAI,CAAC4E,MAAL,CAAY,CAAZ;EAA3B,CAJJ,EAKI;IAACE,IAAI,EAAE,WAAP;IAAoBC,KAAK,EAAE/E,IAAI,CAAC4E,MAAL,CAAY,CAAZ;EAA3B,CALJ,CAPwB,EAcxBL,MAdwB,CAA5B;;EAgBA,IAAIvE,IAAI,CAACG,WAAT,EAAsB;IAClB,OAAOc,IAAI,CAACG,SAAL,CAAeoD,WAAf,CAAP;EACH;;EACD,OAAOvD,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBkD,WAAjB,EAA8BxE,IAAI,CAACW,cAAnC,CAArB,CAAP;AACH,CAxBM;;AAAMT,4CAAiC2E,iCAAjC;AA0Bb;;;;;;;;AAOO,MAAMI,iCAAiC,GAAG,OAAOlG,OAAP,EAAyBiB,IAAzB,EAAkDhB,QAAlD,KAAuE;EACpH,MAAMsD,qBAAatC,IAAb,EAAmBa,yBAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEF4B,EAFE;IAGF2C,YAHE;IAIF1C,MAJE;IAKF6B;EALE,IAMFrE,IANJ;EAQA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmBsB,YAAnB;EACA,MAAMrB,gBAAgB,GAAG,MAAMjE,OAAO,CAACkE,QAAR,GAAmBC,EAAnB,CAAsBmB,YAAtB,CAA/B;EACA,MAAMf,QAAQ,GAAG,MAAMN,gBAAgB,CAACM,QAAjB,GAA4BF,IAA5B,EAAvB;EACA,MAAM;IAACO;EAAD,IAAgB,MAAM5E,OAAO,CAAC6C,kBAAR,CAA2BgC,oBAA3B,CACxB7E,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBuD,YAAtB,CADwB,EAExB,2BAFwB,EAGxB;IACIb,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADd;IAEIC,IAAI,EAAE1E,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB;EAFV,CAHwB,EAOxB,CAAC;IAACmE,IAAI,EAAE,SAAP;IAAkBC,KAAK,EAAEnF,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBY,EAAtB;EAAzB,CAAD,EAAsD;IAClDuC,IAAI,EAAE,SAD4C;IAElDC,KAAK,EAAE,KAAK,IAAIzB,sBAAJ,CAAcd,MAAd,EAAsBe,YAAtB,CAAmC,IAAID,sBAAJ,CAAc,EAAd,EAAkBE,GAAlB,CAAsBW,QAAtB,CAAnC,EAAoEgB,QAApE,CAA6E,EAA7E,CAAgF;EAF1C,CAAtD,CAPwB,EAWxBvF,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB,CAXwB,CAA5B;EAaA,OAAOM,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBkD,WAAjB,EAA8B7D,cAA9B,CAArB,CAAP;AACH,CA5BM;;AAAMT,4CAAiC+E,iCAAjC;AA8Bb;;;;;;;AAMO,MAAMG,uCAAuC,GAAG,OAAOrG,OAAP,EAAyBiB,IAAzB,EAAgDhB,QAAhD,KAAqE;EACxH,MAAMsD,qBAAatC,IAAb,EAAmBa,uBAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEF0E,IAFE;IAGFC,YAHE;IAIFC,WAJE;IAKFpG,GALE;IAMFqG,WANE;IAOFrB;EAPE,IAQFnE,IARJ;EAUA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2BgD,WAA3B,CAAuC;IACpDJ,IADoD;IAEpDC,YAFoD;IAGpDC,WAHoD;IAIpDpG,GAJoD;IAKpDqG,WAAW,EAAE,IAAIlC,sBAAJ,CAAckC,WAAd,EAA2BjC,YAA3B,CAAwC,IAAID,sBAAJ,CAAc,EAAd,EAAkBE,GAAlB,CAAsBW,QAAtB,CAAxC,CALuC;IAMpDuB,QAAQ,EAAE,CAN0C;IAOpDC,UAAU,EAAE,CAPwC;IAQpDC,SAAS,EAAEC,IAAI,CAACC,GAAL,KAAa,KAR4B;IASpDC,OAAO,EAAEF,IAAI,CAACC,GAAL,KAAa,MAT8B;IAUpDE,aAAa,EAAE,CAVqC;IAWpDC,kBAAkB,EAAE,CAXgC;IAYpDC,YAAY,EAAE,CAZsC;IAapDC,cAAc,EAAE,CAboC;IAcpDhD,SAAS,EAAEgB;EAdyC,CAAvC,EAedvE,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAfc,CAAjB;EAgBA,OAAOM,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBZ,EAAjB,EAAqBC,cAArB,CAArB,CAAP;AACH,CA9BM;;AAAMT,kDAAuCkF,uCAAvC;AAgCb;;;;;;;AAMO,MAAMgB,uCAAuC,GAAG,OAAOrH,OAAP,EAAyBiB,IAAzB,EAAgDhB,QAAhD,KAAqE;EACxH,MAAMsD,qBAAatC,IAAb,EAAmBa,uBAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEF0E,IAFE;IAGFlB,QAHE;IAIFkC,SAJE;IAKFC,MALE;IAMFd;EANE,IAOFxF,IAPJ;EASA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2B8D,mBAA3B,CAA+C;IAC5DlC,QAAQ,EAAE,UADkD;IAE5DM,SAAS,EAAE,CAFiD;IAG5D6B,iBAAiB,EAAE,GAHyC;IAI5DC,iBAAiB,EAAE,CAJyC;IAK5DC,GAAG,EAAEzF,IAAI,CAACG,SAAL,CAAeuF,mBAAf,CALuD;IAM5DC,QAAQ,EAARC,wBAN4D;IAO5DC,UAAU,EAAE,CACRzB,IADQ,EAERiB,MAFQ,EAGRnC,QAHQ,EAIRvE,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsB0E,SAAtB,CAJQ,EAKRb,WALQ,CAPgD;IAc5DH;EAd4D,CAA/C,EAedzF,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAfc,CAAjB;EAgBA,OAAOM,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBZ,EAAjB,EAAqBC,cAArB,CAArB,CAAP;AACH,CA7BM;;AAAMT,kDAAuCkG,uCAAvC;AA+Bb;;;;;;;;AAOO,MAAMW,+BAA+B,GAAG,OAAOhI,OAAP,EAAyBiB,IAAzB,EAA6ChB,QAA7C,KAAkE;EAC7G,MAAMsD,qBAAatC,IAAb,EAAmBa,oBAAnB,CAAN;EACA,MAAM;IACFyD,IADE;IAEF/B,EAFE;IAGFC;EAHE,IAIFxC,IAJJ;EAMA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2BC,OAA3B,CACbH,EADa,EAEb3C,OAAO,CAAC+C,KAAR,CAAcH,MAAd,CAFa,EAGb8B,IAHa,CAAjB;EAIA,OAAOrD,IAAI,CAACG,SAAL,CAAeV,EAAf,CAAP;AACH,CAdM;;AAAMR,0CAA+B6G,+BAA/B;AAgBb;;;;;;;;AAOO,MAAMC,+BAA+B,GAAG,OAAOjI,OAAP,EAAyBiB,IAAzB,EAA2ChB,QAA3C,KAAgE;EAC3G,MAAMsD,qBAAatC,IAAb,EAAmBa,kBAAnB,CAAN;EACA,MAAM;IACFyD,IADE;IAEFzB,QAFE;IAGFL,MAHE;IAIFM,QAJE;IAKFC;EALE,IAMF/C,IANJ;EAQA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2BO,aAA3B,CACbpD,OAAO,CAAC+C,KAAR,CAAcM,UAAU,CAACT,MAAD,CAAxB,CADa,EAEbO,QAFa,EAGbD,QAHa,EAIbwB,IAJa,EAKbzB,QALa,CAAjB;EAOA,OAAO5B,IAAI,CAACG,SAAL,CAAeV,EAAf,CAAP;AACH,CAnBM;;AAAMR,0CAA+B8G,+BAA/B;AAqBb;;;;;;;;;AAQO,MAAMC,oCAAoC,GAAG,OAAOlI,OAAP,EAAyBiB,IAAzB,EAAkDmD,SAAlD,EAAsEnE,QAAtE,KAA2F;EAC3I,MAAMsD,qBAAatC,IAAb,EAAmBa,yBAAnB,CAAN;EACA,MAAM;IACFyD,IADE;IAEF/B,EAFE;IAGFa,OAHE;IAIFZ;EAJE,IAKFxC,IALJ;EAOA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2BY,SAA3B,CACbd,EADa,EAEb,IAAIe,sBAAJ,CAAcd,MAAd,EAAsBe,YAAtB,CAAmC,IAAID,sBAAJ,CAAc,EAAd,EAAkBE,GAAlB,CAAsBL,SAAS,KAAI,MAAMM,iBAAiB,CAAC1E,OAAD,EAAUqE,OAAV,CAA3B,CAA/B,CAAnC,CAFa,EAGbA,OAHa,EAIbkB,IAJa,CAAjB;EAKA,OAAOrD,IAAI,CAACG,SAAL,CAAeV,EAAf,CAAP;AACH,CAhBM;;AAAMR,+CAAoC+G,oCAApC;AAkBb;;;;;;;;AAOO,MAAMC,oCAAoC,GAAG,OAAOnI,OAAP,EAAyBiB,IAAzB,EAAkDhB,QAAlD,KAAuE;EACvH,MAAMsD,qBAAatC,IAAb,EAAmBa,yBAAnB,CAAN;EACA,MAAM;IACFyD,IADE;IAEF/B,EAFE;IAGF2C,YAHE;IAIF1C,MAJE;IAKF6B;EALE,IAMFrE,IANJ;EAQA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmBsB,YAAnB;EACA,MAAMrB,gBAAgB,GAAG,MAAMjE,OAAO,CAACkE,QAAR,GAAmBC,EAAnB,CAAsBmB,YAAtB,CAA/B;EACA,MAAMf,QAAQ,GAAG,MAAMN,gBAAgB,CAACM,QAAjB,GAA4BF,IAA5B,EAAvB;EACA,MAAM;IAACO;EAAD,IAAgB,MAAM5E,OAAO,CAAC6C,kBAAR,CAA2BgC,oBAA3B,CACxB7E,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBuD,YAAtB,CADwB,EAExB,2BAFwB,EAGxB;IACIb,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADd;IAEIC;EAFJ,CAHwB,EAOxB,CAAC;IAACQ,IAAI,EAAE,SAAP;IAAkBC,KAAK,EAAEnF,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBY,EAAtB;EAAzB,CAAD,EAAsD;IAClDuC,IAAI,EAAE,SAD4C;IAElDC,KAAK,EAAE,KAAK,IAAIzB,sBAAJ,CAAcd,MAAd,EAAsBe,YAAtB,CAAmC,IAAID,sBAAJ,CAAc,EAAd,EAAkBE,GAAlB,CAAsBW,QAAtB,CAAnC,EAAoEgB,QAApE,CAA6E,EAA7E,CAAgF;EAF1C,CAAtD,CAPwB,EAWxBb,IAXwB,CAA5B;EAaA,OAAOrD,IAAI,CAACG,SAAL,CAAeoD,WAAf,CAAP;AACH,CA5BM;;AAAMtE,+CAAoCgH,oCAApC;AA8Bb;;;;;;;;AAOO,MAAMC,0CAA0C,GAAG,OAAOpI,OAAP,EAAyBiB,IAAzB,EAAgDhB,QAAhD,KAAqE;EAC3H,MAAMsD,qBAAatC,IAAb,EAAmBa,uBAAnB,CAAN;EACA,MAAM;IACFyD,IADE;IAEFe,IAFE;IAGFC,YAHE;IAIFC,WAJE;IAKFpG,GALE;IAMFqG,WANE;IAOFrB;EAPE,IAQFnE,IARJ;EAUA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2BgD,WAA3B,CAAuC;IACpDJ,IADoD;IAEpDC,YAFoD;IAGpDC,WAHoD;IAIpDpG,GAJoD;IAKpDqG,WAAW,EAAE,IAAIlC,sBAAJ,CAAckC,WAAd,EAA2BjC,YAA3B,CAAwC,IAAID,sBAAJ,CAAc,EAAd,EAAkBE,GAAlB,CAAsBW,QAAtB,CAAxC,CALuC;IAMpDuB,QAAQ,EAAE,CAN0C;IAOpDC,UAAU,EAAE,CAPwC;IAQpDC,SAAS,EAAEC,IAAI,CAACC,GAAL,KAAa,KAR4B;IASpDC,OAAO,EAAEF,IAAI,CAACC,GAAL,KAAa,MAT8B;IAUpDE,aAAa,EAAE,CAVqC;IAWpDC,kBAAkB,EAAE,CAXgC;IAYpDC,YAAY,EAAE,CAZsC;IAapDC,cAAc,EAAE,CAboC;IAcpDhD,SAAS,EAAEgB;EAdyC,CAAvC,EAedG,IAfc,CAAjB;EAgBA,OAAOrD,IAAI,CAACG,SAAL,CAAeV,EAAf,CAAP;AACH,CA9BM;;AAAMR,qDAA0CiH,0CAA1C;AAgCb;;;;;;;;AAOO,MAAMC,0CAA0C,GAAG,OAAOrI,OAAP,EAAyBiB,IAAzB,EAAgDhB,QAAhD,KAAqE;EAC3H,MAAMsD,qBAAatC,IAAb,EAAmBa,uBAAnB,CAAN;EACA,MAAM;IACFyD,IADE;IAEFe,IAFE;IAGFlB,QAHE;IAIFkC,SAJE;IAKFC,MALE;IAMFd;EANE,IAOFxF,IAPJ;EASA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2B8D,mBAA3B,CAA+C;IAC5DlC,QAAQ,EAAE,UADkD;IAE5DM,SAAS,EAAE,CAFiD;IAG5D6B,iBAAiB,EAAE,GAHyC;IAI5DC,iBAAiB,EAAE,CAJyC;IAK5DC,GAAG,EAAEzF,IAAI,CAACG,SAAL,CAAeuF,mBAAf,CALuD;IAM5DC,QAAQ,EAARC,wBAN4D;IAO5DC,UAAU,EAAE,CACRzB,IADQ,EAERiB,MAFQ,EAGRnC,QAHQ,EAIRvE,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsB0E,SAAtB,CAJQ,EAKRb,WALQ,CAPgD;IAc5DH;EAd4D,CAA/C,EAedf,IAfc,CAAjB;EAgBA,OAAOrD,IAAI,CAACG,SAAL,CAAeV,EAAf,CAAP;AACH,CA7BM;;AAAMR,qDAA0CkH,0CAA1C;AA+Bb;;;;;;;;AAOO,MAAMC,wCAAwC,GAAG,OAAOtI,OAAP,EAAyBiB,IAAzB,EAAiDhB,QAAjD,KAAsE;EAC1H,MAAMsD,qBAAatC,IAAb,EAAmBa,wBAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEF0E,IAFE;IAGFiB,MAHE;IAIFjC,QAJE;IAKFlE,WALE;IAMFmE;EANE,IAOFtE,IAPJ;EASA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2B8D,mBAA3B,CAA+C;IAC5DlC,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADkD;IAE5DM,SAAS,EAAE,CAFiD;IAG5D6B,iBAAiB,EAAE,GAHyC;IAI5DC,iBAAiB,EAAE,CAJyC;IAK5DC,GAAG,EAAEzF,IAAI,CAACG,SAAL,CAAekG,oBAAf,CALuD;IAM5DV,QAAQ,EAAEW,yBANkD;IAO5DT,UAAU,EAAE,CACRzB,IADQ,EAERiB,MAFQ,CAPgD;IAW5DjB;EAX4D,CAA/C,EAYdf,IAAI,IAAI1E,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAZM,CAAjB;;EAaA,IAAIR,WAAJ,EAAiB;IACb,OAAOc,IAAI,CAACG,SAAL,CAAeV,EAAf,CAAP;EACH;;EACD,OAAOO,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBZ,EAAjB,EAAqBC,cAArB,CAArB,CAAP;AACH,CA7BM;;AAAMT,mDAAwCmH,wCAAxC;AA+Bb;;;;;;;;AAOO,MAAMG,mDAAmD,GAAG,OAAOzI,OAAP,EAAyBiB,IAAzB,EAA6DhB,QAA7D,KAAkF;EACjJ,MAAMsD,qBAAatC,IAAb,EAAmBa,oCAAnB,CAAN;EACA,MAAMjB,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM;IAAC0H,GAAD;IAAMe;EAAN,IAAcC,oCAA2B1H,IAA3B,CAApB;EACA,MAAMU,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2B8D,mBAA3B,CAA+C;IAC5DlC,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc3C,IAAI,CAACqE,QAAL,IAAiB,GAA/B,CADkD;IAE5DM,SAAS,EAAE,CAFiD;IAG5D6B,iBAAiB,EAAE,GAHyC;IAI5DC,iBAAiB,EAAE,CAJyC;IAK5DC,GAAG,EAAEzF,IAAI,CAACG,SAAL,CAAesF,GAAf,CALuD;IAM5DE,QAAQ,EAAEa,IANkD;IAO5DX,UAAU,EAAE,EAPgD;IAQ5DzB,IAAI,EAAE;EARsD,CAA/C,EASdrF,IAAI,CAACsE,IAAL,IAAa1E,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BX,IAAI,CAACW,cAApC,CATC,CAAjB;;EAUA,IAAIX,IAAI,CAACG,WAAT,EAAsB;IAClB,OAAOc,IAAI,CAACG,SAAL,CAAeV,EAAf,CAAP;EACH;;EACD,OAAOO,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBZ,EAAjB,EAAqBV,IAAI,CAACW,cAA1B,CAArB,CAAP;AACH,CAlBM;;AAAMT,8DAAmDsH,mDAAnD;AAoBb;;;;;;;;AAOO,MAAMG,oDAAoD,GAAG,OAAO5I,OAAP,EAAyBiB,IAAzB,EAA6DhB,QAA7D,KAAkF;EAClJ,MAAMsD,qBAAatC,IAAb,EAAmBa,oCAAnB,CAAN;EACA,MAAMjB,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACA,MAAM0B,EAAE,GAAG,MAAMd,OAAO,CAAC6C,kBAAR,CAA2B8D,mBAA3B,CAA+C;IAC5DlC,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc3C,IAAI,CAACqE,QAAL,IAAiB,GAA/B,CADkD;IAE5DM,SAAS,EAAE,CAFiD;IAG5D6B,iBAAiB,EAAE,GAHyC;IAI5DC,iBAAiB,EAAE,CAJyC;IAK5DC,GAAG,EAAEzF,IAAI,CAACG,SAAL,CAAewG,sBAAQlB,GAAvB,CALuD;IAM5DE,QAAQ,EAAEgB,sBAAQC,IAN0C;IAO5Df,UAAU,EAAE,CACR9G,IAAI,CAAC8H,cADG,EAER9H,IAAI,CAAC+H,YAFG,CAPgD;IAW5D1C,IAAI,EAAE;EAXsD,CAA/C,EAYdrF,IAAI,CAACsE,IAAL,IAAa1E,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BX,IAAI,CAACW,cAApC,CAZC,CAAjB;;EAaA,IAAIX,IAAI,CAACG,WAAT,EAAsB;IAClB,OAAOc,IAAI,CAACG,SAAL,CAAeV,EAAf,CAAP;EACH;;EACD,OAAOO,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBZ,EAAjB,EAAqBV,IAAI,CAACW,cAA1B,CAArB,CAAP;AACH,CApBM;;AAAMT,+DAAoDyH,oDAApD;AAsBb;;;;;;;;AAOO,MAAMK,8CAA8C,GAAG,OAAOjJ,OAAP,EAAyBiB,IAAzB,EAA+ChB,QAA/C,KAAoE;EAC9H,MAAMsD,qBAAatC,IAAb,EAAmBa,sBAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEFxB,GAFE;IAGFoD,EAHE;IAIFa,OAJE;IAKFO,eALE;IAMFU,QANE;IAOFC,IAPE;IAQFnE,WARE;IASF8H,eATE;IAUFC;EAVE,IAWFlI,IAXJ;EAaA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmBD,eAAnB;EACA,MAAMY,MAAM,GAAGD,IAAI,IAAI1E,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB,CAAvB;EACA,MAAMwH,EAAE,GAAa,EAArB;;EACA,KAAK,MAAMC,CAAX,IAAgBF,cAAhB,EAAiC;IAC7BC,EAAE,CAACE,IAAH,CAAQ,KAAK,IAAI/E,sBAAJ,CAAc8E,CAAd,EAAiB7E,YAAjB,CAA8B,GAA9B,EAAmC4B,QAAnC,CAA4C,EAA5C,CAA+C,EAA5D;EACH;;EACD,MAAM;IAACX;EAAD,IAAgB,MAAM5E,OAAO,CAAC6C,kBAAR,CAA2BgC,oBAA3B,CACxB7E,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBgC,eAAtB,CADwB,EAExB,8DAFwB,EAGxB;IACIU,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADd;IAEIC,IAAI,EAAEC;EAFV,CAHwB,EAOxB,CAAC;IAACO,IAAI,EAAE,SAAP;IAAkBC,KAAK,EAAEnF,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBY,EAAtB;EAAzB,CAAD,EACI;IACIuC,IAAI,EAAE,SADV;IAEIC,KAAK,EAAE,KAAK,IAAIzB,sBAAJ,CAAcF,OAAd,EAAuB+B,QAAvB,CAAgC,EAAhC,CAAmC;EAFnD,CADJ,EAKI;IACIL,IAAI,EAAE,QADV;IAEIC,KAAK,EAAE5F;EAFX,CALJ,EASI;IACI2F,IAAI,EAAE,WADV;IAEIC,KAAK,EAAEkD,eAAe,SAAf,mBAAe,WAAf,GAAe,MAAf,kBAAe,CAAEjD,GAAjB,CAAqBsD,CAAC,IAAI1I,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsB2G,CAAtB,CAA1B;EAFX,CATJ,EAaI;IACIxD,IAAI,EAAE,WADV;IAEIC,KAAK,EAAEoD;EAFX,CAbJ,CAPwB,EAwBxB5D,MAxBwB,CAA5B;EA0BA,OAAOtD,IAAI,CAACG,SAAL,CAAejB,WAAW,GAAGqE,WAAH,GAAiB,MAAM5E,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBkD,WAAjB,EAA8B7D,cAA9B,CAAjD,CAAP;AACH,CAjDM;;AAAMT,yDAA8C8H,8CAA9C;AAmDb;;;;;;;;AAOO,MAAMO,sCAAsC,GAAG,OAAOxJ,OAAP,EAAyBiB,IAAzB,EAA+ChB,QAA/C,KAAoE;EACtH,MAAMsD,qBAAatC,IAAb,EAAmBa,sBAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEFxB,GAFE;IAGFoD,EAHE;IAIFa,OAJE;IAKFO,eALE;IAMFW,IANE;IAOFD,QAPE;IAQFlE;EARE,IASFH,IATJ;EAWA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmBD,eAAnB;EACA,MAAMY,MAAM,GAAGD,IAAI,IAAI1E,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB,CAAvB;EACA,MAAM;IAAC6D;EAAD,IAAgB,MAAM5E,OAAO,CAAC6C,kBAAR,CAA2BgC,oBAA3B,CACxB7E,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBgC,eAAtB,CADwB,EAExB,0CAFwB,EAGxB;IACIU,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADd;IAEIC,IAAI,EAAEC;EAFV,CAHwB,EAOxB,CAAC;IAACO,IAAI,EAAE,SAAP;IAAkBC,KAAK,EAAEnF,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBY,EAAtB;EAAzB,CAAD,EACI;IACIuC,IAAI,EAAE,SADV;IAEIC,KAAK,EAAE,KAAK,IAAIzB,sBAAJ,CAAcF,OAAd,EAAuB+B,QAAvB,CAAgC,EAAhC,CAAmC;EAFnD,CADJ,EAKI;IACIL,IAAI,EAAE,QADV;IAEIC,KAAK,EAAE5F;EAFX,CALJ,CAPwB,EAgBxBoF,MAhBwB,CAA5B;EAkBA,OAAOtD,IAAI,CAACG,SAAL,CAAejB,WAAW,GAAGqE,WAAH,GAAiB,MAAM5E,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBkD,WAAjB,EAA8B7D,cAA9B,CAAjD,CAAP;AACH,CAnCM;;AAAMT,iDAAsCqI,sCAAtC;AAqCb;;;;;;;;AAOO,MAAMC,0CAA0C,GAAG,OAAOzJ,OAAP,EAAyBiB,IAAzB,EAAmDhB,QAAnD,KAAwE;EAC9H,MAAMsD,qBAAatC,IAAb,EAAmBa,0BAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEF4B,EAFE;IAGFa,OAHE;IAIFO,eAJE;IAKFU,QALE;IAMFC,IANE;IAOFnE,WAPE;IAQF4E;EARE,IASF/E,IATJ;EAWA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmBD,eAAnB;EACA,MAAMY,MAAM,GAAGD,IAAI,IAAI1E,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB,CAAvB;EACA,MAAM;IAAC6D;EAAD,IAAgB,MAAM5E,OAAO,CAAC6C,kBAAR,CAA2BgC,oBAA3B,CACxB7E,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBgC,eAAtB,CADwB,EAExB,+BAFwB,EAGxB;IACIU,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADd;IAEIC,IAAI,EAAEC,MAFV;IAGII,SAAS,EAAEI,KAAK,GAAG,KAAK,IAAIzB,sBAAJ,CAAcyB,KAAd,EAAqBxB,YAArB,CAAkC,GAAlC,EAAuC4B,QAAvC,CAAgD,EAAhD,CAAmD,EAA3D,GAAgE;EAHpF,CAHwB,EAQxB,CAAC;IAACL,IAAI,EAAE,SAAP;IAAkBC,KAAK,EAAEnF,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBY,EAAtB;EAAzB,CAAD,EACI;IACIuC,IAAI,EAAE,SADV;IAEIC,KAAK,EAAE,KAAK,IAAIzB,sBAAJ,CAAcF,OAAd,EAAuB+B,QAAvB,CAAgC,EAAhC,CAAmC;EAFnD,CADJ,CARwB,EAaxBZ,MAbwB,CAA5B;EAeA,OAAOtD,IAAI,CAACG,SAAL,CAAejB,WAAW,GAAGqE,WAAH,GAAiB,MAAM5E,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBkD,WAAjB,EAA8B7D,cAA9B,CAAjD,CAAP;AACH,CAhCM;;AAAMT,qDAA0CsI,0CAA1C;AAkCb;;;;;;;;AAOO,MAAMC,sCAAsC,GAAG,OAAO1J,OAAP,EAAyBiB,IAAzB,EAA+ChB,QAA/C,KAAoE;EACtH,MAAMsD,qBAAatC,IAAb,EAAmBa,sBAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEFyC,OAFE;IAGFO,eAHE;IAIFU,QAJE;IAKFC,IALE;IAMFnE;EANE,IAOFH,IAPJ;EASA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmBD,eAAnB;EACA,MAAMY,MAAM,GAAGD,IAAI,IAAI1E,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB,CAAvB;EACA,MAAM;IAAC6D;EAAD,IAAgB,MAAM5E,OAAO,CAAC6C,kBAAR,CAA2BgC,oBAA3B,CACxB7E,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBgC,eAAtB,CADwB,EAExB,eAFwB,EAGxB;IACIU,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADd;IAEIC,IAAI,EAAEC;EAFV,CAHwB,EAOxB,CAAC;IACGO,IAAI,EAAE,SADT;IAEGC,KAAK,EAAE,KAAK,IAAIzB,sBAAJ,CAAcF,OAAd,EAAuB+B,QAAvB,CAAgC,EAAhC,CAAmC;EAFlD,CAAD,CAPwB,EAWxBZ,MAXwB,CAA5B;EAaA,OAAOtD,IAAI,CAACG,SAAL,CAAejB,WAAW,GAAGqE,WAAH,GAAiB,MAAM5E,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBkD,WAAjB,EAA8B7D,cAA9B,CAAjD,CAAP;AACH,CA5BM;;AAAMT,iDAAsCuI,sCAAtC;AA8Bb;;;;;;;;AAOO,MAAMC,8CAA8C,GAAG,OAAO3J,OAAP,EAAyBiB,IAAzB,EAAuDhB,QAAvD,KAA4E;EACtI,MAAMsD,qBAAatC,IAAb,EAAmBa,8BAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEF4B,EAFE;IAGFa,OAHE;IAIFO,eAJE;IAKFxE,GALE;IAMFkF,QANE;IAOFC,IAPE;IAQFnE;EARE,IASFH,IATJ;EAWA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmBD,eAAnB;EACA,MAAMY,MAAM,GAAGD,IAAI,IAAI1E,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB,CAAvB;EACA,MAAM;IAAC6D;EAAD,IAAgB,MAAM5E,OAAO,CAAC6C,kBAAR,CAA2BgC,oBAA3B,CACxB7E,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBgC,eAAtB,CADwB,EAExB,4CAFwB,EAGxB;IACIU,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADd;IAEIC,IAAI,EAAEC;EAFV,CAHwB,EAOxB,CAAC;IACGO,IAAI,EAAE,WADT;IAEGC,KAAK,EAAExC,EAAE,CAACyC,GAAH,CAAOsD,CAAC,IAAI1I,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsB2G,CAAtB,CAAZ;EAFV,CAAD,EAII;IACIxD,IAAI,EAAE,WADV;IAEIC,KAAK,EAAE3B,OAAO,CAAC4B,GAAR,CAAY2D,CAAC,IAAI,KAAK,IAAIrF,sBAAJ,CAAcqF,CAAd,EAAiBxD,QAAjB,CAA0B,EAA1B,CAA6B,EAAnD;EAFX,CAJJ,EAQI;IACIL,IAAI,EAAE,UADV;IAEIC,KAAK,EAAE5F;EAFX,CARJ,CAPwB,EAmBxBoF,MAnBwB,CAA5B;EAqBA,OAAOtD,IAAI,CAACG,SAAL,CAAejB,WAAW,GAAGqE,WAAH,GAAiB,MAAM5E,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBkD,WAAjB,EAA8B7D,cAA9B,CAAjD,CAAP;AACH,CAtCM;;AAAMT,yDAA8CwI,8CAA9C;AAwCb;;;;;;;;AAOO,MAAME,yDAAyD,GAAG,OAAO7J,OAAP,EAAyBiB,IAAzB,EAAyDhB,QAAzD,KAA8E;EACnJ,MAAMsD,qBAAatC,IAAb,EAAmBa,gCAAnB,CAAN;EACA,MAAM;IACFF,cADE;IAEFkI,aAFE;IAGFzF,OAHE;IAIFO,eAJE;IAKFU,QALE;IAMFC,IANE;IAOFnE;EAPE,IAQFH,IARJ;EAUA,MAAMJ,OAAO,GAAGd,cAAc,CAACC,OAAD,EAAUC,QAAV,CAA9B;EACAY,OAAO,CAACgE,UAAR,CAAmBD,eAAnB;EACA,MAAMY,MAAM,GAAGD,IAAI,IAAI1E,OAAO,CAAC4B,OAAR,CAAgBC,OAAhB,CAAwB7B,OAAO,CAAC4B,OAAR,CAAgBb,cAAhB,CAA+BA,cAA/B,CAAxB,CAAvB;EACA,MAAM;IAAC6D;EAAD,IAAgB,MAAM5E,OAAO,CAAC6C,kBAAR,CAA2BgC,oBAA3B,CACxB7E,OAAO,CAAC4B,OAAR,CAAgBG,KAAhB,CAAsBgC,eAAtB,CADwB,EAExB,0CAFwB,EAGxB;IACIU,QAAQ,EAAEzE,OAAO,CAAC+C,KAAR,CAAc0B,QAAd,CADd;IAEIC,IAAI,EAAEC;EAFV,CAHwB,EAOxB,CAAC;IACGO,IAAI,EAAE,SADT;IAEGC,KAAK,EAAE,KAAK,IAAIzB,sBAAJ,CAAcF,OAAd,EAAuB+B,QAAvB,CAAgC,EAAhC,CAAmC;EAFlD,CAAD,EAII;IACIL,IAAI,EAAE,SADV;IAEIC,KAAK,EAAE,KAAK,IAAIzB,sBAAJ,CAAcuF,aAAd,EAA6BtF,YAA7B,CAA0C,GAA1C,EAA+C4B,QAA/C,CAAwD,EAAxD,CAA2D;EAF3E,CAJJ,CAPwB,EAexBZ,MAfwB,CAA5B;EAiBA,OAAOtD,IAAI,CAACG,SAAL,CAAejB,WAAW,GAAGqE,WAAH,GAAiB,MAAM5E,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBkD,WAAjB,EAA8B7D,cAA9B,CAAjD,CAAP;AACH,CAjCM;;AAAMT,oEAAyD0I,yDAAzD;AAmCb;;;;;;;;AAOO,MAAME,qBAAqB,GAAG,OAAOpI,EAAP,EAA2BC,cAA3B,EAAmD5B,OAAnD,KAAuE;EACxG,IAAI2B,EAAE,CAACE,KAAH,KAAaC,iBAASC,IAA1B,EAAgC;IAC5B,MAAMC,KAAK,CAAC,oBAAD,CAAX;EACH;;EACD,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWR,EAAE,CAACS,qBAAd,CAA1B;EACA,MAAMvB,OAAO,GAAGd,cAAc,CAACC,OAAD,CAA9B;EACA,OAAOkC,IAAI,CAACG,SAAL,CAAe,MAAMxB,OAAO,CAACyB,GAAR,CAAYC,IAAZ,CAAiBN,iBAAjB,EAAoCL,cAApC,CAArB,CAAP;AACH,CAPM;;AAAMT,gCAAqB4I,qBAArB;;AASN,MAAMC,0BAA0B,GAAIvH,OAAD,IAAqB5C,OAAO,CAAC4C,OAAR,CAAgBC,OAAhB,CAAwBD,OAAxB,CAAxD;;AAAMtB,qCAA0B6I,0BAA1B;;AAEb,MAAMtF,iBAAiB,GAAG,OAAO1E,OAAP,EAAyBqE,OAAzB,KAA6D;EACnF,MAAM4F,MAAM,GAAG;IACXC,MAAM,EAAE,KADG;IAEX9J,GAAG,EAAE,cAAciE,OAAO,EAFf;IAGX8F,OAAO,EAAE,GAAGnK,OAAO,GAAG,gCAAH,GAAsC,yBAAyB,EAHvE;IAIXoK,OAAO,EAAE;MACL,gBAAgB,kBADX;MAEL,oBAAoB/J,OAAO,CAACC,GAAR,CAAYS;IAF3B;EAJE,CAAf;EASA,MAAM;IAAE+H;EAAF,IAAW,CAAC,MAAMvF,cAAM8G,OAAN,CAAcJ,MAAd,CAAP,EAAoDnB,IAArE;;EACA,IAAI,EAACA,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEwB,MAAP,CAAJ,EAAmB;IACf,MAAM,IAAItI,KAAJ,CAAU,gBAAV,CAAN;EACH;;EACD,OAAO8G,IAAI,CAAC,CAAD,CAAJ,CAAQ1E,SAAf;EACA,MAAM,IAAIpC,KAAJ,CAAU,4BAAV,CAAN;AACH,CAhBD","names":["TronWeb","require","prepareTronWeb","testnet","provider","HttpProvider","providers","url","process","env","TATUM_API_URL","constants_1","TATUM_API_KEY","fullNode","solidityNode","eventServer","tronWeb","setHeader","TRON_PRO_API_KEY","sendTronTransaction","body","blockchain_1","exports","signatureId","freezeTronTransaction","sendTronTrc10Transaction","sendTronTrc20Transaction","createTronTrc10Transaction","createTronTrc20Transaction","signTronKMSTransaction","tx","fromPrivateKey","chain","model_1","TRON","Error","transactionConfig","JSON","parse","serializedTransaction","stringify","trx","sign","convertAddressFromHex","address","fromHex","convertAddressToHex","toHex","sendTronDeployTrc721SignedTransaction","sendTronGenerateCustodialWalletSignedTransaction","sendTronDeployMarketplaceListingSignedTransaction","sendTronMintCashbackTrc721SignedTransaction","sendTronMintTrc721SignedTransaction","sendTronTransferTrc721SignedTransaction","sendTronBurnTrc721SignedTransaction","sendTronMintMultipleTrc721SignedTransaction","sendTronUpdateCashbackForAuthorTrc721SignedTransaction","prepareTronSignedTransaction","tatum_1","to","amount","transactionBuilder","sendTrx","toSun","prepareTronFreezeTransaction","receiver","resource","duration","freezeBalance","parseFloat","prepareTronTrc10SignedTransaction","precision","tokenId","sendToken","bignumber_js_1","multipliedBy","pow","getTrc10Precision","tronGetAccountTrc20Address","contractAddress","setAddress","contractInstance","contract","at","balanceOf","call","getTronTrc20ContractDecimals","decimals","prepareTronSmartContractInvocation","feeLimit","from","sender","transaction","triggerSmartContract","methodName","callValue","params","prepareTronCustodialTransferBatch","type","value","map","prepareTronTrc20SignedTransaction","tokenAddress","toString","prepareTronCreateTrc10SignedTransaction","name","abbreviation","description","totalSupply","createToken","trxRatio","tokenRatio","saleStart","Date","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","prepareTronCreateTrc20SignedTransaction","recipient","symbol","createSmartContract","userFeePercentage","originEnergyLimit","abi","token_abi_1","bytecode","token_bytecode_1","parameters","prepareTronSignedKMSTransaction","prepareTronFreezeKMSTransaction","prepareTronTrc10SignedKMSTransaction","prepareTronTrc20SignedKMSTransaction","prepareTronCreateTrc10SignedKMSTransaction","prepareTronCreateTrc20SignedKMSTransaction","prepareTronDeployTrc721SignedTransaction","trc721_abi_1","trc721_bytecode_1","prepareTronGenerateCustodialWalletSignedTransaction","code","wallet_1","prepareTronDeployMarketplaceListingSignedTransaction","marketplace_1","data","marketplaceFee","feeRecipient","prepareTronMintCashbackTrc721SignedTransaction","authorAddresses","cashbackValues","cb","c","push","a","prepareTronMintTrc721SignedTransaction","prepareTronTransferTrc721SignedTransaction","prepareTronBurnTrc721SignedTransaction","prepareTronMintMultipleTrc721SignedTransaction","t","prepareTronUpdateCashbackForAuthorTrc721SignedTransaction","cashbackValue","signTrxKMSTransaction","transferHexToBase58Address","config","method","baseURL","headers","request","length"],"sourceRoot":"","sources":["../../../src/transaction/tron.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}