{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../../caver-utils/src/utils');\n\nconst emptySigArray = ['0x01', '0x', '0x'];\n/**\n * Representing a SignatureData class that includes ECDSA signature data string.\n *\n * @example\n * caver.wallet.keyring.signatureData\n *\n * @class\n */\n\nclass SignatureData {\n  /**\n   * creates a SignatureData.\n   *\n   * @example\n   * const signature = new caver.wallet.keyring.signatureData([\n   *     '0x0fea',\n   *     '0xade9480f584fe481bf070ab758ecc010afa15debc33e1bd75af637d834073a6e',\n   *     '0x38160105d78cef4529d765941ad6637d8dcf6bd99310e165fee1c39fff2aa27e',\n   * ])\n   *\n   * @param {Array.<string>|SignatureData} key - The ECDSA signatureData\n   */\n  constructor(signature) {\n    if (!signature) signature = emptySigArray;\n\n    if (signature instanceof SignatureData) {\n      this.v = signature.v;\n      this.r = signature.r;\n      this.s = signature.s;\n    }\n\n    if (!_.isArray(signature)) signature = utils.resolveSignature(signature);\n    const [v, r, s] = signature;\n    this.v = v;\n    this.r = r;\n    this.s = s;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get v() {\n    return this._v;\n  }\n\n  set v(v) {\n    v = v.slice(0, 2) === '0x' ? v : `0x${v}`; // If v of Signature is 0, '0x' is returned when RLP decoded.\n    // However, the Bytes.toNumber function used for recover public key cannot convert '0x' to 0,\n    // so to handle this case, v is converted to '0x0' in case of '0x' (makeEven converts '0x0' to '0x00').\n\n    v = v === '0x' ? '0x0' : v;\n    this._v = utils.makeEven(v);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get V() {\n    return this.v;\n  }\n\n  set V(v) {\n    this.v = utils.makeEven(v);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get r() {\n    return this._r;\n  }\n\n  set r(r) {\n    r = r.slice(0, 2) === '0x' ? r : `0x${r}`;\n    this._r = utils.makeEven(r);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get R() {\n    return this.r;\n  }\n\n  set R(r) {\n    this.r = r;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get s() {\n    return this._s;\n  }\n\n  set s(s) {\n    s = s.slice(0, 2) === '0x' ? s : `0x${s}`;\n    this._s = utils.makeEven(s);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get S() {\n    return this.s;\n  }\n\n  set S(s) {\n    this.s = s;\n  }\n  /**\n   * Returns `true` if signature is same with emptySig.\n   *\n   * @example\n   * const isEmpty = signatureData.isEmpty()\n   *\n   * @return {boolean} `ture` means the signatureData is empty.\n   */\n\n\n  isEmpty() {\n    if (this.v === '0x01' && this.r === '0x' && this.s === '0x') return true;\n    return false;\n  }\n  /**\n   * Convert to array and return.\n   *\n   * @example\n   * const arrayFormat = signatureData.encode()\n   *\n   * @return {Array.<string>} An array format of signature.\n   */\n\n\n  encode() {\n    return [utils.makeEven(utils.trimLeadingZero(this.v)), this.r, this.s];\n  }\n  /**\n   * Converts to combined string.\n   *\n   * @example\n   * const sig = signatureData.toString()\n   *\n   * @return {string}\n   */\n\n\n  toString() {\n    return this.v + this.r + this.s;\n  }\n  /**\n   * Checks that the signature data is the same.\n   *\n   * @example\n   * const isEqual = signatureData.isEqual([ '0x1b', '0xc6901...', '0x642d8...' ])\n   *\n   * @param {Array.<string>|SignatureData} sig - The ECDSA signatureData to compare\n   * @return {boolean}\n   */\n\n\n  isEqual(sig) {\n    sig = new SignatureData(sig);\n    return this.toString() === sig.toString();\n  }\n\n}\n/**\n * @type {SignatureData}\n *\n * @example\n * caver.wallet.keyring.signatureData.emtpySig\n */\n\n\nSignatureData.emtpySig = new SignatureData(emptySigArray);\nmodule.exports = SignatureData;","map":{"version":3,"names":["_","require","utils","emptySigArray","SignatureData","constructor","signature","v","r","s","isArray","resolveSignature","_v","slice","makeEven","V","_r","R","_s","S","isEmpty","encode","trimLeadingZero","toString","isEqual","sig","emtpySig","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-wallet/src/keyring/signatureData.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst utils = require('../../../caver-utils/src/utils')\n\nconst emptySigArray = ['0x01', '0x', '0x']\n\n/**\n * Representing a SignatureData class that includes ECDSA signature data string.\n *\n * @example\n * caver.wallet.keyring.signatureData\n *\n * @class\n */\nclass SignatureData {\n    /**\n     * creates a SignatureData.\n     *\n     * @example\n     * const signature = new caver.wallet.keyring.signatureData([\n     *     '0x0fea',\n     *     '0xade9480f584fe481bf070ab758ecc010afa15debc33e1bd75af637d834073a6e',\n     *     '0x38160105d78cef4529d765941ad6637d8dcf6bd99310e165fee1c39fff2aa27e',\n     * ])\n     *\n     * @param {Array.<string>|SignatureData} key - The ECDSA signatureData\n     */\n    constructor(signature) {\n        if (!signature) signature = emptySigArray\n        if (signature instanceof SignatureData) {\n            this.v = signature.v\n            this.r = signature.r\n            this.s = signature.s\n        }\n        if (!_.isArray(signature)) signature = utils.resolveSignature(signature)\n\n        const [v, r, s] = signature\n        this.v = v\n        this.r = r\n        this.s = s\n    }\n\n    /**\n     * @type {string}\n     */\n    get v() {\n        return this._v\n    }\n\n    set v(v) {\n        v = v.slice(0, 2) === '0x' ? v : `0x${v}`\n        // If v of Signature is 0, '0x' is returned when RLP decoded.\n        // However, the Bytes.toNumber function used for recover public key cannot convert '0x' to 0,\n        // so to handle this case, v is converted to '0x0' in case of '0x' (makeEven converts '0x0' to '0x00').\n        v = v === '0x' ? '0x0' : v\n        this._v = utils.makeEven(v)\n    }\n\n    /**\n     * @type {string}\n     */\n    get V() {\n        return this.v\n    }\n\n    set V(v) {\n        this.v = utils.makeEven(v)\n    }\n\n    /**\n     * @type {string}\n     */\n    get r() {\n        return this._r\n    }\n\n    set r(r) {\n        r = r.slice(0, 2) === '0x' ? r : `0x${r}`\n        this._r = utils.makeEven(r)\n    }\n\n    /**\n     * @type {string}\n     */\n    get R() {\n        return this.r\n    }\n\n    set R(r) {\n        this.r = r\n    }\n\n    /**\n     * @type {string}\n     */\n    get s() {\n        return this._s\n    }\n\n    set s(s) {\n        s = s.slice(0, 2) === '0x' ? s : `0x${s}`\n        this._s = utils.makeEven(s)\n    }\n\n    /**\n     * @type {string}\n     */\n    get S() {\n        return this.s\n    }\n\n    set S(s) {\n        this.s = s\n    }\n\n    /**\n     * Returns `true` if signature is same with emptySig.\n     *\n     * @example\n     * const isEmpty = signatureData.isEmpty()\n     *\n     * @return {boolean} `ture` means the signatureData is empty.\n     */\n    isEmpty() {\n        if (this.v === '0x01' && this.r === '0x' && this.s === '0x') return true\n        return false\n    }\n\n    /**\n     * Convert to array and return.\n     *\n     * @example\n     * const arrayFormat = signatureData.encode()\n     *\n     * @return {Array.<string>} An array format of signature.\n     */\n    encode() {\n        return [utils.makeEven(utils.trimLeadingZero(this.v)), this.r, this.s]\n    }\n\n    /**\n     * Converts to combined string.\n     *\n     * @example\n     * const sig = signatureData.toString()\n     *\n     * @return {string}\n     */\n    toString() {\n        return this.v + this.r + this.s\n    }\n\n    /**\n     * Checks that the signature data is the same.\n     *\n     * @example\n     * const isEqual = signatureData.isEqual([ '0x1b', '0xc6901...', '0x642d8...' ])\n     *\n     * @param {Array.<string>|SignatureData} sig - The ECDSA signatureData to compare\n     * @return {boolean}\n     */\n    isEqual(sig) {\n        sig = new SignatureData(sig)\n        return this.toString() === sig.toString()\n    }\n}\n\n/**\n * @type {SignatureData}\n *\n * @example\n * caver.wallet.keyring.signatureData.emtpySig\n */\nSignatureData.emtpySig = new SignatureData(emptySigArray)\n\nmodule.exports = SignatureData\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}