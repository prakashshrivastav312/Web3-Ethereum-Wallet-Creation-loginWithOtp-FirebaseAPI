{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareVetSignedTransaction = exports.signVetKMSTransaction = exports.sendVetTransaction = void 0;\n\nconst thorify_1 = require(\"thorify\");\n\nconst web3_1 = __importDefault(require(\"web3\"));\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst model_1 = require(\"../model\");\n/**\n * Send VeChain transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the VeChain Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\n\nconst sendVetTransaction = async (testnet, body, provider) => {\n  return blockchain_1.vetBroadcast(await exports.prepareVetSignedTransaction(testnet, body, provider));\n};\n\nexports.sendVetTransaction = sendVetTransaction;\n/**\n * Sign VeChain pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param testnet mainnet or testnet version\n * @param provider url of the VeChain Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signVetKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {\n  if (tx.chain !== model_1.Currency.VET) {\n    throw Error('Unsupported chain.');\n  }\n\n  const client = thorify_1.thorify(new web3_1.default(), provider || (testnet ? constants_1.TEST_VET_URL : constants_1.VET_URL));\n  client.eth.accounts.wallet.clear();\n  client.eth.accounts.wallet.add(fromPrivateKey);\n  client.eth.defaultAccount = client.eth.accounts.wallet[0].address;\n  const transactionConfig = JSON.parse(tx.serializedTransaction);\n  transactionConfig.gas = await client.eth.estimateGas(transactionConfig);\n  return (await client.eth.accounts.signTransaction(transactionConfig, fromPrivateKey)).rawTransaction;\n};\n\nexports.signVetKMSTransaction = signVetKMSTransaction;\n/**\n * Sign VeChain transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the VeChain Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareVetSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferVet);\n  const {\n    fromPrivateKey,\n    to,\n    amount,\n    data,\n    fee\n  } = body;\n  const client = thorify_1.thorify(new web3_1.default(), provider || (testnet ? constants_1.TEST_VET_URL : constants_1.VET_URL));\n  client.eth.accounts.wallet.clear();\n  client.eth.accounts.wallet.add(fromPrivateKey);\n  client.eth.defaultAccount = client.eth.accounts.wallet[0].address;\n  const tx = {\n    from: 0,\n    to: to.trim(),\n    data: data ? client.utils.toHex(data) : undefined,\n    value: client.utils.toWei(`${amount}`, 'ether')\n  };\n\n  if (fee) {\n    tx.gas = fee.gasLimit;\n  } else {\n    tx.gas = await client.eth.estimateGas(tx);\n  }\n\n  return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;\n};\n\nexports.prepareVetSignedTransaction = prepareVetSignedTransaction;","map":{"version":3,"mappings":"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","names":["sendVetTransaction","testnet","body","provider","blockchain_1","exports","signVetKMSTransaction","tx","fromPrivateKey","chain","model_1","VET","Error","client","thorify_1","web3_1","constants_1","eth","accounts","wallet","clear","add","defaultAccount","address","transactionConfig","JSON","parse","serializedTransaction","gas","estimateGas","signTransaction","rawTransaction","prepareVetSignedTransaction","tatum_1","to","amount","data","fee","from","trim","utils","toHex","undefined","value","toWei","gasLimit"],"sourceRoot":"","sources":["../../../src/transaction/vet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}