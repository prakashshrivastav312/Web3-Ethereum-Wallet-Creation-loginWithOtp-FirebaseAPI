{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompositeValue = exports.CompositeType = void 0;\n\nconst utils_1 = require(\"../../utils\");\n\nconst types_1 = require(\"./types\");\n\nclass CompositeType extends types_1.Type {\n  constructor() {\n    for (var _len = arguments.length, typeParameters = new Array(_len), _key = 0; _key < _len; _key++) {\n      typeParameters[_key] = arguments[_key];\n    }\n\n    super(\"Composite\", typeParameters, types_1.TypeCardinality.variable(typeParameters.length));\n  }\n\n}\n\nexports.CompositeType = CompositeType;\n\nclass CompositeValue extends types_1.TypedValue {\n  constructor(type, items) {\n    super(type);\n    utils_1.guardLength(items, type.getTypeParameters().length); // TODO: assert type of each item (wrt. type.getTypeParameters()).\n\n    this.items = items;\n  }\n\n  static fromItems() {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    let typeParameters = items.map(value => value.getType());\n    let type = new CompositeType(...typeParameters);\n    return new CompositeValue(type, items);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  valueOf() {\n    return this.items.map(item => item.valueOf());\n  }\n\n  equals(other) {\n    if (this.getType().differs(other.getType())) {\n      return false;\n    }\n\n    for (let i = 0; i < this.items.length; i++) {\n      let selfItem = this.items[i];\n      let otherItem = other.items[i];\n\n      if (!selfItem.equals(otherItem)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.CompositeValue = CompositeValue;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAaA,aAAb,SAAmCC,YAAnC,CAAuC;EACnCC,cAAqC;IAAA,kCAAtBC,cAAsB;MAAtBA,cAAsB;IAAA;;IACjC,MAAM,WAAN,EAAmBA,cAAnB,EAAmCF,wBAAgBG,QAAhB,CAAyBD,cAAc,CAACE,MAAxC,CAAnC;EACH;;AAHkC;;AAAvCC;;AAMA,MAAaC,cAAb,SAAoCN,kBAApC,CAA8C;EAG1CC,YAAYM,IAAZ,EAAiCC,KAAjC,EAAoD;IAChD,MAAMD,IAAN;IAEAE,oBAAYD,KAAZ,EAAmBD,IAAI,CAACG,iBAAL,GAAyBN,MAA5C,EAHgD,CAKhD;;IAEA,KAAKI,KAAL,GAAaA,KAAb;EACH;;EAEe,OAATG,SAAS,GAAuB;IAAA,mCAAnBH,KAAmB;MAAnBA,KAAmB;IAAA;;IACnC,IAAIN,cAAc,GAAGM,KAAK,CAACI,GAAN,CAAUC,KAAK,IAAIA,KAAK,CAACC,OAAN,EAAnB,CAArB;IACA,IAAIP,IAAI,GAAG,IAAIR,aAAJ,CAAkB,GAAGG,cAArB,CAAX;IACA,OAAO,IAAII,cAAJ,CAAmBC,IAAnB,EAAyBC,KAAzB,CAAP;EACH;;EAEDO,QAAQ;IACJ,OAAO,KAAKP,KAAZ;EACH;;EAEDQ,OAAO;IACH,OAAO,KAAKR,KAAL,CAAWI,GAAX,CAAeK,IAAI,IAAIA,IAAI,CAACD,OAAL,EAAvB,CAAP;EACH;;EAEDE,MAAM,CAACC,KAAD,EAAsB;IACxB,IAAI,KAAKL,OAAL,GAAeM,OAAf,CAAuBD,KAAK,CAACL,OAAN,EAAvB,CAAJ,EAA6C;MACzC,OAAO,KAAP;IACH;;IAED,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKb,KAAL,CAAWJ,MAA/B,EAAuCiB,CAAC,EAAxC,EAA4C;MACxC,IAAIC,QAAQ,GAAG,KAAKd,KAAL,CAAWa,CAAX,CAAf;MACA,IAAIE,SAAS,GAAGJ,KAAK,CAACX,KAAN,CAAYa,CAAZ,CAAhB;;MAEA,IAAI,CAACC,QAAQ,CAACJ,MAAT,CAAgBK,SAAhB,CAAL,EAAiC;QAC7B,OAAO,KAAP;MACH;IACJ;;IAED,OAAO,IAAP;EACH;;AA1CyC;;AAA9ClB","names":["CompositeType","types_1","constructor","typeParameters","variable","length","exports","CompositeValue","type","items","utils_1","getTypeParameters","fromItems","map","value","getType","getItems","valueOf","item","equals","other","differs","i","selfItem","otherItem"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/composite.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}