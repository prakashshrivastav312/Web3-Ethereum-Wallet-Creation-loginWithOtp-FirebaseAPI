{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrKey = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n/* eslint-disable no-bitwise */\n\n\nexports.decodeCheck = decodeCheck;\nexports.encodeCheck = encodeCheck;\n\nvar _base = require('base32.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _crc = require('crc');\n\nvar _crc2 = _interopRequireDefault(_crc);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isNull = require('lodash/isNull');\n\nvar _isNull2 = _interopRequireDefault(_isNull);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _checksum = require('./util/checksum');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar versionBytes = {\n  ed25519PublicKey: 6 << 3,\n  // G (when encoded in base32)\n  ed25519SecretSeed: 18 << 3,\n  // S\n  med25519PublicKey: 12 << 3,\n  // M\n  preAuthTx: 19 << 3,\n  // T\n  sha256Hash: 23 << 3 // X\n\n};\n/**\n * StrKey is a helper class that allows encoding and decoding Stellar keys\n * to/from strings, i.e. between their binary (Buffer, xdr.PublicKey, etc.) and\n * string (i.e. \"GABCD...\", etc.) representations.\n */\n\nvar StrKey = exports.StrKey = function () {\n  function StrKey() {\n    _classCallCheck(this, StrKey);\n  }\n\n  _createClass(StrKey, null, [{\n    key: 'encodeEd25519PublicKey',\n\n    /**\n     * Encodes `data` to strkey ed25519 public key.\n     *\n     * @param   {Buffer} data   raw data to encode\n     * @returns {string}        \"G...\" representation of the key\n     */\n    value: function encodeEd25519PublicKey(data) {\n      return encodeCheck('ed25519PublicKey', data);\n    }\n    /**\n     * Decodes strkey ed25519 public key to raw data.\n     *\n     * If the parameter is a muxed account key (\"M...\"), this will only encode it\n     * as a basic Ed25519 key (as if in \"G...\" format).\n     *\n     * @param   {string} data   \"G...\" (or \"M...\") key representation to decode\n     * @returns {Buffer}        raw key\n     */\n\n  }, {\n    key: 'decodeEd25519PublicKey',\n    value: function decodeEd25519PublicKey(data) {\n      return decodeCheck('ed25519PublicKey', data);\n    }\n    /**\n     * Returns true if the given Stellar public key is a valid ed25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isValidEd25519PublicKey',\n    value: function isValidEd25519PublicKey(publicKey) {\n      return isValid('ed25519PublicKey', publicKey);\n    }\n    /**\n     * Encodes data to strkey ed25519 seed.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodeEd25519SecretSeed',\n    value: function encodeEd25519SecretSeed(data) {\n      return encodeCheck('ed25519SecretSeed', data);\n    }\n    /**\n     * Decodes strkey ed25519 seed to raw data.\n     * @param {string} data data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodeEd25519SecretSeed',\n    value: function decodeEd25519SecretSeed(data) {\n      return decodeCheck('ed25519SecretSeed', data);\n    }\n    /**\n     * Returns true if the given Stellar secret key is a valid ed25519 secret seed.\n     * @param {string} seed seed to check\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isValidEd25519SecretSeed',\n    value: function isValidEd25519SecretSeed(seed) {\n      return isValid('ed25519SecretSeed', seed);\n    }\n    /**\n     * Encodes data to strkey med25519 public key.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodeMed25519PublicKey',\n    value: function encodeMed25519PublicKey(data) {\n      return encodeCheck('med25519PublicKey', data);\n    }\n    /**\n     * Decodes strkey med25519 public key to raw data.\n     * @param {string} data data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodeMed25519PublicKey',\n    value: function decodeMed25519PublicKey(data) {\n      return decodeCheck('med25519PublicKey', data);\n    }\n    /**\n     * Returns true if the given Stellar public key is a valid med25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isValidMed25519PublicKey',\n    value: function isValidMed25519PublicKey(publicKey) {\n      return isValid('med25519PublicKey', publicKey);\n    }\n    /**\n     * Encodes data to strkey preAuthTx.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodePreAuthTx',\n    value: function encodePreAuthTx(data) {\n      return encodeCheck('preAuthTx', data);\n    }\n    /**\n     * Decodes strkey PreAuthTx to raw data.\n     * @param {string} data data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodePreAuthTx',\n    value: function decodePreAuthTx(data) {\n      return decodeCheck('preAuthTx', data);\n    }\n    /**\n     * Encodes data to strkey sha256 hash.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodeSha256Hash',\n    value: function encodeSha256Hash(data) {\n      return encodeCheck('sha256Hash', data);\n    }\n    /**\n     * Decodes strkey sha256 hash to raw data.\n     * @param {string} data data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodeSha256Hash',\n    value: function decodeSha256Hash(data) {\n      return decodeCheck('sha256Hash', data);\n    }\n  }]);\n\n  return StrKey;\n}(); // Warning: This isn't a *definitive* check of validity, but rather just a\n// basic-effort check.\n\n\nfunction isValid(versionByteName, encoded) {\n  // it's either non-muxed && len=56, or muxed && len=69\n  if (encoded && encoded.length !== 56 && encoded.length !== 69) {\n    return false;\n  }\n\n  try {\n    var decoded = decodeCheck(versionByteName, encoded);\n\n    if (decoded.length !== 32 && decoded.length !== 40) {\n      return false;\n    }\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction decodeCheck(versionByteName, encoded) {\n  if (!(0, _isString2.default)(encoded)) {\n    throw new TypeError('encoded argument must be of type String');\n  }\n\n  var decoded = _base2.default.decode(encoded);\n\n  var versionByte = decoded[0];\n  var payload = decoded.slice(0, -2);\n  var data = payload.slice(1);\n  var checksum = decoded.slice(-2);\n\n  if (encoded !== _base2.default.encode(decoded)) {\n    throw new Error('invalid encoded string');\n  }\n\n  var expectedVersion = versionBytes[versionByteName];\n\n  if ((0, _isUndefined2.default)(expectedVersion)) {\n    throw new Error(versionByteName + ' is not a valid version byte name. ' + ('Expected one of ' + Object.keys(versionBytes).join(', ')));\n  }\n\n  if (versionByte !== expectedVersion) {\n    throw new Error('invalid version byte. expected ' + expectedVersion + ', got ' + versionByte);\n  }\n\n  var expectedChecksum = calculateChecksum(payload);\n\n  if (!(0, _checksum.verifyChecksum)(expectedChecksum, checksum)) {\n    throw new Error('invalid checksum');\n  }\n\n  return Buffer.from(data);\n}\n\nfunction encodeCheck(versionByteName, data) {\n  if ((0, _isNull2.default)(data) || (0, _isUndefined2.default)(data)) {\n    throw new Error('cannot encode null data');\n  }\n\n  var versionByte = versionBytes[versionByteName];\n\n  if ((0, _isUndefined2.default)(versionByte)) {\n    throw new Error(versionByteName + ' is not a valid version byte name. ' + ('Expected one of ' + Object.keys(versionBytes).join(', ')));\n  }\n\n  data = Buffer.from(data);\n  var versionBuffer = Buffer.from([versionByte]);\n  var payload = Buffer.concat([versionBuffer, data]);\n  var checksum = calculateChecksum(payload);\n  var unencoded = Buffer.concat([payload, checksum]);\n  return _base2.default.encode(unencoded);\n}\n\nfunction calculateChecksum(payload) {\n  // This code calculates CRC16-XModem checksum of payload\n  // and returns it as Buffer in little-endian order.\n  var checksum = Buffer.alloc(2);\n  checksum.writeUInt16LE(_crc2.default.crc16xmodem(payload), 0);\n  return checksum;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","StrKey","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","decodeCheck","encodeCheck","_base","require","_base2","_interopRequireDefault","_crc","_crc2","_isUndefined","_isUndefined2","_isNull","_isNull2","_isString","_isString2","_checksum","obj","__esModule","default","_classCallCheck","instance","TypeError","versionBytes","ed25519PublicKey","ed25519SecretSeed","med25519PublicKey","preAuthTx","sha256Hash","encodeEd25519PublicKey","data","decodeEd25519PublicKey","isValidEd25519PublicKey","publicKey","isValid","encodeEd25519SecretSeed","decodeEd25519SecretSeed","isValidEd25519SecretSeed","seed","encodeMed25519PublicKey","decodeMed25519PublicKey","isValidMed25519PublicKey","encodePreAuthTx","decodePreAuthTx","encodeSha256Hash","decodeSha256Hash","versionByteName","encoded","decoded","err","decode","versionByte","payload","slice","checksum","encode","Error","expectedVersion","keys","join","expectedChecksum","calculateChecksum","verifyChecksum","Buffer","from","versionBuffer","concat","unencoded","alloc","writeUInt16LE","crc16xmodem"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/strkey.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrKey = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-bitwise */\n\nexports.decodeCheck = decodeCheck;\nexports.encodeCheck = encodeCheck;\n\nvar _base = require('base32.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _crc = require('crc');\n\nvar _crc2 = _interopRequireDefault(_crc);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isNull = require('lodash/isNull');\n\nvar _isNull2 = _interopRequireDefault(_isNull);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _checksum = require('./util/checksum');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar versionBytes = {\n  ed25519PublicKey: 6 << 3, // G (when encoded in base32)\n  ed25519SecretSeed: 18 << 3, // S\n  med25519PublicKey: 12 << 3, // M\n  preAuthTx: 19 << 3, // T\n  sha256Hash: 23 << 3 // X\n};\n\n/**\n * StrKey is a helper class that allows encoding and decoding Stellar keys\n * to/from strings, i.e. between their binary (Buffer, xdr.PublicKey, etc.) and\n * string (i.e. \"GABCD...\", etc.) representations.\n */\n\nvar StrKey = exports.StrKey = function () {\n  function StrKey() {\n    _classCallCheck(this, StrKey);\n  }\n\n  _createClass(StrKey, null, [{\n    key: 'encodeEd25519PublicKey',\n\n    /**\n     * Encodes `data` to strkey ed25519 public key.\n     *\n     * @param   {Buffer} data   raw data to encode\n     * @returns {string}        \"G...\" representation of the key\n     */\n    value: function encodeEd25519PublicKey(data) {\n      return encodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 public key to raw data.\n     *\n     * If the parameter is a muxed account key (\"M...\"), this will only encode it\n     * as a basic Ed25519 key (as if in \"G...\" format).\n     *\n     * @param   {string} data   \"G...\" (or \"M...\") key representation to decode\n     * @returns {Buffer}        raw key\n     */\n\n  }, {\n    key: 'decodeEd25519PublicKey',\n    value: function decodeEd25519PublicKey(data) {\n      return decodeCheck('ed25519PublicKey', data);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid ed25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isValidEd25519PublicKey',\n    value: function isValidEd25519PublicKey(publicKey) {\n      return isValid('ed25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey ed25519 seed.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodeEd25519SecretSeed',\n    value: function encodeEd25519SecretSeed(data) {\n      return encodeCheck('ed25519SecretSeed', data);\n    }\n\n    /**\n     * Decodes strkey ed25519 seed to raw data.\n     * @param {string} data data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodeEd25519SecretSeed',\n    value: function decodeEd25519SecretSeed(data) {\n      return decodeCheck('ed25519SecretSeed', data);\n    }\n\n    /**\n     * Returns true if the given Stellar secret key is a valid ed25519 secret seed.\n     * @param {string} seed seed to check\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isValidEd25519SecretSeed',\n    value: function isValidEd25519SecretSeed(seed) {\n      return isValid('ed25519SecretSeed', seed);\n    }\n\n    /**\n     * Encodes data to strkey med25519 public key.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodeMed25519PublicKey',\n    value: function encodeMed25519PublicKey(data) {\n      return encodeCheck('med25519PublicKey', data);\n    }\n\n    /**\n     * Decodes strkey med25519 public key to raw data.\n     * @param {string} data data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodeMed25519PublicKey',\n    value: function decodeMed25519PublicKey(data) {\n      return decodeCheck('med25519PublicKey', data);\n    }\n\n    /**\n     * Returns true if the given Stellar public key is a valid med25519 public key.\n     * @param {string} publicKey public key to check\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isValidMed25519PublicKey',\n    value: function isValidMed25519PublicKey(publicKey) {\n      return isValid('med25519PublicKey', publicKey);\n    }\n\n    /**\n     * Encodes data to strkey preAuthTx.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodePreAuthTx',\n    value: function encodePreAuthTx(data) {\n      return encodeCheck('preAuthTx', data);\n    }\n\n    /**\n     * Decodes strkey PreAuthTx to raw data.\n     * @param {string} data data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodePreAuthTx',\n    value: function decodePreAuthTx(data) {\n      return decodeCheck('preAuthTx', data);\n    }\n\n    /**\n     * Encodes data to strkey sha256 hash.\n     * @param {Buffer} data data to encode\n     * @returns {string}\n     */\n\n  }, {\n    key: 'encodeSha256Hash',\n    value: function encodeSha256Hash(data) {\n      return encodeCheck('sha256Hash', data);\n    }\n\n    /**\n     * Decodes strkey sha256 hash to raw data.\n     * @param {string} data data to decode\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'decodeSha256Hash',\n    value: function decodeSha256Hash(data) {\n      return decodeCheck('sha256Hash', data);\n    }\n  }]);\n\n  return StrKey;\n}();\n\n// Warning: This isn't a *definitive* check of validity, but rather just a\n// basic-effort check.\n\n\nfunction isValid(versionByteName, encoded) {\n  // it's either non-muxed && len=56, or muxed && len=69\n  if (encoded && encoded.length !== 56 && encoded.length !== 69) {\n    return false;\n  }\n\n  try {\n    var decoded = decodeCheck(versionByteName, encoded);\n    if (decoded.length !== 32 && decoded.length !== 40) {\n      return false;\n    }\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\n\nfunction decodeCheck(versionByteName, encoded) {\n  if (!(0, _isString2.default)(encoded)) {\n    throw new TypeError('encoded argument must be of type String');\n  }\n\n  var decoded = _base2.default.decode(encoded);\n  var versionByte = decoded[0];\n  var payload = decoded.slice(0, -2);\n  var data = payload.slice(1);\n  var checksum = decoded.slice(-2);\n\n  if (encoded !== _base2.default.encode(decoded)) {\n    throw new Error('invalid encoded string');\n  }\n\n  var expectedVersion = versionBytes[versionByteName];\n\n  if ((0, _isUndefined2.default)(expectedVersion)) {\n    throw new Error(versionByteName + ' is not a valid version byte name. ' + ('Expected one of ' + Object.keys(versionBytes).join(', ')));\n  }\n\n  if (versionByte !== expectedVersion) {\n    throw new Error('invalid version byte. expected ' + expectedVersion + ', got ' + versionByte);\n  }\n\n  var expectedChecksum = calculateChecksum(payload);\n\n  if (!(0, _checksum.verifyChecksum)(expectedChecksum, checksum)) {\n    throw new Error('invalid checksum');\n  }\n\n  return Buffer.from(data);\n}\n\nfunction encodeCheck(versionByteName, data) {\n  if ((0, _isNull2.default)(data) || (0, _isUndefined2.default)(data)) {\n    throw new Error('cannot encode null data');\n  }\n\n  var versionByte = versionBytes[versionByteName];\n\n  if ((0, _isUndefined2.default)(versionByte)) {\n    throw new Error(versionByteName + ' is not a valid version byte name. ' + ('Expected one of ' + Object.keys(versionBytes).join(', ')));\n  }\n  data = Buffer.from(data);\n\n  var versionBuffer = Buffer.from([versionByte]);\n  var payload = Buffer.concat([versionBuffer, data]);\n  var checksum = calculateChecksum(payload);\n  var unencoded = Buffer.concat([payload, checksum]);\n\n  return _base2.default.encode(unencoded);\n}\n\nfunction calculateChecksum(payload) {\n  // This code calculates CRC16-XModem checksum of payload\n  // and returns it as Buffer in little-endian order.\n  var checksum = Buffer.alloc(2);\n  checksum.writeUInt16LE(_crc2.default.crc16xmodem(payload), 0);\n  return checksum;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}