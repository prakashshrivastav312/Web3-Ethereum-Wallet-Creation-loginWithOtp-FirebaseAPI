{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sign = sign;\nexports.verify = verify;\nexports.generate = generate; //  This module provides the signing functionality used by the stellar network\n//  The code below may look a little strange... this is because we try to provide\n//  the most efficient signing method possible.  First, we try to load the\n//  native `sodium-native` package for node.js environments, and if that fails we\n//  fallback to `tweetnacl`\n\nvar actualMethods = {};\n/**\n * Use this flag to check if fast signing (provided by `sodium-native` package) is available.\n * If your app is signing a large number of transaction or verifying a large number\n * of signatures make sure `sodium-native` package is installed.\n */\n\nvar FastSigning = exports.FastSigning = checkFastSigning();\n\nfunction sign(data, secretKey) {\n  return actualMethods.sign(data, secretKey);\n}\n\nfunction verify(data, signature, publicKey) {\n  return actualMethods.verify(data, signature, publicKey);\n}\n\nfunction generate(secretKey) {\n  return actualMethods.generate(secretKey);\n}\n\nfunction checkFastSigning() {\n  return typeof window === 'undefined' ? checkFastSigningNode() : checkFastSigningBrowser();\n}\n\nfunction checkFastSigningNode() {\n  // NOTE: we use commonjs style require here because es6 imports\n  // can only occur at the top level.  thanks, obama.\n  var sodium = void 0;\n\n  try {\n    // eslint-disable-next-line\n    sodium = require('sodium-native');\n  } catch (err) {\n    return checkFastSigningBrowser();\n  }\n\n  actualMethods.generate = function (secretKey) {\n    var pk = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n    var sk = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n    sodium.crypto_sign_seed_keypair(pk, sk, secretKey);\n    return pk;\n  };\n\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    var signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n    sodium.crypto_sign_detached(signature, data, secretKey);\n    return signature;\n  };\n\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n\n    try {\n      return sodium.crypto_sign_verify_detached(signature, data, publicKey);\n    } catch (e) {\n      return false;\n    }\n  };\n\n  return true;\n}\n\nfunction checkFastSigningBrowser() {\n  // fallback to `tweetnacl` if we're in the browser or\n  // if there was a failure installing `sodium-native`\n  // eslint-disable-next-line\n  var nacl = require('tweetnacl');\n\n  actualMethods.generate = function (secretKey) {\n    var secretKeyUint8 = new Uint8Array(secretKey);\n    var naclKeys = nacl.sign.keyPair.fromSeed(secretKeyUint8);\n    return Buffer.from(naclKeys.publicKey);\n  };\n\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    secretKey = new Uint8Array(secretKey.toJSON().data);\n    var signature = nacl.sign.detached(data, secretKey);\n    return Buffer.from(signature);\n  };\n\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    signature = new Uint8Array(signature.toJSON().data);\n    publicKey = new Uint8Array(publicKey.toJSON().data);\n    return nacl.sign.detached.verify(data, signature, publicKey);\n  };\n\n  return false;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","sign","verify","generate","actualMethods","FastSigning","checkFastSigning","data","secretKey","signature","publicKey","window","checkFastSigningNode","checkFastSigningBrowser","sodium","require","err","pk","Buffer","alloc","crypto_sign_PUBLICKEYBYTES","sk","crypto_sign_SECRETKEYBYTES","crypto_sign_seed_keypair","from","crypto_sign_BYTES","crypto_sign_detached","crypto_sign_verify_detached","e","nacl","secretKeyUint8","Uint8Array","naclKeys","keyPair","fromSeed","toJSON","detached"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/signing.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sign = sign;\nexports.verify = verify;\nexports.generate = generate;\n//  This module provides the signing functionality used by the stellar network\n//  The code below may look a little strange... this is because we try to provide\n//  the most efficient signing method possible.  First, we try to load the\n//  native `sodium-native` package for node.js environments, and if that fails we\n//  fallback to `tweetnacl`\n\nvar actualMethods = {};\n\n/**\n * Use this flag to check if fast signing (provided by `sodium-native` package) is available.\n * If your app is signing a large number of transaction or verifying a large number\n * of signatures make sure `sodium-native` package is installed.\n */\nvar FastSigning = exports.FastSigning = checkFastSigning();\n\nfunction sign(data, secretKey) {\n  return actualMethods.sign(data, secretKey);\n}\n\nfunction verify(data, signature, publicKey) {\n  return actualMethods.verify(data, signature, publicKey);\n}\n\nfunction generate(secretKey) {\n  return actualMethods.generate(secretKey);\n}\n\nfunction checkFastSigning() {\n  return typeof window === 'undefined' ? checkFastSigningNode() : checkFastSigningBrowser();\n}\n\nfunction checkFastSigningNode() {\n  // NOTE: we use commonjs style require here because es6 imports\n  // can only occur at the top level.  thanks, obama.\n  var sodium = void 0;\n  try {\n    // eslint-disable-next-line\n    sodium = require('sodium-native');\n  } catch (err) {\n    return checkFastSigningBrowser();\n  }\n\n  actualMethods.generate = function (secretKey) {\n    var pk = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n    var sk = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n    sodium.crypto_sign_seed_keypair(pk, sk, secretKey);\n    return pk;\n  };\n\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    var signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n    sodium.crypto_sign_detached(signature, data, secretKey);\n    return signature;\n  };\n\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    try {\n      return sodium.crypto_sign_verify_detached(signature, data, publicKey);\n    } catch (e) {\n      return false;\n    }\n  };\n\n  return true;\n}\n\nfunction checkFastSigningBrowser() {\n  // fallback to `tweetnacl` if we're in the browser or\n  // if there was a failure installing `sodium-native`\n  // eslint-disable-next-line\n  var nacl = require('tweetnacl');\n\n  actualMethods.generate = function (secretKey) {\n    var secretKeyUint8 = new Uint8Array(secretKey);\n    var naclKeys = nacl.sign.keyPair.fromSeed(secretKeyUint8);\n    return Buffer.from(naclKeys.publicKey);\n  };\n\n  actualMethods.sign = function (data, secretKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    secretKey = new Uint8Array(secretKey.toJSON().data);\n\n    var signature = nacl.sign.detached(data, secretKey);\n\n    return Buffer.from(signature);\n  };\n\n  actualMethods.verify = function (data, signature, publicKey) {\n    data = Buffer.from(data);\n    data = new Uint8Array(data.toJSON().data);\n    signature = new Uint8Array(signature.toJSON().data);\n    publicKey = new Uint8Array(publicKey.toJSON().data);\n\n    return nacl.sign.detached.verify(data, signature, publicKey);\n  };\n\n  return false;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}