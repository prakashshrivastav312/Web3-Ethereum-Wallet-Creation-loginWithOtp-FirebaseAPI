{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendApproveFromCustodialWallet = exports.prepareApproveFromCustodialWallet = exports.sendBatchTransferFromCustodialWallet = exports.prepareBatchTransferFromCustodialWallet = exports.sendTransferFromCustodialWallet = exports.prepareTransferFromCustodialWallet = exports.sendCustodialWallet = exports.prepareCustodialWalletBatch = exports.generateCustodialWalletBatch = exports.prepareCustodialWallet = exports.generateCustodialWallet = exports.getCustodialAddresses = exports.obtainCustodialAddressType = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst custodial_1 = require(\"../contracts/custodial\");\n\nconst fungible_1 = require(\"../fungible\");\n\nconst helpers_1 = require(\"../helpers\");\n\nconst model_1 = require(\"../model\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst generateBatch = body => tatum_1.post('/v3/blockchain/sc/custodial/batch', body);\n\nconst obtainCustodialAddressType = body => {\n  if (body.chain === model_1.Currency.TRON && body.enableSemiFungibleTokens) {\n    throw new Error('MultiToken not supported for TRON.');\n  }\n\n  let abi;\n  let code;\n\n  if (body.enableFungibleTokens && body.enableNonFungibleTokens && body.enableSemiFungibleTokens && body.enableBatchTransactions) {\n    code = custodial_1.CustodialFullTokenWalletWithBatch.bytecode;\n    abi = custodial_1.CustodialFullTokenWalletWithBatch.abi;\n  } else if (body.enableFungibleTokens && body.enableNonFungibleTokens && body.enableSemiFungibleTokens && !body.enableBatchTransactions) {\n    code = custodial_1.CustodialFullTokenWallet.bytecode;\n    abi = custodial_1.CustodialFullTokenWallet.abi;\n  } else if (body.enableFungibleTokens && body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && body.enableBatchTransactions) {\n    code = custodial_1.Custodial_20_721_TokenWalletWithBatch.bytecode;\n    abi = custodial_1.Custodial_20_721_TokenWalletWithBatch.abi;\n  } else if (body.enableFungibleTokens && body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && !body.enableBatchTransactions) {\n    code = custodial_1.Custodial_20_721_TokenWallet.bytecode;\n    abi = custodial_1.Custodial_20_721_TokenWallet.abi;\n  } else if (body.enableFungibleTokens && !body.enableNonFungibleTokens && body.enableSemiFungibleTokens && body.enableBatchTransactions) {\n    code = custodial_1.Custodial_20_1155_TokenWalletWithBatch.bytecode;\n    abi = custodial_1.Custodial_20_1155_TokenWalletWithBatch.abi;\n  } else if (body.enableFungibleTokens && !body.enableNonFungibleTokens && body.enableSemiFungibleTokens && !body.enableBatchTransactions) {\n    code = custodial_1.Custodial_20_1155_TokenWallet.bytecode;\n    abi = custodial_1.Custodial_20_1155_TokenWallet.abi;\n  } else if (!body.enableFungibleTokens && body.enableNonFungibleTokens && body.enableSemiFungibleTokens && body.enableBatchTransactions) {\n    code = custodial_1.Custodial_721_1155_TokenWalletWithBatch.bytecode;\n    abi = custodial_1.Custodial_721_1155_TokenWalletWithBatch.abi;\n  } else if (!body.enableFungibleTokens && body.enableNonFungibleTokens && body.enableSemiFungibleTokens && !body.enableBatchTransactions) {\n    code = custodial_1.Custodial_721_1155_TokenWallet.bytecode;\n    abi = custodial_1.Custodial_721_1155_TokenWallet.abi;\n  } else if (body.enableFungibleTokens && !body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && body.enableBatchTransactions) {\n    code = custodial_1.Custodial_20_TokenWalletWithBatch.bytecode;\n    abi = custodial_1.Custodial_20_TokenWalletWithBatch.abi;\n  } else if (body.enableFungibleTokens && !body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && !body.enableBatchTransactions) {\n    code = custodial_1.Custodial_20_TokenWallet.bytecode;\n    abi = custodial_1.Custodial_20_TokenWallet.abi;\n  } else if (!body.enableFungibleTokens && body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && body.enableBatchTransactions) {\n    code = custodial_1.Custodial_721_TokenWalletWithBatch.bytecode;\n    abi = custodial_1.Custodial_721_TokenWalletWithBatch.abi;\n  } else if (!body.enableFungibleTokens && body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && !body.enableBatchTransactions) {\n    code = custodial_1.Custodial_721_TokenWallet.bytecode;\n    abi = custodial_1.Custodial_721_TokenWallet.abi;\n  } else if (!body.enableFungibleTokens && !body.enableNonFungibleTokens && body.enableSemiFungibleTokens && body.enableBatchTransactions) {\n    code = custodial_1.Custodial_1155_TokenWalletWithBatch.bytecode;\n    abi = custodial_1.Custodial_1155_TokenWalletWithBatch.abi;\n  } else if (!body.enableFungibleTokens && !body.enableNonFungibleTokens && body.enableSemiFungibleTokens && !body.enableBatchTransactions) {\n    code = custodial_1.Custodial_1155_TokenWallet.bytecode;\n    abi = custodial_1.Custodial_1155_TokenWallet.abi;\n  } else {\n    throw new Error('Unsupported combination of inputs.');\n  }\n\n  return {\n    abi,\n    code\n  };\n};\n\nexports.obtainCustodialAddressType = obtainCustodialAddressType;\n\nconst getCustodialFactoryContractAddress = (chain, testnet) => {\n  switch (chain) {\n    case model_1.Currency.CELO:\n      return testnet ? '0x481D6f967B120E094D3551DA2C4951242Be582af' : '0xC7f23843d5A51221df4B6D0778910b39b40134b4';\n\n    case model_1.Currency.TRON:\n      return testnet ? 'TRM8P5gpzAr85p2a5BMvqb9UfEdFEwEgA7' : 'TG59uLNQvCR45F6yKHPXipvCu7wg5D88Wr';\n\n    case model_1.Currency.ONE:\n      return testnet ? '0xb1462fE8E9Cf82c0296022Cca7bEfA3Fd4c12B34' : '0x86e27174edd52469f928f6206f3d8e4316525f00';\n\n    case model_1.Currency.XDC:\n      return testnet ? 'xdc6709Bdda623aF7EB152cB2fE2562aB7e031e564f' : 'xdc3485fdba44736859267789ac9c248cc4c1443956';\n\n    case model_1.Currency.ETH:\n      return testnet ? process.env.TESTNET_TYPE === 'ethereum-rinkeby' ? '0x4eC40a4A0dA042d46cC4529f918080957003b531' : '0x3485fdba44736859267789ac9c248cc4c1443956' : '0xd8050943c1E2764F750EC868ae1B375C4768d89A';\n\n    case model_1.Currency.MATIC:\n      return testnet ? '0x6792a82ffab4890cfbcee6c2c775ae9c898afe71' : '0xfc05d7fed6af03df8095cc93b674acac3f72756c';\n\n    case model_1.Currency.KLAY:\n      return testnet ? '0xd68c48173ccb0313442b23aed68b71961c618ade' : '0xb1462fE8E9Cf82c0296022Cca7bEfA3Fd4c12B34';\n\n    case model_1.Currency.BSC:\n      return testnet ? '0xeac818b4CC468Cf6556f772C4BB86e132E6ac0F3' : '0x9067f90c0975679158331fe43ad7a0a105424e0d';\n\n    default:\n      throw new Error('Unsupported chain.');\n  }\n};\n\nconst getCustodialAddresses = (chain, txId) => tatum_1.get(`/v3/blockchain/sc/custodial/${chain}/${txId}`);\n\nexports.getCustodialAddresses = getCustodialAddresses;\n/**\n * This method is @Deprecated. Use @link{generateCustodialWalletBatch} instead\n * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal\n * of assets is covered by the deployer.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst generateCustodialWallet = async (testnet, body, provider) => {\n  console.log('This method is deprecated. For better gas consumption, use generateCustodialWalletBatch.');\n\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return await transaction_1.sendCeloGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return await transaction_1.sendOneGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return await transaction_1.sendEthGenerateCustodialWalletSignedTransaction(body, provider);\n\n    case model_1.Currency.BSC:\n      return await transaction_1.sendBscGenerateCustodialWalletSignedTransaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return await transaction_1.sendPolygonGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.TRON:\n      return await transaction_1.sendTronGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n\n    default:\n      throw new Error('Unsupported chain');\n  }\n};\n\nexports.generateCustodialWallet = generateCustodialWallet;\n/**\n * This method is @Deprecated. Use @link{prepareCustodialWalletBatch} instead\n * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal\n * of assets is covered by the deployer.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareCustodialWallet = async (testnet, body, provider) => {\n  console.log('This method is deprecated. For better gas consumption, use prepareCustodialWalletBatch.');\n\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return await transaction_1.prepareCeloGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return await transaction_1.prepareOneGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return await transaction_1.prepareEthGenerateCustodialWalletSignedTransaction(body, provider);\n\n    case model_1.Currency.BSC:\n      return await transaction_1.prepareBscGenerateCustodialWalletSignedTransaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return await transaction_1.preparePolygonGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.TRON:\n      return await transaction_1.prepareTronGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n\n    default:\n      throw new Error('Unsupported chain');\n  }\n};\n\nexports.prepareCustodialWallet = prepareCustodialWallet;\n/**\n * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal\n * of assets is covered by the deployer.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst generateCustodialWalletBatch = async (testnet, body, provider) => {\n  const txData = await exports.prepareCustodialWalletBatch(testnet, body, provider);\n\n  if (body.feesCovered) {\n    return await generateBatch(body);\n  }\n\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return await blockchain_1.celoBroadcast(txData, body.signatureId);\n\n    case model_1.Currency.TRON:\n      return await blockchain_1.tronBroadcast(txData, body.signatureId);\n\n    case model_1.Currency.ETH:\n      return await blockchain_1.ethBroadcast(txData, body.signatureId);\n\n    case model_1.Currency.MATIC:\n      return await blockchain_1.polygonBroadcast(txData, body.signatureId);\n\n    case model_1.Currency.ONE:\n      return await blockchain_1.oneBroadcast(txData, body.signatureId);\n\n    case model_1.Currency.XDC:\n      return await blockchain_1.xdcBroadcast(txData, body.signatureId);\n\n    case model_1.Currency.KLAY:\n      return await blockchain_1.klaytnBroadcast(txData, body.signatureId);\n\n    case model_1.Currency.BSC:\n      return await blockchain_1.bscBroadcast(txData, body.signatureId);\n\n    default:\n      throw new Error('Unsupported chain');\n  }\n};\n\nexports.generateCustodialWalletBatch = generateCustodialWalletBatch;\n/**\n * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal\n * of assets is covered by the deployer.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareCustodialWalletBatch = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.GenerateCustodialAddressBatch);\n  const params = body.chain === model_1.Currency.TRON ? [{\n    type: 'address',\n    value: transaction_1.convertAddressToHex(body.owner.trim())\n  }, {\n    type: 'uint256',\n    value: `0x${new bignumber_js_1.default(body.batchCount).toString(16)}`\n  }] : [body.chain === model_1.Currency.XDC ? transaction_1.fromXdcAddress(body.owner) : body.owner.trim(), `0x${new bignumber_js_1.default(body.batchCount).toString(16)}`];\n  const methodName = body.chain === model_1.Currency.TRON ? 'cloneNewWallet(address,uint256)' : 'cloneNewWallet';\n  return await helpers_1.helperPrepareSCCall(testnet, Object.assign(Object.assign({}, body), {\n    contractAddress: getCustodialFactoryContractAddress(body.chain, testnet)\n  }), model_1.GenerateCustodialAddressBatch, methodName, params, body.chain === model_1.Currency.TRON ? methodName : undefined, provider, [constants_1.CUSTODIAL_PROXY_ABI]);\n};\n\nexports.prepareCustodialWalletBatch = prepareCustodialWalletBatch;\n/**\n * @Deprecated, use generateCustodialWalletBatch\n * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal\n * of assets is covered by the deployer.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendCustodialWallet = async (testnet, body, provider) => {\n  let txData;\n\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      txData = await transaction_1.prepareCeloGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n      break;\n\n    case model_1.Currency.ONE:\n      txData = await transaction_1.prepareOneGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n      break;\n\n    case model_1.Currency.ETH:\n      txData = await transaction_1.prepareEthGenerateCustodialWalletSignedTransaction(body, provider);\n      break;\n\n    case model_1.Currency.BSC:\n      txData = await transaction_1.prepareBscGenerateCustodialWalletSignedTransaction(body, provider);\n      break;\n\n    case model_1.Currency.MATIC:\n      txData = await transaction_1.preparePolygonGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n      break;\n\n    case model_1.Currency.KLAY:\n      txData = await transaction_1.prepareKlaytnGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n      break;\n\n    case model_1.Currency.TRON:\n      txData = await transaction_1.prepareTronGenerateCustodialWalletSignedTransaction(testnet, body, provider);\n      break;\n\n    default:\n      throw new Error('Unsupported chain');\n  }\n\n  return helpers_1.helperBroadcastTx(body.chain, txData, body.signatureId);\n};\n\nexports.sendCustodialWallet = sendCustodialWallet;\n/**\n * Prepare signed transaction from the custodial SC wallet.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareTransferFromCustodialWallet = async (testnet, body, provider) => {\n  let r;\n  let decimals;\n\n  if (body.chain === model_1.Currency.TRON) {\n    decimals = 6;\n    await tatum_1.validateBody(body, model_1.TransferFromTronCustodialAddress);\n  } else {\n    decimals = 18;\n    await tatum_1.validateBody(body, model_1.TransferFromCustodialAddress);\n  }\n\n  if (body.chain === model_1.Currency.CELO) {\n    r = new model_1.CeloSmartContractMethodInvocation();\n  } else {\n    r = new model_1.SmartContractMethodInvocation();\n  }\n\n  r.fee = body.fee;\n  r.nonce = body.nonce;\n  r.fromPrivateKey = body.fromPrivateKey;\n  r.signatureId = body.signatureId;\n  r.index = body.index;\n  r.contractAddress = body.custodialAddress;\n  r.methodName = 'transfer';\n  let amount = new bignumber_js_1.default(body.amount || 0);\n  let tokenId = new bignumber_js_1.default(body.tokenId || 0);\n\n  if (body.contractType === model_1.ContractType.NATIVE_ASSET) {\n    amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(decimals));\n  } else if (body.contractType === model_1.ContractType.FUNGIBLE_TOKEN) {\n    tokenId = new bignumber_js_1.default(0);\n\n    switch (body.chain) {\n      case model_1.Currency.CELO:\n        amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getCeloErc20ContractDecimals(testnet, body.tokenAddress, provider)));\n        break;\n\n      case model_1.Currency.ONE:\n        amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getOne20ContractDecimals(testnet, body.tokenAddress, provider)));\n        break;\n\n      case model_1.Currency.XDC:\n        amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await fungible_1.getErc20Decimals(testnet, model_1.Currency.XDC, body.tokenAddress, provider)));\n        break;\n\n      case model_1.Currency.ETH:\n        amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getEthErc20ContractDecimals(testnet, body.tokenAddress, provider)));\n        break;\n\n      case model_1.Currency.BSC:\n        amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getBscBep20ContractDecimals(testnet, body.tokenAddress, provider)));\n        break;\n\n      case model_1.Currency.MATIC:\n        amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getPolygonErc20ContractDecimals(testnet, body.tokenAddress, provider)));\n        break;\n\n      case model_1.Currency.KLAY:\n        amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getKlayErc20ContractDecimals(testnet, body.tokenAddress, provider)));\n        break;\n\n      case model_1.Currency.TRON:\n        amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getTronTrc20ContractDecimals(testnet, body.tokenAddress, provider)));\n        break;\n\n      default:\n        throw new Error('Unsupported combination of inputs.');\n    }\n  }\n\n  r.params = [body.tokenAddress || '0x000000000000000000000000000000000000dEaD', body.contractType, body.recipient, `0x${amount.toString(16)}`, `0x${new bignumber_js_1.default(tokenId).toString(16)}`];\n  r.methodABI = custodial_1.CustodialFullTokenWallet.abi.find(a => a.name === 'transfer');\n\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return await transaction_1.prepareCeloSmartContractWriteMethodInvocation(testnet, Object.assign(Object.assign({}, r), {\n        feeCurrency: body.feeCurrency || model_1.Currency.CELO\n      }), provider);\n\n    case model_1.Currency.ONE:\n      return await transaction_1.prepareOneSmartContractWriteMethodInvocation(testnet, r, provider);\n\n    case model_1.Currency.XDC:\n      return await transaction_1.prepareXdcSmartContractWriteMethodInvocation(r, provider);\n\n    case model_1.Currency.ETH:\n      return await transaction_1.prepareSmartContractWriteMethodInvocation(r, provider);\n\n    case model_1.Currency.BSC:\n      return await transaction_1.prepareBscSmartContractWriteMethodInvocation(r, provider);\n\n    case model_1.Currency.MATIC:\n      return await transaction_1.preparePolygonSmartContractWriteMethodInvocation(testnet, r, provider);\n\n    case model_1.Currency.KLAY:\n      return await transaction_1.prepareKlaytnSmartContractWriteMethodInvocation(testnet, r, provider);\n\n    case model_1.Currency.TRON:\n      {\n        const {\n          feeLimit,\n          from\n        } = body;\n        r.methodName = 'transfer(address,uint256,address,uint256,uint256)';\n        r.params = [{\n          type: 'address',\n          value: transaction_1.convertAddressToHex(r.params[0])\n        }, {\n          type: 'uint256',\n          value: r.params[1]\n        }, {\n          type: 'address',\n          value: transaction_1.convertAddressToHex(r.params[2])\n        }, {\n          type: 'uint256',\n          value: r.params[3]\n        }, {\n          type: 'uint256',\n          value: r.params[4]\n        }];\n        return await transaction_1.prepareTronSmartContractInvocation(testnet, r, feeLimit, from, provider);\n      }\n\n    default:\n      throw new Error('Unsupported combination of inputs.');\n  }\n};\n\nexports.prepareTransferFromCustodialWallet = prepareTransferFromCustodialWallet;\n/**\n * Send signed transaction from the custodial SC wallet.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendTransferFromCustodialWallet = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareTransferFromCustodialWallet(testnet, body, provider), body.signatureId);\n\nexports.sendTransferFromCustodialWallet = sendTransferFromCustodialWallet;\n/**\n * Prepare signed batch transaction from the custodial SC wallet.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareBatchTransferFromCustodialWallet = async (testnet, body, provider) => {\n  let r;\n  let decimals;\n\n  if (body.chain === model_1.Currency.TRON) {\n    await tatum_1.validateBody(body, model_1.TransferFromTronCustodialAddressBatch);\n    decimals = 6;\n  } else {\n    await tatum_1.validateBody(body, model_1.TransferFromCustodialAddressBatch);\n    decimals = 18;\n  }\n\n  if (body.chain === model_1.Currency.CELO) {\n    r = new model_1.CeloSmartContractMethodInvocation();\n  } else {\n    r = new model_1.SmartContractMethodInvocation();\n  }\n\n  r.fee = body.fee;\n  r.nonce = body.nonce;\n  r.fromPrivateKey = body.fromPrivateKey;\n  r.signatureId = body.signatureId;\n  r.index = body.index;\n  r.contractAddress = body.custodialAddress;\n  r.methodName = 'transferBatch';\n  const amounts = [];\n  const tokenIds = [];\n\n  for (let i = 0; i < body.contractType.length; i++) {\n    let amount = new bignumber_js_1.default(body.amount ? body.amount[i] : 0);\n    let tokenId = new bignumber_js_1.default(body.tokenId ? body.tokenId[i] : 0);\n\n    if (body.contractType[i] === model_1.ContractType.NATIVE_ASSET) {\n      amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(decimals));\n    } else if (body.contractType[i] === model_1.ContractType.NON_FUNGIBLE_TOKEN) {\n      amount = new bignumber_js_1.default(0);\n    } else if (body.contractType[i] === model_1.ContractType.FUNGIBLE_TOKEN && body.tokenAddress) {\n      tokenId = new bignumber_js_1.default(0);\n\n      switch (body.chain) {\n        case model_1.Currency.CELO:\n          amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getCeloErc20ContractDecimals(testnet, body.tokenAddress[i], provider)));\n          break;\n\n        case model_1.Currency.ONE:\n          amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getOne20ContractDecimals(testnet, body.tokenAddress[i], provider)));\n          break;\n\n        case model_1.Currency.XDC:\n          amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await fungible_1.getErc20Decimals(testnet, model_1.Currency.XDC, body.tokenAddress[i], provider)));\n          break;\n\n        case model_1.Currency.ETH:\n          amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getEthErc20ContractDecimals(testnet, body.tokenAddress[i], provider)));\n          break;\n\n        case model_1.Currency.BSC:\n          amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getBscBep20ContractDecimals(testnet, body.tokenAddress[i], provider)));\n          break;\n\n        case model_1.Currency.MATIC:\n          amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getPolygonErc20ContractDecimals(testnet, body.tokenAddress[i], provider)));\n          break;\n\n        case model_1.Currency.KLAY:\n          amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getKlayErc20ContractDecimals(testnet, body.tokenAddress[i], provider)));\n          break;\n\n        case model_1.Currency.TRON:\n          amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getTronTrc20ContractDecimals(testnet, body.tokenAddress[i], provider)));\n          break;\n\n        default:\n          throw new Error('Unsupported combination of inputs.');\n      }\n    }\n\n    amounts.push(`0x${amount.toString(16)}`);\n    tokenIds.push(`0x${tokenId.toString(16)}`);\n  }\n\n  r.params = [(body.tokenAddress || []).map(t => t === '0' ? '0x000000000000000000000000000000000000dEaD' : t), body.contractType, body.recipient, amounts, tokenIds];\n  r.methodABI = custodial_1.CustodialFullTokenWalletWithBatch.abi.find(a => a.name === 'transferBatch');\n\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return await transaction_1.prepareCeloSmartContractWriteMethodInvocation(testnet, Object.assign(Object.assign({}, r), {\n        feeCurrency: body.feeCurrency || model_1.Currency.CELO\n      }), provider);\n\n    case model_1.Currency.ONE:\n      return await transaction_1.prepareOneSmartContractWriteMethodInvocation(testnet, r, provider);\n\n    case model_1.Currency.XDC:\n      return await transaction_1.prepareXdcSmartContractWriteMethodInvocation(r, provider);\n\n    case model_1.Currency.ETH:\n      return await transaction_1.prepareSmartContractWriteMethodInvocation(r, provider);\n\n    case model_1.Currency.BSC:\n      return await transaction_1.prepareBscSmartContractWriteMethodInvocation(r, provider);\n\n    case model_1.Currency.MATIC:\n      return await transaction_1.preparePolygonSmartContractWriteMethodInvocation(testnet, r, provider);\n\n    case model_1.Currency.KLAY:\n      return await transaction_1.prepareKlaytnSmartContractWriteMethodInvocation(testnet, r, provider);\n\n    case model_1.Currency.TRON:\n      {\n        const body1 = body;\n        return await transaction_1.prepareTronCustodialTransferBatch(testnet, r, body1.feeLimit, body1.from, provider);\n      }\n\n    default:\n      throw new Error('Unsupported combination of inputs.');\n  }\n};\n\nexports.prepareBatchTransferFromCustodialWallet = prepareBatchTransferFromCustodialWallet;\n/**\n * Send signed batch transaction from the custodial SC wallet.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendBatchTransferFromCustodialWallet = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareBatchTransferFromCustodialWallet(testnet, body, provider), body.signatureId);\n\nexports.sendBatchTransferFromCustodialWallet = sendBatchTransferFromCustodialWallet;\n/**\n * Prepare signed approve transaction from the custodial SC wallet.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareApproveFromCustodialWallet = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.ApproveCustodialTransfer);\n  const decimals = body.contractType === model_1.ContractType.FUNGIBLE_TOKEN ? await fungible_1.getErc20Decimals(testnet, body.chain, body.tokenAddress, provider) : 0;\n  const params = [body.tokenAddress.trim(), body.contractType, body.spender, `0x${new bignumber_js_1.default(body.amount || 0).multipliedBy(new bignumber_js_1.default(10).pow(decimals)).toString(16)}`, `0x${new bignumber_js_1.default(body.tokenId || 0).toString(16)}`];\n  delete body.amount;\n  return await helpers_1.helperPrepareSCCall(testnet, Object.assign(Object.assign({}, body), {\n    contractAddress: body.custodialAddress\n  }), model_1.ApproveCustodialTransfer, 'approve', params, undefined, provider, custodial_1.CustodialFullTokenWallet.abi);\n};\n\nexports.prepareApproveFromCustodialWallet = prepareApproveFromCustodialWallet;\n/**\n * Send signed approve transaction from the custodial SC wallet.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendApproveFromCustodialWallet = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareApproveFromCustodialWallet(testnet, body, provider), body.signatureId);\n\nexports.sendApproveFromCustodialWallet = sendApproveFromCustodialWallet;","map":{"version":3,"mappings":"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","names":["generateBatch","body","tatum_1","obtainCustodialAddressType","chain","model_1","TRON","enableSemiFungibleTokens","Error","abi","code","enableFungibleTokens","enableNonFungibleTokens","enableBatchTransactions","custodial_1","bytecode","exports","getCustodialFactoryContractAddress","testnet","CELO","ONE","XDC","ETH","process","env","TESTNET_TYPE","MATIC","KLAY","BSC","getCustodialAddresses","txId","generateCustodialWallet","provider","console","log","transaction_1","prepareCustodialWallet","generateCustodialWalletBatch","txData","feesCovered","blockchain_1","signatureId","prepareCustodialWalletBatch","params","type","value","owner","trim","bignumber_js_1","batchCount","toString","methodName","helpers_1","Object","contractAddress","undefined","constants_1","sendCustodialWallet","prepareTransferFromCustodialWallet","r","decimals","fee","nonce","fromPrivateKey","index","custodialAddress","amount","tokenId","contractType","NATIVE_ASSET","multipliedBy","pow","FUNGIBLE_TOKEN","tokenAddress","fungible_1","recipient","methodABI","find","a","name","feeCurrency","feeLimit","from","sendTransferFromCustodialWallet","prepareBatchTransferFromCustodialWallet","amounts","tokenIds","i","length","NON_FUNGIBLE_TOKEN","push","map","t","body1","sendBatchTransferFromCustodialWallet","prepareApproveFromCustodialWallet","spender","sendApproveFromCustodialWallet"],"sourceRoot":"","sources":["../../../src/wallet/custodial.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}