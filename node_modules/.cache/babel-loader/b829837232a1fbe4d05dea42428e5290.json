{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendCeloTransferMultiTokenTransaction = exports.sendCeloMintMultiTokenBatchTransaction = exports.sendCeloMintMultiTokenTransaction = exports.sendCeloDeployMultiTokenTransaction = exports.sendCeloDeployErc721Transaction = exports.sendCeloTransferErc721Transaction = exports.sendCeloUpdateCashbackForAuthorErc721Transaction = exports.sendCeloBurnErc721Transaction = exports.sendCeloMintMultipleCashbackErc721Transaction = exports.sendCeloMintMultipleErc721Transaction = exports.sendCeloMintMultipleErc721ProvenanceTransaction = exports.sendCeloMintErc721ProvenanceTransaction = exports.sendCeloMintCashbackErc721Transaction = exports.sendCeloMintErc721Transaction = exports.sendCeloErc20Transaction = exports.sendCeloOrcUsdTransaction = exports.prepareCeloStoreDataSignedTransaction = exports.prepareCeloOrCUsdSignedTransaction = exports.prepareCeloBurnMultiTokenSignedTransaction = exports.prepareCeloBurnMultiTokenBatchSignedTransaction = exports.prepareCeloBatchTransferMultiTokenSignedTransaction = exports.prepareCeloTransferMultiTokenSignedTransaction = exports.prepareCeloMintMultiTokenBatchSignedTransaction = exports.prepareCeloMintMultiTokenSignedTransaction = exports.prepareCeloUpdateCashbackForAuthorErc721SignedTransaction = exports.prepareCeloMintMultipleErc721SignedTransaction = exports.prepareCeloMintMultipleCashbackErc721SignedTransaction = exports.prepareCeloBurnErc20SignedTransaction = exports.prepareCeloTransferErc20SignedTransaction = exports.getCeloErc20ContractDecimals = exports.sendCeloSmartContractMethodInvocationTransaction = exports.sendCeloStoreDataSignedTransaction = exports.sendCeloDeployErc20Transaction = exports.sendCeloSmartContractReadMethodInvocationTransaction = exports.prepareCeloSmartContractWriteMethodInvocation = exports.getCeloClient = exports.prepareCeloMintErc20SignedTransaction = exports.prepareCeloDeployErc20SignedTransaction = exports.prepareCeloBurnErc721SignedTransaction = exports.prepareCeloTransferErc721SignedTransaction = exports.prepareCeloMintErc721SignedTransaction = exports.prepareCeloMintMultipleErc721ProvenanceSignedTransaction = exports.prepareCeloMintErc721ProvenanceSignedTransaction = exports.prepareCeloMintCashbackErc721SignedTransaction = exports.prepareCeloDeployErc721SignedTransaction = exports.prepareCeloDeployMultiTokenSignedTransaction = exports.signCeloKMSTransaction = exports.prepareCeloDeployAuctionSignedTransaction = exports.prepareCeloDeployMarketplaceListingSignedTransaction = exports.prepareCeloGenerateCustodialWalletSignedTransaction = void 0;\nexports.sendCeloDeployMarketplaceListingSignedTransaction = exports.sendCeloGenerateCustodialWalletSignedTransaction = exports.sendCeloBurnMultiTokenBatchTransaction = exports.sendCeloBurnMultiTokenTransaction = exports.sendCeloTransferMultiTokenBatchTransaction = void 0;\n\nconst celo_ethers_wrapper_1 = require(\"@celo-tools/celo-ethers-wrapper\");\n\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst web3_1 = __importDefault(require(\"web3\"));\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst erc1155_abi_1 = __importDefault(require(\"../contracts/erc1155/erc1155_abi\"));\n\nconst erc1155_bytecode_1 = __importDefault(require(\"../contracts/erc1155/erc1155_bytecode\"));\n\nconst token_abi_1 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst token_bytecode_1 = __importDefault(require(\"../contracts/erc20/token_bytecode\"));\n\nconst erc721_abi_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_abi\"));\n\nconst erc721_bytecode_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_bytecode\"));\n\nconst erc721Provenance_abi_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_abi\"));\n\nconst erc721Provenance_bytecode_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_bytecode\"));\n\nconst marketplace_1 = require(\"../contracts/marketplace\");\n\nconst model_1 = require(\"../model\");\n\nconst nft_1 = require(\"../nft\");\n\nconst custodial_1 = require(\"../wallet/custodial\");\n\nconst erc721_abi_2 = __importDefault(require(\"../contracts/erc721General/erc721_abi\"));\n\nconst erc721_bytecode_2 = __importDefault(require(\"../contracts/erc721General/erc721_bytecode\"));\n\nconst obtainWalletInformation = async (wallet, feeCurrencyContractAddress) => {\n  const [txCount, gasPrice, from] = await Promise.all([wallet.getTransactionCount(), wallet.getGasPrice(feeCurrencyContractAddress), wallet.getAddress()]);\n  return {\n    txCount,\n    gasPrice: [constants_1.CUSD_ADDRESS_MAINNET, constants_1.CUSD_ADDRESS_TESTNET].includes(feeCurrencyContractAddress || '') && gasPrice.lte(0x1dcd6500) ? bignumber_1.BigNumber.from(0x3B9ACA00) : gasPrice,\n    from\n  };\n};\n\nconst getFeeCurrency = (feeCurrency, testnet) => {\n  switch (feeCurrency) {\n    case model_1.Currency.CEUR:\n      return testnet ? constants_1.CEUR_ADDRESS_TESTNET : constants_1.CEUR_ADDRESS_MAINNET;\n\n    case model_1.Currency.CUSD:\n      return testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET;\n\n    default:\n      return undefined;\n  }\n};\n/**\n * Sign CELO generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\n\nconst prepareCeloGenerateCustodialWalletSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.GenerateCustodialAddress);\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrency = body.feeCurrency || model_1.Currency.CELO;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet);\n  const {\n    abi,\n    code\n  } = custodial_1.obtainCustodialAddressType(body); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(abi);\n  const deploy = contract.deploy({\n    data: code\n  });\n\n  if (body.signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce: body.nonce,\n      gasLimit: '0',\n      data: deploy.encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(body.fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: body.nonce || txCount,\n    gasLimit: '0',\n    gasPrice,\n    data: deploy.encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloGenerateCustodialWalletSignedTransaction = prepareCeloGenerateCustodialWalletSignedTransaction;\n\nconst deployContract = async function (testnet, abi, bytecode, args) {\n  let feeCurrency = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : model_1.Currency.CELO;\n  let fromPrivateKey = arguments.length > 5 ? arguments[5] : undefined;\n  let nonce = arguments.length > 6 ? arguments[6] : undefined;\n  let signatureId = arguments.length > 7 ? arguments[7] : undefined;\n  let provider = arguments.length > 8 ? arguments[8] : undefined;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(abi);\n  const deploy = contract.deploy({\n    data: bytecode,\n    arguments: args\n  });\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      data: deploy.encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    gasPrice,\n    data: deploy.encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n/**\n * Sign CELO generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\n\nconst prepareCeloDeployMarketplaceListingSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployMarketplaceListing);\n  return deployContract(testnet, marketplace_1.listing.abi, marketplace_1.listing.data, [body.marketplaceFee, body.feeRecipient], body.feeCurrency, body.fromPrivateKey, body.nonce, body.signatureId, provider);\n};\n\nexports.prepareCeloDeployMarketplaceListingSignedTransaction = prepareCeloDeployMarketplaceListingSignedTransaction;\n/**\n * Sign CELO deploy NFT Auction contract transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst prepareCeloDeployAuctionSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployNftAuction);\n  return deployContract(testnet, marketplace_1.auction.abi, marketplace_1.auction.data, [body.auctionFee, body.feeRecipient], body.feeCurrency, body.fromPrivateKey, body.nonce, body.signatureId, provider);\n};\n\nexports.prepareCeloDeployAuctionSignedTransaction = prepareCeloDeployAuctionSignedTransaction;\n/**\n * Sign Celo pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param testnet mainnet or testnet version\n * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst signCeloKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {\n  if (tx.chain !== model_1.Currency.CELO) {\n    throw Error('Unsupported chain.');\n  }\n\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  await p.ready;\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const transaction = JSON.parse(tx.serializedTransaction);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, transaction.feeCurrency);\n  transaction.nonce = transaction.nonce || txCount;\n  transaction.gasPrice = transaction.gasPrice || gasPrice;\n  transaction.from = from;\n  transaction.gasLimit = transaction.gasLimit === '0' || !transaction.gasLimit ? (await wallet.estimateGas(transaction)).add(100000).toHexString() : transaction.gasLimit;\n  return wallet.signTransaction(transaction);\n};\n\nexports.signCeloKMSTransaction = signCeloKMSTransaction;\n/**\n * Prepare a signed Celo deploy multi token transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloDeployMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloDeployMultiToken);\n  const {\n    fromPrivateKey,\n    uri,\n    feeCurrency,\n    nonce,\n    signatureId,\n    publicMint\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc1155_abi_1.default);\n  const deploy = contract.deploy({\n    data: erc1155_bytecode_1.default,\n    arguments: [uri, publicMint ? publicMint : false]\n  });\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      data: deploy.encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    gasPrice,\n    data: deploy.encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloDeployMultiTokenSignedTransaction = prepareCeloDeployMultiTokenSignedTransaction;\n/**\n * Prepare a signed Celo deploy erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloDeployErc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloDeployErc721);\n  const {\n    fromPrivateKey,\n    name,\n    symbol,\n    feeCurrency,\n    nonce,\n    signatureId,\n    provenance,\n    cashback,\n    publicMint\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet);\n\n  if (provenance && cashback) {\n    throw new Error('Only one of provenance or cashback must be present and true.');\n  }\n\n  let abi = erc721_abi_2.default;\n  let data = erc721_bytecode_2.default;\n\n  if (provenance) {\n    abi = erc721Provenance_abi_1.default;\n    data = erc721Provenance_bytecode_1.default;\n  } else if (cashback) {\n    abi = erc721_abi_1.default;\n    data = erc721_bytecode_1.default;\n  } // @ts-ignore\n\n\n  const contract = new new web3_1.default().eth.Contract(abi);\n  const deploy = contract.deploy({\n    data,\n    arguments: [name, symbol, publicMint ? publicMint : false]\n  });\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      data: deploy.encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    gasPrice,\n    data: deploy.encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloDeployErc721SignedTransaction = prepareCeloDeployErc721SignedTransaction;\n/**\n * Prepare a signed Celo mint cashback erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloMintCashbackErc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloMintErc721);\n  const {\n    fromPrivateKey,\n    url,\n    to,\n    tokenId,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    erc20\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n\n  if (contractAddress && feeCurrency) {\n    const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n    const contract = new new web3_1.default().eth.Contract(erc721_abi_1.default, contractAddress.trim());\n    const cb = [];\n\n    for (const c of cashbackValues) {\n      cb.push(`0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(c, 'ether')).toString(16)}`);\n    }\n\n    if (signatureId) {\n      return JSON.stringify({\n        chainId: network.chainId,\n        feeCurrency: feeCurrencyContractAddress,\n        nonce,\n        to: contractAddress.trim(),\n        gasLimit: '0',\n        data: erc20 ? contract.methods.mintWithCashback(to.trim(), tokenId, url, authorAddresses, cb, erc20).encodeABI() : contract.methods.mintWithCashback(to.trim(), tokenId, url, authorAddresses, cb).encodeABI()\n      });\n    }\n\n    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n    const {\n      txCount,\n      gasPrice,\n      from\n    } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n    const transaction = {\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce: nonce || txCount,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      gasPrice,\n      data: erc20 ? contract.methods.mintWithCashback(to.trim(), tokenId, url, authorAddresses, cb, erc20).encodeABI() : contract.methods.mintWithCashback(to.trim(), tokenId, url, authorAddresses, cb).encodeABI(),\n      from\n    };\n    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n    return wallet.signTransaction(transaction);\n  }\n\n  throw new Error('Contract address and fee currency should not be empty!');\n};\n\nexports.prepareCeloMintCashbackErc721SignedTransaction = prepareCeloMintCashbackErc721SignedTransaction;\n/**\n * Prepare a signed Celo mint provenance erc732 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloMintErc721ProvenanceSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloMintErc721);\n  const {\n    fromPrivateKey,\n    url,\n    to,\n    tokenId,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId,\n    cashbackValues,\n    authorAddresses,\n    fixedValues,\n    erc20\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n\n  if (contractAddress && feeCurrency) {\n    const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n    const contract = new new web3_1.default().eth.Contract(erc721Provenance_abi_1.default, contractAddress.trim());\n    const cb = [];\n    const fv = [];\n\n    if (cashbackValues && fixedValues && authorAddresses) {\n      cashbackValues.map(c => cb.push(`0x${new bignumber_js_1.BigNumber(c).multipliedBy(100).toString(16)}`));\n      fixedValues.map(c => fv.push(`0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(c, 'ether')).toString(16)}`));\n    }\n\n    const data = erc20 ? contract.methods.mintWithTokenURI(to.trim(), tokenId, url, authorAddresses ? authorAddresses : [], cb, fv, erc20).encodeABI() : contract.methods.mintWithTokenURI(to.trim(), tokenId, url, authorAddresses ? authorAddresses : [], cb, fv).encodeABI();\n\n    if (signatureId) {\n      return JSON.stringify({\n        chainId: network.chainId,\n        feeCurrency: feeCurrencyContractAddress,\n        nonce,\n        to: contractAddress.trim(),\n        gasLimit: '0',\n        data: data\n      });\n    }\n\n    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n    const {\n      txCount,\n      gasPrice,\n      from\n    } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n    const transaction = {\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce: nonce || txCount,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      gasPrice,\n      data: data,\n      from\n    };\n    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n    return wallet.signTransaction(transaction);\n  }\n\n  throw new Error('Contract address and fee currency should not be empty!');\n};\n\nexports.prepareCeloMintErc721ProvenanceSignedTransaction = prepareCeloMintErc721ProvenanceSignedTransaction;\n/**\n * Prepare a signed Celo mint multiple provenance cashback erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloMintMultipleErc721ProvenanceSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    feeCurrency,\n    nonce,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    fixedValues,\n    erc20\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc721Provenance_abi_1.default, contractAddress.trim());\n  const cb = [];\n  const fv = [];\n\n  if (authorAddresses && cashbackValues && fixedValues) {\n    for (let i = 0; i < cashbackValues.length; i++) {\n      const cb2 = [];\n      const fv2 = [];\n\n      for (let j = 0; j < cashbackValues[i].length; j++) {\n        cb2.push(`0x${new bignumber_js_1.BigNumber(cashbackValues[i][j]).multipliedBy(100).toString(16)}`);\n        fv2.push(`0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(fixedValues[i][j], 'ether')).toString(16)}`);\n      }\n\n      cb.push(cb2);\n      fv.push(fv2);\n    }\n  }\n\n  const data = erc20 ? contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url, authorAddresses ? authorAddresses : [], cb, fv, erc20).encodeABI() : contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url, authorAddresses ? authorAddresses : [], cb, fv).encodeABI();\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      data: data\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: data,\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloMintMultipleErc721ProvenanceSignedTransaction = prepareCeloMintMultipleErc721ProvenanceSignedTransaction;\n/**\n * Prepare a signed Celo mint erc732 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloMintErc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloMintErc721);\n  const {\n    fromPrivateKey,\n    url,\n    to,\n    tokenId,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n\n  if (contractAddress && feeCurrency) {\n    const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n    const contract = new new web3_1.default().eth.Contract(erc721_abi_1.default, contractAddress.trim());\n\n    if (signatureId) {\n      return JSON.stringify({\n        chainId: network.chainId,\n        feeCurrency: feeCurrencyContractAddress,\n        nonce,\n        to: contractAddress.trim(),\n        gasLimit: '0',\n        data: contract.methods.mintWithTokenURI(to.trim(), tokenId, url).encodeABI()\n      });\n    }\n\n    const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n    const {\n      txCount,\n      gasPrice,\n      from\n    } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n    const transaction = {\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce: nonce || txCount,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      gasPrice,\n      data: contract.methods.mintWithTokenURI(to.trim(), tokenId, url).encodeABI(),\n      from\n    };\n    transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n    return wallet.signTransaction(transaction);\n  }\n\n  throw new Error('Contract address and fee currency should not be empty!');\n};\n\nexports.prepareCeloMintErc721SignedTransaction = prepareCeloMintErc721SignedTransaction;\n/**\n * Prepare a signed Celo transfer erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloTransferErc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloTransferErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId,\n    value,\n    provenance,\n    provenanceData,\n    tokenPrice\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(provenance ? erc721Provenance_abi_1.default : erc721_abi_1.default, contractAddress.trim());\n  const dataBytes = provenance ? Buffer.from(provenanceData + '\\'\\'\\'###\\'\\'\\'' + web3_utils_1.toWei(tokenPrice, 'ether'), 'utf8') : '';\n  const tokenData = provenance ? contract.methods.safeTransfer(to.trim(), tokenId, `0x${dataBytes.toString('hex')}`).encodeABI() : contract.methods.safeTransfer(to.trim(), tokenId).encodeABI();\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      gasLimit: '0',\n      nonce,\n      to: contractAddress.trim(),\n      data: tokenData,\n      value: value ? `0x${new bignumber_js_1.BigNumber(value).multipliedBy(1e18).toString(16)}` : undefined\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: tokenData,\n    from,\n    value: value ? `0x${new bignumber_js_1.BigNumber(value).multipliedBy(1e18).toString(16)}` : undefined\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloTransferErc721SignedTransaction = prepareCeloTransferErc721SignedTransaction;\n/**\n * Prepare a signed Celo burn erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloBurnErc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloBurnErc721);\n  const {\n    fromPrivateKey,\n    tokenId,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc721_abi_1.default, contractAddress.trim());\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      data: contract.methods.burn(tokenId).encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.burn(tokenId).encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloBurnErc721SignedTransaction = prepareCeloBurnErc721SignedTransaction;\n/**\n * Prepare a signed Celo deploy erc20 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloDeployErc20SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployCeloErc20);\n  const {\n    fromPrivateKey,\n    name,\n    symbol,\n    supply,\n    address,\n    digits,\n    feeCurrency,\n    nonce,\n    signatureId,\n    totalCap\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(token_abi_1.default);\n  const deploy = contract.deploy({\n    data: token_bytecode_1.default,\n    arguments: [name, symbol, address, digits, `0x${new bignumber_js_1.BigNumber(totalCap || supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(digits)).toString(16)}`, `0x${new bignumber_js_1.BigNumber(supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(digits)).toString(16)}`]\n  });\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      data: deploy.encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    gasPrice,\n    data: deploy.encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloDeployErc20SignedTransaction = prepareCeloDeployErc20SignedTransaction;\n/**\n * Prepare a signed Celo mint erc20 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloMintErc20SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.MintCeloErc20);\n  const {\n    fromPrivateKey,\n    amount,\n    to,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId\n  } = body;\n  const url = provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`;\n  const p = new celo_ethers_wrapper_1.CeloProvider(url);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default(url).eth.Contract(token_abi_1.default, contractAddress.trim());\n  const decimals = await contract.methods.decimals().call();\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      data: contract.methods.mint(to.trim(), '0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.mint(to.trim(), '0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloMintErc20SignedTransaction = prepareCeloMintErc20SignedTransaction;\n\nconst getCeloClient = provider => new web3_1.default(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n\nexports.getCeloClient = getCeloClient;\n/**\n * Prepare a smart contract write method invocation transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloSmartContractWriteMethodInvocation = async (testnet, body, provider) => {\n  var _a;\n\n  await tatum_1.validateBody(body, model_1.CeloSmartContractMethodInvocation);\n  const {\n    fromPrivateKey,\n    feeCurrency,\n    fee,\n    params,\n    methodName,\n    methodABI,\n    contractAddress,\n    nonce,\n    signatureId,\n    amount\n  } = body;\n  const url = provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`;\n  const p = new celo_ethers_wrapper_1.CeloProvider(url);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default(url).eth.Contract([methodABI], contractAddress.trim());\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce,\n    value: amount ? `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(amount, 'ether')).toString(16)}` : undefined,\n    gasLimit: (fee === null || fee === void 0 ? void 0 : fee.gasLimit) ? `0x${new bignumber_js_1.BigNumber(fee.gasLimit).toString(16)}` : undefined,\n    gasPrice: (fee === null || fee === void 0 ? void 0 : fee.gasPrice) ? `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(fee.gasPrice, 'gwei')).toString(16)}` : undefined,\n    to: contractAddress.trim(),\n    data: contract.methods[methodName](...params).encodeABI()\n  };\n\n  if (signatureId) {\n    return JSON.stringify(transaction);\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  transaction.nonce = transaction.nonce || txCount;\n  transaction.from = from;\n  transaction.gasLimit = (_a = transaction.gasLimit) !== null && _a !== void 0 ? _a : (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  transaction.gasPrice = (fee === null || fee === void 0 ? void 0 : fee.gasPrice) ? '0x' + new bignumber_js_1.BigNumber(web3_utils_1.toWei(fee.gasPrice, 'gwei')).toString(16) : gasPrice.toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloSmartContractWriteMethodInvocation = prepareCeloSmartContractWriteMethodInvocation;\n/**\n * Prepare a signed Celo smart contract read method invocation transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst sendCeloSmartContractReadMethodInvocationTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractReadMethodInvocation);\n  const {\n    params,\n    methodName,\n    methodABI,\n    contractAddress\n  } = body;\n  const url = provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`; // @ts-ignore\n\n  const contract = new new web3_1.default(url).eth.Contract([methodABI], contractAddress.trim());\n  return {\n    data: await contract.methods[methodName](...params).call()\n  };\n};\n\nexports.sendCeloSmartContractReadMethodInvocationTransaction = sendCeloSmartContractReadMethodInvocationTransaction;\n\nconst sendCeloDeployErc20Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloDeployErc20SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloDeployErc20Transaction = sendCeloDeployErc20Transaction;\n\nconst sendCeloStoreDataSignedTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloStoreDataSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloStoreDataSignedTransaction = sendCeloStoreDataSignedTransaction;\n/**\n * Send Celo smart contract method invocation transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloSmartContractMethodInvocationTransaction = async (testnet, body, provider) => {\n  if (body.methodABI.stateMutability === 'view') {\n    return exports.sendCeloSmartContractReadMethodInvocationTransaction(testnet, body, provider);\n  }\n\n  const celoBody = body;\n  return blockchain_1.celoBroadcast(await exports.prepareCeloSmartContractWriteMethodInvocation(testnet, celoBody, provider), celoBody.signatureId);\n};\n\nexports.sendCeloSmartContractMethodInvocationTransaction = sendCeloSmartContractMethodInvocationTransaction;\n\nconst getCeloErc20ContractDecimals = async (testnet, contractAddress, provider) => {\n  if (!contractAddress) {\n    throw new Error('Contract address not set.');\n  }\n\n  const url = provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`; // @ts-ignore\n\n  const contract = new new web3_1.default(url).eth.Contract(token_abi_1.default, contractAddress.trim());\n  return await contract.methods.decimals().call();\n};\n\nexports.getCeloErc20ContractDecimals = getCeloErc20ContractDecimals;\n/**\n * Prepare a signed Celo transfer erc20 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloTransferErc20SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferCeloOrCeloErc20Token);\n  const {\n    fromPrivateKey,\n    to,\n    amount,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId,\n    fee\n  } = body;\n\n  if (!contractAddress) {\n    throw new Error('Contract address not set.');\n  }\n\n  const url = provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`;\n  const p = new celo_ethers_wrapper_1.CeloProvider(url);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default(url).eth.Contract(token_abi_1.default, contractAddress.trim());\n  const decimals = await contract.methods.decimals().call();\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: (fee === null || fee === void 0 ? void 0 : fee.gasLimit) ? '0x' + new bignumber_js_1.BigNumber(fee.gasLimit).toString(16) : undefined,\n      gasPrice: (fee === null || fee === void 0 ? void 0 : fee.gasPrice) ? '0x' + new bignumber_js_1.BigNumber(web3_utils_1.toWei(fee.gasPrice, 'gwei')).toString(16) : undefined,\n      to: contractAddress.trim(),\n      data: contract.methods.transfer(to.trim(), '0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: (fee === null || fee === void 0 ? void 0 : fee.gasLimit) ? '0x' + new bignumber_js_1.BigNumber(fee.gasLimit).toString(16) : undefined,\n    to: contractAddress.trim(),\n    gasPrice: (fee === null || fee === void 0 ? void 0 : fee.gasPrice) ? '0x' + new bignumber_js_1.BigNumber(web3_utils_1.toWei(fee.gasPrice, 'gwei')).toString(16) : gasPrice,\n    data: contract.methods.transfer(to.trim(), '0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI(),\n    from\n  };\n  transaction.gasLimit = transaction.gasLimit || (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloTransferErc20SignedTransaction = prepareCeloTransferErc20SignedTransaction;\n/**\n * Prepare a signed Celo burn erc20 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloBurnErc20SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.BurnCeloErc20);\n  const {\n    fromPrivateKey,\n    amount,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId\n  } = body;\n  const url = provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`;\n  const p = new celo_ethers_wrapper_1.CeloProvider(url);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default(url).eth.Contract(token_abi_1.default, contractAddress.trim());\n  const decimals = await contract.methods.decimals().call();\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      data: contract.methods.burn('0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.burn('0x' + new bignumber_js_1.BigNumber(amount).multipliedBy(10 ** decimals).toString(16)).encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloBurnErc20SignedTransaction = prepareCeloBurnErc20SignedTransaction;\n/**\n * Prepare a signed Celo mint multiple cashback erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloMintMultipleCashbackErc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    feeCurrency,\n    nonce,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    erc20\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc721_abi_1.default, contractAddress.trim());\n  const cashbacks = cashbackValues;\n  const cb = [];\n\n  for (const c of cashbacks) {\n    const cb2 = [];\n\n    for (const c2 of c) {\n      cb2.push(`0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(c2, 'ether')).toString(16)}`);\n    }\n\n    cb.push(cb2);\n  }\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      data: erc20 ? contract.methods.mintMultipleCashback(to.map(t => t.trim()), tokenId, url, authorAddresses, cb, erc20).encodeABI() : contract.methods.mintMultipleCashback(to.map(t => t.trim()), tokenId, url, authorAddresses, cb).encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: erc20 ? contract.methods.mintMultipleCashback(to.map(t => t.trim()), tokenId, url, authorAddresses, cb, erc20).encodeABI() : contract.methods.mintMultipleCashback(to.map(t => t.trim()), tokenId, url, authorAddresses, cb).encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloMintMultipleCashbackErc721SignedTransaction = prepareCeloMintMultipleCashbackErc721SignedTransaction;\n/**\n * Prepare a signed Celo mint multiple erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloMintMultipleErc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    feeCurrency,\n    nonce,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc721_abi_1.default, contractAddress.trim());\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      data: contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url).encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.mintMultiple(to.map(t => t.trim()), tokenId, url).encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloMintMultipleErc721SignedTransaction = prepareCeloMintMultipleErc721SignedTransaction;\n/**\n * Prepare a signed Celo update cashback for author erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloUpdateCashbackForAuthorErc721SignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloUpdateCashbackErc721);\n  const {\n    fromPrivateKey,\n    cashbackValue,\n    tokenId,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc721_abi_1.default, contractAddress.trim());\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      data: contract.methods.updateCashbackForAuthor(tokenId, `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(cashbackValue, 'ether')).toString(16)}`).encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.updateCashbackForAuthor(tokenId, `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(cashbackValue, 'ether')).toString(16)}`).encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloUpdateCashbackForAuthorErc721SignedTransaction = prepareCeloUpdateCashbackForAuthorErc721SignedTransaction;\n/**\n * Prepare a signed Celo mint multiple tokens transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloMintMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloMintMultiToken);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    feeCurrency,\n    data,\n    amount,\n    nonce,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc1155_abi_1.default, contractAddress.trim());\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      to: contractAddress.trim(),\n      gasLimit: '0',\n      data: contract.methods.mint(to.trim(), tokenId, `0x${new bignumber_js_1.BigNumber(amount).toString(16)}`, data ? data : '0x0').encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.mint(to.trim(), tokenId, `0x${new bignumber_js_1.BigNumber(amount).toString(16)}`, data ? data : '0x0').encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloMintMultiTokenSignedTransaction = prepareCeloMintMultiTokenSignedTransaction;\n/**\n * Prepare a signed Celo mint multiple tokens batch transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloMintMultiTokenBatchSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloMintMultiTokenBatch);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    amounts,\n    data,\n    feeCurrency,\n    nonce,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc1155_abi_1.default, contractAddress.trim());\n  const amts = amounts.map(amts => amts.map(amt => `0x${new bignumber_js_1.BigNumber(amt).toString(16)}`));\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      data: contract.methods.mintBatch(to.map(t => t.trim()), tokenId, amts, data ? data : '0x0').encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.mintBatch(to.map(t => t.trim()), tokenId, amts, data ? data : '0x0').encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloMintMultiTokenBatchSignedTransaction = prepareCeloMintMultiTokenBatchSignedTransaction;\n/**\n * Prepare a signed Celo transfer multiple tokens transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloTransferMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloTransferMultiToken);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    amount,\n    data,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc1155_abi_1.default, contractAddress.trim());\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      gasLimit: '0',\n      nonce,\n      to: contractAddress.trim(),\n      data: contract.methods.safeTransfer(to.trim(), tokenId, `0x${new bignumber_js_1.BigNumber(amount).toString(16)}`, data ? data : '0x0').encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.safeTransfer(to.trim(), tokenId, `0x${new bignumber_js_1.BigNumber(amount).toString(16)}`, data ? data : '0x0').encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloTransferMultiTokenSignedTransaction = prepareCeloTransferMultiTokenSignedTransaction;\n/**\n * Prepare a signed Celo batch transfer multiple tokens transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloBatchTransferMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloTransferMultiTokenBatch);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    amounts,\n    data,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet);\n  const amts = amounts.map(amt => `0x${new bignumber_js_1.BigNumber(amt).toString(16)}`); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc1155_abi_1.default, contractAddress.trim());\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      gasLimit: '0',\n      nonce,\n      to: contractAddress.trim(),\n      data: contract.methods.safeBatchTransfer(to.trim(), tokenId.map(token => token.trim()), amts, data ? data : '0x0').encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.safeBatchTransfer(to.trim(), tokenId.map(token => token.trim()), amts, data ? data : '0x0').encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloBatchTransferMultiTokenSignedTransaction = prepareCeloBatchTransferMultiTokenSignedTransaction;\n/**\n * Prepare a signed Celo burn multiple tokens batch transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloBurnMultiTokenBatchSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloBurnMultiTokenBatch);\n  const {\n    fromPrivateKey,\n    tokenId,\n    account,\n    amounts,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc1155_abi_1.default, contractAddress.trim());\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      data: contract.methods.burnBatch(account, tokenId, amounts).encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.burnBatch(account, tokenId, amounts).encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloBurnMultiTokenBatchSignedTransaction = prepareCeloBurnMultiTokenBatchSignedTransaction;\n/**\n * Prepare a signed Celo burn multiple tokens transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\nconst prepareCeloBurnMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CeloBurnMultiToken);\n  const {\n    fromPrivateKey,\n    tokenId,\n    account,\n    amount,\n    contractAddress,\n    feeCurrency,\n    nonce,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet); // @ts-ignore\n\n  const contract = new new web3_1.default().eth.Contract(erc1155_abi_1.default, contractAddress.trim());\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      gasLimit: '0',\n      to: contractAddress.trim(),\n      data: contract.methods.burn(account, tokenId, amount).encodeABI()\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    gasLimit: '0',\n    to: contractAddress.trim(),\n    gasPrice,\n    data: contract.methods.burn(account, tokenId, amount).encodeABI(),\n    from\n  };\n  transaction.gasLimit = (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloBurnMultiTokenSignedTransaction = prepareCeloBurnMultiTokenSignedTransaction;\n/**\n * Sign Celo, cUsd or cEur transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst prepareCeloOrCUsdSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferCeloOrCeloErc20Token);\n  const {\n    fromPrivateKey,\n    to,\n    feeCurrency,\n    nonce,\n    data,\n    amount,\n    currency,\n    fee,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const cUsdAddress = testnet ? constants_1.CUSD_ADDRESS_TESTNET : constants_1.CUSD_ADDRESS_MAINNET;\n  const cEurAddress = testnet ? constants_1.CEUR_ADDRESS_TESTNET : constants_1.CEUR_ADDRESS_MAINNET;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet);\n  const value = `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(1e18).toString(16)}`;\n  let recipient;\n\n  switch (currency) {\n    case model_1.Currency.CEUR:\n      recipient = cEurAddress;\n      break;\n\n    case model_1.Currency.CUSD:\n      recipient = cUsdAddress;\n      break;\n\n    default:\n      recipient = to.trim();\n  } // @ts-ignore\n\n\n  const contract = new new web3_1.default().eth.Contract([constants_1.TRANSFER_METHOD_ABI], cUsdAddress.trim());\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      to: recipient,\n      data: currency === model_1.Currency.CELO ? data : contract.methods.transfer(to.trim(), value).encodeABI(),\n      gasLimit: (fee === null || fee === void 0 ? void 0 : fee.gasLimit) ? '0x' + new bignumber_js_1.BigNumber(fee.gasLimit).toString(16) : undefined,\n      gasPrice: (fee === null || fee === void 0 ? void 0 : fee.gasPrice) ? '0x' + new bignumber_js_1.BigNumber(web3_utils_1.toWei(fee.gasPrice, 'gwei')).toString(16) : undefined,\n      value: currency === model_1.Currency.CELO ? value : undefined\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    to: recipient,\n    data: currency === model_1.Currency.CELO ? data : contract.methods.transfer(to.trim(), value).encodeABI(),\n    gasLimit: (fee === null || fee === void 0 ? void 0 : fee.gasLimit) ? '0x' + new bignumber_js_1.BigNumber(fee.gasLimit).toString(16) : undefined,\n    gasPrice: (fee === null || fee === void 0 ? void 0 : fee.gasPrice) ? '0x' + new bignumber_js_1.BigNumber(web3_utils_1.toWei(fee.gasPrice, 'gwei')).toString(16) : gasPrice,\n    value: currency === model_1.Currency.CELO ? value : undefined,\n    from\n  };\n  transaction.gasLimit = transaction.gasLimit || (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloOrCUsdSignedTransaction = prepareCeloOrCUsdSignedTransaction;\n/**\n * Sign store data transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst prepareCeloStoreDataSignedTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateRecord);\n  const {\n    fromPrivateKey,\n    to,\n    feeCurrency,\n    nonce,\n    data,\n    ethFee: fee,\n    signatureId\n  } = body;\n  const p = new celo_ethers_wrapper_1.CeloProvider(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/celo/web3/${process.env.TATUM_API_KEY}`);\n  const network = await p.ready;\n  const feeCurrencyContractAddress = getFeeCurrency(feeCurrency, testnet);\n\n  if (signatureId) {\n    return JSON.stringify({\n      chainId: network.chainId,\n      feeCurrency: feeCurrencyContractAddress,\n      nonce,\n      to: to === null || to === void 0 ? void 0 : to.trim(),\n      data: data ? web3_utils_1.isHex(data) ? web3_utils_1.stringToHex(data) : web3_utils_1.toHex(data) : undefined,\n      gasLimit: (fee === null || fee === void 0 ? void 0 : fee.gasLimit) ? '0x' + new bignumber_js_1.BigNumber(fee.gasLimit).toString(16) : undefined,\n      gasPrice: (fee === null || fee === void 0 ? void 0 : fee.gasPrice) ? '0x' + new bignumber_js_1.BigNumber(web3_utils_1.toWei(fee.gasPrice, 'gwei')).toString(16) : undefined,\n      value: undefined\n    });\n  }\n\n  const wallet = new celo_ethers_wrapper_1.CeloWallet(fromPrivateKey, p);\n  const {\n    txCount,\n    gasPrice,\n    from\n  } = await obtainWalletInformation(wallet, feeCurrencyContractAddress);\n  const transaction = {\n    chainId: network.chainId,\n    feeCurrency: feeCurrencyContractAddress,\n    nonce: nonce || txCount,\n    to: (to === null || to === void 0 ? void 0 : to.trim()) || from,\n    data: data ? web3_utils_1.isHex(data) ? web3_utils_1.stringToHex(data) : web3_utils_1.toHex(data) : undefined,\n    gasLimit: (fee === null || fee === void 0 ? void 0 : fee.gasLimit) ? '0x' + new bignumber_js_1.BigNumber(fee.gasLimit).toString(16) : undefined,\n    gasPrice: (fee === null || fee === void 0 ? void 0 : fee.gasPrice) ? '0x' + new bignumber_js_1.BigNumber(web3_utils_1.toWei(fee.gasPrice, 'gwei')).toString(16) : gasPrice,\n    value: undefined,\n    from\n  };\n  transaction.gasLimit = transaction.gasLimit || (await wallet.estimateGas(transaction)).add(feeCurrency === model_1.Currency.CELO ? 0 : 100000).toHexString();\n  return wallet.signTransaction(transaction);\n};\n\nexports.prepareCeloStoreDataSignedTransaction = prepareCeloStoreDataSignedTransaction;\n/**\n * Send Celo or cUsd transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloOrcUsdTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloOrCUsdSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloOrcUsdTransaction = sendCeloOrcUsdTransaction;\n/**\n * Send Celo or cUsd transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloErc20Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloTransferErc20SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloErc20Transaction = sendCeloErc20Transaction;\n/**\n * Send Celo mint erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloMintErc721Transaction = async (testnet, body, provider) => {\n  if (!body.fromPrivateKey) {\n    return nft_1.mintNFT(body);\n  }\n\n  return blockchain_1.celoBroadcast(await exports.prepareCeloMintErc721SignedTransaction(testnet, body, provider), body.signatureId);\n};\n\nexports.sendCeloMintErc721Transaction = sendCeloMintErc721Transaction;\n/**\n * Send Celo mint cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloMintCashbackErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloMintCashbackErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloMintCashbackErc721Transaction = sendCeloMintCashbackErc721Transaction;\n/**\n * Send Celo mint provenance cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloMintErc721ProvenanceTransaction = async (testnet, body, provider) => {\n  if (!body.fromPrivateKey) {\n    return nft_1.mintNFT(body);\n  }\n\n  return blockchain_1.celoBroadcast(await exports.prepareCeloMintErc721ProvenanceSignedTransaction(testnet, body, provider), body.signatureId);\n};\n\nexports.sendCeloMintErc721ProvenanceTransaction = sendCeloMintErc721ProvenanceTransaction;\n/**\n * Send Celo mint multiple provenance erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloMintMultipleErc721ProvenanceTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloMintMultipleErc721ProvenanceSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloMintMultipleErc721ProvenanceTransaction = sendCeloMintMultipleErc721ProvenanceTransaction;\n/**\n * Send Celo mint multiple erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloMintMultipleErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloMintMultipleErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloMintMultipleErc721Transaction = sendCeloMintMultipleErc721Transaction;\n/**\n * Send Celo mint multiple cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloMintMultipleCashbackErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloMintMultipleCashbackErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloMintMultipleCashbackErc721Transaction = sendCeloMintMultipleCashbackErc721Transaction;\n/**\n * Send Celo burn erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloBurnErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloBurnErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloBurnErc721Transaction = sendCeloBurnErc721Transaction;\n/**\n * Send Celo update cashback for author erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloUpdateCashbackForAuthorErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloUpdateCashbackForAuthorErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloUpdateCashbackForAuthorErc721Transaction = sendCeloUpdateCashbackForAuthorErc721Transaction;\n/**\n * Send Celo transfer nft transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloTransferErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloTransferErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloTransferErc721Transaction = sendCeloTransferErc721Transaction;\n/**\n * Send Celo deploy erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloDeployErc721Transaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloDeployErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloDeployErc721Transaction = sendCeloDeployErc721Transaction;\n/**\n * Send Celo deploy multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloDeployMultiTokenTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloDeployMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloDeployMultiTokenTransaction = sendCeloDeployMultiTokenTransaction;\n/**\n * Send Celo mint multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloMintMultiTokenTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloMintMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloMintMultiTokenTransaction = sendCeloMintMultiTokenTransaction;\n/**\n * Send Celo mint multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloMintMultiTokenBatchTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloMintMultiTokenBatchSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloMintMultiTokenBatchTransaction = sendCeloMintMultiTokenBatchTransaction;\n/**\n * Send Celo transfer multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloTransferMultiTokenTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloTransferMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloTransferMultiTokenTransaction = sendCeloTransferMultiTokenTransaction;\n/**\n * Send Celo transfer multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloTransferMultiTokenBatchTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloBatchTransferMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloTransferMultiTokenBatchTransaction = sendCeloTransferMultiTokenBatchTransaction;\n/**\n * Send Celo burn multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloBurnMultiTokenTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloBurnMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloBurnMultiTokenTransaction = sendCeloBurnMultiTokenTransaction;\n/**\n * Send Celo burn multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloBurnMultiTokenBatchTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloBurnMultiTokenBatchSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloBurnMultiTokenBatchTransaction = sendCeloBurnMultiTokenBatchTransaction;\n/**\n * Send generate custodial wallet transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Celo Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendCeloGenerateCustodialWalletSignedTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloGenerateCustodialWalletSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloGenerateCustodialWalletSignedTransaction = sendCeloGenerateCustodialWalletSignedTransaction;\n/**\n * Deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendCeloDeployMarketplaceListingSignedTransaction = async (testnet, body, provider) => blockchain_1.celoBroadcast(await exports.prepareCeloDeployMarketplaceListingSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendCeloDeployMarketplaceListingSignedTransaction = sendCeloDeployMarketplaceListingSignedTransaction;","map":{"version":3,"mappings":"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","names":["obtainWalletInformation","wallet","feeCurrencyContractAddress","txCount","gasPrice","from","Promise","all","getTransactionCount","getGasPrice","getAddress","constants_1","includes","lte","bignumber_1","getFeeCurrency","feeCurrency","testnet","model_1","CEUR","CUSD","undefined","prepareCeloGenerateCustodialWalletSignedTransaction","body","provider","tatum_1","p","celo_ethers_wrapper_1","process","env","TATUM_API_URL","TATUM_API_KEY","network","ready","CELO","abi","code","custodial_1","contract","web3_1","eth","Contract","deploy","data","signatureId","JSON","stringify","chainId","nonce","gasLimit","encodeABI","fromPrivateKey","transaction","estimateGas","add","toHexString","signTransaction","exports","deployContract","bytecode","args","arguments","prepareCeloDeployMarketplaceListingSignedTransaction","marketplace_1","marketplaceFee","feeRecipient","prepareCeloDeployAuctionSignedTransaction","auctionFee","signCeloKMSTransaction","tx","chain","Error","parse","serializedTransaction","prepareCeloDeployMultiTokenSignedTransaction","uri","publicMint","erc1155_abi_1","erc1155_bytecode_1","prepareCeloDeployErc721SignedTransaction","name","symbol","provenance","cashback","erc721_abi_2","erc721_bytecode_2","erc721Provenance_abi_1","erc721Provenance_bytecode_1","erc721_abi_1","erc721_bytecode_1","prepareCeloMintCashbackErc721SignedTransaction","url","to","tokenId","contractAddress","authorAddresses","cashbackValues","erc20","trim","cb","c","push","bignumber_js_1","web3_utils_1","toString","methods","mintWithCashback","prepareCeloMintErc721ProvenanceSignedTransaction","fixedValues","fv","map","multipliedBy","mintWithTokenURI","prepareCeloMintMultipleErc721ProvenanceSignedTransaction","i","length","cb2","fv2","j","mintMultiple","t","prepareCeloMintErc721SignedTransaction","prepareCeloTransferErc721SignedTransaction","value","provenanceData","tokenPrice","dataBytes","Buffer","tokenData","safeTransfer","prepareCeloBurnErc721SignedTransaction","burn","prepareCeloDeployErc20SignedTransaction","supply","address","digits","totalCap","token_abi_1","token_bytecode_1","pow","prepareCeloMintErc20SignedTransaction","amount","decimals","call","mint","getCeloClient","prepareCeloSmartContractWriteMethodInvocation","fee","params","methodName","methodABI","_a","sendCeloSmartContractReadMethodInvocationTransaction","sendCeloDeployErc20Transaction","blockchain_1","sendCeloStoreDataSignedTransaction","sendCeloSmartContractMethodInvocationTransaction","stateMutability","celoBody","getCeloErc20ContractDecimals","prepareCeloTransferErc20SignedTransaction","transfer","prepareCeloBurnErc20SignedTransaction","prepareCeloMintMultipleCashbackErc721SignedTransaction","cashbacks","c2","mintMultipleCashback","prepareCeloMintMultipleErc721SignedTransaction","prepareCeloUpdateCashbackForAuthorErc721SignedTransaction","cashbackValue","updateCashbackForAuthor","prepareCeloMintMultiTokenSignedTransaction","prepareCeloMintMultiTokenBatchSignedTransaction","amounts","amts","amt","mintBatch","prepareCeloTransferMultiTokenSignedTransaction","prepareCeloBatchTransferMultiTokenSignedTransaction","safeBatchTransfer","token","prepareCeloBurnMultiTokenBatchSignedTransaction","account","burnBatch","prepareCeloBurnMultiTokenSignedTransaction","prepareCeloOrCUsdSignedTransaction","currency","cUsdAddress","cEurAddress","recipient","prepareCeloStoreDataSignedTransaction","ethFee","sendCeloOrcUsdTransaction","sendCeloErc20Transaction","sendCeloMintErc721Transaction","nft_1","sendCeloMintCashbackErc721Transaction","sendCeloMintErc721ProvenanceTransaction","sendCeloMintMultipleErc721ProvenanceTransaction","sendCeloMintMultipleErc721Transaction","sendCeloMintMultipleCashbackErc721Transaction","sendCeloBurnErc721Transaction","sendCeloUpdateCashbackForAuthorErc721Transaction","sendCeloTransferErc721Transaction","sendCeloDeployErc721Transaction","sendCeloDeployMultiTokenTransaction","sendCeloMintMultiTokenTransaction","sendCeloMintMultiTokenBatchTransaction","sendCeloTransferMultiTokenTransaction","sendCeloTransferMultiTokenBatchTransaction","sendCeloBurnMultiTokenTransaction","sendCeloBurnMultiTokenBatchTransaction","sendCeloGenerateCustodialWalletSignedTransaction","sendCeloDeployMarketplaceListingSignedTransaction"],"sourceRoot":"","sources":["../../../src/transaction/celo.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}