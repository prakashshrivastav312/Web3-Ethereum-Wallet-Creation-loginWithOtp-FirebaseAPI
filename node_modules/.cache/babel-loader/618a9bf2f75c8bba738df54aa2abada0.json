{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nvar _strkey = require('./strkey');\n\nvar _operation = require('./operation');\n\nvar _memo = require('./memo');\n\nvar _transaction_base = require('./transaction_base');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Use {@link TransactionBuilder} to build a transaction object. If you have an\n * object or base64-encoded string of the transaction envelope XDR, use {@link\n * TransactionBuilder.fromXDR}.\n *\n * Once a Transaction has been created, its attributes and operations should not\n * be changed. You should only add signatures (using {@link Transaction#sign})\n * to a Transaction object before submitting to the network or forwarding on to\n * additional signers.\n *\n * @constructor\n *\n * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope\n *     object or base64 encoded string\n * @param {string}  [networkPassphrase] - passphrase of the target stellar\n *     network (e.g. \"Public Global Stellar Network ; September 2015\")\n * @param {bool}    [opts.withMuxing] - Indicates that this.sourceAccount is a\n *     muxed account (i.e. came from an M... address) and should be interpreted\n *     fully as such. By default, this option is disabled until muxed accounts\n *     are mature.\n *\n * @extends TransactionBase\n */\n\n\nvar Transaction = exports.Transaction = function (_TransactionBase) {\n  _inherits(Transaction, _TransactionBase);\n\n  function Transaction(envelope, networkPassphrase, withMuxing) {\n    _classCallCheck(this, Transaction);\n\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _stellarXdr_generated2.default.TransactionEnvelope.fromXDR(buffer);\n    }\n\n    var envelopeType = envelope.switch();\n\n    if (!(envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0() || envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTx())) {\n      throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + envelopeType.name + '.');\n    }\n\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    var signatures = (txEnvelope.signatures() || []).slice();\n\n    var _this = _possibleConstructorReturn(this, (Transaction.__proto__ || Object.getPrototypeOf(Transaction)).call(this, tx, signatures, fee, networkPassphrase));\n\n    _this._envelopeType = envelopeType;\n    _this._memo = tx.memo();\n    _this._sequence = tx.seqNum().toString();\n\n    switch (_this._envelopeType) {\n      case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0():\n        _this._source = _strkey.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());\n        break;\n\n      default:\n        _this._source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.sourceAccount(), withMuxing);\n        break;\n    }\n\n    var timeBounds = tx.timeBounds();\n\n    if (timeBounds) {\n      _this._timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n\n    var operations = tx.operations() || [];\n    _this._operations = (0, _map2.default)(operations, function (op) {\n      return _operation.Operation.fromXDRObject(op, withMuxing);\n    });\n    return _this;\n  }\n  /**\n   * @type {object}\n   * @property {string} 64 bit unix timestamp\n   * @property {string} 64 bit unix timestamp\n   * @readonly\n   */\n\n\n  _createClass(Transaction, [{\n    key: 'signatureBase',\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n    value: function signatureBase() {\n      var tx = this.tx; // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n      // we need a Transaction to generate the signature base\n\n      if (this._envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0()) {\n        tx = _stellarXdr_generated2.default.Transaction.fromXDR(Buffer.concat([// TransactionV0 is a transaction with the AccountID discriminant\n        // stripped off, we need to put it back to build a valid transaction\n        // which we can use to build a TransactionSignaturePayloadTaggedTransaction\n        _stellarXdr_generated2.default.PublicKeyType.publicKeyTypeEd25519().toXDR(), tx.toXDR()]));\n      }\n\n      var taggedTransaction = new _stellarXdr_generated2.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx);\n      var txSignature = new _stellarXdr_generated2.default.TransactionSignaturePayload({\n        networkId: _stellarXdr_generated2.default.Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n      return txSignature.toXDR();\n    }\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      var rawTx = this.tx.toXDR();\n      var signatures = this.signatures.slice(); // make a copy of the signatures\n\n      var envelope = void 0;\n\n      switch (this._envelopeType) {\n        case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0():\n          envelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTxV0(new _stellarXdr_generated2.default.TransactionV0Envelope({\n            tx: _stellarXdr_generated2.default.TransactionV0.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n\n        case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTx():\n          envelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTx(new _stellarXdr_generated2.default.TransactionV1Envelope({\n            tx: _stellarXdr_generated2.default.Transaction.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n\n        default:\n          throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + this._envelopeType.name + '.');\n      }\n\n      return envelope;\n    }\n  }, {\n    key: 'timeBounds',\n    get: function get() {\n      return this._timeBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'sequence',\n    get: function get() {\n      return this._sequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'source',\n    get: function get() {\n      return this._source;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n    /**\n     * @type {Array.<xdr.Operation>}\n     * @readonly\n     */\n\n  }, {\n    key: 'operations',\n    get: function get() {\n      return this._operations;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'memo',\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }]);\n\n  return Transaction;\n}(_transaction_base.TransactionBase);","map":{"version":3,"names":["Object","defineProperty","exports","value","Transaction","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_map","require","_map2","_interopRequireDefault","_stellarXdr_generated","_stellarXdr_generated2","_hashing","_strkey","_operation","_memo","_transaction_base","_decode_encode_muxed_account","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_TransactionBase","envelope","networkPassphrase","withMuxing","buffer","Buffer","from","TransactionEnvelope","fromXDR","envelopeType","switch","EnvelopeType","envelopeTypeTxV0","envelopeTypeTx","Error","name","txEnvelope","tx","fee","toString","signatures","slice","_this","getPrototypeOf","_envelopeType","memo","_sequence","seqNum","_source","StrKey","encodeEd25519PublicKey","sourceAccountEd25519","encodeMuxedAccountToAddress","sourceAccount","timeBounds","_timeBounds","minTime","maxTime","operations","_operations","op","Operation","fromXDRObject","signatureBase","concat","PublicKeyType","publicKeyTypeEd25519","toXDR","taggedTransaction","TransactionSignaturePayloadTaggedTransaction","txSignature","TransactionSignaturePayload","networkId","Hash","hash","toEnvelope","rawTx","TransactionV0Envelope","TransactionV0","TransactionV1Envelope","get","set","Memo","TransactionBase"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/transaction.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nvar _strkey = require('./strkey');\n\nvar _operation = require('./operation');\n\nvar _memo = require('./memo');\n\nvar _transaction_base = require('./transaction_base');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Use {@link TransactionBuilder} to build a transaction object. If you have an\n * object or base64-encoded string of the transaction envelope XDR, use {@link\n * TransactionBuilder.fromXDR}.\n *\n * Once a Transaction has been created, its attributes and operations should not\n * be changed. You should only add signatures (using {@link Transaction#sign})\n * to a Transaction object before submitting to the network or forwarding on to\n * additional signers.\n *\n * @constructor\n *\n * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope\n *     object or base64 encoded string\n * @param {string}  [networkPassphrase] - passphrase of the target stellar\n *     network (e.g. \"Public Global Stellar Network ; September 2015\")\n * @param {bool}    [opts.withMuxing] - Indicates that this.sourceAccount is a\n *     muxed account (i.e. came from an M... address) and should be interpreted\n *     fully as such. By default, this option is disabled until muxed accounts\n *     are mature.\n *\n * @extends TransactionBase\n */\nvar Transaction = exports.Transaction = function (_TransactionBase) {\n  _inherits(Transaction, _TransactionBase);\n\n  function Transaction(envelope, networkPassphrase, withMuxing) {\n    _classCallCheck(this, Transaction);\n\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _stellarXdr_generated2.default.TransactionEnvelope.fromXDR(buffer);\n    }\n\n    var envelopeType = envelope.switch();\n    if (!(envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0() || envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTx())) {\n      throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + envelopeType.name + '.');\n    }\n\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    var signatures = (txEnvelope.signatures() || []).slice();\n\n    var _this = _possibleConstructorReturn(this, (Transaction.__proto__ || Object.getPrototypeOf(Transaction)).call(this, tx, signatures, fee, networkPassphrase));\n\n    _this._envelopeType = envelopeType;\n    _this._memo = tx.memo();\n    _this._sequence = tx.seqNum().toString();\n\n    switch (_this._envelopeType) {\n      case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0():\n        _this._source = _strkey.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());\n        break;\n      default:\n        _this._source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.sourceAccount(), withMuxing);\n        break;\n    }\n\n    var timeBounds = tx.timeBounds();\n    if (timeBounds) {\n      _this._timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n    var operations = tx.operations() || [];\n    _this._operations = (0, _map2.default)(operations, function (op) {\n      return _operation.Operation.fromXDRObject(op, withMuxing);\n    });\n    return _this;\n  }\n\n  /**\n   * @type {object}\n   * @property {string} 64 bit unix timestamp\n   * @property {string} 64 bit unix timestamp\n   * @readonly\n   */\n\n\n  _createClass(Transaction, [{\n    key: 'signatureBase',\n\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n    value: function signatureBase() {\n      var tx = this.tx;\n\n      // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n      // we need a Transaction to generate the signature base\n      if (this._envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0()) {\n        tx = _stellarXdr_generated2.default.Transaction.fromXDR(Buffer.concat([\n        // TransactionV0 is a transaction with the AccountID discriminant\n        // stripped off, we need to put it back to build a valid transaction\n        // which we can use to build a TransactionSignaturePayloadTaggedTransaction\n        _stellarXdr_generated2.default.PublicKeyType.publicKeyTypeEd25519().toXDR(), tx.toXDR()]));\n      }\n\n      var taggedTransaction = new _stellarXdr_generated2.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx);\n\n      var txSignature = new _stellarXdr_generated2.default.TransactionSignaturePayload({\n        networkId: _stellarXdr_generated2.default.Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      var rawTx = this.tx.toXDR();\n      var signatures = this.signatures.slice(); // make a copy of the signatures\n\n      var envelope = void 0;\n      switch (this._envelopeType) {\n        case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0():\n          envelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTxV0(new _stellarXdr_generated2.default.TransactionV0Envelope({\n            tx: _stellarXdr_generated2.default.TransactionV0.fromXDR(rawTx), // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTx():\n          envelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTx(new _stellarXdr_generated2.default.TransactionV1Envelope({\n            tx: _stellarXdr_generated2.default.Transaction.fromXDR(rawTx), // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        default:\n          throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + this._envelopeType.name + '.');\n      }\n\n      return envelope;\n    }\n  }, {\n    key: 'timeBounds',\n    get: function get() {\n      return this._timeBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'sequence',\n    get: function get() {\n      return this._sequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'source',\n    get: function get() {\n      return this._source;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {Array.<xdr.Operation>}\n     * @readonly\n     */\n\n  }, {\n    key: 'operations',\n    get: function get() {\n      return this._operations;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'memo',\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }]);\n\n  return Transaction;\n}(_transaction_base.TransactionBase);"],"mappings":"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"},"metadata":{},"sourceType":"script"}