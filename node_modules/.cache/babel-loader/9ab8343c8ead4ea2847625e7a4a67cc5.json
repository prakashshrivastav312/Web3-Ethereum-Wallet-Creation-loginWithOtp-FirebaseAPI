{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst combiner_1 = require('./combiner');\n\nconst parser_1 = require('./parser');\n\nconst typeFields_1 = require('./typeFields');\n\nconst utils_1 = require('./utils');\n\nclass Psbt {\n  constructor(tx) {\n    this.inputs = [];\n    this.outputs = [];\n    this.globalMap = {\n      unsignedTx: tx\n    };\n  }\n\n  static fromBase64(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'base64');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n\n  static fromHex(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'hex');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n\n  static fromBuffer(buffer, txFromBuffer) {\n    const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);\n    const psbt = new this(results.globalMap.unsignedTx);\n    Object.assign(psbt, results);\n    return psbt;\n  }\n\n  toBase64() {\n    const buffer = this.toBuffer();\n    return buffer.toString('base64');\n  }\n\n  toHex() {\n    const buffer = this.toBuffer();\n    return buffer.toString('hex');\n  }\n\n  toBuffer() {\n    return parser_1.psbtToBuffer(this);\n  }\n\n  updateGlobal(updateData) {\n    utils_1.updateGlobal(updateData, this.globalMap);\n    return this;\n  }\n\n  updateInput(inputIndex, updateData) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.updateInput(updateData, input);\n    return this;\n  }\n\n  updateOutput(outputIndex, updateData) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.updateOutput(updateData, output);\n    return this;\n  }\n\n  addUnknownKeyValToGlobal(keyVal) {\n    utils_1.checkHasKey(keyVal, this.globalMap.unknownKeyVals, utils_1.getEnumLength(typeFields_1.GlobalTypes));\n    if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];\n    this.globalMap.unknownKeyVals.push(keyVal);\n    return this;\n  }\n\n  addUnknownKeyValToInput(inputIndex, keyVal) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.checkHasKey(keyVal, input.unknownKeyVals, utils_1.getEnumLength(typeFields_1.InputTypes));\n    if (!input.unknownKeyVals) input.unknownKeyVals = [];\n    input.unknownKeyVals.push(keyVal);\n    return this;\n  }\n\n  addUnknownKeyValToOutput(outputIndex, keyVal) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.checkHasKey(keyVal, output.unknownKeyVals, utils_1.getEnumLength(typeFields_1.OutputTypes));\n    if (!output.unknownKeyVals) output.unknownKeyVals = [];\n    output.unknownKeyVals.push(keyVal);\n    return this;\n  }\n\n  addInput(inputData) {\n    this.globalMap.unsignedTx.addInput(inputData);\n    this.inputs.push({\n      unknownKeyVals: []\n    });\n    const addKeyVals = inputData.unknownKeyVals || [];\n    const inputIndex = this.inputs.length - 1;\n\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n\n    addKeyVals.forEach(keyVal => this.addUnknownKeyValToInput(inputIndex, keyVal));\n    utils_1.addInputAttributes(this.inputs, inputData);\n    return this;\n  }\n\n  addOutput(outputData) {\n    this.globalMap.unsignedTx.addOutput(outputData);\n    this.outputs.push({\n      unknownKeyVals: []\n    });\n    const addKeyVals = outputData.unknownKeyVals || [];\n    const outputIndex = this.outputs.length - 1;\n\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n\n    addKeyVals.forEach(keyVal => this.addUnknownKeyValToInput(outputIndex, keyVal));\n    utils_1.addOutputAttributes(this.outputs, outputData);\n    return this;\n  }\n\n  clearFinalizedInput(inputIndex) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.inputCheckUncleanFinalized(inputIndex, input);\n\n    for (const key of Object.keys(input)) {\n      if (!['witnessUtxo', 'nonWitnessUtxo', 'finalScriptSig', 'finalScriptWitness', 'unknownKeyVals'].includes(key)) {\n        // @ts-ignore\n        delete input[key];\n      }\n    }\n\n    return this;\n  }\n\n  combine() {\n    for (var _len = arguments.length, those = new Array(_len), _key = 0; _key < _len; _key++) {\n      those[_key] = arguments[_key];\n    }\n\n    // Combine this with those.\n    // Return self for chaining.\n    const result = combiner_1.combine([this].concat(those));\n    Object.assign(this, result);\n    return this;\n  }\n\n  getTransaction() {\n    return this.globalMap.unsignedTx.toBuffer();\n  }\n\n}\n\nexports.Psbt = Psbt;","map":{"version":3,"names":["Object","defineProperty","exports","value","combiner_1","require","parser_1","typeFields_1","utils_1","Psbt","constructor","tx","inputs","outputs","globalMap","unsignedTx","fromBase64","data","txFromBuffer","buffer","Buffer","from","fromBuffer","fromHex","results","psbtFromBuffer","psbt","assign","toBase64","toBuffer","toString","toHex","psbtToBuffer","updateGlobal","updateData","updateInput","inputIndex","input","checkForInput","updateOutput","outputIndex","output","checkForOutput","addUnknownKeyValToGlobal","keyVal","checkHasKey","unknownKeyVals","getEnumLength","GlobalTypes","push","addUnknownKeyValToInput","InputTypes","addUnknownKeyValToOutput","OutputTypes","addInput","inputData","addKeyVals","length","Array","isArray","Error","forEach","addInputAttributes","addOutput","outputData","addOutputAttributes","clearFinalizedInput","inputCheckUncleanFinalized","key","keys","includes","combine","those","result","concat","getTransaction"],"sources":["C:/Users/acer/node_modules/bip174/src/lib/psbt.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst combiner_1 = require('./combiner');\nconst parser_1 = require('./parser');\nconst typeFields_1 = require('./typeFields');\nconst utils_1 = require('./utils');\nclass Psbt {\n  constructor(tx) {\n    this.inputs = [];\n    this.outputs = [];\n    this.globalMap = {\n      unsignedTx: tx,\n    };\n  }\n  static fromBase64(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'base64');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n  static fromHex(data, txFromBuffer) {\n    const buffer = Buffer.from(data, 'hex');\n    return this.fromBuffer(buffer, txFromBuffer);\n  }\n  static fromBuffer(buffer, txFromBuffer) {\n    const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);\n    const psbt = new this(results.globalMap.unsignedTx);\n    Object.assign(psbt, results);\n    return psbt;\n  }\n  toBase64() {\n    const buffer = this.toBuffer();\n    return buffer.toString('base64');\n  }\n  toHex() {\n    const buffer = this.toBuffer();\n    return buffer.toString('hex');\n  }\n  toBuffer() {\n    return parser_1.psbtToBuffer(this);\n  }\n  updateGlobal(updateData) {\n    utils_1.updateGlobal(updateData, this.globalMap);\n    return this;\n  }\n  updateInput(inputIndex, updateData) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.updateInput(updateData, input);\n    return this;\n  }\n  updateOutput(outputIndex, updateData) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.updateOutput(updateData, output);\n    return this;\n  }\n  addUnknownKeyValToGlobal(keyVal) {\n    utils_1.checkHasKey(\n      keyVal,\n      this.globalMap.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.GlobalTypes),\n    );\n    if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];\n    this.globalMap.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addUnknownKeyValToInput(inputIndex, keyVal) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.checkHasKey(\n      keyVal,\n      input.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.InputTypes),\n    );\n    if (!input.unknownKeyVals) input.unknownKeyVals = [];\n    input.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addUnknownKeyValToOutput(outputIndex, keyVal) {\n    const output = utils_1.checkForOutput(this.outputs, outputIndex);\n    utils_1.checkHasKey(\n      keyVal,\n      output.unknownKeyVals,\n      utils_1.getEnumLength(typeFields_1.OutputTypes),\n    );\n    if (!output.unknownKeyVals) output.unknownKeyVals = [];\n    output.unknownKeyVals.push(keyVal);\n    return this;\n  }\n  addInput(inputData) {\n    this.globalMap.unsignedTx.addInput(inputData);\n    this.inputs.push({\n      unknownKeyVals: [],\n    });\n    const addKeyVals = inputData.unknownKeyVals || [];\n    const inputIndex = this.inputs.length - 1;\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n    addKeyVals.forEach(keyVal =>\n      this.addUnknownKeyValToInput(inputIndex, keyVal),\n    );\n    utils_1.addInputAttributes(this.inputs, inputData);\n    return this;\n  }\n  addOutput(outputData) {\n    this.globalMap.unsignedTx.addOutput(outputData);\n    this.outputs.push({\n      unknownKeyVals: [],\n    });\n    const addKeyVals = outputData.unknownKeyVals || [];\n    const outputIndex = this.outputs.length - 1;\n    if (!Array.isArray(addKeyVals)) {\n      throw new Error('unknownKeyVals must be an Array');\n    }\n    addKeyVals.forEach(keyVal =>\n      this.addUnknownKeyValToInput(outputIndex, keyVal),\n    );\n    utils_1.addOutputAttributes(this.outputs, outputData);\n    return this;\n  }\n  clearFinalizedInput(inputIndex) {\n    const input = utils_1.checkForInput(this.inputs, inputIndex);\n    utils_1.inputCheckUncleanFinalized(inputIndex, input);\n    for (const key of Object.keys(input)) {\n      if (\n        ![\n          'witnessUtxo',\n          'nonWitnessUtxo',\n          'finalScriptSig',\n          'finalScriptWitness',\n          'unknownKeyVals',\n        ].includes(key)\n      ) {\n        // @ts-ignore\n        delete input[key];\n      }\n    }\n    return this;\n  }\n  combine(...those) {\n    // Combine this with those.\n    // Return self for chaining.\n    const result = combiner_1.combine([this].concat(those));\n    Object.assign(this, result);\n    return this;\n  }\n  getTransaction() {\n    return this.globalMap.unsignedTx.toBuffer();\n  }\n}\nexports.Psbt = Psbt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}