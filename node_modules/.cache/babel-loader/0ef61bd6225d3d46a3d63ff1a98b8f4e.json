{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst {\n  DAGNode,\n  DAGLink\n} = require('ipld-dag-pb');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nmodule.exports = configure(api => {\n  return async function (cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return new DAGNode(uint8ArrayFromString(data.Data, 'base64pad'), (data.Links || []).map(l => new DAGLink(l.Name, l.Size, l.Hash)));\n  };\n});","map":{"version":3,"names":["CID","require","DAGNode","DAGLink","configure","toUrlSearchParams","uint8ArrayFromString","module","exports","api","cid","options","res","post","timeout","signal","searchParams","arg","Uint8Array","dataEncoding","headers","data","json","Data","Links","map","l","Name","Size","Hash"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/object/get.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGNode, DAGLink } = require('ipld-dag-pb')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = configure(api => {\n  return async (cid, options = {}) => {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? new CID(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return new DAGNode(\n      uint8ArrayFromString(data.Data, 'base64pad'),\n      (data.Links || []).map(l => new DAGLink(l.Name, l.Size, l.Hash))\n    )\n  }\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;EAAEC,OAAF;EAAWC;AAAX,IAAuBF,OAAO,CAAC,aAAD,CAApC;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMK,oBAAoB,GAAGL,OAAO,CAAC,yBAAD,CAApC;;AAEAM,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;EAChC,OAAO,gBAAOC,GAAP,EAA6B;IAAA,IAAjBC,OAAiB,uEAAP,EAAO;IAClC,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;MACvCC,OAAO,EAAEH,OAAO,CAACG,OADsB;MAEvCC,MAAM,EAAEJ,OAAO,CAACI,MAFuB;MAGvCC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAG,GAAEP,GAAG,YAAYQ,UAAf,GAA4B,IAAIlB,GAAJ,CAAQU,GAAR,CAA5B,GAA2CA,GAAI,EADzB;QAE9BS,YAAY,EAAE,QAFgB;QAG9B,GAAGR;MAH2B,CAAD,CAHQ;MAQvCS,OAAO,EAAET,OAAO,CAACS;IARsB,CAAvB,CAAlB;IAUA,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAJ,EAAnB;IAEA,OAAO,IAAIpB,OAAJ,CACLI,oBAAoB,CAACe,IAAI,CAACE,IAAN,EAAY,WAAZ,CADf,EAEL,CAACF,IAAI,CAACG,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuBC,CAAC,IAAI,IAAIvB,OAAJ,CAAYuB,CAAC,CAACC,IAAd,EAAoBD,CAAC,CAACE,IAAtB,EAA4BF,CAAC,CAACG,IAA9B,CAA5B,CAFK,CAAP;EAID,CAjBD;AAkBD,CAnByB,CAA1B"},"metadata":{},"sourceType":"script"}