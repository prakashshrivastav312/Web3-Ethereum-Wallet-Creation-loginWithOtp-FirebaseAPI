{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computePaymentChannelHash = exports.computeEscrowHash = exports.computeLedgerHash = exports.computeStateTreeHash = exports.computeTransactionTreeHash = exports.computeTrustlineHash = exports.computeOrderID = exports.computeSignerListLedgerObjectID = exports.computeAccountLedgerObjectID = exports.computeBinaryTransactionSigningHash = exports.computeTransactionHash = exports.computeBinaryTransactionHash = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\n\nconst sha512Half_1 = __importDefault(require(\"./sha512Half\"));\n\nconst hash_prefix_1 = __importDefault(require(\"./hash-prefix\"));\n\nconst shamap_1 = require(\"./shamap\");\n\nconst ripple_binary_codec_1 = require(\"ripple-binary-codec\");\n\nconst ledgerspaces_1 = __importDefault(require(\"./ledgerspaces\"));\n\nconst padLeftZero = (string, length) => {\n  return Array(length - string.length + 1).join('0') + string;\n};\n\nconst intToHex = (integer, byteLength) => {\n  return padLeftZero(Number(integer).toString(16), byteLength * 2);\n};\n\nconst bytesToHex = bytes => {\n  return Buffer.from(bytes).toString('hex');\n};\n\nconst bigintToHex = (integerString, byteLength) => {\n  const hex = new bignumber_js_1.default(integerString).toString(16);\n  return padLeftZero(hex, byteLength * 2);\n};\n\nconst ledgerSpaceHex = name => {\n  return intToHex(ledgerspaces_1.default[name].charCodeAt(0), 2);\n};\n\nconst addressToHex = address => {\n  return Buffer.from(ripple_address_codec_1.decodeAccountID(address)).toString('hex');\n};\n\nconst currencyToHex = currency => {\n  if (currency.length === 3) {\n    const bytes = new Array(20 + 1).join('0').split('').map(parseFloat);\n    bytes[12] = currency.charCodeAt(0) & 0xff;\n    bytes[13] = currency.charCodeAt(1) & 0xff;\n    bytes[14] = currency.charCodeAt(2) & 0xff;\n    return bytesToHex(bytes);\n  }\n\n  return currency;\n};\n\nconst addLengthPrefix = hex => {\n  const length = hex.length / 2;\n\n  if (length <= 192) {\n    return bytesToHex([length]) + hex;\n  } else if (length <= 12480) {\n    const x = length - 193;\n    return bytesToHex([193 + (x >>> 8), x & 0xff]) + hex;\n  } else if (length <= 918744) {\n    const x = length - 12481;\n    return bytesToHex([241 + (x >>> 16), x >>> 8 & 0xff, x & 0xff]) + hex;\n  }\n\n  throw new Error('Variable integer overflow.');\n};\n\nexports.computeBinaryTransactionHash = txBlobHex => {\n  const prefix = hash_prefix_1.default.TRANSACTION_ID.toString(16).toUpperCase();\n  return sha512Half_1.default(prefix + txBlobHex);\n};\n\nexports.computeTransactionHash = txJSON => {\n  return exports.computeBinaryTransactionHash(ripple_binary_codec_1.encode(txJSON));\n};\n\nexports.computeBinaryTransactionSigningHash = txBlobHex => {\n  const prefix = hash_prefix_1.default.TRANSACTION_SIGN.toString(16).toUpperCase();\n  return sha512Half_1.default(prefix + txBlobHex);\n};\n\nexports.computeAccountLedgerObjectID = address => {\n  return sha512Half_1.default(ledgerSpaceHex('account') + addressToHex(address));\n};\n\nexports.computeSignerListLedgerObjectID = address => {\n  return sha512Half_1.default(ledgerSpaceHex('signerList') + addressToHex(address) + '00000000');\n};\n\nexports.computeOrderID = (address, sequence) => {\n  const prefix = '00' + intToHex(ledgerspaces_1.default.offer.charCodeAt(0), 1);\n  return sha512Half_1.default(prefix + addressToHex(address) + intToHex(sequence, 4));\n};\n\nexports.computeTrustlineHash = (address1, address2, currency) => {\n  const address1Hex = addressToHex(address1);\n  const address2Hex = addressToHex(address2);\n  const swap = new bignumber_js_1.default(address1Hex, 16).isGreaterThan(new bignumber_js_1.default(address2Hex, 16));\n  const lowAddressHex = swap ? address2Hex : address1Hex;\n  const highAddressHex = swap ? address1Hex : address2Hex;\n  const prefix = ledgerSpaceHex('rippleState');\n  return sha512Half_1.default(prefix + lowAddressHex + highAddressHex + currencyToHex(currency));\n};\n\nexports.computeTransactionTreeHash = transactions => {\n  const shamap = new shamap_1.SHAMap();\n  transactions.forEach(txJSON => {\n    const txBlobHex = ripple_binary_codec_1.encode(txJSON);\n    const metaHex = ripple_binary_codec_1.encode(txJSON.metaData);\n    const txHash = exports.computeBinaryTransactionHash(txBlobHex);\n    const data = addLengthPrefix(txBlobHex) + addLengthPrefix(metaHex);\n    shamap.addItem(txHash, data, shamap_1.NodeType.TRANSACTION_METADATA);\n  });\n  return shamap.hash;\n};\n\nexports.computeStateTreeHash = entries => {\n  const shamap = new shamap_1.SHAMap();\n  entries.forEach(ledgerEntry => {\n    const data = ripple_binary_codec_1.encode(ledgerEntry);\n    shamap.addItem(ledgerEntry.index, data, shamap_1.NodeType.ACCOUNT_STATE);\n  });\n  return shamap.hash;\n};\n\nexports.computeLedgerHash = ledgerHeader => {\n  const prefix = hash_prefix_1.default.LEDGER.toString(16).toUpperCase();\n  return sha512Half_1.default(prefix + intToHex(ledgerHeader.ledger_index, 4) + bigintToHex(ledgerHeader.total_coins, 8) + ledgerHeader.parent_hash + ledgerHeader.transaction_hash + ledgerHeader.account_hash + intToHex(ledgerHeader.parent_close_time, 4) + intToHex(ledgerHeader.close_time, 4) + intToHex(ledgerHeader.close_time_resolution, 1) + intToHex(ledgerHeader.close_flags, 1));\n};\n\nexports.computeEscrowHash = (address, sequence) => {\n  return sha512Half_1.default(ledgerSpaceHex('escrow') + addressToHex(address) + intToHex(sequence, 4));\n};\n\nexports.computePaymentChannelHash = (address, dstAddress, sequence) => {\n  return sha512Half_1.default(ledgerSpaceHex('paychan') + addressToHex(address) + addressToHex(dstAddress) + intToHex(sequence, 4));\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,WAAW,GAAG,CAACC,MAAD,EAAiBC,MAAjB,KAA2C;EAC7D,OAAOC,KAAK,CAACD,MAAM,GAAGD,MAAM,CAACC,MAAhB,GAAyB,CAA1B,CAAL,CAAkCE,IAAlC,CAAuC,GAAvC,IAA8CH,MAArD;AACD,CAFD;;AAIA,MAAMI,QAAQ,GAAG,CAACC,OAAD,EAAkBC,UAAlB,KAAgD;EAC/D,OAAOP,WAAW,CAACQ,MAAM,CAACF,OAAD,CAAN,CAAgBG,QAAhB,CAAyB,EAAzB,CAAD,EAA+BF,UAAU,GAAG,CAA5C,CAAlB;AACD,CAFD;;AAIA,MAAMG,UAAU,GAAIC,KAAD,IAA4B;EAC7C,OAAOC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBF,QAAnB,CAA4B,KAA5B,CAAP;AACD,CAFD;;AAIA,MAAMK,WAAW,GAAG,CAClBC,aADkB,EAElBR,UAFkB,KAGR;EACV,MAAMS,GAAG,GAAG,IAAIC,sBAAJ,CAAcF,aAAd,EAA6BN,QAA7B,CAAsC,EAAtC,CAAZ;EACA,OAAOT,WAAW,CAACgB,GAAD,EAAMT,UAAU,GAAG,CAAnB,CAAlB;AACD,CAND;;AAQA,MAAMW,cAAc,GAAIC,IAAD,IAAyB;EAC9C,OAAOd,QAAQ,CAACe,uBAAaD,IAAb,EAAmBE,UAAnB,CAA8B,CAA9B,CAAD,EAAmC,CAAnC,CAAf;AACD,CAFD;;AAIA,MAAMC,YAAY,GAAIC,OAAD,IAA4B;EAC/C,OAAOX,MAAM,CAACC,IAAP,CAAYW,uCAAgBD,OAAhB,CAAZ,EAAsCd,QAAtC,CAA+C,KAA/C,CAAP;AACD,CAFD;;AAIA,MAAMgB,aAAa,GAAIC,QAAD,IAA6B;EACjD,IAAIA,QAAQ,CAACxB,MAAT,KAAoB,CAAxB,EAA2B;IACzB,MAAMS,KAAK,GAAG,IAAIR,KAAJ,CAAU,KAAK,CAAf,EAAkBC,IAAlB,CAAuB,GAAvB,EAA4BuB,KAA5B,CAAkC,EAAlC,EAAsCC,GAAtC,CAA0CC,UAA1C,CAAd;IACAlB,KAAK,CAAC,EAAD,CAAL,GAAYe,QAAQ,CAACL,UAAT,CAAoB,CAApB,IAAyB,IAArC;IACAV,KAAK,CAAC,EAAD,CAAL,GAAYe,QAAQ,CAACL,UAAT,CAAoB,CAApB,IAAyB,IAArC;IACAV,KAAK,CAAC,EAAD,CAAL,GAAYe,QAAQ,CAACL,UAAT,CAAoB,CAApB,IAAyB,IAArC;IACA,OAAOX,UAAU,CAACC,KAAD,CAAjB;EACD;;EACD,OAAOe,QAAP;AACD,CATD;;AAWA,MAAMI,eAAe,GAAId,GAAD,IAAwB;EAC9C,MAAMd,MAAM,GAAGc,GAAG,CAACd,MAAJ,GAAa,CAA5B;;EACA,IAAIA,MAAM,IAAI,GAAd,EAAmB;IACjB,OAAOQ,UAAU,CAAC,CAACR,MAAD,CAAD,CAAV,GAAuBc,GAA9B;EACD,CAFD,MAEO,IAAId,MAAM,IAAI,KAAd,EAAqB;IAC1B,MAAM6B,CAAC,GAAG7B,MAAM,GAAG,GAAnB;IACA,OAAOQ,UAAU,CAAC,CAAC,OAAOqB,CAAC,KAAK,CAAb,CAAD,EAAkBA,CAAC,GAAG,IAAtB,CAAD,CAAV,GAA0Cf,GAAjD;EACD,CAHM,MAGA,IAAId,MAAM,IAAI,MAAd,EAAsB;IAC3B,MAAM6B,CAAC,GAAG7B,MAAM,GAAG,KAAnB;IACA,OAAOQ,UAAU,CAAC,CAAC,OAAOqB,CAAC,KAAK,EAAb,CAAD,EAAoBA,CAAC,KAAK,CAAP,GAAY,IAA/B,EAAqCA,CAAC,GAAG,IAAzC,CAAD,CAAV,GAA6Df,GAApE;EACD;;EACD,MAAM,IAAIgB,KAAJ,CAAU,4BAAV,CAAN;AACD,CAZD;;AAcaC,uCAAgCC,SAAD,IAA8B;EACxE,MAAMC,MAAM,GAAGC,sBAAWC,cAAX,CAA0B5B,QAA1B,CAAmC,EAAnC,EAAuC6B,WAAvC,EAAf;EACA,OAAOC,qBAAWJ,MAAM,GAAGD,SAApB,CAAP;AACD,CAHY;;AAKAD,iCAA0BO,MAAD,IAAwB;EAC5D,OAAOP,qCAA6BQ,6BAAOD,MAAP,CAA7B,CAAP;AACD,CAFY;;AAYAP,8CACXC,SADiD,IAEvC;EACV,MAAMC,MAAM,GAAGC,sBAAWM,gBAAX,CAA4BjC,QAA5B,CAAqC,EAArC,EAAyC6B,WAAzC,EAAf;EACA,OAAOC,qBAAWJ,MAAM,GAAGD,SAApB,CAAP;AACD,CALY;;AAoBAD,uCAAgCV,OAAD,IAA4B;EACtE,OAAOgB,qBAAWrB,cAAc,CAAC,SAAD,CAAd,GAA4BI,YAAY,CAACC,OAAD,CAAnD,CAAP;AACD,CAFY;;AAiBAU,0CAAmCV,OAAD,IAA4B;EACzE,OAAOgB,qBACLrB,cAAc,CAAC,YAAD,CAAd,GAA+BI,YAAY,CAACC,OAAD,CAA3C,GAAuD,UADlD,CAAP;AAGD,CAJY;;AAmBAU,yBAAiB,CAACV,OAAD,EAAkBoB,QAAlB,KAA8C;EAC1E,MAAMR,MAAM,GAAG,OAAO9B,QAAQ,CAACe,uBAAawB,KAAb,CAAmBvB,UAAnB,CAA8B,CAA9B,CAAD,EAAmC,CAAnC,CAA9B;EACA,OAAOkB,qBAAWJ,MAAM,GAAGb,YAAY,CAACC,OAAD,CAArB,GAAiClB,QAAQ,CAACsC,QAAD,EAAW,CAAX,CAApD,CAAP;AACD,CAHY;;AAKAV,+BAAuB,CAClCY,QADkC,EAElCC,QAFkC,EAGlCpB,QAHkC,KAIxB;EACV,MAAMqB,WAAW,GAAGzB,YAAY,CAACuB,QAAD,CAAhC;EACA,MAAMG,WAAW,GAAG1B,YAAY,CAACwB,QAAD,CAAhC;EAEA,MAAMG,IAAI,GAAG,IAAIhC,sBAAJ,CAAc8B,WAAd,EAA2B,EAA3B,EAA+BG,aAA/B,CACX,IAAIjC,sBAAJ,CAAc+B,WAAd,EAA2B,EAA3B,CADW,CAAb;EAGA,MAAMG,aAAa,GAAGF,IAAI,GAAGD,WAAH,GAAiBD,WAA3C;EACA,MAAMK,cAAc,GAAGH,IAAI,GAAGF,WAAH,GAAiBC,WAA5C;EAEA,MAAMb,MAAM,GAAGjB,cAAc,CAAC,aAAD,CAA7B;EACA,OAAOqB,qBACLJ,MAAM,GAAGgB,aAAT,GAAyBC,cAAzB,GAA0C3B,aAAa,CAACC,QAAD,CADlD,CAAP;AAGD,CAlBY;;AAoBAO,qCAA8BoB,YAAD,IAAgC;EACxE,MAAMC,MAAM,GAAG,IAAIC,eAAJ,EAAf;EAEAF,YAAY,CAACG,OAAb,CAAsBhB,MAAD,IAAW;IAC9B,MAAMN,SAAS,GAAGO,6BAAOD,MAAP,CAAlB;IACA,MAAMiB,OAAO,GAAGhB,6BAAOD,MAAM,CAACkB,QAAd,CAAhB;IACA,MAAMC,MAAM,GAAG1B,qCAA6BC,SAA7B,CAAf;IACA,MAAM0B,IAAI,GAAG9B,eAAe,CAACI,SAAD,CAAf,GAA6BJ,eAAe,CAAC2B,OAAD,CAAzD;IACAH,MAAM,CAACO,OAAP,CAAeF,MAAf,EAAuBC,IAAvB,EAA6BL,kBAASO,oBAAtC;EACD,CAND;EAQA,OAAOR,MAAM,CAACS,IAAd;AACD,CAZY;;AAcA9B,+BAAwB+B,OAAD,IAA2B;EAC7D,MAAMV,MAAM,GAAG,IAAIC,eAAJ,EAAf;EAEAS,OAAO,CAACR,OAAR,CAAiBS,WAAD,IAAgB;IAC9B,MAAML,IAAI,GAAGnB,6BAAOwB,WAAP,CAAb;IACAX,MAAM,CAACO,OAAP,CAAeI,WAAW,CAACC,KAA3B,EAAkCN,IAAlC,EAAwCL,kBAASY,aAAjD;EACD,CAHD;EAKA,OAAOb,MAAM,CAACS,IAAd;AACD,CATY;;AAYA9B,4BAAqBmC,YAAD,IAAyB;EACxD,MAAMjC,MAAM,GAAGC,sBAAWiC,MAAX,CAAkB5D,QAAlB,CAA2B,EAA3B,EAA+B6B,WAA/B,EAAf;EACA,OAAOC,qBACLJ,MAAM,GACJ9B,QAAQ,CAAC+D,YAAY,CAACE,YAAd,EAA4B,CAA5B,CADV,GAEExD,WAAW,CAACsD,YAAY,CAACG,WAAd,EAA2B,CAA3B,CAFb,GAGEH,YAAY,CAACI,WAHf,GAIEJ,YAAY,CAACK,gBAJf,GAKEL,YAAY,CAACM,YALf,GAMErE,QAAQ,CAAC+D,YAAY,CAACO,iBAAd,EAAiC,CAAjC,CANV,GAOEtE,QAAQ,CAAC+D,YAAY,CAACQ,UAAd,EAA0B,CAA1B,CAPV,GAQEvE,QAAQ,CAAC+D,YAAY,CAACS,qBAAd,EAAqC,CAArC,CARV,GASExE,QAAQ,CAAC+D,YAAY,CAACU,WAAd,EAA2B,CAA3B,CAVL,CAAP;AAYD,CAdY;;AAgBA7C,4BAAoB,CAACV,OAAD,EAAUoB,QAAV,KAA8B;EAC7D,OAAOJ,qBACLrB,cAAc,CAAC,QAAD,CAAd,GAA2BI,YAAY,CAACC,OAAD,CAAvC,GAAmDlB,QAAQ,CAACsC,QAAD,EAAW,CAAX,CADtD,CAAP;AAGD,CAJY;;AAMAV,oCAA4B,CACvCV,OADuC,EAEvCwD,UAFuC,EAGvCpC,QAHuC,KAI7B;EACV,OAAOJ,qBACLrB,cAAc,CAAC,SAAD,CAAd,GACEI,YAAY,CAACC,OAAD,CADd,GAEED,YAAY,CAACyD,UAAD,CAFd,GAGE1E,QAAQ,CAACsC,QAAD,EAAW,CAAX,CAJL,CAAP;AAMD,CAXY","names":["padLeftZero","string","length","Array","join","intToHex","integer","byteLength","Number","toString","bytesToHex","bytes","Buffer","from","bigintToHex","integerString","hex","bignumber_js_1","ledgerSpaceHex","name","ledgerspaces_1","charCodeAt","addressToHex","address","ripple_address_codec_1","currencyToHex","currency","split","map","parseFloat","addLengthPrefix","x","Error","exports","txBlobHex","prefix","hash_prefix_1","TRANSACTION_ID","toUpperCase","sha512Half_1","txJSON","ripple_binary_codec_1","TRANSACTION_SIGN","sequence","offer","address1","address2","address1Hex","address2Hex","swap","isGreaterThan","lowAddressHex","highAddressHex","transactions","shamap","shamap_1","forEach","metaHex","metaData","txHash","data","addItem","TRANSACTION_METADATA","hash","entries","ledgerEntry","index","ACCOUNT_STATE","ledgerHeader","LEDGER","ledger_index","total_coins","parent_hash","transaction_hash","account_hash","parent_close_time","close_time","close_time_resolution","close_flags","dstAddress"],"sourceRoot":"","sources":["../../../../src/common/hashes/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}