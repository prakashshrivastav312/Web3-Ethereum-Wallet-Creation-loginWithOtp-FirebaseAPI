{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.chooseProvider = exports.getProviders = exports.setupInteractiveWithProvider = exports.setupInteractive = void 0;\n\nconst _1 = require(\".\");\n\nconst testutils_1 = require(\"./testutils\");\n\nfunction setupInteractive(providerChoice) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let provider = chooseProvider(providerChoice);\n    return yield setupInteractiveWithProvider(provider);\n  });\n}\n\nexports.setupInteractive = setupInteractive;\n\nfunction setupInteractiveWithProvider(provider) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield _1.NetworkConfig.getDefault().sync(provider);\n    let wallets = yield testutils_1.loadAndSyncTestWallets(provider);\n    let erdSys = yield _1.SystemWrapper.load(provider);\n    return {\n      erdSys,\n      Egld: _1.Egld,\n      wallets\n    };\n  });\n}\n\nexports.setupInteractiveWithProvider = setupInteractiveWithProvider;\n\nfunction getProviders() {\n  return {\n    \"local-testnet\": new _1.ProxyProvider(\"http://localhost:7950\", {\n      timeout: 5000\n    }),\n    \"elrond-testnet\": new _1.ProxyProvider(\"https://testnet-gateway.elrond.com\", {\n      timeout: 5000\n    }),\n    \"elrond-devnet\": new _1.ProxyProvider(\"https://devnet-gateway.elrond.com\", {\n      timeout: 5000\n    }),\n    \"elrond-mainnet\": new _1.ProxyProvider(\"https://gateway.elrond.com\", {\n      timeout: 20000\n    })\n  };\n}\n\nexports.getProviders = getProviders;\n\nfunction chooseProvider(providerChoice) {\n  let providers = getProviders();\n\n  if (providerChoice in providers) {\n    return providers[providerChoice];\n  }\n\n  throw new _1.ErrInvalidArgument(`providerChoice is not recognized (must be one of: ${Object.keys(providers)})`);\n}\n\nexports.chooseProvider = chooseProvider;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAIA,SAAsBA,gBAAtB,CAAuCC,cAAvC,EAA6D;;IACzD,IAAIC,QAAQ,GAAGC,cAAc,CAACF,cAAD,CAA7B;IACA,OAAO,MAAMG,4BAA4B,CAACF,QAAD,CAAzC;EACH;AAAA;;AAHDG;;AAKA,SAAsBD,4BAAtB,CAAmDF,QAAnD,EAAsE;;IAClE,MAAMI,iBAAcC,UAAd,GAA2BC,IAA3B,CAAgCN,QAAhC,CAAN;IACA,IAAIO,OAAO,GAAG,MAAMC,mCAAuBR,QAAvB,CAApB;IACA,IAAIS,MAAM,GAAG,MAAML,iBAAcM,IAAd,CAAmBV,QAAnB,CAAnB;IACA,OAAO;MAAES,MAAF;MAAUE,IAAI,EAAJP,OAAV;MAAgBG;IAAhB,CAAP;EACH;AAAA;;AALDJ;;AAOA,SAAgBS,YAAhB,GAA4B;EACxB,OAAO;IACH,iBAAiB,IAAIR,gBAAJ,CAAkB,uBAAlB,EAA2C;MAAES,OAAO,EAAE;IAAX,CAA3C,CADd;IAEH,kBAAkB,IAAIT,gBAAJ,CAAkB,oCAAlB,EAAwD;MAAES,OAAO,EAAE;IAAX,CAAxD,CAFf;IAGH,iBAAiB,IAAIT,gBAAJ,CAAkB,mCAAlB,EAAuD;MAAES,OAAO,EAAE;IAAX,CAAvD,CAHd;IAIH,kBAAkB,IAAIT,gBAAJ,CAAkB,4BAAlB,EAAgD;MAAES,OAAO,EAAE;IAAX,CAAhD;EAJf,CAAP;AAMH;;AAPDV;;AASA,SAAgBF,cAAhB,CAA+BF,cAA/B,EAAqD;EACjD,IAAIe,SAAS,GAAGF,YAAY,EAA5B;;EACA,IAAIb,cAAc,IAAIe,SAAtB,EAAiC;IAC7B,OAAOA,SAAS,CAACf,cAAD,CAAhB;EACH;;EACD,MAAM,IAAIK,qBAAJ,CAAuB,qDAAqDW,MAAM,CAACC,IAAP,CAAYF,SAAZ,CAAsB,GAAlG,CAAN;AACH;;AANDX","names":["setupInteractive","providerChoice","provider","chooseProvider","setupInteractiveWithProvider","exports","_1","getDefault","sync","wallets","testutils_1","erdSys","load","Egld","getProviders","timeout","providers","Object","keys"],"sourceRoot":"","sources":["../src/interactive.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}