{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Comparable = exports.SerializedType = void 0;\n\nvar binary_serializer_1 = require(\"../serdes/binary-serializer\");\n\nvar buffer_1 = require(\"buffer/\");\n/**\n * The base class for all binary-codec types\n */\n\n\nvar SerializedType =\n/** @class */\nfunction () {\n  function SerializedType(bytes) {\n    this.bytes = buffer_1.Buffer.alloc(0);\n    this.bytes = bytes !== null && bytes !== void 0 ? bytes : buffer_1.Buffer.alloc(0);\n  }\n\n  SerializedType.fromParser = function (parser, hint) {\n    throw new Error('fromParser not implemented');\n    return this.fromParser(parser, hint);\n  };\n\n  SerializedType.from = function (value) {\n    throw new Error('from not implemented');\n    return this.from(value);\n  };\n  /**\n   * Write the bytes representation of a SerializedType to a BytesList\n   *\n   * @param list The BytesList to write SerializedType bytes to\n   */\n\n\n  SerializedType.prototype.toBytesSink = function (list) {\n    list.put(this.bytes);\n  };\n  /**\n   * Get the hex representation of a SerializedType's bytes\n   *\n   * @returns hex String of this.bytes\n   */\n\n\n  SerializedType.prototype.toHex = function () {\n    return this.toBytes().toString('hex').toUpperCase();\n  };\n  /**\n   * Get the bytes representation of a SerializedType\n   *\n   * @returns A buffer of the bytes\n   */\n\n\n  SerializedType.prototype.toBytes = function () {\n    if (this.bytes) {\n      return this.bytes;\n    }\n\n    var bytes = new binary_serializer_1.BytesList();\n    this.toBytesSink(bytes);\n    return bytes.toBytes();\n  };\n  /**\n   * Return the JSON representation of a SerializedType\n   *\n   * @returns any type, if not overloaded returns hexString representation of bytes\n   */\n\n\n  SerializedType.prototype.toJSON = function () {\n    return this.toHex();\n  };\n  /**\n   * @returns hexString representation of this.bytes\n   */\n\n\n  SerializedType.prototype.toString = function () {\n    return this.toHex();\n  };\n\n  return SerializedType;\n}();\n\nexports.SerializedType = SerializedType;\n/**\n * Base class for SerializedTypes that are comparable\n */\n\nvar Comparable =\n/** @class */\nfunction (_super) {\n  __extends(Comparable, _super);\n\n  function Comparable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Comparable.prototype.lt = function (other) {\n    return this.compareTo(other) < 0;\n  };\n\n  Comparable.prototype.eq = function (other) {\n    return this.compareTo(other) === 0;\n  };\n\n  Comparable.prototype.gt = function (other) {\n    return this.compareTo(other) > 0;\n  };\n\n  Comparable.prototype.gte = function (other) {\n    return this.compareTo(other) > -1;\n  };\n\n  Comparable.prototype.lte = function (other) {\n    return this.compareTo(other) < 1;\n  };\n  /**\n   * Overload this method to define how two Comparable SerializedTypes are compared\n   *\n   * @param other The comparable object to compare this to\n   * @returns A number denoting the relationship of this and other\n   */\n\n\n  Comparable.prototype.compareTo = function (other) {\n    throw new Error(\"cannot compare \".concat(this.toString(), \" and \").concat(other.toString()));\n  };\n\n  return Comparable;\n}(SerializedType);\n\nexports.Comparable = Comparable;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA;AAMA;;;;;AAGA;AAAA;AAAA;EAGE,wBAAYA,KAAZ,EAAyB;IAFN,aAAgBC,gBAAOC,KAAP,CAAa,CAAb,CAAhB;IAGjB,KAAKF,KAAL,GAAaA,KAAK,SAAL,SAAK,WAAL,WAASC,gBAAOC,KAAP,CAAa,CAAb,CAAtB;EACD;;EAEMC,4BAAP,UAAkBC,MAAlB,EAAwCC,IAAxC,EAAqD;IACnD,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;IACA,OAAO,KAAKC,UAAL,CAAgBH,MAAhB,EAAwBC,IAAxB,CAAP;EACD,CAHM;;EAKAF,sBAAP,UACEK,KADF,EACkD;IAEhD,MAAM,IAAIF,KAAJ,CAAU,sBAAV,CAAN;IACA,OAAO,KAAKG,IAAL,CAAUD,KAAV,CAAP;EACD,CALM;EAOP;;;;;;;EAKAL,iDAAYO,IAAZ,EAA2B;IACzBA,IAAI,CAACC,GAAL,CAAS,KAAKX,KAAd;EACD,CAFD;EAIA;;;;;;;EAKAG;IACE,OAAO,KAAKS,OAAL,GAAeC,QAAf,CAAwB,KAAxB,EAA+BC,WAA/B,EAAP;EACD,CAFD;EAIA;;;;;;;EAKAX;IACE,IAAI,KAAKH,KAAT,EAAgB;MACd,OAAO,KAAKA,KAAZ;IACD;;IACD,IAAMA,KAAK,GAAG,IAAIe,6BAAJ,EAAd;IACA,KAAKC,WAAL,CAAiBhB,KAAjB;IACA,OAAOA,KAAK,CAACY,OAAN,EAAP;EACD,CAPD;EASA;;;;;;;EAKAT;IACE,OAAO,KAAKc,KAAL,EAAP;EACD,CAFD;EAIA;;;;;EAGAd;IACE,OAAO,KAAKc,KAAL,EAAP;EACD,CAFD;;EAGF;AAAC,CAlED;;AAuGSC;AAnCT;;;;AAGA;AAAA;AAAA;EAAyBC;;EAAzB;;EA8BC;;EA7BCC,oCAAGC,KAAH,EAAoB;IAClB,OAAO,KAAKC,SAAL,CAAeD,KAAf,IAAwB,CAA/B;EACD,CAFD;;EAIAD,oCAAGC,KAAH,EAAoB;IAClB,OAAO,KAAKC,SAAL,CAAeD,KAAf,MAA0B,CAAjC;EACD,CAFD;;EAIAD,oCAAGC,KAAH,EAAoB;IAClB,OAAO,KAAKC,SAAL,CAAeD,KAAf,IAAwB,CAA/B;EACD,CAFD;;EAIAD,qCAAIC,KAAJ,EAAqB;IACnB,OAAO,KAAKC,SAAL,CAAeD,KAAf,IAAwB,CAAC,CAAhC;EACD,CAFD;;EAIAD,qCAAIC,KAAJ,EAAqB;IACnB,OAAO,KAAKC,SAAL,CAAeD,KAAf,IAAwB,CAA/B;EACD,CAFD;EAIA;;;;;;;;EAMAD,2CAAUC,KAAV,EAA2B;IACzB,MAAM,IAAIf,KAAJ,CAAU,yBAAkB,KAAKO,QAAL,EAAlB,EAAiC,OAAjC,EAAiCU,MAAjC,CAAyCF,KAAK,CAACR,QAAN,EAAzC,CAAV,CAAN;EACD,CAFD;;EAGF;AAAC,CA9BD,CAAyBV,cAAzB;;AAgCyBe","names":["bytes","buffer_1","alloc","SerializedType","parser","hint","Error","fromParser","value","from","list","put","toBytes","toString","toUpperCase","binary_serializer_1","toBytesSink","toHex","exports","__extends","Comparable","other","compareTo","concat"],"sourceRoot":"","sources":["../../src/types/serialized-type.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}