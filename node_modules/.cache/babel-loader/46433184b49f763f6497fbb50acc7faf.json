{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccount = createAccount;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Create and fund a non existent account.\n * @function\n * @alias Operation.createAccount\n * @param {object} opts Options object\n * @param {string} opts.destination - Destination account ID to create an account for.\n * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater\n *                                   than the [reserve balance amount](https://developers.stellar.org/docs/glossary/fees/).\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.CreateAccountOp} Create account operation\n */\n\n\nfunction createAccount(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n\n  if (!this.isValidAmount(opts.startingBalance, true)) {\n    throw new TypeError('startingBalance must be of type String, represent a non-negative number and have at most 7 digits after the decimal');\n  }\n\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.startingBalance = this._toXDRAmount(opts.startingBalance);\n  var createAccountOp = new _stellarXdr_generated2.default.CreateAccountOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.createAccount(createAccountOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createAccount","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_keypair","_strkey","obj","__esModule","default","opts","StrKey","isValidEd25519PublicKey","destination","Error","isValidAmount","startingBalance","TypeError","attributes","Keypair","fromPublicKey","xdrAccountId","_toXDRAmount","createAccountOp","CreateAccountOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operations/create_account.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccount = createAccount;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create and fund a non existent account.\n * @function\n * @alias Operation.createAccount\n * @param {object} opts Options object\n * @param {string} opts.destination - Destination account ID to create an account for.\n * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater\n *                                   than the [reserve balance amount](https://developers.stellar.org/docs/glossary/fees/).\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.CreateAccountOp} Create account operation\n */\nfunction createAccount(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n  if (!this.isValidAmount(opts.startingBalance, true)) {\n    throw new TypeError('startingBalance must be of type String, represent a non-negative number and have at most 7 digits after the decimal');\n  }\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.startingBalance = this._toXDRAmount(opts.startingBalance);\n  var createAccountOp = new _stellarXdr_generated2.default.CreateAccountOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.createAccount(createAccountOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,oCAAD,CAAnC;;AAEA,IAAIC,sBAAsB,GAAGC,sBAAsB,CAACH,qBAAD,CAAnD;;AAEA,IAAII,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAD,CAArB;;AAEA,SAASE,sBAAT,CAAgCG,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEE,OAAO,EAAEF;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,aAAT,CAAuBU,IAAvB,EAA6B;EAC3B,IAAI,CAACJ,OAAO,CAACK,MAAR,CAAeC,uBAAf,CAAuCF,IAAI,CAACG,WAA5C,CAAL,EAA+D;IAC7D,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;EACD;;EACD,IAAI,CAAC,KAAKC,aAAL,CAAmBL,IAAI,CAACM,eAAxB,EAAyC,IAAzC,CAAL,EAAqD;IACnD,MAAM,IAAIC,SAAJ,CAAc,qHAAd,CAAN;EACD;;EACD,IAAIC,UAAU,GAAG,EAAjB;EACAA,UAAU,CAACL,WAAX,GAAyBR,QAAQ,CAACc,OAAT,CAAiBC,aAAjB,CAA+BV,IAAI,CAACG,WAApC,EAAiDQ,YAAjD,EAAzB;EACAH,UAAU,CAACF,eAAX,GAA6B,KAAKM,YAAL,CAAkBZ,IAAI,CAACM,eAAvB,CAA7B;EACA,IAAIO,eAAe,GAAG,IAAIpB,sBAAsB,CAACM,OAAvB,CAA+Be,eAAnC,CAAmDN,UAAnD,CAAtB;EAEA,IAAIO,YAAY,GAAG,EAAnB;EACAA,YAAY,CAACC,IAAb,GAAoBvB,sBAAsB,CAACM,OAAvB,CAA+BkB,aAA/B,CAA6C3B,aAA7C,CAA2DuB,eAA3D,CAApB;EACA,KAAKK,gBAAL,CAAsBH,YAAtB,EAAoCf,IAApC;EAEA,OAAO,IAAIP,sBAAsB,CAACM,OAAvB,CAA+BoB,SAAnC,CAA6CJ,YAA7C,CAAP;AACD"},"metadata":{},"sourceType":"script"}