{"ast":null,"code":"'use strict';\n\nconst varint = require('varint');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nmodule.exports = {\n  numberToUint8Array,\n  uint8ArrayToNumber,\n  varintUint8ArrayEncode,\n  varintEncode\n};\n/**\n * @param {Uint8Array} buf\n */\n\nfunction uint8ArrayToNumber(buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16);\n}\n/**\n * @param {number} num\n */\n\n\nfunction numberToUint8Array(num) {\n  let hexString = num.toString(16);\n\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString;\n  }\n\n  return uint8ArrayFromString(hexString, 'base16');\n}\n/**\n * @param {Uint8Array} input\n */\n\n\nfunction varintUint8ArrayEncode(input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)));\n}\n/**\n * @param {number} num\n */\n\n\nfunction varintEncode(num) {\n  return Uint8Array.from(varint.encode(num));\n}","map":{"version":3,"names":["varint","require","toString","uint8ArrayToString","fromString","uint8ArrayFromString","module","exports","numberToUint8Array","uint8ArrayToNumber","varintUint8ArrayEncode","varintEncode","buf","parseInt","num","hexString","length","input","Uint8Array","from","encode"],"sources":["C:/Users/acer/node_modules/multicodec/src/util.js"],"sourcesContent":["'use strict'\n\nconst varint = require('varint')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nmodule.exports = {\n  numberToUint8Array,\n  uint8ArrayToNumber,\n  varintUint8ArrayEncode,\n  varintEncode\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction uint8ArrayToNumber (buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16)\n}\n\n/**\n * @param {number} num\n */\nfunction numberToUint8Array (num) {\n  let hexString = num.toString(16)\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString\n  }\n  return uint8ArrayFromString(hexString, 'base16')\n}\n\n/**\n * @param {Uint8Array} input\n */\nfunction varintUint8ArrayEncode (input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))\n}\n\n/**\n * @param {number} num\n */\nfunction varintEncode (num) {\n  return Uint8Array.from(varint.encode(num))\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;EAAEC,QAAQ,EAAEC;AAAZ,IAAmCF,OAAO,CAAC,uBAAD,CAAhD;;AACA,MAAM;EAAEG,UAAU,EAAEC;AAAd,IAAuCJ,OAAO,CAAC,yBAAD,CAApD;;AAEAK,MAAM,CAACC,OAAP,GAAiB;EACfC,kBADe;EAEfC,kBAFe;EAGfC,sBAHe;EAIfC;AAJe,CAAjB;AAOA;AACA;AACA;;AACA,SAASF,kBAAT,CAA6BG,GAA7B,EAAkC;EAChC,OAAOC,QAAQ,CAACV,kBAAkB,CAACS,GAAD,EAAM,QAAN,CAAnB,EAAoC,EAApC,CAAf;AACD;AAED;AACA;AACA;;;AACA,SAASJ,kBAAT,CAA6BM,GAA7B,EAAkC;EAChC,IAAIC,SAAS,GAAGD,GAAG,CAACZ,QAAJ,CAAa,EAAb,CAAhB;;EACA,IAAIa,SAAS,CAACC,MAAV,GAAmB,CAAnB,KAAyB,CAA7B,EAAgC;IAC9BD,SAAS,GAAG,MAAMA,SAAlB;EACD;;EACD,OAAOV,oBAAoB,CAACU,SAAD,EAAY,QAAZ,CAA3B;AACD;AAED;AACA;AACA;;;AACA,SAASL,sBAAT,CAAiCO,KAAjC,EAAwC;EACtC,OAAOC,UAAU,CAACC,IAAX,CAAgBnB,MAAM,CAACoB,MAAP,CAAcX,kBAAkB,CAACQ,KAAD,CAAhC,CAAhB,CAAP;AACD;AAED;AACA;AACA;;;AACA,SAASN,YAAT,CAAuBG,GAAvB,EAA4B;EAC1B,OAAOI,UAAU,CAACC,IAAX,CAAgBnB,MAAM,CAACoB,MAAP,CAAcN,GAAd,CAAhB,CAAP;AACD"},"metadata":{},"sourceType":"script"}