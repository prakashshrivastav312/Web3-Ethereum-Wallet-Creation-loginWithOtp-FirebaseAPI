{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig');\n\nconst AccountKeyLegacy = require('./accountKeyLegacy');\n\nconst AccountKeyPublic = require('./accountKeyPublic');\n\nconst AccountKeyFail = require('./accountKeyFail');\n\nconst utils = require('../../../caver-utils');\n\nconst {\n  ACCOUNT_KEY_TAG\n} = require('./accountKeyHelper');\n\nconst {\n  KEY_ROLE\n} = require('../../../caver-wallet/src/keyring/keyringHelper');\n\nconst WeightedMultiSigOptions = require('./weightedMultiSigOptions');\n\nfunction isValidRoleBasedKeyFormat(roleBasedAccountKeys) {\n  if (!_.isArray(roleBasedAccountKeys)) return false;\n  if (roleBasedAccountKeys.length > KEY_ROLE.roleLast) return false;\n\n  for (const accountKey of roleBasedAccountKeys) {\n    if (accountKey !== undefined && !(accountKey instanceof AccountKeyLegacy) && !(accountKey instanceof AccountKeyPublic) && !(accountKey instanceof AccountKeyFail) && !(accountKey instanceof AccountKeyWeightedMultiSig)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Representing an AccountKeyRoleBased.\n * @class\n * @hideconstructor\n */\n\n\nclass AccountKeyRoleBased {\n  /**\n   * Decodes an RLP-encoded AccountKeyRoleBased string.\n   *\n   * @example\n   * const accountKey = caver.account.accountKey.accountKeyRoleBased.decode('0x{encoded account key}')\n   *\n   * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyRoleBased string.\n   * @return {AccountKeyRoleBased}\n   */\n  static decode(rlpEncodedKey) {\n    rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n    if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error(`Cannot decode to AccountKeyRoleBased. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG}: ${rlpEncodedKey}`);\n    const keys = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG.length)}`);\n    const accountKeys = [];\n\n    for (const key of keys) {\n      if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.');\n\n      if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG)) {\n        accountKeys.push(undefined);\n      } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\n        accountKeys.push(AccountKeyLegacy.decode(key));\n      } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\n        accountKeys.push(AccountKeyPublic.decode(key));\n      } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\n        accountKeys.push(AccountKeyFail.decode(key));\n      } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n        accountKeys.push(AccountKeyWeightedMultiSig.decode(key));\n      } else {\n        throw new Error(`Failed to decode RLP-encoded account key. Invalid RLP-encoded account key ${key}`);\n      }\n    }\n\n    return new AccountKeyRoleBased(accountKeys);\n  }\n  /**\n   * Creates an instance of AccountKeyRoleBased.\n   *\n   * @example\n   * const publicKeyArray = [\n   *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\n   *      [ '0x{public key3}', '0x{public key4}', '0x{public key5}' ], // roleAccountUpdateKey\n   *      [ '0x{public key6}', '0x{public key7}', '0x{public key8}', '0x{public key9}' ], // roleFeePayerKey\n   * ]\n   * // For option object, you can use `new caver.account.weightedMultiSigOptions(2, [1, 1])`\n   * // instead of `{ threshold: 2, weights: [1, 1] }`.\n   * const options = [\n   *      { threshold: 2, weights: [1, 1] },\n   *      { threshold: 2, weights: [1, 1, 2] },\n   *      { threshold: 3, weights: [1, 1, 2, 2] }\n   * ]\n   * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArray, options)\n   *\n   * // Update only roleTransactionKey and roleFeePayerKey\n   * const publicKeyArrayToUpdatePartial = [\n   *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\n   *      [], // roleAccountUpdateKey -> If not defined the key(s) to use in the specific role, this role key is not updated.\n   *      [ '0x{public key3}', '0x{public key4}' ], // roleFeePayerKey\n   * ]\n   * const options = [\n   *      { threshold: 2, weights: [1, 1] },\n   *      {},\n   *      { threshold: 3, weights: [1, 2] }\n   * ]\n   * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArrayToUpdatePartial, options)\n   *\n   * // Update to AccountKeyLegacy or AccountKeyFail\n   * const publicKeyArrayWithLegacyAndFail = [\n   *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\n   *      [ new caver.account.accountKey.accountKeyLegacy() ], // roleAccountUpdateKey will use AccountKeyLegacy when update an account key of the Klaytn account.\n   *      [ new caver.account.accountKey.accountKeyFail() ], // roleFeePayerKey will be updated to AccountKeyFail, so this Klaytn account cannot pay a fee as a fee payer.\n   * ]\n   * const options = [\n   *      { threshold: 2, weights: [1, 1] },\n   *      {},\n   *      {}\n   * ]\n   * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArrayWithLegacyAndFail, options)\n   *\n   * @param {Array.<AccountKeyLegacy|AccountKeyFail|Array.<string>>} roleBasedPubArray - An array of public key strings.\n   * @param {Array.<WeightedMultiSigOptions|object>} options - An array of options which defines threshold and weight.\n   * @return {AccountKeyRoleBased}\n   */\n\n\n  static fromRoleBasedPublicKeysAndOptions(roleBasedPubArray, options) {\n    if (!options) options = Array(KEY_ROLE.roleLast).fill(new WeightedMultiSigOptions());\n    const accountKeys = []; // Format will be like below\n    // keyArray = [[pub, pub], [pub], [pub, pub, pub]]\n    // keyArray = [[accountKeyLegacy], [accountKeyFail], [pub, pub, pub]]\n    // keyArray = [['legacy'], ['fail'], []]\n    // options = [{threshold: 1, weights: [1,1]}, {}, {threshold: 1, weights: [1,1,1]}]\n\n    for (let i = 0; i < roleBasedPubArray.length; i++) {\n      if (!(options[i] instanceof WeightedMultiSigOptions)) options[i] = WeightedMultiSigOptions.fromObject(options[i]); // To handle instance of AccountKeyLegacy or AccountKeyFail\n\n      if (!_.isArray(roleBasedPubArray[i])) {\n        throw new Error(`Invalid format of keys: Each role should define the key to use in an array form.`);\n      } // Empty key array means AccountKeyNil\n\n\n      if (roleBasedPubArray[i].length === 0) {\n        if (!options[i].isEmpty()) throw new Error(`Invalid options: AccountKeyNil cannot have options.`);\n        accountKeys.push(undefined);\n        continue;\n      }\n\n      if (roleBasedPubArray[i].length === 1) {\n        if (roleBasedPubArray[i][0] instanceof AccountKeyLegacy || roleBasedPubArray[i][0] instanceof AccountKeyFail || roleBasedPubArray[i][0] === 'legacy' || roleBasedPubArray[i][0] === 'fail') {\n          if (!options[i].isEmpty()) throw new Error(`Invalid options: AccountKeyLegacy or AccountKeyFail cannot have options.`);\n          if (roleBasedPubArray[i][0] === 'legacy') roleBasedPubArray[i][0] = new AccountKeyLegacy();\n          if (roleBasedPubArray[i][0] === 'fail') roleBasedPubArray[i][0] = new AccountKeyFail();\n          accountKeys.push(roleBasedPubArray[i][0]);\n          continue;\n        }\n\n        if (options[i].isEmpty()) {\n          accountKeys.push(AccountKeyPublic.fromPublicKey(roleBasedPubArray[i][0]));\n          continue;\n        }\n      }\n\n      accountKeys.push(AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(roleBasedPubArray[i], options[i]));\n    }\n\n    return new AccountKeyRoleBased(accountKeys);\n  }\n  /**\n   * Create an instance of AccountKeyRoleBased.\n   * @param {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>} accountKeyArray - An array containing arrays of instances of AccountKeyPublic or AccountKeyWeightedMultiSig for each role.\n   */\n\n\n  constructor(accountKeyArray) {\n    this.accountKeys = accountKeyArray;\n  }\n  /**\n   * @type {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>}\n   */\n\n\n  get accountKeys() {\n    return this._accountKeys;\n  }\n\n  set accountKeys(keys) {\n    if (!isValidRoleBasedKeyFormat(keys)) throw new Error(`Invalid role-based account key format.`);\n    this._accountKeys = keys;\n  }\n  /**\n   * Returns an RLP-encoded AccountKeyRoleBased string.\n   *\n   * @example\n   * const encoding = accountKeyRoleBased.getRLPEncoding()\n   *\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    const encodedAccountKeys = [];\n\n    for (const accountKey of this.accountKeys) {\n      if (accountKey === undefined) {\n        encodedAccountKeys.push(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG);\n        continue;\n      }\n\n      encodedAccountKeys.push(accountKey.getRLPEncoding());\n    }\n\n    return ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(encodedAccountKeys).slice(2);\n  }\n\n}\n\nmodule.exports = AccountKeyRoleBased;","map":{"version":3,"names":["_","require","RLP","AccountKeyWeightedMultiSig","AccountKeyLegacy","AccountKeyPublic","AccountKeyFail","utils","ACCOUNT_KEY_TAG","KEY_ROLE","WeightedMultiSigOptions","isValidRoleBasedKeyFormat","roleBasedAccountKeys","isArray","length","roleLast","accountKey","undefined","AccountKeyRoleBased","decode","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_ROLE_BASED_TAG","Error","keys","slice","accountKeys","key","ACCOUNT_KEY_NIL_TAG","push","ACCOUNT_KEY_LEGACY_TAG","ACCOUNT_KEY_PUBLIC_TAG","ACCOUNT_KEY_FAIL_TAG","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","fromRoleBasedPublicKeysAndOptions","roleBasedPubArray","options","Array","fill","i","fromObject","isEmpty","fromPublicKey","fromPublicKeysAndOptions","constructor","accountKeyArray","_accountKeys","getRLPEncoding","encodedAccountKeys","encode","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyRoleBased.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig')\nconst AccountKeyLegacy = require('./accountKeyLegacy')\nconst AccountKeyPublic = require('./accountKeyPublic')\nconst AccountKeyFail = require('./accountKeyFail')\nconst utils = require('../../../caver-utils')\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\nconst { KEY_ROLE } = require('../../../caver-wallet/src/keyring/keyringHelper')\nconst WeightedMultiSigOptions = require('./weightedMultiSigOptions')\n\nfunction isValidRoleBasedKeyFormat(roleBasedAccountKeys) {\n    if (!_.isArray(roleBasedAccountKeys)) return false\n    if (roleBasedAccountKeys.length > KEY_ROLE.roleLast) return false\n\n    for (const accountKey of roleBasedAccountKeys) {\n        if (\n            accountKey !== undefined &&\n            !(accountKey instanceof AccountKeyLegacy) &&\n            !(accountKey instanceof AccountKeyPublic) &&\n            !(accountKey instanceof AccountKeyFail) &&\n            !(accountKey instanceof AccountKeyWeightedMultiSig)\n        ) {\n            return false\n        }\n    }\n    return true\n}\n\n/**\n * Representing an AccountKeyRoleBased.\n * @class\n * @hideconstructor\n */\nclass AccountKeyRoleBased {\n    /**\n     * Decodes an RLP-encoded AccountKeyRoleBased string.\n     *\n     * @example\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.decode('0x{encoded account key}')\n     *\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyRoleBased string.\n     * @return {AccountKeyRoleBased}\n     */\n    static decode(rlpEncodedKey) {\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG))\n            throw new Error(\n                `Cannot decode to AccountKeyRoleBased. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG}: ${rlpEncodedKey}`\n            )\n\n        const keys = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG.length)}`)\n        const accountKeys = []\n        for (const key of keys) {\n            if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.')\n            if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG)) {\n                accountKeys.push(undefined)\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\n                accountKeys.push(AccountKeyLegacy.decode(key))\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\n                accountKeys.push(AccountKeyPublic.decode(key))\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\n                accountKeys.push(AccountKeyFail.decode(key))\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n                accountKeys.push(AccountKeyWeightedMultiSig.decode(key))\n            } else {\n                throw new Error(`Failed to decode RLP-encoded account key. Invalid RLP-encoded account key ${key}`)\n            }\n        }\n        return new AccountKeyRoleBased(accountKeys)\n    }\n\n    /**\n     * Creates an instance of AccountKeyRoleBased.\n     *\n     * @example\n     * const publicKeyArray = [\n     *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\n     *      [ '0x{public key3}', '0x{public key4}', '0x{public key5}' ], // roleAccountUpdateKey\n     *      [ '0x{public key6}', '0x{public key7}', '0x{public key8}', '0x{public key9}' ], // roleFeePayerKey\n     * ]\n     * // For option object, you can use `new caver.account.weightedMultiSigOptions(2, [1, 1])`\n     * // instead of `{ threshold: 2, weights: [1, 1] }`.\n     * const options = [\n     *      { threshold: 2, weights: [1, 1] },\n     *      { threshold: 2, weights: [1, 1, 2] },\n     *      { threshold: 3, weights: [1, 1, 2, 2] }\n     * ]\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArray, options)\n     *\n     * // Update only roleTransactionKey and roleFeePayerKey\n     * const publicKeyArrayToUpdatePartial = [\n     *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\n     *      [], // roleAccountUpdateKey -> If not defined the key(s) to use in the specific role, this role key is not updated.\n     *      [ '0x{public key3}', '0x{public key4}' ], // roleFeePayerKey\n     * ]\n     * const options = [\n     *      { threshold: 2, weights: [1, 1] },\n     *      {},\n     *      { threshold: 3, weights: [1, 2] }\n     * ]\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArrayToUpdatePartial, options)\n     *\n     * // Update to AccountKeyLegacy or AccountKeyFail\n     * const publicKeyArrayWithLegacyAndFail = [\n     *      [ '0x{public key1}', '0x{public key2}' ], // roleTransactionKey\n     *      [ new caver.account.accountKey.accountKeyLegacy() ], // roleAccountUpdateKey will use AccountKeyLegacy when update an account key of the Klaytn account.\n     *      [ new caver.account.accountKey.accountKeyFail() ], // roleFeePayerKey will be updated to AccountKeyFail, so this Klaytn account cannot pay a fee as a fee payer.\n     * ]\n     * const options = [\n     *      { threshold: 2, weights: [1, 1] },\n     *      {},\n     *      {}\n     * ]\n     * const accountKey = caver.account.accountKey.accountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(publicKeyArrayWithLegacyAndFail, options)\n     *\n     * @param {Array.<AccountKeyLegacy|AccountKeyFail|Array.<string>>} roleBasedPubArray - An array of public key strings.\n     * @param {Array.<WeightedMultiSigOptions|object>} options - An array of options which defines threshold and weight.\n     * @return {AccountKeyRoleBased}\n     */\n    static fromRoleBasedPublicKeysAndOptions(roleBasedPubArray, options) {\n        if (!options) options = Array(KEY_ROLE.roleLast).fill(new WeightedMultiSigOptions())\n\n        const accountKeys = []\n        // Format will be like below\n        // keyArray = [[pub, pub], [pub], [pub, pub, pub]]\n        // keyArray = [[accountKeyLegacy], [accountKeyFail], [pub, pub, pub]]\n        // keyArray = [['legacy'], ['fail'], []]\n        // options = [{threshold: 1, weights: [1,1]}, {}, {threshold: 1, weights: [1,1,1]}]\n        for (let i = 0; i < roleBasedPubArray.length; i++) {\n            if (!(options[i] instanceof WeightedMultiSigOptions)) options[i] = WeightedMultiSigOptions.fromObject(options[i])\n\n            // To handle instance of AccountKeyLegacy or AccountKeyFail\n            if (!_.isArray(roleBasedPubArray[i])) {\n                throw new Error(`Invalid format of keys: Each role should define the key to use in an array form.`)\n            }\n\n            // Empty key array means AccountKeyNil\n            if (roleBasedPubArray[i].length === 0) {\n                if (!options[i].isEmpty()) throw new Error(`Invalid options: AccountKeyNil cannot have options.`)\n                accountKeys.push(undefined)\n                continue\n            }\n\n            if (roleBasedPubArray[i].length === 1) {\n                if (\n                    roleBasedPubArray[i][0] instanceof AccountKeyLegacy ||\n                    roleBasedPubArray[i][0] instanceof AccountKeyFail ||\n                    roleBasedPubArray[i][0] === 'legacy' ||\n                    roleBasedPubArray[i][0] === 'fail'\n                ) {\n                    if (!options[i].isEmpty()) throw new Error(`Invalid options: AccountKeyLegacy or AccountKeyFail cannot have options.`)\n\n                    if (roleBasedPubArray[i][0] === 'legacy') roleBasedPubArray[i][0] = new AccountKeyLegacy()\n                    if (roleBasedPubArray[i][0] === 'fail') roleBasedPubArray[i][0] = new AccountKeyFail()\n\n                    accountKeys.push(roleBasedPubArray[i][0])\n                    continue\n                }\n                if (options[i].isEmpty()) {\n                    accountKeys.push(AccountKeyPublic.fromPublicKey(roleBasedPubArray[i][0]))\n                    continue\n                }\n            }\n\n            accountKeys.push(AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(roleBasedPubArray[i], options[i]))\n        }\n        return new AccountKeyRoleBased(accountKeys)\n    }\n\n    /**\n     * Create an instance of AccountKeyRoleBased.\n     * @param {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>} accountKeyArray - An array containing arrays of instances of AccountKeyPublic or AccountKeyWeightedMultiSig for each role.\n     */\n    constructor(accountKeyArray) {\n        this.accountKeys = accountKeyArray\n    }\n\n    /**\n     * @type {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>}\n     */\n    get accountKeys() {\n        return this._accountKeys\n    }\n\n    set accountKeys(keys) {\n        if (!isValidRoleBasedKeyFormat(keys)) throw new Error(`Invalid role-based account key format.`)\n        this._accountKeys = keys\n    }\n\n    /**\n     * Returns an RLP-encoded AccountKeyRoleBased string.\n     *\n     * @example\n     * const encoding = accountKeyRoleBased.getRLPEncoding()\n     *\n     * @return {string}\n     */\n    getRLPEncoding() {\n        const encodedAccountKeys = []\n        for (const accountKey of this.accountKeys) {\n            if (accountKey === undefined) {\n                encodedAccountKeys.push(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG)\n                continue\n            }\n            encodedAccountKeys.push(accountKey.getRLPEncoding())\n        }\n\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(encodedAccountKeys).slice(2)\n    }\n}\n\nmodule.exports = AccountKeyRoleBased\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}