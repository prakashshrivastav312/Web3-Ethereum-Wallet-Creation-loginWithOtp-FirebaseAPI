{"ast":null,"code":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-utils\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertObject = exports.generateValidateObjects = exports.validateArgs = exports.validatorArray = exports.AssertType = void 0;\n\nvar validators_1 = require(\"./validators\");\n/** @hidden */\n\n\nvar AssertType;\n\n(function (AssertType) {\n  AssertType[\"required\"] = \"required\";\n  AssertType[\"optional\"] = \"optional\";\n})(AssertType = exports.AssertType || (exports.AssertType = {}));\n/** @hidden */\n\n\nexports.validatorArray = {\n  isNumber: [validators_1.isNumber],\n  isString: [validators_1.isString],\n  isBoolean: [validators_1.isBoolean],\n  isArray: [validators_1.isArray],\n  isJsonString: [validators_1.isJsonString],\n  isObject: [validators_1.isObject],\n  isFunction: [validators_1.isFunction],\n  isHex: [validators_1.isHex],\n  isPublicKey: [validators_1.isPublicKey],\n  isPrivateKey: [validators_1.isPrivateKey],\n  isAddress: [validators_1.isAddress],\n  isHash: [validators_1.isHash],\n  isBlockNumber: [validators_1.isBlockNumber],\n  isBech32Address: [validators_1.isBech32Address],\n  isBech32TestNetAddress: [validators_1.isBech32TestNetAddress],\n  isValidAddress: [validators_1.isValidAddress]\n};\n\nfunction validateArgs(args, requiredArgs, optionalArgs) {\n  for (var key in requiredArgs) {\n    if (args[key] !== undefined) {\n      // tslint:disable-next-line: prefer-for-of\n      for (var i = 0; i < requiredArgs[key].length; i += 1) {\n        if (typeof requiredArgs[key][i] !== 'function') {\n          throw new Error('Validator is not a function');\n        }\n\n        if (!requiredArgs[key][i](args[key])) {\n          throw new Error(\"Validation failed for \" + key + \",should be validated by \" + requiredArgs[key][i].validator);\n        }\n      }\n    } else {\n      throw new Error(\"Key not found: \" + key);\n    }\n  }\n\n  for (var key in optionalArgs) {\n    if (args[key]) {\n      // tslint:disable-next-line: prefer-for-of\n      for (var i = 0; i < optionalArgs[key].length; i += 1) {\n        if (typeof optionalArgs[key][i] !== 'function') {\n          throw new Error('Validator is not a function');\n        }\n\n        if (!optionalArgs[key][i](args[key])) {\n          throw new Error(\"Validation failed for \" + key + \",should be validated by \" + optionalArgs[key][i].validator);\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nexports.validateArgs = validateArgs;\n\nfunction generateValidateObjects(validatorObject) {\n  var requiredArgs = {};\n  var optionalArgs = {};\n\n  for (var index in validatorObject) {\n    if (index !== undefined) {\n      var newObjectKey = index;\n      var newObjectValid = validatorObject[index][0];\n      var isRequired = validatorObject[index][1];\n\n      if (isRequired === AssertType.required) {\n        requiredArgs[newObjectKey] = exports.validatorArray[newObjectValid];\n      } else {\n        optionalArgs[newObjectKey] = exports.validatorArray[newObjectValid];\n      }\n    }\n  }\n\n  return {\n    requiredArgs: requiredArgs,\n    optionalArgs: optionalArgs\n  };\n}\n\nexports.generateValidateObjects = generateValidateObjects;\n\nvar assertObject = function (input) {\n  return function (target, key, descriptor) {\n    var _a = generateValidateObjects(input),\n        requiredArgs = _a.requiredArgs,\n        optionalArgs = _a.optionalArgs;\n\n    var original = descriptor.value;\n\n    function interceptor() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      validateArgs(args[0], requiredArgs, optionalArgs);\n      return original.apply(this, args);\n    }\n\n    descriptor.value = interceptor;\n    return descriptor;\n  };\n};\n\nexports.assertObject = assertObject;","map":{"version":3,"mappings":"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","names":["AssertType","exports","isNumber","validators_1","isString","isBoolean","isArray","isJsonString","isObject","isFunction","isHex","isPublicKey","isPrivateKey","isAddress","isHash","isBlockNumber","isBech32Address","isBech32TestNetAddress","isValidAddress","validateArgs","args","requiredArgs","optionalArgs","key","undefined","i","length","Error","validator","generateValidateObjects","validatorObject","index","newObjectKey","newObjectValid","isRequired","required","assertObject","input","target","descriptor","original","value","interceptor","apply"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}