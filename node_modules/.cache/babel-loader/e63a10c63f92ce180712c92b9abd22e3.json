{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createClaimableBalance = createClaimableBalance;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _asset = require('../asset');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Create a new claimable balance operation.\n *\n * @function\n * @alias Operation.createClaimableBalance\n *\n * @param {object} opts Options object\n * @param {Asset} opts.asset - The asset for the claimable balance.\n * @param {string} opts.amount - Amount.\n * @param {Claimant[]} opts.claimants - An array of Claimants\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation} Create claimable balance operation\n *\n * @example\n * const asset = new Asset(\n *   'USD',\n *   'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n * );\n * const amount = '100.0000000';\n * const claimants = [\n *   new Claimant(\n *     'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ',\n *      Claimant.predicateBeforeAbsoluteTime(\"4102444800000\")\n *   )\n * ];\n *\n * const op = Operation.createClaimableBalance({\n *   asset,\n *   amount,\n *   claimants\n * });\n *\n */\n\n\nfunction createClaimableBalance(opts) {\n  if (!(opts.asset instanceof _asset.Asset)) {\n    throw new Error('must provide an asset for create claimable balance operation');\n  }\n\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n\n  if (!Array.isArray(opts.claimants) || opts.claimants.length === 0) {\n    throw new Error('must provide at least one claimant');\n  }\n\n  var attributes = {};\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.claimants = opts.claimants.map(function (c) {\n    return c.toXDRObject();\n  });\n  var createClaimableBalanceOp = new _stellarXdr_generated2.default.CreateClaimableBalanceOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.createClaimableBalance(createClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createClaimableBalance","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_asset","obj","__esModule","default","opts","asset","Asset","Error","isValidAmount","amount","TypeError","constructAmountRequirementsError","Array","isArray","claimants","length","attributes","toXDRObject","_toXDRAmount","map","c","createClaimableBalanceOp","CreateClaimableBalanceOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operations/create_claimable_balance.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createClaimableBalance = createClaimableBalance;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _asset = require('../asset');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a new claimable balance operation.\n *\n * @function\n * @alias Operation.createClaimableBalance\n *\n * @param {object} opts Options object\n * @param {Asset} opts.asset - The asset for the claimable balance.\n * @param {string} opts.amount - Amount.\n * @param {Claimant[]} opts.claimants - An array of Claimants\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation} Create claimable balance operation\n *\n * @example\n * const asset = new Asset(\n *   'USD',\n *   'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n * );\n * const amount = '100.0000000';\n * const claimants = [\n *   new Claimant(\n *     'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ',\n *      Claimant.predicateBeforeAbsoluteTime(\"4102444800000\")\n *   )\n * ];\n *\n * const op = Operation.createClaimableBalance({\n *   asset,\n *   amount,\n *   claimants\n * });\n *\n */\nfunction createClaimableBalance(opts) {\n  if (!(opts.asset instanceof _asset.Asset)) {\n    throw new Error('must provide an asset for create claimable balance operation');\n  }\n\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n\n  if (!Array.isArray(opts.claimants) || opts.claimants.length === 0) {\n    throw new Error('must provide at least one claimant');\n  }\n\n  var attributes = {};\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  attributes.claimants = opts.claimants.map(function (c) {\n    return c.toXDRObject();\n  });\n\n  var createClaimableBalanceOp = new _stellarXdr_generated2.default.CreateClaimableBalanceOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.createClaimableBalance(createClaimableBalanceOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,oCAAD,CAAnC;;AAEA,IAAIC,sBAAsB,GAAGC,sBAAsB,CAACH,qBAAD,CAAnD;;AAEA,IAAII,MAAM,GAAGH,OAAO,CAAC,UAAD,CAApB;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEE,OAAO,EAAEF;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASN,sBAAT,CAAgCS,IAAhC,EAAsC;EACpC,IAAI,EAAEA,IAAI,CAACC,KAAL,YAAsBL,MAAM,CAACM,KAA/B,CAAJ,EAA2C;IACzC,MAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;EACD;;EAED,IAAI,CAAC,KAAKC,aAAL,CAAmBJ,IAAI,CAACK,MAAxB,CAAL,EAAsC;IACpC,MAAM,IAAIC,SAAJ,CAAc,KAAKC,gCAAL,CAAsC,QAAtC,CAAd,CAAN;EACD;;EAED,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcT,IAAI,CAACU,SAAnB,CAAD,IAAkCV,IAAI,CAACU,SAAL,CAAeC,MAAf,KAA0B,CAAhE,EAAmE;IACjE,MAAM,IAAIR,KAAJ,CAAU,oCAAV,CAAN;EACD;;EAED,IAAIS,UAAU,GAAG,EAAjB;EACAA,UAAU,CAACX,KAAX,GAAmBD,IAAI,CAACC,KAAL,CAAWY,WAAX,EAAnB;EACAD,UAAU,CAACP,MAAX,GAAoB,KAAKS,YAAL,CAAkBd,IAAI,CAACK,MAAvB,CAApB;EACAO,UAAU,CAACF,SAAX,GAAuBV,IAAI,CAACU,SAAL,CAAeK,GAAf,CAAmB,UAAUC,CAAV,EAAa;IACrD,OAAOA,CAAC,CAACH,WAAF,EAAP;EACD,CAFsB,CAAvB;EAIA,IAAII,wBAAwB,GAAG,IAAIvB,sBAAsB,CAACK,OAAvB,CAA+BmB,wBAAnC,CAA4DN,UAA5D,CAA/B;EAEA,IAAIO,YAAY,GAAG,EAAnB;EACAA,YAAY,CAACC,IAAb,GAAoB1B,sBAAsB,CAACK,OAAvB,CAA+BsB,aAA/B,CAA6C9B,sBAA7C,CAAoE0B,wBAApE,CAApB;EACA,KAAKK,gBAAL,CAAsBH,YAAtB,EAAoCnB,IAApC;EAEA,OAAO,IAAIN,sBAAsB,CAACK,OAAvB,CAA+BwB,SAAnC,CAA6CJ,YAA7C,CAAP;AACD"},"metadata":{},"sourceType":"script"}