{"ast":null,"code":"// {signature} {pubKey}\nvar bscript = require('../../script');\n\nvar typeforce = require('typeforce');\n\nfunction check(script) {\n  var chunks = bscript.decompile(script);\n  return chunks.length === 2 && bscript.isCanonicalSignature(chunks[0]) && bscript.isCanonicalPubKey(chunks[1]);\n}\n\ncheck.toJSON = function () {\n  return 'pubKeyHash input';\n};\n\nfunction encodeStack(signature, pubKey) {\n  typeforce({\n    signature: bscript.isCanonicalSignature,\n    pubKey: bscript.isCanonicalPubKey\n  }, {\n    signature: signature,\n    pubKey: pubKey\n  });\n  return [signature, pubKey];\n}\n\nfunction encode(signature, pubKey) {\n  return bscript.compile(encodeStack(signature, pubKey));\n}\n\nfunction decodeStack(stack) {\n  typeforce(typeforce.Array, stack);\n  typeforce(check, stack);\n  return {\n    signature: stack[0],\n    pubKey: stack[1]\n  };\n}\n\nfunction decode(buffer) {\n  var stack = bscript.decompile(buffer);\n  return decodeStack(stack);\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  decodeStack: decodeStack,\n  encode: encode,\n  encodeStack: encodeStack\n};","map":{"version":3,"names":["bscript","require","typeforce","check","script","chunks","decompile","length","isCanonicalSignature","isCanonicalPubKey","toJSON","encodeStack","signature","pubKey","encode","compile","decodeStack","stack","Array","decode","buffer","module","exports"],"sources":["C:/Users/acer/node_modules/@tatumio/bitcoincashjs2-lib/src/templates/pubkeyhash/input.js"],"sourcesContent":["// {signature} {pubKey}\n\nvar bscript = require('../../script')\nvar typeforce = require('typeforce')\n\nfunction check (script) {\n  var chunks = bscript.decompile(script)\n\n  return chunks.length === 2 &&\n    bscript.isCanonicalSignature(chunks[0]) &&\n    bscript.isCanonicalPubKey(chunks[1])\n}\ncheck.toJSON = function () { return 'pubKeyHash input' }\n\nfunction encodeStack (signature, pubKey) {\n  typeforce({\n    signature: bscript.isCanonicalSignature,\n    pubKey: bscript.isCanonicalPubKey\n  }, {\n    signature: signature,\n    pubKey: pubKey\n  })\n\n  return [signature, pubKey]\n}\n\nfunction encode (signature, pubKey) {\n  return bscript.compile(encodeStack(signature, pubKey))\n}\n\nfunction decodeStack (stack) {\n  typeforce(typeforce.Array, stack)\n  typeforce(check, stack)\n\n  return {\n    signature: stack[0],\n    pubKey: stack[1]\n  }\n}\n\nfunction decode (buffer) {\n  var stack = bscript.decompile(buffer)\n  return decodeStack(stack)\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  decodeStack: decodeStack,\n  encode: encode,\n  encodeStack: encodeStack\n}\n"],"mappings":"AAAA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASE,KAAT,CAAgBC,MAAhB,EAAwB;EACtB,IAAIC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBF,MAAlB,CAAb;EAEA,OAAOC,MAAM,CAACE,MAAP,KAAkB,CAAlB,IACLP,OAAO,CAACQ,oBAAR,CAA6BH,MAAM,CAAC,CAAD,CAAnC,CADK,IAELL,OAAO,CAACS,iBAAR,CAA0BJ,MAAM,CAAC,CAAD,CAAhC,CAFF;AAGD;;AACDF,KAAK,CAACO,MAAN,GAAe,YAAY;EAAE,OAAO,kBAAP;AAA2B,CAAxD;;AAEA,SAASC,WAAT,CAAsBC,SAAtB,EAAiCC,MAAjC,EAAyC;EACvCX,SAAS,CAAC;IACRU,SAAS,EAAEZ,OAAO,CAACQ,oBADX;IAERK,MAAM,EAAEb,OAAO,CAACS;EAFR,CAAD,EAGN;IACDG,SAAS,EAAEA,SADV;IAEDC,MAAM,EAAEA;EAFP,CAHM,CAAT;EAQA,OAAO,CAACD,SAAD,EAAYC,MAAZ,CAAP;AACD;;AAED,SAASC,MAAT,CAAiBF,SAAjB,EAA4BC,MAA5B,EAAoC;EAClC,OAAOb,OAAO,CAACe,OAAR,CAAgBJ,WAAW,CAACC,SAAD,EAAYC,MAAZ,CAA3B,CAAP;AACD;;AAED,SAASG,WAAT,CAAsBC,KAAtB,EAA6B;EAC3Bf,SAAS,CAACA,SAAS,CAACgB,KAAX,EAAkBD,KAAlB,CAAT;EACAf,SAAS,CAACC,KAAD,EAAQc,KAAR,CAAT;EAEA,OAAO;IACLL,SAAS,EAAEK,KAAK,CAAC,CAAD,CADX;IAELJ,MAAM,EAAEI,KAAK,CAAC,CAAD;EAFR,CAAP;AAID;;AAED,SAASE,MAAT,CAAiBC,MAAjB,EAAyB;EACvB,IAAIH,KAAK,GAAGjB,OAAO,CAACM,SAAR,CAAkBc,MAAlB,CAAZ;EACA,OAAOJ,WAAW,CAACC,KAAD,CAAlB;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;EACfnB,KAAK,EAAEA,KADQ;EAEfgB,MAAM,EAAEA,MAFO;EAGfH,WAAW,EAAEA,WAHE;EAIfF,MAAM,EAAEA,MAJO;EAKfH,WAAW,EAAEA;AALE,CAAjB"},"metadata":{},"sourceType":"script"}