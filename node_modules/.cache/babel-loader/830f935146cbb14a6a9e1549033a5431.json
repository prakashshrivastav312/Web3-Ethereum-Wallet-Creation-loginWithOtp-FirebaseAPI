{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendKlaytnBurnMultiTokenBatchSignedTransaction = exports.sendKlaytnBurnMultiTokenSignedTransaction = exports.sendKlaytnDeployErc721SignedTransaction = exports.sendKlaytnUpdateCashbackForAuthorErc721SignedTransaction = exports.sendKlaytnTransferErc721SignedTransaction = exports.sendKlaytnBurnErc721SignedTransaction = exports.sendKlaytnMintMultipleErc721SignedTransaction = exports.sendKlaytnMintMultipleErc721ProvenanceSignedTransaction = exports.sendKlaytnMintMultipleCashbackErc721SignedTransaction = exports.sendKlaytnMintErc721ProvenanceSignedTransaction = exports.sendKlaytnMintCashbackErc721SignedTransaction = exports.sendKlaytnMintErc721SignedTransaction = exports.sendKlaytnDeployErc20SignedTransaction = exports.sendKlaytnTransferErc20SignedTransaction = exports.sendKlaytnBurnErc20SignedTransaction = exports.sendKlaytnMintErc20SignedTransaction = exports.sendKlaytnStoreDataTransaction = exports.sendKlaytnSmartContractReadMethodInvocationTransaction = exports.prepareKlaytnSmartContractWriteMethodInvocation = exports.prepareKlaytnDeployMultiTokenSignedTransaction = exports.prepareKlaytnMintMultiTokenBatchSignedTransaction = exports.prepareKlaytnMintMultiTokenSignedTransaction = exports.prepareKlaytnBatchTransferMultiTokenSignedTransaction = exports.prepareKlaytnTransferMultiTokenSignedTransaction = exports.prepareKlaytnBurnMultiTokenBatchSignedTransaction = exports.prepareKlaytnBurnMultiTokenSignedTransaction = exports.prepareKlaytnDeployAuctionSignedTransaction = exports.prepareKlaytnDeployMarketplaceListingSignedTransaction = exports.prepareKlaytnDeployErc721SignedTransaction = exports.prepareKlaytnUpdateCashbackForAuthorErc721SignedTransaction = exports.prepareKlaytnTransferErc721SignedTransaction = exports.prepareKlaytnBurnErc721SignedTransaction = exports.prepareKlaytnMintMultipleErc721SignedTransaction = exports.prepareKlaytnMintMultipleCashbackErc721SignedTransaction = exports.prepareKlaytnMintMultipleErc721ProvenanceSignedTransaction = exports.prepareKlaytnMintCashbackErc721SignedTransaction = exports.prepareKlaytnMintErc721ProvenanceSignedTransaction = exports.prepareKlaytnMintErc721SignedTransaction = exports.prepareKlaytnDeployErc20SignedTransaction = exports.prepareKlaytnTransferErc20SignedTransaction = exports.prepareKlaytnBurnErc20SignedTransaction = exports.prepareKlaytnMintErc20SignedTransaction = exports.prepareKlaytnStoreDataTransaction = exports.prepareKlaytnSignedTransaction = exports.prepareKlaytnGenerateCustodialWalletSignedTransaction = exports.getKlayErc20ContractDecimals = exports.signKlayKMSTransaction = exports.prepareKlaytnClient = exports.sendKlaytnTransaction = exports.klayGetGasPriceInWei = void 0;\nexports.sendKlaytnDeployMarketplaceListingSignedTransaction = exports.sendKlaytnSmartContractMethodInvocationTransaction = exports.sendKlaytnGenerateCustodialWalletSignedTransaction = exports.sendKlaytnDeployMultiTokenSignedTransaction = exports.sendKlaytnMintMultiTokenBatchSignedTransaction = exports.sendKlaytnMintMultiTokenSignedTransaction = exports.sendKlaytnBatchTransferMultiTokenSignedTransaction = exports.sendKlaytnTransferMultiTokenSignedTransaction = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst erc1155_abi_1 = __importDefault(require(\"../contracts/erc1155/erc1155_abi\"));\n\nconst erc1155_bytecode_1 = __importDefault(require(\"../contracts/erc1155/erc1155_bytecode\"));\n\nconst token_abi_1 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst token_abi_2 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst token_bytecode_1 = __importDefault(require(\"../contracts/erc20/token_bytecode\"));\n\nconst erc721_abi_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_abi\"));\n\nconst erc721_bytecode_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_bytecode\"));\n\nconst erc721Provenance_abi_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_abi\"));\n\nconst erc721Provenance_bytecode_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_bytecode\"));\n\nconst marketplace_1 = require(\"../contracts/marketplace\");\n\nconst model_1 = require(\"../model\");\n\nconst nft_1 = require(\"../nft\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst caver_js_1 = __importDefault(require(\"caver-js\"));\n\nconst erc721_abi_2 = __importDefault(require(\"../contracts/erc721General/erc721_abi\"));\n\nconst erc721_bytecode_2 = __importDefault(require(\"../contracts/erc721General/erc721_bytecode\"));\n/**\n * Estimate Gas price for the transaction.\n */\n\n\nconst klayGetGasPriceInWei = async client => {\n  return await client.klay.getGasPrice();\n};\n\nexports.klayGetGasPriceInWei = klayGetGasPriceInWei;\n\nconst prepareGeneralTx = async (client, testnet, fromPrivateKey, signatureId, to, amount, nonce, data, gasLimit, gasPrice) => {\n  const tx = {\n    from: 0,\n    to,\n    value: amount ? `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(amount, 'ether')).toString(16)}` : undefined,\n    data,\n    gas: gasLimit,\n    nonce,\n    gasPrice: gasPrice ? `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(gasPrice, 'gwei')).toString(16)}` : await exports.klayGetGasPriceInWei(client)\n  };\n\n  if (signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  tx.from = client.klay.accounts.wallet.getAccount(0).address;\n  tx.gas = gasLimit || (await client.klay.estimateGas({\n    to,\n    data: data || '',\n    value: tx.value\n  })); // @ts-ignore\n\n  return (await client.klay.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;\n};\n/**\n * Send Klay transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\n\nconst sendKlaytnTransaction = async (testnet, body, provider) => {\n  return blockchain_1.klaytnBroadcast(await exports.prepareKlaytnSignedTransaction(testnet, body, provider));\n};\n\nexports.sendKlaytnTransaction = sendKlaytnTransaction;\n\nconst prepareKlaytnClient = (testnet, provider, fromPrivateKey) => {\n  const client = new caver_js_1.default(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/blockchain/node/KLAY/${process.env.TATUM_API_KEY}`);\n\n  if (fromPrivateKey) {\n    client.klay.accounts.wallet.clear();\n    client.klay.accounts.wallet.add(fromPrivateKey);\n    client.klay.defaultAccount = client.klay.accounts.wallet.getAccount(0).address;\n  }\n\n  return client;\n};\n\nexports.prepareKlaytnClient = prepareKlaytnClient;\n/**\n * Sign Klay pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param testnet mainnet or testnet version\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signKlayKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {\n  if (tx.chain !== model_1.Currency.KLAY) {\n    throw Error('Unsupported chain.');\n  }\n\n  const client = exports.prepareKlaytnClient(testnet, provider, fromPrivateKey);\n  const transactionConfig = JSON.parse(tx.serializedTransaction);\n\n  if (!transactionConfig.gas) {\n    transactionConfig.gas = await client.klay.estimateGas({\n      to: transactionConfig.to,\n      data: transactionConfig.data\n    });\n  }\n\n  if (!transactionConfig.gasPrice || transactionConfig.gasPrice === '0' || transactionConfig.gasPrice === 0 || transactionConfig.gasPrice === '0x0') {\n    transactionConfig.gasPrice = await exports.klayGetGasPriceInWei(client);\n  }\n\n  transactionConfig.from = client.klay.accounts.wallet.getAccount(0).address; // @ts-ignore\n\n  return (await client.klay.accounts.signTransaction(transactionConfig, fromPrivateKey)).rawTransaction;\n};\n\nexports.signKlayKMSTransaction = signKlayKMSTransaction;\n\nconst getKlayErc20ContractDecimals = async (testnet, contractAddress, provider) => {\n  if (!contractAddress) {\n    throw new Error('Contract address not set.');\n  }\n\n  const client = await exports.prepareKlaytnClient(testnet, provider); // @ts-ignore\n\n  const contract = new client.klay.Contract(token_abi_1.default, contractAddress.trim());\n  return await contract.methods.decimals().call();\n};\n\nexports.getKlayErc20ContractDecimals = getKlayErc20ContractDecimals;\n/**\n * Sign Klay generate custodial wallet transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnGenerateCustodialWalletSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.GenerateCustodialAddress);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n  const {\n    abi,\n    code\n  } = wallet_1.obtainCustodialAddressType(body); // @ts-ignore\n\n  const contract = new client.klay.Contract(abi);\n  const data = contract.deploy({\n    data: code\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnGenerateCustodialWalletSignedTransaction = prepareKlaytnGenerateCustodialWalletSignedTransaction;\n/**\n * Sign Klay transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.TransferErc20);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n  let data;\n  let to = body.to;\n\n  if (body.currency === model_1.Currency.KLAY) {\n    data = body.data ? web3_utils_1.isHex(body.data) ? web3_utils_1.stringToHex(body.data) : web3_utils_1.toHex(body.data) : undefined;\n  } else {\n    to = constants_1.CONTRACT_ADDRESSES[body.currency]; // @ts-ignore\n\n    const contract = new client.klay.Contract([constants_1.TRANSFER_METHOD_ABI], to);\n    const digits = new bignumber_js_1.BigNumber(10).pow(constants_1.CONTRACT_DECIMALS[body.currency]);\n    data = contract.methods.transfer(body.to.trim(), `0x${new bignumber_js_1.BigNumber(body.amount).multipliedBy(digits).toString(16)}`).encodeABI();\n  }\n\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.to, body.amount, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnSignedTransaction = prepareKlaytnSignedTransaction;\n/**\n * Sign Klay store data transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnStoreDataTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.CreateRecord);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n  const hexData = web3_utils_1.isHex(body.data) ? web3_utils_1.stringToHex(body.data) : web3_utils_1.toHex(body.data);\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.to || client.klay.accounts.wallet.getAccount(0).address, undefined, body.nonce, hexData, (_a = body.ethFee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.ethFee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnStoreDataTransaction = prepareKlaytnStoreDataTransaction;\n/**\n * Sign Klay mint erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnMintErc20SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.MintErc20);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const contract = new client.klay.Contract(token_abi_2.default, body.contractAddress.trim().trim());\n  const digits = new bignumber_js_1.BigNumber(10).pow(await contract.methods.decimals().call());\n  const data = contract.methods.mint(body.to.trim(), `0x${new bignumber_js_1.BigNumber(body.amount).multipliedBy(digits).toString(16)}`).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnMintErc20SignedTransaction = prepareKlaytnMintErc20SignedTransaction;\n/**\n * Sign Klay burn erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnBurnErc20SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.BurnErc20);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const contract = new client.klay.Contract(token_abi_2.default, body.contractAddress.trim().trim());\n  const digits = new bignumber_js_1.BigNumber(10).pow(await contract.methods.decimals().call());\n  const data = contract.methods.burn(`0x${new bignumber_js_1.BigNumber(body.amount).multipliedBy(digits).toString(16)}`).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnBurnErc20SignedTransaction = prepareKlaytnBurnErc20SignedTransaction;\n/**\n * Sign Klay transfer erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnTransferErc20SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.TransferErc20);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n  const decimals = new bignumber_js_1.BigNumber(10).pow(body.digits); // @ts-ignore\n\n  const data = new client.klay.Contract(token_abi_2.default, body.contractAddress.trim().trim()).methods.transfer(body.to.trim(), `0x${new bignumber_js_1.BigNumber(body.amount).multipliedBy(decimals).toString(16)}`).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnTransferErc20SignedTransaction = prepareKlaytnTransferErc20SignedTransaction;\n/**\n * Sign Klay deploy erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnDeployErc20SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.DeployErc20);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const contract = new client.klay.Contract(token_abi_2.default);\n  const data = contract.deploy({\n    data: token_bytecode_1.default,\n    arguments: [body.name, body.symbol, body.address.trim(), body.digits, `0x${new bignumber_js_1.BigNumber(body.totalCap || body.supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(body.digits)).toString(16)}`, `0x${new bignumber_js_1.BigNumber(body.supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(body.digits)).toString(16)}`]\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnDeployErc20SignedTransaction = prepareKlaytnDeployErc20SignedTransaction;\n/**\n * Sign Klay mint erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnMintErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintWithTokenURI(body.to.trim(), body.tokenId, body.url).encodeABI();\n\n  if (body.contractAddress) {\n    return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n  }\n\n  throw new Error('Contract address should not be empty!');\n};\n\nexports.prepareKlaytnMintErc721SignedTransaction = prepareKlaytnMintErc721SignedTransaction;\n/**\n * Sign Klay mint cashback erc721 provenance transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnMintErc721ProvenanceSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b, _c, _d;\n\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n  const cb = [];\n  const fv = [];\n\n  if (body.cashbackValues && body.fixedValues && body.authorAddresses) {\n    body.cashbackValues.map(c => cb.push(`0x${new bignumber_js_1.BigNumber(c).multipliedBy(100).toString(16)}`));\n    body.fixedValues.map(c => fv.push(`0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(c, 'ether')).toString(16)}`));\n  }\n\n  if (body.erc20) {\n    // @ts-ignore\n    const data = new client.klay.Contract(erc721Provenance_abi_1.default, body.contractAddress.trim()).methods.mintWithTokenURI(body.to.trim(), body.tokenId, body.url, body.authorAddresses ? body.authorAddresses : [], cb, fv, body.erc20).encodeABI();\n\n    if (body.contractAddress) {\n      return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n    }\n\n    throw new Error('Contract address should not be empty!');\n  } else {\n    // @ts-ignore\n    const data = new client.klay.Contract(erc721Provenance_abi_1.default, body.contractAddress.trim()).methods.mintWithTokenURI(body.to.trim(), body.tokenId, body.url, body.authorAddresses ? body.authorAddresses : [], cb, fv).encodeABI();\n\n    if (body.contractAddress) {\n      return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_c = body.fee) === null || _c === void 0 ? void 0 : _c.gasLimit, (_d = body.fee) === null || _d === void 0 ? void 0 : _d.gasPrice);\n    }\n\n    throw new Error('Contract address should not be empty!');\n  }\n};\n\nexports.prepareKlaytnMintErc721ProvenanceSignedTransaction = prepareKlaytnMintErc721ProvenanceSignedTransaction;\n/**\n * Sign Klay mint cashback erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnMintCashbackErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b, _c, _d;\n\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n  const cashbacks = body.cashbackValues;\n  const cb = cashbacks.map(c => `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(c, 'ether')).toString(16)}`);\n\n  if (body.erc20) {\n    // @ts-ignore\n    const data = new client.klay.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintWithCashback(body.to.trim(), body.tokenId, body.url, body.authorAddresses, cb, body.erc20).encodeABI();\n\n    if (body.contractAddress) {\n      return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n    }\n\n    throw new Error('Contract address should not be empty!');\n  } else {\n    // @ts-ignore\n    const data = new client.klay.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintWithCashback(body.to.trim(), body.tokenId, body.url, body.authorAddresses, cb).encodeABI();\n\n    if (body.contractAddress) {\n      return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_c = body.fee) === null || _c === void 0 ? void 0 : _c.gasLimit, (_d = body.fee) === null || _d === void 0 ? void 0 : _d.gasPrice);\n    }\n\n    throw new Error('Contract address should not be empty!');\n  }\n};\n\nexports.prepareKlaytnMintCashbackErc721SignedTransaction = prepareKlaytnMintCashbackErc721SignedTransaction;\n/**\n * Sign Klay mint multiple cashback erc721 provenance transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnMintMultipleErc721ProvenanceSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b, _c, _d;\n\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n  const cb = [];\n  const fv = [];\n\n  if (body.cashbackValues && body.fixedValues && body.authorAddresses) {\n    for (let i = 0; i < body.cashbackValues.length; i++) {\n      const cb2 = [];\n      const fv2 = [];\n\n      for (let j = 0; j < body.cashbackValues[i].length; j++) {\n        cb2.push(`0x${new bignumber_js_1.BigNumber(body.cashbackValues[i][j]).multipliedBy(100).toString(16)}`);\n        fv2.push(`0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(body.fixedValues[i][j], 'ether')).toString(16)}`);\n      }\n\n      cb.push(cb2);\n      fv.push(fv2);\n    }\n  }\n\n  if (body.erc20) {\n    // @ts-ignore\n    const data = new client.klay.Contract(erc721Provenance_abi_1.default, body.contractAddress.trim()).methods.mintMultiple(body.to.map(t => t.trim()), body.tokenId, body.url, body.authorAddresses ? body.authorAddresses : [], cb, fv, body.erc20).encodeABI();\n    return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n  } else {\n    // @ts-ignore\n    const data = new client.klay.Contract(erc721Provenance_abi_1.default, body.contractAddress.trim()).methods.mintMultiple(body.to.map(t => t.trim()), body.tokenId, body.url, body.authorAddresses ? body.authorAddresses : [], cb, fv).encodeABI();\n    return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_c = body.fee) === null || _c === void 0 ? void 0 : _c.gasLimit, (_d = body.fee) === null || _d === void 0 ? void 0 : _d.gasPrice);\n  }\n};\n\nexports.prepareKlaytnMintMultipleErc721ProvenanceSignedTransaction = prepareKlaytnMintMultipleErc721ProvenanceSignedTransaction;\n/**\n * Sign Klay mint multiple cashback erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnMintMultipleCashbackErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b, _c, _d;\n\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n  const cashbacks = body.cashbackValues;\n  const cb = cashbacks.map(cashback => cashback.map(c => `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(c, 'ether')).toString(16)}`));\n\n  if (body.erc20) {\n    // @ts-ignore\n    const data = new client.klay.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintMultipleCashback(body.to.map(t => t.trim()), body.tokenId, body.url, body.authorAddresses, cb, body.erc20).encodeABI();\n    return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n  } else {\n    // @ts-ignore\n    const data = new client.klay.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintMultipleCashback(body.to.map(t => t.trim()), body.tokenId, body.url, body.authorAddresses, cb).encodeABI();\n    return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_c = body.fee) === null || _c === void 0 ? void 0 : _c.gasLimit, (_d = body.fee) === null || _d === void 0 ? void 0 : _d.gasPrice);\n  }\n};\n\nexports.prepareKlaytnMintMultipleCashbackErc721SignedTransaction = prepareKlaytnMintMultipleCashbackErc721SignedTransaction;\n/**\n * Sign Klay mint multiple erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnMintMultipleErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintMultiple(body.to.map(t => t.trim()), body.tokenId, body.url).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnMintMultipleErc721SignedTransaction = prepareKlaytnMintMultipleErc721SignedTransaction;\n/**\n * Sign Klay burn erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnBurnErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthBurnErc721);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.burn(body.tokenId).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnBurnErc721SignedTransaction = prepareKlaytnBurnErc721SignedTransaction;\n/**\n * Sign Klay transfer erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnTransferErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthTransferErc721);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const contract = new client.klay.Contract(body.provenance ? erc721Provenance_abi_1.default : erc721_abi_1.default, body.contractAddress.trim());\n  const dataBytes = body.provenance ? Buffer.from(body.provenanceData + '\\'\\'\\'###\\'\\'\\'' + web3_utils_1.toWei(body.tokenPrice, 'ether'), 'utf8') : '';\n  const data = body.provenance ? contract.methods.safeTransfer(body.to.trim(), body.tokenId, `0x${dataBytes.toString('hex')}`).encodeABI() : contract.methods.safeTransfer(body.to.trim(), body.tokenId).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), body.value, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnTransferErc721SignedTransaction = prepareKlaytnTransferErc721SignedTransaction;\n/**\n * Sign Klay update cashback for author erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnUpdateCashbackForAuthorErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.UpdateCashbackErc721);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.updateCashbackForAuthor(body.tokenId, `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(body.cashbackValue, 'ether')).toString(16)}`).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnUpdateCashbackForAuthorErc721SignedTransaction = prepareKlaytnUpdateCashbackForAuthorErc721SignedTransaction;\n/**\n * Sign Klay deploy erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnDeployErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthDeployErc721);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n\n  if (body.provenance && body.cashback) {\n    throw new Error('Only one of provenance or cashback must be present and true.');\n  }\n\n  let abi = erc721_abi_2.default;\n  let deployData = erc721_bytecode_2.default;\n\n  if (body.provenance) {\n    abi = erc721Provenance_abi_1.default;\n    deployData = erc721Provenance_bytecode_1.default;\n  } else if (body.cashback) {\n    abi = erc721_abi_1.default;\n    deployData = erc721_bytecode_1.default;\n  } // @ts-ignore\n\n\n  const data = new client.klay.Contract(abi).deploy({\n    arguments: [body.name, body.symbol, body.publicMint ? body.publicMint : false],\n    data: deployData\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnDeployErc721SignedTransaction = prepareKlaytnDeployErc721SignedTransaction;\n/**\n * Sign Klay generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst prepareKlaytnDeployMarketplaceListingSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.DeployMarketplaceListing);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(marketplace_1.listing.abi).deploy({\n    arguments: [body.marketplaceFee, body.feeRecipient],\n    data: marketplace_1.listing.data\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnDeployMarketplaceListingSignedTransaction = prepareKlaytnDeployMarketplaceListingSignedTransaction;\n/**\n * Sign Klay deploy NFT Auction contract transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst prepareKlaytnDeployAuctionSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.DeployNftAuction);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(marketplace_1.auction.abi).deploy({\n    arguments: [body.auctionFee, body.feeRecipient],\n    data: marketplace_1.auction.data\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnDeployAuctionSignedTransaction = prepareKlaytnDeployAuctionSignedTransaction;\n/**\n * Sign Klay burn multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnBurnMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthBurnMultiToken);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.burn(body.account.trim(), body.tokenId, body.amount).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnBurnMultiTokenSignedTransaction = prepareKlaytnBurnMultiTokenSignedTransaction;\n/**\n * Sign Klay burn multiple tokens batch transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnBurnMultiTokenBatchSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthBurnMultiTokenBatch);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.burnBatch(body.account.trim(), body.tokenId, body.amounts).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnBurnMultiTokenBatchSignedTransaction = prepareKlaytnBurnMultiTokenBatchSignedTransaction;\n/**\n * Sign Klay transfer multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnTransferMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.TransferMultiToken);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.safeTransfer(body.to.trim(), body.tokenId, `0x${new bignumber_js_1.BigNumber(body.amount).toString(16)}`, body.data ? body.data : '0x0').encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnTransferMultiTokenSignedTransaction = prepareKlaytnTransferMultiTokenSignedTransaction;\n/**\n * Sign Klay batch transfer multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnBatchTransferMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.TransferMultiTokenBatch);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n  const amts = body.amounts.map(amt => `0x${new bignumber_js_1.BigNumber(amt).toString(16)}`); // @ts-ignore\n\n  const data = new client.klay.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.safeBatchTransfer(body.to.trim(), body.tokenId.map(token => token.trim()), amts, body.data ? body.data : '0x0').encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnBatchTransferMultiTokenSignedTransaction = prepareKlaytnBatchTransferMultiTokenSignedTransaction;\n/**\n * Sign Klay mint multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnMintMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.MintMultiToken);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.mint(body.to.trim(), body.tokenId, `0x${new bignumber_js_1.BigNumber(body.amount).toString(16)}`, body.data ? body.data : '0x0').encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnMintMultiTokenSignedTransaction = prepareKlaytnMintMultiTokenSignedTransaction;\n/**\n * Sign Klay mint multiple tokens batch transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnMintMultiTokenBatchSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.MintMultiTokenBatch);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey);\n  const batchAmounts = body.amounts.map(amts => amts.map(amt => `0x${new bignumber_js_1.BigNumber(amt).toString(16)}`)); // @ts-ignore\n\n  const data = new client.klay.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.mintBatch(body.to, body.tokenId, batchAmounts, body.data ? body.data : '0x0').encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnMintMultiTokenBatchSignedTransaction = prepareKlaytnMintMultiTokenBatchSignedTransaction;\n/**\n * Sign Klay deploy multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnDeployMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthDeployMultiToken);\n  const client = await exports.prepareKlaytnClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.klay.Contract(erc1155_abi_1.default).deploy({\n    arguments: [body.uri, body.publicMint ? body.publicMint : false],\n    data: erc1155_bytecode_1.default\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.prepareKlaytnDeployMultiTokenSignedTransaction = prepareKlaytnDeployMultiTokenSignedTransaction;\n/**\n * Sign Klay smart contract write method invocation transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Klay Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareKlaytnSmartContractWriteMethodInvocation = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractMethodInvocation);\n  const {\n    fromPrivateKey,\n    fee,\n    params,\n    methodName,\n    methodABI,\n    contractAddress,\n    nonce,\n    amount,\n    signatureId\n  } = body;\n  const client = await exports.prepareKlaytnClient(testnet, provider, fromPrivateKey);\n  const data = new client.klay.Contract([methodABI]).methods[methodName](...params).encodeABI();\n  return prepareGeneralTx(client, testnet, fromPrivateKey, signatureId, contractAddress.trim(), amount, nonce, data, fee === null || fee === void 0 ? void 0 : fee.gasLimit, fee === null || fee === void 0 ? void 0 : fee.gasPrice);\n};\n\nexports.prepareKlaytnSmartContractWriteMethodInvocation = prepareKlaytnSmartContractWriteMethodInvocation;\n\nconst sendKlaytnSmartContractReadMethodInvocationTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractReadMethodInvocation);\n  const {\n    params,\n    methodName,\n    methodABI,\n    contractAddress\n  } = body;\n  const client = exports.prepareKlaytnClient(testnet, provider);\n  const contract = new client.klay.Contract([methodABI], contractAddress);\n  return {\n    data: await contract.methods[methodName](...params).call()\n  };\n};\n\nexports.sendKlaytnSmartContractReadMethodInvocationTransaction = sendKlaytnSmartContractReadMethodInvocationTransaction;\n/**\n * Send Klay smart store data transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnStoreDataTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnStoreDataTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnStoreDataTransaction = sendKlaytnStoreDataTransaction;\n/**\n * Send Klay mint erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnMintErc20SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnMintErc20SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnMintErc20SignedTransaction = sendKlaytnMintErc20SignedTransaction;\n/**\n * Send Klay burn erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnBurnErc20SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnBurnErc20SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnBurnErc20SignedTransaction = sendKlaytnBurnErc20SignedTransaction;\n/**\n * Send Klay transfer erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnTransferErc20SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnTransferErc20SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnTransferErc20SignedTransaction = sendKlaytnTransferErc20SignedTransaction;\n/**\n * Send Klay deploy erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnDeployErc20SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnDeployErc20SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnDeployErc20SignedTransaction = sendKlaytnDeployErc20SignedTransaction;\n/**\n * Send Klay mint erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnMintErc721SignedTransaction = async (testnet, body, provider) => {\n  if (!body.fromPrivateKey) {\n    return nft_1.mintNFT(body);\n  }\n\n  return blockchain_1.klaytnBroadcast(await exports.prepareKlaytnMintErc721SignedTransaction(testnet, body, provider), body.signatureId);\n};\n\nexports.sendKlaytnMintErc721SignedTransaction = sendKlaytnMintErc721SignedTransaction;\n/**\n * Send Klay mint cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnMintCashbackErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnMintCashbackErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnMintCashbackErc721SignedTransaction = sendKlaytnMintCashbackErc721SignedTransaction;\n/**\n * Send Klay mint cashback erc721 provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnMintErc721ProvenanceSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnMintErc721ProvenanceSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnMintErc721ProvenanceSignedTransaction = sendKlaytnMintErc721ProvenanceSignedTransaction;\n/**\n * Send Klay mint multiple erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnMintMultipleCashbackErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnMintMultipleCashbackErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnMintMultipleCashbackErc721SignedTransaction = sendKlaytnMintMultipleCashbackErc721SignedTransaction;\n/**\n * Send Klay mint multiple erc721 Provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnMintMultipleErc721ProvenanceSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnMintMultipleErc721ProvenanceSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnMintMultipleErc721ProvenanceSignedTransaction = sendKlaytnMintMultipleErc721ProvenanceSignedTransaction;\n/**\n * Send Klay mint multiple erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnMintMultipleErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnMintMultipleErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnMintMultipleErc721SignedTransaction = sendKlaytnMintMultipleErc721SignedTransaction;\n/**\n * Send Klay burn erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnBurnErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnBurnErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnBurnErc721SignedTransaction = sendKlaytnBurnErc721SignedTransaction;\n/**\n * Send Klay transfer erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnTransferErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnTransferErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnTransferErc721SignedTransaction = sendKlaytnTransferErc721SignedTransaction;\n/**\n * Send Klay update cashback for author erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnUpdateCashbackForAuthorErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnUpdateCashbackForAuthorErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnUpdateCashbackForAuthorErc721SignedTransaction = sendKlaytnUpdateCashbackForAuthorErc721SignedTransaction;\n/**\n * Send Klay deploy erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnDeployErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnDeployErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnDeployErc721SignedTransaction = sendKlaytnDeployErc721SignedTransaction;\n/**\n * Send Klay burn multiple tokens erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnBurnMultiTokenSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnBurnMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnBurnMultiTokenSignedTransaction = sendKlaytnBurnMultiTokenSignedTransaction;\n/**\n * Send Klay burn multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnBurnMultiTokenBatchSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnBurnMultiTokenBatchSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnBurnMultiTokenBatchSignedTransaction = sendKlaytnBurnMultiTokenBatchSignedTransaction;\n/**\n * Send Klay transfer multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnTransferMultiTokenSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnTransferMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnTransferMultiTokenSignedTransaction = sendKlaytnTransferMultiTokenSignedTransaction;\n/**\n * Send Klay batch transfer multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnBatchTransferMultiTokenSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnBatchTransferMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnBatchTransferMultiTokenSignedTransaction = sendKlaytnBatchTransferMultiTokenSignedTransaction;\n/**\n * Send Klay mint multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnMintMultiTokenSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnMintMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnMintMultiTokenSignedTransaction = sendKlaytnMintMultiTokenSignedTransaction;\n/**\n * Send Klay mint multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnMintMultiTokenBatchSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnMintMultiTokenBatchSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnMintMultiTokenBatchSignedTransaction = sendKlaytnMintMultiTokenBatchSignedTransaction;\n/**\n * Send Klay deploy multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnDeployMultiTokenSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnDeployMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnDeployMultiTokenSignedTransaction = sendKlaytnDeployMultiTokenSignedTransaction;\n/**\n * Send Klay generate custodial wallet transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnGenerateCustodialWalletSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnGenerateCustodialWalletSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnGenerateCustodialWalletSignedTransaction = sendKlaytnGenerateCustodialWalletSignedTransaction;\n/**\n * Send Klay smart contract method invocation transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendKlaytnSmartContractMethodInvocationTransaction = async (testnet, body, provider) => {\n  if (body.methodABI.stateMutability === 'view') {\n    return exports.sendKlaytnSmartContractReadMethodInvocationTransaction(testnet, body, provider);\n  }\n\n  return blockchain_1.klaytnBroadcast(await exports.prepareKlaytnSmartContractWriteMethodInvocation(testnet, body, provider), body.signatureId);\n};\n\nexports.sendKlaytnSmartContractMethodInvocationTransaction = sendKlaytnSmartContractMethodInvocationTransaction;\n/**\n * Deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendKlaytnDeployMarketplaceListingSignedTransaction = async (testnet, body, provider) => blockchain_1.klaytnBroadcast(await exports.prepareKlaytnDeployMarketplaceListingSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendKlaytnDeployMarketplaceListingSignedTransaction = sendKlaytnDeployMarketplaceListingSignedTransaction;","map":{"version":3,"mappings":"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","names":["klayGetGasPriceInWei","client","klay","getGasPrice","exports","prepareGeneralTx","testnet","fromPrivateKey","signatureId","to","amount","nonce","data","gasLimit","gasPrice","tx","from","value","bignumber_js_1","web3_utils_1","toString","undefined","gas","JSON","stringify","accounts","wallet","getAccount","address","estimateGas","signTransaction","rawTransaction","sendKlaytnTransaction","body","provider","blockchain_1","prepareKlaytnClient","caver_js_1","process","env","TATUM_API_URL","constants_1","TATUM_API_KEY","clear","add","defaultAccount","signKlayKMSTransaction","chain","model_1","KLAY","Error","transactionConfig","parse","serializedTransaction","getKlayErc20ContractDecimals","contractAddress","contract","Contract","token_abi_1","trim","methods","decimals","call","prepareKlaytnGenerateCustodialWalletSignedTransaction","tatum_1","abi","code","wallet_1","deploy","encodeABI","fee","_a","_b","prepareKlaytnSignedTransaction","currency","digits","pow","transfer","multipliedBy","prepareKlaytnStoreDataTransaction","hexData","ethFee","prepareKlaytnMintErc20SignedTransaction","token_abi_2","mint","prepareKlaytnBurnErc20SignedTransaction","burn","prepareKlaytnTransferErc20SignedTransaction","prepareKlaytnDeployErc20SignedTransaction","token_bytecode_1","arguments","name","symbol","totalCap","supply","prepareKlaytnMintErc721SignedTransaction","erc721_abi_1","mintWithTokenURI","tokenId","url","prepareKlaytnMintErc721ProvenanceSignedTransaction","cb","fv","cashbackValues","fixedValues","authorAddresses","map","c","push","erc20","erc721Provenance_abi_1","_c","_d","prepareKlaytnMintCashbackErc721SignedTransaction","cashbacks","mintWithCashback","prepareKlaytnMintMultipleErc721ProvenanceSignedTransaction","i","length","cb2","fv2","j","mintMultiple","t","prepareKlaytnMintMultipleCashbackErc721SignedTransaction","cashback","mintMultipleCashback","prepareKlaytnMintMultipleErc721SignedTransaction","prepareKlaytnBurnErc721SignedTransaction","prepareKlaytnTransferErc721SignedTransaction","provenance","dataBytes","Buffer","provenanceData","tokenPrice","safeTransfer","prepareKlaytnUpdateCashbackForAuthorErc721SignedTransaction","updateCashbackForAuthor","cashbackValue","prepareKlaytnDeployErc721SignedTransaction","erc721_abi_2","deployData","erc721_bytecode_2","erc721Provenance_bytecode_1","erc721_bytecode_1","publicMint","prepareKlaytnDeployMarketplaceListingSignedTransaction","marketplace_1","marketplaceFee","feeRecipient","prepareKlaytnDeployAuctionSignedTransaction","auctionFee","prepareKlaytnBurnMultiTokenSignedTransaction","erc1155_abi_1","account","prepareKlaytnBurnMultiTokenBatchSignedTransaction","burnBatch","amounts","prepareKlaytnTransferMultiTokenSignedTransaction","prepareKlaytnBatchTransferMultiTokenSignedTransaction","amts","amt","safeBatchTransfer","token","prepareKlaytnMintMultiTokenSignedTransaction","prepareKlaytnMintMultiTokenBatchSignedTransaction","batchAmounts","mintBatch","prepareKlaytnDeployMultiTokenSignedTransaction","uri","erc1155_bytecode_1","prepareKlaytnSmartContractWriteMethodInvocation","params","methodName","methodABI","sendKlaytnSmartContractReadMethodInvocationTransaction","sendKlaytnStoreDataTransaction","sendKlaytnMintErc20SignedTransaction","sendKlaytnBurnErc20SignedTransaction","sendKlaytnTransferErc20SignedTransaction","sendKlaytnDeployErc20SignedTransaction","sendKlaytnMintErc721SignedTransaction","nft_1","sendKlaytnMintCashbackErc721SignedTransaction","sendKlaytnMintErc721ProvenanceSignedTransaction","sendKlaytnMintMultipleCashbackErc721SignedTransaction","sendKlaytnMintMultipleErc721ProvenanceSignedTransaction","sendKlaytnMintMultipleErc721SignedTransaction","sendKlaytnBurnErc721SignedTransaction","sendKlaytnTransferErc721SignedTransaction","sendKlaytnUpdateCashbackForAuthorErc721SignedTransaction","sendKlaytnDeployErc721SignedTransaction","sendKlaytnBurnMultiTokenSignedTransaction","sendKlaytnBurnMultiTokenBatchSignedTransaction","sendKlaytnTransferMultiTokenSignedTransaction","sendKlaytnBatchTransferMultiTokenSignedTransaction","sendKlaytnMintMultiTokenSignedTransaction","sendKlaytnMintMultiTokenBatchSignedTransaction","sendKlaytnDeployMultiTokenSignedTransaction","sendKlaytnGenerateCustodialWalletSignedTransaction","sendKlaytnSmartContractMethodInvocationTransaction","stateMutability","sendKlaytnDeployMarketplaceListingSignedTransaction"],"sourceRoot":"","sources":["../../../src/transaction/klaytn.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}