{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatLedgerClose = exports.getLedgerVersion = exports.isConnected = exports.disconnect = exports.connect = void 0;\n\nconst common = __importStar(require(\"../common\"));\n\nfunction isConnected() {\n  return this.connection.isConnected();\n}\n\nexports.isConnected = isConnected;\n\nfunction getLedgerVersion() {\n  return this.connection.getLedgerVersion();\n}\n\nexports.getLedgerVersion = getLedgerVersion;\n\nfunction connect() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return this.connection.connect();\n  });\n}\n\nexports.connect = connect;\n\nfunction disconnect() {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield this.connection.disconnect();\n  });\n}\n\nexports.disconnect = disconnect;\n\nfunction formatLedgerClose(ledgerClose) {\n  return {\n    baseFeeXRP: common.dropsToXrp(ledgerClose.fee_base),\n    ledgerHash: ledgerClose.ledger_hash,\n    ledgerVersion: ledgerClose.ledger_index,\n    ledgerTimestamp: common.rippleTimeToISO8601(ledgerClose.ledger_time),\n    reserveBaseXRP: common.dropsToXrp(ledgerClose.reserve_base),\n    reserveIncrementXRP: common.dropsToXrp(ledgerClose.reserve_inc),\n    transactionCount: ledgerClose.txn_count,\n    validatedLedgerVersions: ledgerClose.validated_ledgers\n  };\n}\n\nexports.formatLedgerClose = formatLedgerClose;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA,SAASA,WAAT,GAAoB;EAClB,OAAO,KAAKC,UAAL,CAAgBD,WAAhB,EAAP;AACD;;AA6B4BE;;AA3B7B,SAASC,gBAAT,GAAyB;EACvB,OAAO,KAAKF,UAAL,CAAgBE,gBAAhB,EAAP;AACD;;AAyByCD;;AAvB1C,SAAeE,OAAf,GAAsB;;IACpB,OAAO,KAAKH,UAAL,CAAgBG,OAAhB,EAAP;EACD;AAAA;;AAqBOF;;AAnBR,SAAeG,UAAf,GAAyB;;IAGvB,MAAM,KAAKJ,UAAL,CAAgBI,UAAhB,EAAN;EACD;AAAA;;AAegBH;;AAbjB,SAASI,iBAAT,CAA2BC,WAA3B,EAA2C;EACzC,OAAO;IACLC,UAAU,EAAEC,MAAM,CAACC,UAAP,CAAkBH,WAAW,CAACI,QAA9B,CADP;IAELC,UAAU,EAAEL,WAAW,CAACM,WAFnB;IAGLC,aAAa,EAAEP,WAAW,CAACQ,YAHtB;IAILC,eAAe,EAAEP,MAAM,CAACQ,mBAAP,CAA2BV,WAAW,CAACW,WAAvC,CAJZ;IAKLC,cAAc,EAAEV,MAAM,CAACC,UAAP,CAAkBH,WAAW,CAACa,YAA9B,CALX;IAMLC,mBAAmB,EAAEZ,MAAM,CAACC,UAAP,CAAkBH,WAAW,CAACe,WAA9B,CANhB;IAOLC,gBAAgB,EAAEhB,WAAW,CAACiB,SAPzB;IAQLC,uBAAuB,EAAElB,WAAW,CAACmB;EARhC,CAAP;AAUD;;AAE2DxB","names":["isConnected","connection","exports","getLedgerVersion","connect","disconnect","formatLedgerClose","ledgerClose","baseFeeXRP","common","dropsToXrp","fee_base","ledgerHash","ledger_hash","ledgerVersion","ledger_index","ledgerTimestamp","rippleTimeToISO8601","ledger_time","reserveBaseXRP","reserve_base","reserveIncrementXRP","reserve_inc","transactionCount","txn_count","validatedLedgerVersions","validated_ledgers"],"sourceRoot":"","sources":["../../../src/server/server.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}