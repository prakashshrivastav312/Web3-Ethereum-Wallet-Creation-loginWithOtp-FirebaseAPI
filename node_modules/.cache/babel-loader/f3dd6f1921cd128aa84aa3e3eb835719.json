{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = __importStar(require(\"lodash\"));\n\nconst assert = __importStar(require(\"assert\"));\n\nconst common_1 = require(\"../../common\");\n\nconst AccountFlags = common_1.constants.AccountFlags;\n\nconst fields_1 = __importDefault(require(\"./fields\"));\n\nfunction getAccountRootModifiedNode(tx) {\n  const modifiedNodes = tx.meta.AffectedNodes.filter(node => {\n    var _a;\n\n    return ((_a = node.ModifiedNode) === null || _a === void 0 ? void 0 : _a.LedgerEntryType) === 'AccountRoot';\n  });\n  assert.ok(modifiedNodes.length === 1);\n  return modifiedNodes[0].ModifiedNode;\n}\n\nfunction parseFlags(tx) {\n  const settings = {};\n\n  if (tx.TransactionType !== 'AccountSet') {\n    return settings;\n  }\n\n  const node = getAccountRootModifiedNode(tx);\n\n  const oldFlags = _.get(node.PreviousFields, 'Flags');\n\n  const newFlags = _.get(node.FinalFields, 'Flags');\n\n  if (oldFlags != null && newFlags != null) {\n    const changedFlags = oldFlags ^ newFlags;\n    const setFlags = newFlags & changedFlags;\n    const clearedFlags = oldFlags & changedFlags;\n    Object.entries(AccountFlags).forEach(entry => {\n      const [flagName, flagValue] = entry;\n\n      if (setFlags & flagValue) {\n        settings[flagName] = true;\n      } else if (clearedFlags & flagValue) {\n        settings[flagName] = false;\n      }\n    });\n  }\n\n  const oldField = _.get(node.PreviousFields, 'AccountTxnID');\n\n  const newField = _.get(node.FinalFields, 'AccountTxnID');\n\n  if (newField && !oldField) {\n    settings.enableTransactionIDTracking = true;\n  } else if (oldField && !newField) {\n    settings.enableTransactionIDTracking = false;\n  }\n\n  return settings;\n}\n\nfunction parseSettings(tx) {\n  const txType = tx.TransactionType;\n  assert.ok(txType === 'AccountSet' || txType === 'SetRegularKey' || txType === 'SignerListSet');\n  return Object.assign({}, parseFlags(tx), fields_1.default(tx));\n}\n\nexports.default = parseSettings;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA,MAAMA,YAAY,GAAGC,mBAAUD,YAA/B;;AACA;;AAEA,SAASE,0BAAT,CAAoCC,EAApC,EAA2C;EACzC,MAAMC,aAAa,GAAGD,EAAE,CAACE,IAAH,CAAQC,aAAR,CAAsBC,MAAtB,CAA6BC,IAAI,IAAG;IAAA;;IAAC,kBAAI,CAACC,YAAL,MAAiB,IAAjB,IAAiBC,aAAjB,GAAiB,MAAjB,GAAiBA,GAAEC,eAAnB,MAAuC,aAAvC;EAAoD,CAAzF,CAAtB;EACAC,MAAM,CAACC,EAAP,CAAUT,aAAa,CAACU,MAAd,KAAyB,CAAnC;EACA,OAAOV,aAAa,CAAC,CAAD,CAAb,CAAiBK,YAAxB;AACD;;AAED,SAASM,UAAT,CAAoBZ,EAApB,EAA2B;EACzB,MAAMa,QAAQ,GAAQ,EAAtB;;EACA,IAAIb,EAAE,CAACc,eAAH,KAAuB,YAA3B,EAAyC;IACvC,OAAOD,QAAP;EACD;;EAED,MAAMR,IAAI,GAAGN,0BAA0B,CAACC,EAAD,CAAvC;;EACA,MAAMe,QAAQ,GAAGC,CAAC,CAACC,GAAF,CAAMZ,IAAI,CAACa,cAAX,EAA2B,OAA3B,CAAjB;;EACA,MAAMC,QAAQ,GAAGH,CAAC,CAACC,GAAF,CAAMZ,IAAI,CAACe,WAAX,EAAwB,OAAxB,CAAjB;;EAEA,IAAIL,QAAQ,IAAI,IAAZ,IAAoBI,QAAQ,IAAI,IAApC,EAA0C;IACxC,MAAME,YAAY,GAAGN,QAAQ,GAAGI,QAAhC;IACA,MAAMG,QAAQ,GAAGH,QAAQ,GAAGE,YAA5B;IACA,MAAME,YAAY,GAAGR,QAAQ,GAAGM,YAAhC;IACAG,MAAM,CAACC,OAAP,CAAe5B,YAAf,EAA6B6B,OAA7B,CAAqCC,KAAK,IAAG;MAC3C,MAAM,CAACC,QAAD,EAAWC,SAAX,IAAwBF,KAA9B;;MACA,IAAIL,QAAQ,GAAGO,SAAf,EAA0B;QACxBhB,QAAQ,CAACe,QAAD,CAAR,GAAqB,IAArB;MACD,CAFD,MAEO,IAAIL,YAAY,GAAGM,SAAnB,EAA8B;QACnChB,QAAQ,CAACe,QAAD,CAAR,GAAqB,KAArB;MACD;IACF,CAPD;EAQD;;EAMD,MAAME,QAAQ,GAAGd,CAAC,CAACC,GAAF,CAAMZ,IAAI,CAACa,cAAX,EAA2B,cAA3B,CAAjB;;EACA,MAAMa,QAAQ,GAAGf,CAAC,CAACC,GAAF,CAAMZ,IAAI,CAACe,WAAX,EAAwB,cAAxB,CAAjB;;EACA,IAAIW,QAAQ,IAAI,CAACD,QAAjB,EAA2B;IACzBjB,QAAQ,CAACmB,2BAAT,GAAuC,IAAvC;EACD,CAFD,MAEO,IAAIF,QAAQ,IAAI,CAACC,QAAjB,EAA2B;IAChClB,QAAQ,CAACmB,2BAAT,GAAuC,KAAvC;EACD;;EAED,OAAOnB,QAAP;AACD;;AAED,SAASoB,aAAT,CAAuBjC,EAAvB,EAA8B;EAC5B,MAAMkC,MAAM,GAAGlC,EAAE,CAACc,eAAlB;EACAL,MAAM,CAACC,EAAP,CACEwB,MAAM,KAAK,YAAX,IACEA,MAAM,KAAK,eADb,IAEEA,MAAM,KAAK,eAHf;EAMA,OAAOV,MAAM,CAACW,MAAP,CAAc,EAAd,EAAkBvB,UAAU,CAACZ,EAAD,CAA5B,EAAkCoC,iBAAYpC,EAAZ,CAAlC,CAAP;AACD;;AAEDqC,kBAAeJ,aAAf","names":["AccountFlags","common_1","getAccountRootModifiedNode","tx","modifiedNodes","meta","AffectedNodes","filter","node","ModifiedNode","_a","LedgerEntryType","assert","ok","length","parseFlags","settings","TransactionType","oldFlags","_","get","PreviousFields","newFlags","FinalFields","changedFlags","setFlags","clearedFlags","Object","entries","forEach","entry","flagName","flagValue","oldField","newField","enableTransactionIDTracking","parseSettings","txType","assign","fields_1","exports"],"sourceRoot":"","sources":["../../../../src/ledger/parse/settings.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}