{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signBnbKMSTransaction = void 0;\n\nconst javascript_sdk_1 = require(\"@binance-chain/javascript-sdk\");\n\nconst crypto_1 = require(\"@binance-chain/javascript-sdk/lib/crypto\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst model_1 = require(\"../model\");\n/**\n * Sign Bnb pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param testnet mainnet or testnet version\n * @param provider url of the Bnb Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst signBnbKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {\n  if (tx.chain !== model_1.Currency.BNB) {\n    throw Error('Unsupported chain.');\n  }\n\n  const bnbClient = new javascript_sdk_1.BncClient(provider ? provider : testnet ? 'https://testnet-dex-atlantic.binance.org' : 'https://dex-european.binance.org');\n  bnbClient.chooseNetwork(testnet ? 'testnet' : 'mainnet');\n  await bnbClient.setPrivateKey(fromPrivateKey, true);\n  await bnbClient.initChain();\n  const fromAddress = crypto_1.getAddressFromPrivateKey(fromPrivateKey, testnet ? 'tbnb' : 'bnb');\n  const account = await blockchain_1.bnbGetAccount(fromAddress);\n  bnbClient.setAccountNumber(account.account_number);\n  const {\n    msg,\n    signMsg,\n    memo\n  } = JSON.parse(tx.serializedTransaction);\n  msg.inputs = msg.inputs.map(i => {\n    i.address = Buffer.from(i.address.data);\n    return i;\n  });\n  msg.outputs = msg.outputs.map(i => {\n    i.address = Buffer.from(i.address.data);\n    return i;\n  });\n  const signedTx = await bnbClient._prepareTransaction(msg, signMsg, fromAddress, account.sequence, memo);\n  return signedTx.serialize();\n};\n\nexports.signBnbKMSTransaction = signBnbKMSTransaction;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;AAEA;;;;;;;;;;AAQO,MAAMA,qBAAqB,GAAG,OAAOC,EAAP,EAA2BC,cAA3B,EAAmDC,OAAnD,EAAqEC,QAArE,KAA0F;EAC3H,IAAIH,EAAE,CAACI,KAAH,KAAaC,iBAASC,GAA1B,EAA+B;IAC3B,MAAMC,KAAK,CAAC,oBAAD,CAAX;EACH;;EACD,MAAMC,SAAS,GAAG,IAAIC,0BAAJ,CAAcN,QAAQ,GAAGA,QAAH,GAAeD,OAAO,GAAG,0CAAH,GAAgD,kCAA5F,CAAlB;EACAM,SAAS,CAACE,aAAV,CAAwBR,OAAO,GAAG,SAAH,GAAe,SAA9C;EACA,MAAMM,SAAS,CAACG,aAAV,CAAwBV,cAAxB,EAAwC,IAAxC,CAAN;EACA,MAAMO,SAAS,CAACI,SAAV,EAAN;EACA,MAAMC,WAAW,GAAGC,kCAAyBb,cAAzB,EAAyCC,OAAO,GAAG,MAAH,GAAY,KAA5D,CAApB;EACA,MAAMa,OAAO,GAAG,MAAMC,2BAAcH,WAAd,CAAtB;EACAL,SAAS,CAACS,gBAAV,CAA2BF,OAAO,CAACG,cAAnC;EACA,MAAM;IAACC,GAAD;IAAMC,OAAN;IAAeC;EAAf,IAAuBC,IAAI,CAACC,KAAL,CAAWvB,EAAE,CAACwB,qBAAd,CAA7B;EACAL,GAAG,CAACM,MAAJ,GAAaN,GAAG,CAACM,MAAJ,CAAWC,GAAX,CAAgBC,CAAD,IAAW;IACnCA,CAAC,CAACC,OAAF,GAAYC,MAAM,CAACC,IAAP,CAAYH,CAAC,CAACC,OAAF,CAAUG,IAAtB,CAAZ;IACA,OAAOJ,CAAP;EACH,CAHY,CAAb;EAIAR,GAAG,CAACa,OAAJ,GAAcb,GAAG,CAACa,OAAJ,CAAYN,GAAZ,CAAiBC,CAAD,IAAW;IACrCA,CAAC,CAACC,OAAF,GAAYC,MAAM,CAACC,IAAP,CAAYH,CAAC,CAACC,OAAF,CAAUG,IAAtB,CAAZ;IACA,OAAOJ,CAAP;EACH,CAHa,CAAd;EAIA,MAAMM,QAAQ,GAAG,MAAMzB,SAAS,CAAC0B,mBAAV,CACnBf,GADmB,EAEnBC,OAFmB,EAGnBP,WAHmB,EAInBE,OAAO,CAACoB,QAJW,EAKnBd,IALmB,CAAvB;EAOA,OAAOY,QAAQ,CAACG,SAAT,EAAP;AACH,CA5BM;;AAAMC,gCAAqBtC,qBAArB","names":["signBnbKMSTransaction","tx","fromPrivateKey","testnet","provider","chain","model_1","BNB","Error","bnbClient","javascript_sdk_1","chooseNetwork","setPrivateKey","initChain","fromAddress","crypto_1","account","blockchain_1","setAccountNumber","account_number","msg","signMsg","memo","JSON","parse","serializedTransaction","inputs","map","i","address","Buffer","from","data","outputs","signedTx","_prepareTransaction","sequence","serialize","exports"],"sourceRoot":"","sources":["../../../src/transaction/bnb.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}