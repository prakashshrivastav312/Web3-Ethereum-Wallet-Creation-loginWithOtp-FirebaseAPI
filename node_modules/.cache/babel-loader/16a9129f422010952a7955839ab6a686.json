{"ast":null,"code":"/*\n    Copyright 2022 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst AccessTuple = require('./accessTuple');\n/**\n * Represents an access list.\n * AccessList is an EIP-2930 access list.\n * @class\n */\n\n\nclass AccessList extends Array {\n  /**\n   * Creates an access list.\n   *\n   * @example\n   * const items = [\n   *      caver.transaction.utils.accessTuple.create('0x{address in hex}', [ '0x{storage key}' ]),\n   *      caver.transaction.utils.accessTuple.create('0x{address in hex}', [ '0x{storage key}' ]),\n   * ]\n   * const result = caver.transaction.utils.accessList.create(items)\n   *\n   *\n   * const items = [\n   *      { address: '0x{address in hex}', storageKeys: [ '0x{storage key}' ] },\n   *      { address: '0x{address in hex}', storageKeys: [ '0x{storage key}' ] },\n   * ]\n   * const result = caver.transaction.utils.accessList.create(items)\n   *\n   * @param {Array.<AccessTuple> | Array.<module:Transaction.AccessTupleObject>} items - An array of the access list items.\n   * @return {AccessList} An access list.\n   */\n  static create(items) {\n    const accessList = new AccessList();\n\n    for (const item of items) {\n      accessList.push(AccessTuple.create(item.address, item.storageKeys));\n    }\n\n    return accessList;\n  }\n  /**\n   * Returns a decoded access list.\n   *\n   * @example\n   * const encoded = [\n   *      [\n   *          '0xac60c5e6d2a8f3fe856ad0a39522098e03065893',\n   *          [\n   *              '0x0000000000000000000000000000000000000000000000000000000000000000'\n   *          ]\n   *      ]\n   * ]\n   * const result = caver.transaction.utils.accessList.decode(encoded)\n   *\n   * @param {Array.<Array.<string|Array.<string>>> items - An encoded access list.\n   * @return {AccessList} An access list.\n   */\n\n\n  static decode(encoded) {\n    const accessList = new AccessList();\n\n    for (const item of encoded) {\n      accessList.push(AccessTuple.create(item[0], item[1]));\n    }\n\n    return accessList;\n  }\n  /**\n   * Added access tuple in access list.\n   *\n   * @example\n   * accessList.push(caver.transaction.utils.accessTuple.create('0x{address in hex}', [ '0x{storage key}' ]))\n   * accessList.push({ address: '0x{address in hex}', storageKeys: [ '0x{storage key}' ] })\n   *\n   * @param {AccessTuple | module:Transaction.AccessTupleObject} item - An object of the access list item.\n   * @return {number}\n   */\n\n\n  push(item) {\n    if (!(item instanceof AccessTuple)) item = AccessTuple.create(item);\n    return super.push(item);\n  }\n  /**\n   * Returns an encoded access list.\n   *\n   * @example\n   * const result = accessList.encodeToBytes()\n   *\n   * @return {Array.<Array.<string|Array.<string>>>} An encoded access list.\n   */\n\n\n  encodeToBytes() {\n    const bufferAccessList = [];\n\n    for (let i = 0; i < this.length; i++) {\n      const item = this[i];\n      bufferAccessList.push(item.encodeToBytes());\n    }\n\n    return bufferAccessList;\n  }\n  /**\n   * Returns whether the AccessList object is the same as the accessList passed as a parameter.\n   *\n   * @example\n   * const result = accessList.isEqual(acl)\n   *\n   * @return {boolean} Returns `true` is accessList has value with a param.\n   */\n\n\n  isEqual(acl) {\n    if (this.length !== acl.length) return false;\n\n    for (let i = 0; i < this.length; i++) {\n      const item = this[i];\n      const target = acl[i];\n      if (!item.isEqual(target)) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Returns a JSON object without _ prefix variable name.\n   *\n   * @example\n   * const result = accessList.toObject()\n   *\n   * @return {Array.<module:Transaction.AccessTupleObject>} An access list object.\n   */\n\n\n  toObject() {\n    const accessListObject = [];\n\n    for (let i = 0; i < this.length; i++) {\n      accessListObject.push(this[i].toObject());\n    }\n\n    return accessListObject;\n  }\n\n}\n\nmodule.exports = AccessList;","map":{"version":3,"names":["AccessTuple","require","AccessList","Array","create","items","accessList","item","push","address","storageKeys","decode","encoded","encodeToBytes","bufferAccessList","i","length","isEqual","acl","target","toObject","accessListObject","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-transaction/src/utils/accessList.js"],"sourcesContent":["/*\n    Copyright 2022 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst AccessTuple = require('./accessTuple')\n\n/**\n * Represents an access list.\n * AccessList is an EIP-2930 access list.\n * @class\n */\nclass AccessList extends Array {\n    /**\n     * Creates an access list.\n     *\n     * @example\n     * const items = [\n     *      caver.transaction.utils.accessTuple.create('0x{address in hex}', [ '0x{storage key}' ]),\n     *      caver.transaction.utils.accessTuple.create('0x{address in hex}', [ '0x{storage key}' ]),\n     * ]\n     * const result = caver.transaction.utils.accessList.create(items)\n     *\n     *\n     * const items = [\n     *      { address: '0x{address in hex}', storageKeys: [ '0x{storage key}' ] },\n     *      { address: '0x{address in hex}', storageKeys: [ '0x{storage key}' ] },\n     * ]\n     * const result = caver.transaction.utils.accessList.create(items)\n     *\n     * @param {Array.<AccessTuple> | Array.<module:Transaction.AccessTupleObject>} items - An array of the access list items.\n     * @return {AccessList} An access list.\n     */\n    static create(items) {\n        const accessList = new AccessList()\n        for (const item of items) {\n            accessList.push(AccessTuple.create(item.address, item.storageKeys))\n        }\n        return accessList\n    }\n\n    /**\n     * Returns a decoded access list.\n     *\n     * @example\n     * const encoded = [\n     *      [\n     *          '0xac60c5e6d2a8f3fe856ad0a39522098e03065893',\n     *          [\n     *              '0x0000000000000000000000000000000000000000000000000000000000000000'\n     *          ]\n     *      ]\n     * ]\n     * const result = caver.transaction.utils.accessList.decode(encoded)\n     *\n     * @param {Array.<Array.<string|Array.<string>>> items - An encoded access list.\n     * @return {AccessList} An access list.\n     */\n    static decode(encoded) {\n        const accessList = new AccessList()\n        for (const item of encoded) {\n            accessList.push(AccessTuple.create(item[0], item[1]))\n        }\n        return accessList\n    }\n\n    /**\n     * Added access tuple in access list.\n     *\n     * @example\n     * accessList.push(caver.transaction.utils.accessTuple.create('0x{address in hex}', [ '0x{storage key}' ]))\n     * accessList.push({ address: '0x{address in hex}', storageKeys: [ '0x{storage key}' ] })\n     *\n     * @param {AccessTuple | module:Transaction.AccessTupleObject} item - An object of the access list item.\n     * @return {number}\n     */\n    push(item) {\n        if (!(item instanceof AccessTuple)) item = AccessTuple.create(item)\n        return super.push(item)\n    }\n\n    /**\n     * Returns an encoded access list.\n     *\n     * @example\n     * const result = accessList.encodeToBytes()\n     *\n     * @return {Array.<Array.<string|Array.<string>>>} An encoded access list.\n     */\n    encodeToBytes() {\n        const bufferAccessList = []\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i]\n            bufferAccessList.push(item.encodeToBytes())\n        }\n        return bufferAccessList\n    }\n\n    /**\n     * Returns whether the AccessList object is the same as the accessList passed as a parameter.\n     *\n     * @example\n     * const result = accessList.isEqual(acl)\n     *\n     * @return {boolean} Returns `true` is accessList has value with a param.\n     */\n    isEqual(acl) {\n        if (this.length !== acl.length) return false\n\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i]\n            const target = acl[i]\n            if (!item.isEqual(target)) return false\n        }\n        return true\n    }\n\n    /**\n     * Returns a JSON object without _ prefix variable name.\n     *\n     * @example\n     * const result = accessList.toObject()\n     *\n     * @return {Array.<module:Transaction.AccessTupleObject>} An access list object.\n     */\n    toObject() {\n        const accessListObject = []\n        for (let i = 0; i < this.length; i++) {\n            accessListObject.push(this[i].toObject())\n        }\n        return accessListObject\n    }\n}\n\nmodule.exports = AccessList\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}