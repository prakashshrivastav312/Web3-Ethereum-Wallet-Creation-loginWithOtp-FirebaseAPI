{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  Provider\n} = require('./response-types');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'findProvs', import('ipfs-core/src/components/dht')>}\n   */\n  async function* findProvs(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/findprovs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${new CID(cid)}`,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const {\n          ID,\n          Addrs\n        } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n\n  return findProvs;\n});","map":{"version":3,"names":["CID","require","multiaddr","configure","toUrlSearchParams","Provider","module","exports","api","findProvs","cid","options","res","post","timeout","signal","searchParams","arg","headers","message","ndjson","Type","Responses","ID","Addrs","id","addrs","map","a"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/dht/find-provs.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Provider } = require('./response-types')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'findProvs', import('ipfs-core/src/components/dht')>}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${new CID(cid)}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const { ID, Addrs } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => multiaddr(a))\n          }\n        }\n      }\n    }\n  }\n\n  return findProvs\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;EAAEI;AAAF,IAAeJ,OAAO,CAAC,kBAAD,CAA5B;;AAEAK,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,SAAjB,CAA4BC,GAA5B,EAA+C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC7C,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,eAAT,EAA0B;MAC1CC,OAAO,EAAEH,OAAO,CAACG,OADyB;MAE1CC,MAAM,EAAEJ,OAAO,CAACI,MAF0B;MAG1CC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAG,GAAE,IAAIjB,GAAJ,CAAQU,GAAR,CAAa,EADS;QAE9B,GAAGC;MAF2B,CAAD,CAHW;MAO1CO,OAAO,EAAEP,OAAO,CAACO;IAPyB,CAA1B,CAAlB;;IAUA,WAAW,MAAMC,OAAjB,IAA4BP,GAAG,CAACQ,MAAJ,EAA5B,EAA0C;MACxC,IAAID,OAAO,CAACE,IAAR,KAAiBhB,QAAjB,IAA6Bc,OAAO,CAACG,SAAzC,EAAoD;QAClD,KAAK,MAAM;UAAEC,EAAF;UAAMC;QAAN,CAAX,IAA4BL,OAAO,CAACG,SAApC,EAA+C;UAC7C,MAAM;YACJG,EAAE,EAAEF,EADA;YAEJG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkBC,CAAC,IAAI1B,SAAS,CAAC0B,CAAD,CAAhC;UAFH,CAAN;QAID;MACF;IACF;EACF;;EAED,OAAOnB,SAAP;AACD,CA5ByB,CAA1B"},"metadata":{},"sourceType":"script"}