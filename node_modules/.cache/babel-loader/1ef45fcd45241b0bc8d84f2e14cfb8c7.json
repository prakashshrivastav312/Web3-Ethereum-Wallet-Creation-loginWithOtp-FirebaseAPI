{"ast":null,"code":"/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst utils = require('../../../../caver-utils');\n\nconst helpers = require('../../../../caver-core-helpers');\n\nconst {\n  ACCOUNT_UPDATE_TYPE_TAG,\n  ACCOUNT_KEY_NIL_TAG,\n  ACCOUNT_KEY_LEGACY_TAG,\n  ACCOUNT_KEY_PUBLIC_TAG,\n  ACCOUNT_KEY_FAIL_TAG,\n  ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG,\n  ACCOUNT_KEY_ROLE_BASED_TAG,\n  FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\n  FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG\n} = helpers.constants;\n\nfunction rlpEncodeForAccountUpdate(transaction) {\n  const accountKey = resolveRawKeyToAccountKey(transaction);\n  return RLP.encode([RLP.encode([ACCOUNT_UPDATE_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase(), accountKey]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedAccountUpdate(transaction) {\n  if (transaction.senderRawTransaction) {\n    const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`; // eslint-disable-next-line no-unused-vars\n\n    const [nonce, gasPrice, gas, from, accountKey, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction);\n    return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), from.toLowerCase(), accountKey]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  const accountKey = resolveRawKeyToAccountKey(transaction);\n  return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase(), accountKey]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction) {\n  if (transaction.senderRawTransaction) {\n    const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`; // eslint-disable-next-line no-unused-vars\n\n    const [nonce, gasPrice, gas, from, accountKey, feeRatio, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction);\n    return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), from.toLowerCase(), accountKey, Bytes.fromNat(feeRatio)]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  const accountKey = resolveRawKeyToAccountKey(transaction);\n  return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase(), accountKey, Bytes.fromNat(transaction.feeRatio)]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction resolveRawKeyToAccountKey(transaction) {\n  // Handles the case where AccountForUpdate is set in key field in transaction object to update account.\n  if (transaction.key) {\n    // If the key field is a string,\n    // it means that the already encoded Account Key is passed as a parameter.\n    if (_.isString(transaction.key)) {\n      return transaction.key;\n    }\n\n    if (transaction.from && transaction.from.toLowerCase() !== transaction.key.address.toLowerCase()) {\n      throw new Error('The value of the from field of the transaction does not match the address of AccountForUpdate.');\n    }\n\n    transaction.key.fillUpdateObject(transaction);\n  }\n\n  if (transaction.legacyKey) return ACCOUNT_KEY_LEGACY_TAG;\n  if (transaction.failKey) return ACCOUNT_KEY_FAIL_TAG;\n\n  if (transaction.multisig) {\n    const {\n      threshold,\n      keys\n    } = transaction.multisig;\n    const encodedMultisigPublicKeys = keys.map(_ref => {\n      let {\n        weight,\n        publicKey\n      } = _ref;\n      if (!weight) throw new Error('weight should be specified for multisig account');\n      if (!publicKey) throw new Error('publicKey should be specified for multisig account');\n      const compressedPublicKey = utils.compressPublicKey(publicKey);\n      return [Bytes.fromNat(utils.numberToHex(weight)), compressedPublicKey];\n    });\n    return ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG + RLP.encode([Bytes.fromNat(utils.numberToHex(threshold)), encodedMultisigPublicKeys]).slice(2);\n  }\n\n  if (transaction.publicKey) {\n    const compressedPublicKey = utils.compressPublicKey(transaction.publicKey);\n    return ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2);\n  }\n\n  if (transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey) {\n    // Create a new object so as not to damage the input transaction object.\n    const roleBasedObject = {};\n    roleBasedObject.roleTransactionKey = transaction.roleTransactionKey ? resolveRawKeyToAccountKey(transaction.roleTransactionKey) : ACCOUNT_KEY_NIL_TAG;\n    roleBasedObject.roleAccountUpdateKey = transaction.roleAccountUpdateKey ? resolveRawKeyToAccountKey(transaction.roleAccountUpdateKey) : ACCOUNT_KEY_NIL_TAG;\n    roleBasedObject.roleFeePayerKey = transaction.roleFeePayerKey ? resolveRawKeyToAccountKey(transaction.roleFeePayerKey) : ACCOUNT_KEY_NIL_TAG;\n    const keys = [roleBasedObject.roleTransactionKey, roleBasedObject.roleAccountUpdateKey, roleBasedObject.roleFeePayerKey];\n    return ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(keys).slice(2);\n  }\n\n  return ACCOUNT_KEY_NIL_TAG;\n}\n\nfunction parseAccountKey(transaction) {\n  const key = transaction.accountKey;\n  delete transaction.accountKey;\n\n  if (key.startsWith(ACCOUNT_KEY_LEGACY_TAG)) {\n    transaction.legacyKey = true;\n  } else if (key.startsWith(ACCOUNT_KEY_FAIL_TAG)) {\n    transaction.failKey = true;\n  } else if (key.startsWith(ACCOUNT_KEY_PUBLIC_TAG)) {\n    transaction.publicKey = RLP.decode(`0x${key.slice(ACCOUNT_KEY_PUBLIC_TAG.length)}`);\n  } else if (key.startsWith(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n    let [threshold, multiSigkeys] = RLP.decode(`0x${key.slice(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length)}`);\n    multiSigkeys = multiSigkeys.map(k => {\n      return {\n        weight: utils.hexToNumber(k[0]),\n        publicKey: k[1]\n      };\n    });\n    transaction.multisig = {\n      threshold: utils.hexToNumber(threshold),\n      keys: multiSigkeys\n    };\n  } else if (key.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) {\n    const keys = RLP.decode(`0x${key.slice(ACCOUNT_KEY_ROLE_BASED_TAG.length)}`);\n    keys.map(k => {\n      if (k.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.');\n    });\n    if (keys.length > 0 && !keys[0].startsWith(ACCOUNT_KEY_NIL_TAG)) transaction.roleTransactionKey = parseAccountKey({\n      accountKey: keys[0]\n    });\n    if (keys.length > 1 && !keys[1].startsWith(ACCOUNT_KEY_NIL_TAG)) transaction.roleAccountUpdateKey = parseAccountKey({\n      accountKey: keys[1]\n    });\n    if (keys.length > 2 && !keys[2].startsWith(ACCOUNT_KEY_NIL_TAG)) transaction.roleFeePayerKey = parseAccountKey({\n      accountKey: keys[2]\n    });\n  }\n\n  return transaction;\n}\n\nmodule.exports = {\n  rlpEncodeForAccountUpdate,\n  rlpEncodeForFeeDelegatedAccountUpdate,\n  rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n  parseAccountKey,\n  resolveRawKeyToAccountKey\n};","map":{"version":3,"names":["_","require","RLP","Bytes","utils","helpers","ACCOUNT_UPDATE_TYPE_TAG","ACCOUNT_KEY_NIL_TAG","ACCOUNT_KEY_LEGACY_TAG","ACCOUNT_KEY_PUBLIC_TAG","ACCOUNT_KEY_FAIL_TAG","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","ACCOUNT_KEY_ROLE_BASED_TAG","FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG","FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG","constants","rlpEncodeForAccountUpdate","transaction","accountKey","resolveRawKeyToAccountKey","encode","fromNat","nonce","gasPrice","gas","from","toLowerCase","chainId","rlpEncodeForFeeDelegatedAccountUpdate","senderRawTransaction","typeDetacehdRawTransaction","slice","v","r","s","rlpDecode","feePayer","rlpEncodeForFeeDelegatedAccountUpdateWithRatio","feeRatio","key","isString","address","Error","fillUpdateObject","legacyKey","failKey","multisig","threshold","keys","encodedMultisigPublicKeys","map","weight","publicKey","compressedPublicKey","compressPublicKey","numberToHex","roleTransactionKey","roleAccountUpdateKey","roleFeePayerKey","roleBasedObject","parseAccountKey","startsWith","decode","length","multiSigkeys","k","hexToNumber","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/transactionType/account.js"],"sourcesContent":["/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst utils = require('../../../../caver-utils')\nconst helpers = require('../../../../caver-core-helpers')\n\nconst {\n    ACCOUNT_UPDATE_TYPE_TAG,\n\n    ACCOUNT_KEY_NIL_TAG,\n    ACCOUNT_KEY_LEGACY_TAG,\n    ACCOUNT_KEY_PUBLIC_TAG,\n    ACCOUNT_KEY_FAIL_TAG,\n    ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG,\n    ACCOUNT_KEY_ROLE_BASED_TAG,\n\n    FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\n    FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG,\n} = helpers.constants\n\nfunction rlpEncodeForAccountUpdate(transaction) {\n    const accountKey = resolveRawKeyToAccountKey(transaction)\n\n    return RLP.encode([\n        RLP.encode([\n            ACCOUNT_UPDATE_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.from.toLowerCase(),\n            accountKey,\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nfunction rlpEncodeForFeeDelegatedAccountUpdate(transaction) {\n    if (transaction.senderRawTransaction) {\n        const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`\n\n        // eslint-disable-next-line no-unused-vars\n        const [nonce, gasPrice, gas, from, accountKey, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction)\n\n        return RLP.encode([\n            RLP.encode([\n                FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\n                Bytes.fromNat(nonce),\n                Bytes.fromNat(gasPrice),\n                Bytes.fromNat(gas),\n                from.toLowerCase(),\n                accountKey,\n            ]),\n            transaction.feePayer.toLowerCase(),\n            Bytes.fromNat(transaction.chainId || '0x1'),\n            '0x',\n            '0x',\n        ])\n    }\n    const accountKey = resolveRawKeyToAccountKey(transaction)\n\n    return RLP.encode([\n        RLP.encode([\n            FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.from.toLowerCase(),\n            accountKey,\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nfunction rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction) {\n    if (transaction.senderRawTransaction) {\n        const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`\n\n        // eslint-disable-next-line no-unused-vars\n        const [nonce, gasPrice, gas, from, accountKey, feeRatio, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction)\n\n        return RLP.encode([\n            RLP.encode([\n                FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG,\n                Bytes.fromNat(nonce),\n                Bytes.fromNat(gasPrice),\n                Bytes.fromNat(gas),\n                from.toLowerCase(),\n                accountKey,\n                Bytes.fromNat(feeRatio),\n            ]),\n            transaction.feePayer.toLowerCase(),\n            Bytes.fromNat(transaction.chainId || '0x1'),\n            '0x',\n            '0x',\n        ])\n    }\n    const accountKey = resolveRawKeyToAccountKey(transaction)\n\n    return RLP.encode([\n        RLP.encode([\n            FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.from.toLowerCase(),\n            accountKey,\n            Bytes.fromNat(transaction.feeRatio),\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nfunction resolveRawKeyToAccountKey(transaction) {\n    // Handles the case where AccountForUpdate is set in key field in transaction object to update account.\n    if (transaction.key) {\n        // If the key field is a string,\n        // it means that the already encoded Account Key is passed as a parameter.\n        if (_.isString(transaction.key)) {\n            return transaction.key\n        }\n        if (transaction.from && transaction.from.toLowerCase() !== transaction.key.address.toLowerCase()) {\n            throw new Error('The value of the from field of the transaction does not match the address of AccountForUpdate.')\n        }\n        transaction.key.fillUpdateObject(transaction)\n    }\n\n    if (transaction.legacyKey) return ACCOUNT_KEY_LEGACY_TAG\n    if (transaction.failKey) return ACCOUNT_KEY_FAIL_TAG\n\n    if (transaction.multisig) {\n        const { threshold, keys } = transaction.multisig\n\n        const encodedMultisigPublicKeys = keys.map(({ weight, publicKey }) => {\n            if (!weight) throw new Error('weight should be specified for multisig account')\n            if (!publicKey) throw new Error('publicKey should be specified for multisig account')\n\n            const compressedPublicKey = utils.compressPublicKey(publicKey)\n\n            return [Bytes.fromNat(utils.numberToHex(weight)), compressedPublicKey]\n        })\n\n        return (\n            ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG +\n            RLP.encode([Bytes.fromNat(utils.numberToHex(threshold)), encodedMultisigPublicKeys]).slice(2)\n        )\n    }\n\n    if (transaction.publicKey) {\n        const compressedPublicKey = utils.compressPublicKey(transaction.publicKey)\n\n        return ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2)\n    }\n\n    if (transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey) {\n        // Create a new object so as not to damage the input transaction object.\n        const roleBasedObject = {}\n\n        roleBasedObject.roleTransactionKey = transaction.roleTransactionKey\n            ? resolveRawKeyToAccountKey(transaction.roleTransactionKey)\n            : ACCOUNT_KEY_NIL_TAG\n        roleBasedObject.roleAccountUpdateKey = transaction.roleAccountUpdateKey\n            ? resolveRawKeyToAccountKey(transaction.roleAccountUpdateKey)\n            : ACCOUNT_KEY_NIL_TAG\n        roleBasedObject.roleFeePayerKey = transaction.roleFeePayerKey\n            ? resolveRawKeyToAccountKey(transaction.roleFeePayerKey)\n            : ACCOUNT_KEY_NIL_TAG\n\n        const keys = [roleBasedObject.roleTransactionKey, roleBasedObject.roleAccountUpdateKey, roleBasedObject.roleFeePayerKey]\n        return ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(keys).slice(2)\n    }\n\n    return ACCOUNT_KEY_NIL_TAG\n}\n\nfunction parseAccountKey(transaction) {\n    const key = transaction.accountKey\n    delete transaction.accountKey\n\n    if (key.startsWith(ACCOUNT_KEY_LEGACY_TAG)) {\n        transaction.legacyKey = true\n    } else if (key.startsWith(ACCOUNT_KEY_FAIL_TAG)) {\n        transaction.failKey = true\n    } else if (key.startsWith(ACCOUNT_KEY_PUBLIC_TAG)) {\n        transaction.publicKey = RLP.decode(`0x${key.slice(ACCOUNT_KEY_PUBLIC_TAG.length)}`)\n    } else if (key.startsWith(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n        let [threshold, multiSigkeys] = RLP.decode(`0x${key.slice(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length)}`)\n        multiSigkeys = multiSigkeys.map(k => {\n            return { weight: utils.hexToNumber(k[0]), publicKey: k[1] }\n        })\n        transaction.multisig = {\n            threshold: utils.hexToNumber(threshold),\n            keys: multiSigkeys,\n        }\n    } else if (key.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) {\n        const keys = RLP.decode(`0x${key.slice(ACCOUNT_KEY_ROLE_BASED_TAG.length)}`)\n        keys.map(k => {\n            if (k.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.')\n        })\n\n        if (keys.length > 0 && !keys[0].startsWith(ACCOUNT_KEY_NIL_TAG))\n            transaction.roleTransactionKey = parseAccountKey({\n                accountKey: keys[0],\n            })\n        if (keys.length > 1 && !keys[1].startsWith(ACCOUNT_KEY_NIL_TAG))\n            transaction.roleAccountUpdateKey = parseAccountKey({\n                accountKey: keys[1],\n            })\n        if (keys.length > 2 && !keys[2].startsWith(ACCOUNT_KEY_NIL_TAG))\n            transaction.roleFeePayerKey = parseAccountKey({\n                accountKey: keys[2],\n            })\n    }\n\n    return transaction\n}\n\nmodule.exports = {\n    rlpEncodeForAccountUpdate,\n    rlpEncodeForFeeDelegatedAccountUpdate,\n    rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n    parseAccountKey,\n    resolveRawKeyToAccountKey,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}