{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../../caver-utils/src');\n\nconst SignatureData = require('../../../caver-wallet/src/keyring/signatureData');\n/**\n * The transaction type strings.\n *\n * @example\n * caver.transaction.type.TxTypeLegacyTransaction\n * caver.transaction.type.TxTypeValueTransfer\n * caver.transaction.type.TxTypeFeeDelegatedValueTransfer\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferWithRatio\n * caver.transaction.type.TxTypeValueTransferMemo\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferMemo\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferMemoWithRatio\n * caver.transaction.type.TxTypeAccountUpdate\n * caver.transaction.type.TxTypeFeeDelegatedAccountUpdate\n * caver.transaction.type.TxTypeFeeDelegatedAccountUpdateWithRatio\n * caver.transaction.type.TxTypeSmartContractDeploy\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractDeploy\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractDeployWithRatio\n * caver.transaction.type.TxTypeSmartContractExecution\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractExecution\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractExecutionWithRatio\n * caver.transaction.type.TxTypeCancel\n * caver.transaction.type.TxTypeFeeDelegatedCancel\n * caver.transaction.type.TxTypeFeeDelegatedCancelWithRatio\n * caver.transaction.type.TxTypeChainDataAnchoring\n * caver.transaction.type.TxTypeFeeDelegatedChainDataAnchoring\n * caver.transaction.type.TxTypeFeeDelegatedChainDataAnchoringWithRatio\n *\n * @alias module:Transaction.type\n * @type {Map<string:string>}\n */\n\n\nconst TX_TYPE_STRING = {\n  TxTypeLegacyTransaction: 'TxTypeLegacyTransaction',\n  TxTypeValueTransfer: 'TxTypeValueTransfer',\n  TxTypeFeeDelegatedValueTransfer: 'TxTypeFeeDelegatedValueTransfer',\n  TxTypeFeeDelegatedValueTransferWithRatio: 'TxTypeFeeDelegatedValueTransferWithRatio',\n  TxTypeValueTransferMemo: 'TxTypeValueTransferMemo',\n  TxTypeFeeDelegatedValueTransferMemo: 'TxTypeFeeDelegatedValueTransferMemo',\n  TxTypeFeeDelegatedValueTransferMemoWithRatio: 'TxTypeFeeDelegatedValueTransferMemoWithRatio',\n  TxTypeAccountUpdate: 'TxTypeAccountUpdate',\n  TxTypeFeeDelegatedAccountUpdate: 'TxTypeFeeDelegatedAccountUpdate',\n  TxTypeFeeDelegatedAccountUpdateWithRatio: 'TxTypeFeeDelegatedAccountUpdateWithRatio',\n  TxTypeSmartContractDeploy: 'TxTypeSmartContractDeploy',\n  TxTypeFeeDelegatedSmartContractDeploy: 'TxTypeFeeDelegatedSmartContractDeploy',\n  TxTypeFeeDelegatedSmartContractDeployWithRatio: 'TxTypeFeeDelegatedSmartContractDeployWithRatio',\n  TxTypeSmartContractExecution: 'TxTypeSmartContractExecution',\n  TxTypeFeeDelegatedSmartContractExecution: 'TxTypeFeeDelegatedSmartContractExecution',\n  TxTypeFeeDelegatedSmartContractExecutionWithRatio: 'TxTypeFeeDelegatedSmartContractExecutionWithRatio',\n  TxTypeCancel: 'TxTypeCancel',\n  TxTypeFeeDelegatedCancel: 'TxTypeFeeDelegatedCancel',\n  TxTypeFeeDelegatedCancelWithRatio: 'TxTypeFeeDelegatedCancelWithRatio',\n  TxTypeChainDataAnchoring: 'TxTypeChainDataAnchoring',\n  TxTypeFeeDelegatedChainDataAnchoring: 'TxTypeFeeDelegatedChainDataAnchoring',\n  TxTypeFeeDelegatedChainDataAnchoringWithRatio: 'TxTypeFeeDelegatedChainDataAnchoringWithRatio',\n  TxTypeEthereumAccessList: 'TxTypeEthereumAccessList',\n  TxTypeEthereumDynamicFee: 'TxTypeEthereumDynamicFee'\n};\n/**\n * The transaction tag hex strings.\n * This is because the transaction type tag string and the transaction type string are mapped, so the transaction type tag can be used as a key value.\n *\n * @example\n * caver.transaction.tag.TxTypeLegacyTransaction // caver.transaction.tag['']\n * caver.transaction.tag.TxTypeValueTransfer // caver.transaction.tag['0x08']\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransfer // caver.transaction.tag['0x09']\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferWithRatio // caver.transaction.tag['0x0a']\n * caver.transaction.tag.TxTypeValueTransferMemo // caver.transaction.tag['0x10']\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferMemo // caver.transaction.tag['0x11']\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferMemoWithRatio // caver.transaction.tag['0x12']\n * caver.transaction.tag.TxTypeAccountUpdate // caver.transaction.tag['0x20']\n * caver.transaction.tag.TxTypeFeeDelegatedAccountUpdate // caver.transaction.tag['0x21']\n * caver.transaction.tag.TxTypeFeeDelegatedAccountUpdateWithRatio // caver.transaction.tag['0x22']\n * caver.transaction.tag.TxTypeSmartContractDeploy // caver.transaction.tag['0x28']\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractDeploy // caver.transaction.tag['0x29']\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractDeployWithRatio // caver.transaction.tag['0x2a']\n * caver.transaction.tag.TxTypeSmartContractExecution // caver.transaction.tag['0x30']\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractExecution // caver.transaction.tag['0x31']\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractExecutionWithRatio // caver.transaction.tag['0x32']\n * caver.transaction.tag.TxTypeCancel // caver.transaction.tag['0x38']\n * caver.transaction.tag.TxTypeFeeDelegatedCancel // caver.transaction.tag['0x39']\n * caver.transaction.tag.TxTypeFeeDelegatedCancelWithRatio // caver.transaction.tag['0x3a']\n * caver.transaction.tag.TxTypeChainDataAnchoring // caver.transaction.tag['0x48']\n * caver.transaction.tag.TxTypeFeeDelegatedChainDataAnchoring // caver.transaction.tag['0x49']\n * caver.transaction.tag.TxTypeFeeDelegatedChainDataAnchoringWithRatio // caver.transaction.tag['0x4a']\n *\n * @alias module:Transaction.type\n * @type {Map<string:string>}\n */\n\nconst TX_TYPE_TAG = {\n  TxTypeLegacyTransaction: '',\n  '': TX_TYPE_STRING.TxTypeLegacyTransaction,\n  TxTypeValueTransfer: '0x08',\n  '0x08': TX_TYPE_STRING.TxTypeValueTransfer,\n  TxTypeFeeDelegatedValueTransfer: '0x09',\n  '0x09': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer,\n  TxTypeFeeDelegatedValueTransferWithRatio: '0x0a',\n  '0x0a': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio,\n  TxTypeValueTransferMemo: '0x10',\n  '0x10': TX_TYPE_STRING.TxTypeValueTransferMemo,\n  TxTypeFeeDelegatedValueTransferMemo: '0x11',\n  '0x11': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo,\n  TxTypeFeeDelegatedValueTransferMemoWithRatio: '0x12',\n  '0x12': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemoWithRatio,\n  TxTypeAccountUpdate: '0x20',\n  '0x20': TX_TYPE_STRING.TxTypeAccountUpdate,\n  TxTypeFeeDelegatedAccountUpdate: '0x21',\n  '0x21': TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate,\n  TxTypeFeeDelegatedAccountUpdateWithRatio: '0x22',\n  '0x22': TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio,\n  TxTypeSmartContractDeploy: '0x28',\n  '0x28': TX_TYPE_STRING.TxTypeSmartContractDeploy,\n  TxTypeFeeDelegatedSmartContractDeploy: '0x29',\n  '0x29': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy,\n  TxTypeFeeDelegatedSmartContractDeployWithRatio: '0x2a',\n  '0x2a': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeployWithRatio,\n  TxTypeSmartContractExecution: '0x30',\n  '0x30': TX_TYPE_STRING.TxTypeSmartContractExecution,\n  TxTypeFeeDelegatedSmartContractExecution: '0x31',\n  '0x31': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecution,\n  TxTypeFeeDelegatedSmartContractExecutionWithRatio: '0x32',\n  '0x32': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecutionWithRatio,\n  TxTypeCancel: '0x38',\n  '0x38': TX_TYPE_STRING.TxTypeCancel,\n  TxTypeFeeDelegatedCancel: '0x39',\n  '0x39': TX_TYPE_STRING.TxTypeFeeDelegatedCancel,\n  TxTypeFeeDelegatedCancelWithRatio: '0x3a',\n  '0x3a': TX_TYPE_STRING.TxTypeFeeDelegatedCancelWithRatio,\n  TxTypeChainDataAnchoring: '0x48',\n  '0x48': TX_TYPE_STRING.TxTypeChainDataAnchoring,\n  TxTypeFeeDelegatedChainDataAnchoring: '0x49',\n  '0x49': TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring,\n  TxTypeFeeDelegatedChainDataAnchoringWithRatio: '0x4a',\n  '0x4a': TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio,\n  TxTypeEthereumAccessList: '0x7801',\n  '0x7801': TX_TYPE_STRING.TxTypeEthereumAccessList,\n  TxTypeEthereumDynamicFee: '0x7802',\n  '0x7802': TX_TYPE_STRING.TxTypeEthereumDynamicFee\n};\nconst TX_TYPE_TAG_LEGACY_TX_TYPES = {\n  ACCOUNT_UPDATE: TX_TYPE_TAG.TxTypeAccountUpdate,\n  FEE_DELEGATED_ACCOUNT_UPDATE: TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate,\n  FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdateWithRatio,\n  VALUE_TRANFSER: TX_TYPE_TAG.TxTypeValueTransfer,\n  FEE_DELEGATED_VALUE_TRANSFER: TX_TYPE_TAG.TxTypeFeeDelegatedValueTransfer,\n  FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferWithRatio,\n  VALUE_TRANSFER_MEMO: TX_TYPE_TAG.TxTypeValueTransferMemo,\n  FEE_DELEGATED_VALUE_TRANSFER_MEMO: TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo,\n  FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemoWithRatio,\n  SMART_CONTRACT_DEPLOY: TX_TYPE_TAG.TxTypeSmartContractDeploy,\n  FEE_DELEGATED_SMART_CONTRACT_DEPLOY: TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy,\n  FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeployWithRatio,\n  SMART_CONTRACT_EXECUTION: TX_TYPE_TAG.TxTypeSmartContractExecution,\n  FEE_DELEGATED_SMART_CONTRACT_EXECUTION: TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractExecution,\n  FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractExecutionWithRatio,\n  CANCEL: TX_TYPE_TAG.TxTypeCancel,\n  FEE_DELEGATED_CANCEL: TX_TYPE_TAG.TxTypeFeeDelegatedCancel,\n  FEE_DELEGATED_CANCEL_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedCancelWithRatio,\n  CHAIN_DATA_ANCHORING: TX_TYPE_TAG.TxTypeChainDataAnchoring,\n  FEE_DELEGATED_CHAIN_DATA_ANCHORING: TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring,\n  FEE_DELEGATED_CHAIN_DATA_ANCHORING_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoringWithRatio\n};\nconst CODE_FORMAT = {\n  EVM: '0x0'\n};\n/**\n * Returns transaction type number.\n *\n * @param {string} type - A transaction type string.\n * @return {number}\n */\n\nconst getTypeInt = type => {\n  let typeInt = TX_TYPE_TAG[type]; // If type int cannot be found from TX_TYPE_TAG, means old type string.\n\n  if (typeInt === undefined) {\n    typeInt = TX_TYPE_TAG_LEGACY_TX_TYPES[type];\n  }\n\n  return utils.hexToNumber(typeInt);\n};\n/**\n * Returns an EthereumTxTypeEnvelopeTag string.\n * This will be used to RLP encode ethereum typed transactions as a type prefix.\n *\n * @return {string}\n */\n\n\nconst getEthereumTxTypeEnvelopeTag = () => {\n  return '0x78';\n};\n/**\n * Returns an ethereum type tag without EthereumTxTypeEnvelopeTag('0x78').\n * This will be used to get RLP encoding to sign the ethereum typed transactions.\n *\n * @param {string} type - A transaction type string or tag.\n * @return {string}\n */\n\n\nconst getTypeTagWithoutEthereumTxTypeEnvelopeTag = type => {\n  if (!isEthereumTypedTxType(type)) throw new Error(`Not EthereumTxTypeEnvelope tx type: ${type}`);\n  let tag = type;\n  if (type.startsWith('TxType')) tag = TX_TYPE_TAG[type];\n  return `0x${tag.replace(getEthereumTxTypeEnvelopeTag(), '')}`;\n};\n/**\n * Returns whether the transaction type is ethereum tx or not.\n *\n * @param {string} type - A transaction type string or tag.\n * @return {boolean}\n */\n\n\nconst isEthereumTxType = txType => {\n  // The transaction types in `caver.transaction` should have tx type string as a member variable.\n  // So here we don't assume, user can define undefined for tx type.\n  if (txType === undefined) return false;\n  return isLegacyTxType(txType) || isEthereumTypedTxType(txType);\n};\n/**\n * Returns whether the transaction type is legacy tx or not.\n *\n * @param {string} type - A transaction type string or tag.\n * @return {boolean}\n */\n\n\nconst isLegacyTxType = txType => {\n  // The transaction types in `caver.transaction` should have tx type string as a member variable.\n  // So here we don't assume, user can define undefined for tx type.\n  if (txType === undefined) return false;\n  return txType === TX_TYPE_STRING.TxTypeLegacyTransaction || txType === TX_TYPE_TAG.TxTypeLegacyTransaction;\n};\n/**\n * Returns the transaction type is ethereum typed tx or not.\n *\n * @param {string} type - A transaction type string or tag.\n * @return {boolean}\n */\n\n\nconst isEthereumTypedTxType = txType => {\n  // The transaction types in `caver.transaction` should have tx type string as a member variable.\n  // So here we don't assume, user can define undefined for tx type.\n  if (txType === undefined) return false;\n  return txType.startsWith(getEthereumTxTypeEnvelopeTag()) || txType === TX_TYPE_STRING.TxTypeEthereumAccessList || txType === TX_TYPE_STRING.TxTypeEthereumDynamicFee;\n};\n/**\n * Refines the array containing signatures.\n * - Removes duplicate signatures.\n * - Removes the default empty signature(['0x01', '0x', '0x']) included with other signatures.\n * - For an empty signature array, return an array containing the default empty signature(['0x01', '0x', '0x']).\n *\n * @param {Array.<string>|Array.<Array.<string>>|SignatureData|Array.<SignatureData>} sigArray - A signature or an array of signatures.\n * @param {string} [txType] - The transaction type string. This can be null if signature is not for transaction(for example message signed).\n * @return {SignatureData|Array.<SignatureData>}\n */\n\n\nconst refineSignatures = (sigArray, txType) => {\n  const set = new Set();\n  let result = [];\n  const isSingleSignature = txType !== undefined ? isEthereumTxType(txType) : false;\n  let arrayOfSignatures = sigArray;\n\n  if (!_.isArray(sigArray) && sigArray instanceof SignatureData) {\n    arrayOfSignatures = [sigArray];\n  } else if (_.isArray(sigArray) && _.isString(sigArray[0])) {\n    arrayOfSignatures = [sigArray];\n  }\n\n  for (const sig of arrayOfSignatures) {\n    const signatureData = new SignatureData(sig);\n\n    if (!signatureData.isEmpty()) {\n      const sigString = sig.toString();\n\n      if (!set.has(sigString)) {\n        set.add(sigString, true);\n        result.push(signatureData);\n      }\n    }\n  }\n\n  if (result.length === 0) result = [SignatureData.emtpySig];\n  if (isSingleSignature && txType != undefined && result.length > 1) throw new Error(`${txType}} cannot have multiple sigantures.`);\n  return !isSingleSignature ? result : result[0];\n};\n/**\n * Returns transaction type string.\n *\n * @param {string} rlpEncoded - An RLP-encoded transaction string.\n * @return {string}\n */\n\n\nconst typeDetectionFromRLPEncoding = rlpEncoded => {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  let typeTag;\n\n  if (rlpEncoded.startsWith(getEthereumTxTypeEnvelopeTag())) {\n    typeTag = rlpEncoded.slice(0, 6);\n  } else {\n    typeTag = rlpEncoded.slice(0, 4);\n  }\n\n  return TX_TYPE_TAG[typeTag] ? TX_TYPE_TAG[typeTag] : TX_TYPE_STRING.TxTypeLegacyTransaction;\n};\n/**\n * Returns code format tag string.\n *\n * @param {string|number} cf - The code format.\n * @return {string}\n */\n\n\nconst getCodeFormatTag = cf => {\n  if (cf === undefined) return CODE_FORMAT.EVM;\n\n  switch (cf) {\n    case 0:\n    case '0x':\n    case '0x0':\n    case 'EVM':\n      return CODE_FORMAT.EVM;\n  }\n\n  throw new Error(`Unsupported code format : ${cf}`);\n};\n/**\n * Returns `true` value is undefined or null.\n *\n * @param {*} value - The value to check.\n * @return {string}\n */\n\n\nconst isNot = function (value) {\n  return _.isUndefined(value) || _.isNull(value);\n};\n\nmodule.exports = {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  CODE_FORMAT,\n  isNot,\n  refineSignatures,\n  typeDetectionFromRLPEncoding,\n  getCodeFormatTag,\n  getTypeInt,\n  isEthereumTxType,\n  isEthereumTypedTxType,\n  getEthereumTxTypeEnvelopeTag,\n  getTypeTagWithoutEthereumTxTypeEnvelopeTag\n};","map":{"version":3,"names":["_","require","utils","SignatureData","TX_TYPE_STRING","TxTypeLegacyTransaction","TxTypeValueTransfer","TxTypeFeeDelegatedValueTransfer","TxTypeFeeDelegatedValueTransferWithRatio","TxTypeValueTransferMemo","TxTypeFeeDelegatedValueTransferMemo","TxTypeFeeDelegatedValueTransferMemoWithRatio","TxTypeAccountUpdate","TxTypeFeeDelegatedAccountUpdate","TxTypeFeeDelegatedAccountUpdateWithRatio","TxTypeSmartContractDeploy","TxTypeFeeDelegatedSmartContractDeploy","TxTypeFeeDelegatedSmartContractDeployWithRatio","TxTypeSmartContractExecution","TxTypeFeeDelegatedSmartContractExecution","TxTypeFeeDelegatedSmartContractExecutionWithRatio","TxTypeCancel","TxTypeFeeDelegatedCancel","TxTypeFeeDelegatedCancelWithRatio","TxTypeChainDataAnchoring","TxTypeFeeDelegatedChainDataAnchoring","TxTypeFeeDelegatedChainDataAnchoringWithRatio","TxTypeEthereumAccessList","TxTypeEthereumDynamicFee","TX_TYPE_TAG","TX_TYPE_TAG_LEGACY_TX_TYPES","ACCOUNT_UPDATE","FEE_DELEGATED_ACCOUNT_UPDATE","FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO","VALUE_TRANFSER","FEE_DELEGATED_VALUE_TRANSFER","FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO","VALUE_TRANSFER_MEMO","FEE_DELEGATED_VALUE_TRANSFER_MEMO","FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO","SMART_CONTRACT_DEPLOY","FEE_DELEGATED_SMART_CONTRACT_DEPLOY","FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO","SMART_CONTRACT_EXECUTION","FEE_DELEGATED_SMART_CONTRACT_EXECUTION","FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO","CANCEL","FEE_DELEGATED_CANCEL","FEE_DELEGATED_CANCEL_WITH_RATIO","CHAIN_DATA_ANCHORING","FEE_DELEGATED_CHAIN_DATA_ANCHORING","FEE_DELEGATED_CHAIN_DATA_ANCHORING_WITH_RATIO","CODE_FORMAT","EVM","getTypeInt","type","typeInt","undefined","hexToNumber","getEthereumTxTypeEnvelopeTag","getTypeTagWithoutEthereumTxTypeEnvelopeTag","isEthereumTypedTxType","Error","tag","startsWith","replace","isEthereumTxType","txType","isLegacyTxType","refineSignatures","sigArray","set","Set","result","isSingleSignature","arrayOfSignatures","isArray","isString","sig","signatureData","isEmpty","sigString","toString","has","add","push","length","emtpySig","typeDetectionFromRLPEncoding","rlpEncoded","addHexPrefix","typeTag","slice","getCodeFormatTag","cf","isNot","value","isUndefined","isNull","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-transaction/src/transactionHelper/transactionHelper.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst utils = require('../../../caver-utils/src')\nconst SignatureData = require('../../../caver-wallet/src/keyring/signatureData')\n\n/**\n * The transaction type strings.\n *\n * @example\n * caver.transaction.type.TxTypeLegacyTransaction\n * caver.transaction.type.TxTypeValueTransfer\n * caver.transaction.type.TxTypeFeeDelegatedValueTransfer\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferWithRatio\n * caver.transaction.type.TxTypeValueTransferMemo\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferMemo\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferMemoWithRatio\n * caver.transaction.type.TxTypeAccountUpdate\n * caver.transaction.type.TxTypeFeeDelegatedAccountUpdate\n * caver.transaction.type.TxTypeFeeDelegatedAccountUpdateWithRatio\n * caver.transaction.type.TxTypeSmartContractDeploy\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractDeploy\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractDeployWithRatio\n * caver.transaction.type.TxTypeSmartContractExecution\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractExecution\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractExecutionWithRatio\n * caver.transaction.type.TxTypeCancel\n * caver.transaction.type.TxTypeFeeDelegatedCancel\n * caver.transaction.type.TxTypeFeeDelegatedCancelWithRatio\n * caver.transaction.type.TxTypeChainDataAnchoring\n * caver.transaction.type.TxTypeFeeDelegatedChainDataAnchoring\n * caver.transaction.type.TxTypeFeeDelegatedChainDataAnchoringWithRatio\n *\n * @alias module:Transaction.type\n * @type {Map<string:string>}\n */\nconst TX_TYPE_STRING = {\n    TxTypeLegacyTransaction: 'TxTypeLegacyTransaction',\n\n    TxTypeValueTransfer: 'TxTypeValueTransfer',\n    TxTypeFeeDelegatedValueTransfer: 'TxTypeFeeDelegatedValueTransfer',\n    TxTypeFeeDelegatedValueTransferWithRatio: 'TxTypeFeeDelegatedValueTransferWithRatio',\n\n    TxTypeValueTransferMemo: 'TxTypeValueTransferMemo',\n    TxTypeFeeDelegatedValueTransferMemo: 'TxTypeFeeDelegatedValueTransferMemo',\n    TxTypeFeeDelegatedValueTransferMemoWithRatio: 'TxTypeFeeDelegatedValueTransferMemoWithRatio',\n\n    TxTypeAccountUpdate: 'TxTypeAccountUpdate',\n    TxTypeFeeDelegatedAccountUpdate: 'TxTypeFeeDelegatedAccountUpdate',\n    TxTypeFeeDelegatedAccountUpdateWithRatio: 'TxTypeFeeDelegatedAccountUpdateWithRatio',\n\n    TxTypeSmartContractDeploy: 'TxTypeSmartContractDeploy',\n    TxTypeFeeDelegatedSmartContractDeploy: 'TxTypeFeeDelegatedSmartContractDeploy',\n    TxTypeFeeDelegatedSmartContractDeployWithRatio: 'TxTypeFeeDelegatedSmartContractDeployWithRatio',\n\n    TxTypeSmartContractExecution: 'TxTypeSmartContractExecution',\n    TxTypeFeeDelegatedSmartContractExecution: 'TxTypeFeeDelegatedSmartContractExecution',\n    TxTypeFeeDelegatedSmartContractExecutionWithRatio: 'TxTypeFeeDelegatedSmartContractExecutionWithRatio',\n\n    TxTypeCancel: 'TxTypeCancel',\n    TxTypeFeeDelegatedCancel: 'TxTypeFeeDelegatedCancel',\n    TxTypeFeeDelegatedCancelWithRatio: 'TxTypeFeeDelegatedCancelWithRatio',\n\n    TxTypeChainDataAnchoring: 'TxTypeChainDataAnchoring',\n    TxTypeFeeDelegatedChainDataAnchoring: 'TxTypeFeeDelegatedChainDataAnchoring',\n    TxTypeFeeDelegatedChainDataAnchoringWithRatio: 'TxTypeFeeDelegatedChainDataAnchoringWithRatio',\n\n    TxTypeEthereumAccessList: 'TxTypeEthereumAccessList',\n    TxTypeEthereumDynamicFee: 'TxTypeEthereumDynamicFee',\n}\n\n/**\n * The transaction tag hex strings.\n * This is because the transaction type tag string and the transaction type string are mapped, so the transaction type tag can be used as a key value.\n *\n * @example\n * caver.transaction.tag.TxTypeLegacyTransaction // caver.transaction.tag['']\n * caver.transaction.tag.TxTypeValueTransfer // caver.transaction.tag['0x08']\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransfer // caver.transaction.tag['0x09']\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferWithRatio // caver.transaction.tag['0x0a']\n * caver.transaction.tag.TxTypeValueTransferMemo // caver.transaction.tag['0x10']\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferMemo // caver.transaction.tag['0x11']\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferMemoWithRatio // caver.transaction.tag['0x12']\n * caver.transaction.tag.TxTypeAccountUpdate // caver.transaction.tag['0x20']\n * caver.transaction.tag.TxTypeFeeDelegatedAccountUpdate // caver.transaction.tag['0x21']\n * caver.transaction.tag.TxTypeFeeDelegatedAccountUpdateWithRatio // caver.transaction.tag['0x22']\n * caver.transaction.tag.TxTypeSmartContractDeploy // caver.transaction.tag['0x28']\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractDeploy // caver.transaction.tag['0x29']\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractDeployWithRatio // caver.transaction.tag['0x2a']\n * caver.transaction.tag.TxTypeSmartContractExecution // caver.transaction.tag['0x30']\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractExecution // caver.transaction.tag['0x31']\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractExecutionWithRatio // caver.transaction.tag['0x32']\n * caver.transaction.tag.TxTypeCancel // caver.transaction.tag['0x38']\n * caver.transaction.tag.TxTypeFeeDelegatedCancel // caver.transaction.tag['0x39']\n * caver.transaction.tag.TxTypeFeeDelegatedCancelWithRatio // caver.transaction.tag['0x3a']\n * caver.transaction.tag.TxTypeChainDataAnchoring // caver.transaction.tag['0x48']\n * caver.transaction.tag.TxTypeFeeDelegatedChainDataAnchoring // caver.transaction.tag['0x49']\n * caver.transaction.tag.TxTypeFeeDelegatedChainDataAnchoringWithRatio // caver.transaction.tag['0x4a']\n *\n * @alias module:Transaction.type\n * @type {Map<string:string>}\n */\nconst TX_TYPE_TAG = {\n    TxTypeLegacyTransaction: '',\n    '': TX_TYPE_STRING.TxTypeLegacyTransaction,\n\n    TxTypeValueTransfer: '0x08',\n    '0x08': TX_TYPE_STRING.TxTypeValueTransfer,\n    TxTypeFeeDelegatedValueTransfer: '0x09',\n    '0x09': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer,\n    TxTypeFeeDelegatedValueTransferWithRatio: '0x0a',\n    '0x0a': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio,\n\n    TxTypeValueTransferMemo: '0x10',\n    '0x10': TX_TYPE_STRING.TxTypeValueTransferMemo,\n    TxTypeFeeDelegatedValueTransferMemo: '0x11',\n    '0x11': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo,\n    TxTypeFeeDelegatedValueTransferMemoWithRatio: '0x12',\n    '0x12': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemoWithRatio,\n\n    TxTypeAccountUpdate: '0x20',\n    '0x20': TX_TYPE_STRING.TxTypeAccountUpdate,\n    TxTypeFeeDelegatedAccountUpdate: '0x21',\n    '0x21': TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate,\n    TxTypeFeeDelegatedAccountUpdateWithRatio: '0x22',\n    '0x22': TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio,\n\n    TxTypeSmartContractDeploy: '0x28',\n    '0x28': TX_TYPE_STRING.TxTypeSmartContractDeploy,\n    TxTypeFeeDelegatedSmartContractDeploy: '0x29',\n    '0x29': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy,\n    TxTypeFeeDelegatedSmartContractDeployWithRatio: '0x2a',\n    '0x2a': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeployWithRatio,\n\n    TxTypeSmartContractExecution: '0x30',\n    '0x30': TX_TYPE_STRING.TxTypeSmartContractExecution,\n    TxTypeFeeDelegatedSmartContractExecution: '0x31',\n    '0x31': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecution,\n    TxTypeFeeDelegatedSmartContractExecutionWithRatio: '0x32',\n    '0x32': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecutionWithRatio,\n\n    TxTypeCancel: '0x38',\n    '0x38': TX_TYPE_STRING.TxTypeCancel,\n    TxTypeFeeDelegatedCancel: '0x39',\n    '0x39': TX_TYPE_STRING.TxTypeFeeDelegatedCancel,\n    TxTypeFeeDelegatedCancelWithRatio: '0x3a',\n    '0x3a': TX_TYPE_STRING.TxTypeFeeDelegatedCancelWithRatio,\n\n    TxTypeChainDataAnchoring: '0x48',\n    '0x48': TX_TYPE_STRING.TxTypeChainDataAnchoring,\n    TxTypeFeeDelegatedChainDataAnchoring: '0x49',\n    '0x49': TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring,\n    TxTypeFeeDelegatedChainDataAnchoringWithRatio: '0x4a',\n    '0x4a': TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio,\n\n    TxTypeEthereumAccessList: '0x7801',\n    '0x7801': TX_TYPE_STRING.TxTypeEthereumAccessList,\n    TxTypeEthereumDynamicFee: '0x7802',\n    '0x7802': TX_TYPE_STRING.TxTypeEthereumDynamicFee,\n}\n\nconst TX_TYPE_TAG_LEGACY_TX_TYPES = {\n    ACCOUNT_UPDATE: TX_TYPE_TAG.TxTypeAccountUpdate,\n    FEE_DELEGATED_ACCOUNT_UPDATE: TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate,\n    FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdateWithRatio,\n\n    VALUE_TRANFSER: TX_TYPE_TAG.TxTypeValueTransfer,\n    FEE_DELEGATED_VALUE_TRANSFER: TX_TYPE_TAG.TxTypeFeeDelegatedValueTransfer,\n    FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferWithRatio,\n\n    VALUE_TRANSFER_MEMO: TX_TYPE_TAG.TxTypeValueTransferMemo,\n    FEE_DELEGATED_VALUE_TRANSFER_MEMO: TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo,\n    FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemoWithRatio,\n\n    SMART_CONTRACT_DEPLOY: TX_TYPE_TAG.TxTypeSmartContractDeploy,\n    FEE_DELEGATED_SMART_CONTRACT_DEPLOY: TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy,\n    FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeployWithRatio,\n\n    SMART_CONTRACT_EXECUTION: TX_TYPE_TAG.TxTypeSmartContractExecution,\n    FEE_DELEGATED_SMART_CONTRACT_EXECUTION: TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractExecution,\n    FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractExecutionWithRatio,\n\n    CANCEL: TX_TYPE_TAG.TxTypeCancel,\n    FEE_DELEGATED_CANCEL: TX_TYPE_TAG.TxTypeFeeDelegatedCancel,\n    FEE_DELEGATED_CANCEL_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedCancelWithRatio,\n\n    CHAIN_DATA_ANCHORING: TX_TYPE_TAG.TxTypeChainDataAnchoring,\n    FEE_DELEGATED_CHAIN_DATA_ANCHORING: TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring,\n    FEE_DELEGATED_CHAIN_DATA_ANCHORING_WITH_RATIO: TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoringWithRatio,\n}\n\nconst CODE_FORMAT = {\n    EVM: '0x0',\n}\n\n/**\n * Returns transaction type number.\n *\n * @param {string} type - A transaction type string.\n * @return {number}\n */\nconst getTypeInt = type => {\n    let typeInt = TX_TYPE_TAG[type]\n    // If type int cannot be found from TX_TYPE_TAG, means old type string.\n    if (typeInt === undefined) {\n        typeInt = TX_TYPE_TAG_LEGACY_TX_TYPES[type]\n    }\n    return utils.hexToNumber(typeInt)\n}\n\n/**\n * Returns an EthereumTxTypeEnvelopeTag string.\n * This will be used to RLP encode ethereum typed transactions as a type prefix.\n *\n * @return {string}\n */\nconst getEthereumTxTypeEnvelopeTag = () => {\n    return '0x78'\n}\n\n/**\n * Returns an ethereum type tag without EthereumTxTypeEnvelopeTag('0x78').\n * This will be used to get RLP encoding to sign the ethereum typed transactions.\n *\n * @param {string} type - A transaction type string or tag.\n * @return {string}\n */\nconst getTypeTagWithoutEthereumTxTypeEnvelopeTag = type => {\n    if (!isEthereumTypedTxType(type)) throw new Error(`Not EthereumTxTypeEnvelope tx type: ${type}`)\n    let tag = type\n    if (type.startsWith('TxType')) tag = TX_TYPE_TAG[type]\n    return `0x${tag.replace(getEthereumTxTypeEnvelopeTag(), '')}`\n}\n\n/**\n * Returns whether the transaction type is ethereum tx or not.\n *\n * @param {string} type - A transaction type string or tag.\n * @return {boolean}\n */\nconst isEthereumTxType = txType => {\n    // The transaction types in `caver.transaction` should have tx type string as a member variable.\n    // So here we don't assume, user can define undefined for tx type.\n    if (txType === undefined) return false\n    return isLegacyTxType(txType) || isEthereumTypedTxType(txType)\n}\n\n/**\n * Returns whether the transaction type is legacy tx or not.\n *\n * @param {string} type - A transaction type string or tag.\n * @return {boolean}\n */\nconst isLegacyTxType = txType => {\n    // The transaction types in `caver.transaction` should have tx type string as a member variable.\n    // So here we don't assume, user can define undefined for tx type.\n    if (txType === undefined) return false\n    return txType === TX_TYPE_STRING.TxTypeLegacyTransaction || txType === TX_TYPE_TAG.TxTypeLegacyTransaction\n}\n\n/**\n * Returns the transaction type is ethereum typed tx or not.\n *\n * @param {string} type - A transaction type string or tag.\n * @return {boolean}\n */\nconst isEthereumTypedTxType = txType => {\n    // The transaction types in `caver.transaction` should have tx type string as a member variable.\n    // So here we don't assume, user can define undefined for tx type.\n    if (txType === undefined) return false\n    return (\n        txType.startsWith(getEthereumTxTypeEnvelopeTag()) ||\n        txType === TX_TYPE_STRING.TxTypeEthereumAccessList ||\n        txType === TX_TYPE_STRING.TxTypeEthereumDynamicFee\n    )\n}\n\n/**\n * Refines the array containing signatures.\n * - Removes duplicate signatures.\n * - Removes the default empty signature(['0x01', '0x', '0x']) included with other signatures.\n * - For an empty signature array, return an array containing the default empty signature(['0x01', '0x', '0x']).\n *\n * @param {Array.<string>|Array.<Array.<string>>|SignatureData|Array.<SignatureData>} sigArray - A signature or an array of signatures.\n * @param {string} [txType] - The transaction type string. This can be null if signature is not for transaction(for example message signed).\n * @return {SignatureData|Array.<SignatureData>}\n */\nconst refineSignatures = (sigArray, txType) => {\n    const set = new Set()\n    let result = []\n    const isSingleSignature = txType !== undefined ? isEthereumTxType(txType) : false\n\n    let arrayOfSignatures = sigArray\n    if (!_.isArray(sigArray) && sigArray instanceof SignatureData) {\n        arrayOfSignatures = [sigArray]\n    } else if (_.isArray(sigArray) && _.isString(sigArray[0])) {\n        arrayOfSignatures = [sigArray]\n    }\n    for (const sig of arrayOfSignatures) {\n        const signatureData = new SignatureData(sig)\n        if (!signatureData.isEmpty()) {\n            const sigString = sig.toString()\n            if (!set.has(sigString)) {\n                set.add(sigString, true)\n                result.push(signatureData)\n            }\n        }\n    }\n    if (result.length === 0) result = [SignatureData.emtpySig]\n\n    if (isSingleSignature && txType != undefined && result.length > 1) throw new Error(`${txType}} cannot have multiple sigantures.`)\n\n    return !isSingleSignature ? result : result[0]\n}\n\n/**\n * Returns transaction type string.\n *\n * @param {string} rlpEncoded - An RLP-encoded transaction string.\n * @return {string}\n */\nconst typeDetectionFromRLPEncoding = rlpEncoded => {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    let typeTag\n    if (rlpEncoded.startsWith(getEthereumTxTypeEnvelopeTag())) {\n        typeTag = rlpEncoded.slice(0, 6)\n    } else {\n        typeTag = rlpEncoded.slice(0, 4)\n    }\n    return TX_TYPE_TAG[typeTag] ? TX_TYPE_TAG[typeTag] : TX_TYPE_STRING.TxTypeLegacyTransaction\n}\n\n/**\n * Returns code format tag string.\n *\n * @param {string|number} cf - The code format.\n * @return {string}\n */\nconst getCodeFormatTag = cf => {\n    if (cf === undefined) return CODE_FORMAT.EVM\n    switch (cf) {\n        case 0:\n        case '0x':\n        case '0x0':\n        case 'EVM':\n            return CODE_FORMAT.EVM\n    }\n    throw new Error(`Unsupported code format : ${cf}`)\n}\n\n/**\n * Returns `true` value is undefined or null.\n *\n * @param {*} value - The value to check.\n * @return {string}\n */\nconst isNot = function(value) {\n    return _.isUndefined(value) || _.isNull(value)\n}\n\nmodule.exports = {\n    TX_TYPE_STRING,\n    TX_TYPE_TAG,\n    CODE_FORMAT,\n    isNot,\n    refineSignatures,\n    typeDetectionFromRLPEncoding,\n    getCodeFormatTag,\n    getTypeInt,\n    isEthereumTxType,\n    isEthereumTypedTxType,\n    getEthereumTxTypeEnvelopeTag,\n    getTypeTagWithoutEthereumTxTypeEnvelopeTag,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}