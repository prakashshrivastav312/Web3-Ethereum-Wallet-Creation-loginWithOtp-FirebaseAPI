{"ast":null,"code":"'use strict';\n\nconst Block = require('ipld-block');\n\nconst CID = require('cids');\n\nconst multihash = require('multihashes');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/put')>}\n   */\n  async function put(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (Block.isBlock(data)) {\n      const {\n        name,\n        length\n      } = multihash.decode(data.cid.multihash);\n      options = { ...options,\n        format: data.cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: data.cid.version\n      }; // @ts-ignore - data is typed as block so TS complains about\n      // Uint8Array assignment.\n\n      data = data.data;\n    } else if (options.cid) {\n      const cid = new CID(options.cid);\n      const {\n        name,\n        length\n      } = multihash.decode(cid.multihash);\n      options = { ...options,\n        format: cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: cid.version\n      };\n      delete options.cid;\n    } // allow aborting requests on body errors\n\n\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    let res;\n\n    try {\n      // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n      const response = await api.post('block/put', {\n        timeout: options.timeout,\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(await multipartRequest(data, controller, options.headers))\n      });\n      res = await response.json();\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options,\n          format: 'cbor'\n        });\n      }\n\n      throw err;\n    }\n\n    return new Block(\n    /** @type {Uint8Array} */\n    data, new CID(res.Key));\n  }\n\n  return put;\n});","map":{"version":3,"names":["Block","require","CID","multihash","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","put","data","options","isBlock","name","length","decode","cid","format","codec","mhtype","mhlen","version","controller","signal","res","response","post","timeout","searchParams","headers","json","err","Key"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/block/put.js"],"sourcesContent":["'use strict'\n\nconst Block = require('ipld-block')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/put')>}\n   */\n  async function put (data, options = {}) {\n    if (Block.isBlock(data)) {\n      const { name, length } = multihash.decode(data.cid.multihash)\n      options = {\n        ...options,\n        format: data.cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: data.cid.version\n      }\n      // @ts-ignore - data is typed as block so TS complains about\n      // Uint8Array assignment.\n      data = data.data\n    } else if (options.cid) {\n      const cid = new CID(options.cid)\n      const { name, length } = multihash.decode(cid.multihash)\n      options = {\n        ...options,\n        format: cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: cid.version\n      }\n      delete options.cid\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n      const response = await api.post('block/put', {\n        timeout: options.timeout,\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest(data, controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return new Block(/** @type {Uint8Array} */(data), new CID(res.Key))\n  }\n\n  return put\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}