{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stats = void 0;\n/**\n * An object holding Network stats parameters.\n */\n\nclass Stats {\n  constructor() {\n    this.Shards = 0;\n    this.Blocks = 0;\n    this.Accounts = 0;\n    this.Transactions = 0;\n    this.RefreshRate = 0;\n    this.Epoch = 0;\n    this.RoundsPassed = 0;\n    this.RoundsPerEpoch = 0;\n  }\n  /**\n   * Synchronizes a stats object by querying the Network, through a {@link IProvider}.\n   * @param provider The provider to use\n   */\n\n\n  sync(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let fresh = yield provider.getNetworkStats();\n      Object.assign(this, fresh);\n    });\n  }\n  /**\n   * Constructs a stats object from a HTTP response (as returned by the provider).\n   */\n\n\n  static fromHttpResponse(payload) {\n    let stats = new Stats();\n    stats.Shards = Number(payload[\"shards\"]);\n    stats.Blocks = Number(payload[\"blocks\"]);\n    stats.Accounts = Number(payload[\"accounts\"]);\n    stats.Transactions = Number(payload[\"transactions\"]);\n    stats.RefreshRate = Number(payload[\"refreshRate\"]);\n    stats.Epoch = Number(payload[\"epoch\"]);\n    stats.RoundsPassed = Number(payload[\"roundsPassed\"]);\n    stats.RoundsPerEpoch = Number(payload[\"roundsPerEpoch\"]);\n    return stats;\n  }\n\n}\n\nexports.Stats = Stats;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AAGA,MAAaA,KAAb,CAAkB;EAqCdC;IACI,KAAKC,MAAL,GAAc,CAAd;IACA,KAAKC,MAAL,GAAc,CAAd;IACA,KAAKC,QAAL,GAAgB,CAAhB;IACA,KAAKC,YAAL,GAAoB,CAApB;IACA,KAAKC,WAAL,GAAmB,CAAnB;IACA,KAAKC,KAAL,GAAa,CAAb;IACA,KAAKC,YAAL,GAAoB,CAApB;IACA,KAAKC,cAAL,GAAsB,CAAtB;EACH;EAED;;;;;;EAIMC,IAAI,CAACC,QAAD,EAAuB;;MAC7B,IAAIC,KAAK,GAAU,MAAMD,QAAQ,CAACE,eAAT,EAAzB;MACAC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBH,KAApB;IACH;EAAA;EAED;;;;;EAGuB,OAAhBI,gBAAgB,CAACC,OAAD,EAAa;IAChC,IAAIC,KAAK,GAAG,IAAIlB,KAAJ,EAAZ;IAEAkB,KAAK,CAAChB,MAAN,GAAeiB,MAAM,CAACF,OAAO,CAAC,QAAD,CAAR,CAArB;IACAC,KAAK,CAACf,MAAN,GAAegB,MAAM,CAACF,OAAO,CAAC,QAAD,CAAR,CAArB;IACAC,KAAK,CAACd,QAAN,GAAiBe,MAAM,CAACF,OAAO,CAAC,UAAD,CAAR,CAAvB;IACAC,KAAK,CAACb,YAAN,GAAqBc,MAAM,CAACF,OAAO,CAAC,cAAD,CAAR,CAA3B;IACAC,KAAK,CAACZ,WAAN,GAAoBa,MAAM,CAACF,OAAO,CAAC,aAAD,CAAR,CAA1B;IACAC,KAAK,CAACX,KAAN,GAAcY,MAAM,CAACF,OAAO,CAAC,OAAD,CAAR,CAApB;IACAC,KAAK,CAACV,YAAN,GAAqBW,MAAM,CAACF,OAAO,CAAC,cAAD,CAAR,CAA3B;IACAC,KAAK,CAACT,cAAN,GAAuBU,MAAM,CAACF,OAAO,CAAC,gBAAD,CAAR,CAA7B;IAEA,OAAOC,KAAP;EACH;;AAzEa;;AAAlBE","names":["Stats","constructor","Shards","Blocks","Accounts","Transactions","RefreshRate","Epoch","RoundsPassed","RoundsPerEpoch","sync","provider","fresh","getNetworkStats","Object","assign","fromHttpResponse","payload","stats","Number","exports"],"sourceRoot":"","sources":["../src/stats.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}