{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Claimant = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('./keypair');\n\nvar _strkey = require('./strkey');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Claimant class represents an xdr.Claimant\n *\n * The claim predicate is optional, it defaults to unconditional if none is specified.\n *\n * @constructor\n * @param {string} destination - The destination account ID.\n * @param {xdr.ClaimPredicate} [predicate] - The claim predicate.\n */\n\n\nvar Claimant = exports.Claimant = function () {\n  function Claimant(destination, predicate) {\n    _classCallCheck(this, Claimant);\n\n    if (destination && !_strkey.StrKey.isValidEd25519PublicKey(destination)) {\n      throw new Error('Destination is invalid');\n    }\n\n    this._destination = destination;\n\n    if (!predicate) {\n      this._predicate = _stellarXdr_generated2.default.ClaimPredicate.claimPredicateUnconditional();\n    } else if (predicate instanceof _stellarXdr_generated2.default.ClaimPredicate) {\n      this._predicate = predicate;\n    } else {\n      throw new Error('Predicate should be an xdr.ClaimPredicate');\n    }\n  }\n  /**\n   * Returns an unconditional claim predicate\n   * @Return {xdr.ClaimPredicate}\n   */\n\n\n  _createClass(Claimant, [{\n    key: 'toXDRObject',\n\n    /**\n     * Returns the xdr object for this claimant.\n     * @returns {xdr.Claimant} XDR Claimant object\n     */\n    value: function toXDRObject() {\n      var claimant = new _stellarXdr_generated2.default.ClaimantV0({\n        destination: _keypair.Keypair.fromPublicKey(this._destination).xdrAccountId(),\n        predicate: this._predicate\n      });\n      return _stellarXdr_generated2.default.Claimant.claimantTypeV0(claimant);\n    }\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'destination',\n    get: function get() {\n      return this._destination;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n    /**\n     * @type {xdr.ClaimPredicate}\n     * @readonly\n     */\n\n  }, {\n    key: 'predicate',\n    get: function get() {\n      return this._predicate;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n  }], [{\n    key: 'predicateUnconditional',\n    value: function predicateUnconditional() {\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateUnconditional();\n    }\n    /**\n     * Returns an `and` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateAnd',\n    value: function predicateAnd(left, right) {\n      if (!(left instanceof _stellarXdr_generated2.default.ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n\n      if (!(right instanceof _stellarXdr_generated2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateAnd([left, right]);\n    }\n    /**\n     * Returns an `or` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateOr',\n    value: function predicateOr(left, right) {\n      if (!(left instanceof _stellarXdr_generated2.default.ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n\n      if (!(right instanceof _stellarXdr_generated2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateOr([left, right]);\n    }\n    /**\n     * Returns a `not` claim predicate\n     * @param {xdr.ClaimPredicate} predicate an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateNot',\n    value: function predicateNot(predicate) {\n      if (!(predicate instanceof _stellarXdr_generated2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateNot(predicate);\n    }\n    /**\n     * Returns a `BeforeAbsoluteTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation is less than this (absolute)\n     * Unix timestamp (expressed in seconds).\n     *\n     * @param {string} absBefore Unix epoch (in seconds) as a string\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateBeforeAbsoluteTime',\n    value: function predicateBeforeAbsoluteTime(absBefore) {\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateBeforeAbsoluteTime(_stellarXdr_generated2.default.Int64.fromString(absBefore));\n    }\n    /**\n     * Returns a `BeforeRelativeTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation plus this relative time delta\n     * (in seconds) is less than the current time.\n     *\n     * @param {strings} seconds seconds since closeTime of the ledger in which the ClaimableBalanceEntry was created (as string)\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateBeforeRelativeTime',\n    value: function predicateBeforeRelativeTime(seconds) {\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateBeforeRelativeTime(_stellarXdr_generated2.default.Int64.fromString(seconds));\n    }\n    /**\n     * Returns a claimant object from its XDR object representation.\n     * @param {xdr.Claimant} claimantXdr - The claimant xdr object.\n     * @returns {Claimant}\n     */\n\n  }, {\n    key: 'fromXDR',\n    value: function fromXDR(claimantXdr) {\n      var value = void 0;\n\n      switch (claimantXdr.switch()) {\n        case _stellarXdr_generated2.default.ClaimantType.claimantTypeV0():\n          value = claimantXdr.v0();\n          return new this(_strkey.StrKey.encodeEd25519PublicKey(value.destination().ed25519()), value.predicate());\n\n        default:\n          throw new Error('Invalid claimant type: ' + claimantXdr.switch().name);\n      }\n    }\n  }]);\n\n  return Claimant;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","Claimant","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_keypair","_strkey","obj","__esModule","default","_classCallCheck","instance","TypeError","destination","predicate","StrKey","isValidEd25519PublicKey","Error","_destination","_predicate","ClaimPredicate","claimPredicateUnconditional","toXDRObject","claimant","ClaimantV0","Keypair","fromPublicKey","xdrAccountId","claimantTypeV0","get","set","predicateUnconditional","predicateAnd","left","right","claimPredicateAnd","predicateOr","claimPredicateOr","predicateNot","claimPredicateNot","predicateBeforeAbsoluteTime","absBefore","claimPredicateBeforeAbsoluteTime","Int64","fromString","predicateBeforeRelativeTime","seconds","claimPredicateBeforeRelativeTime","fromXDR","claimantXdr","switch","ClaimantType","v0","encodeEd25519PublicKey","ed25519","name"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/claimant.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Claimant = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('./keypair');\n\nvar _strkey = require('./strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Claimant class represents an xdr.Claimant\n *\n * The claim predicate is optional, it defaults to unconditional if none is specified.\n *\n * @constructor\n * @param {string} destination - The destination account ID.\n * @param {xdr.ClaimPredicate} [predicate] - The claim predicate.\n */\nvar Claimant = exports.Claimant = function () {\n  function Claimant(destination, predicate) {\n    _classCallCheck(this, Claimant);\n\n    if (destination && !_strkey.StrKey.isValidEd25519PublicKey(destination)) {\n      throw new Error('Destination is invalid');\n    }\n    this._destination = destination;\n\n    if (!predicate) {\n      this._predicate = _stellarXdr_generated2.default.ClaimPredicate.claimPredicateUnconditional();\n    } else if (predicate instanceof _stellarXdr_generated2.default.ClaimPredicate) {\n      this._predicate = predicate;\n    } else {\n      throw new Error('Predicate should be an xdr.ClaimPredicate');\n    }\n  }\n\n  /**\n   * Returns an unconditional claim predicate\n   * @Return {xdr.ClaimPredicate}\n   */\n\n\n  _createClass(Claimant, [{\n    key: 'toXDRObject',\n\n\n    /**\n     * Returns the xdr object for this claimant.\n     * @returns {xdr.Claimant} XDR Claimant object\n     */\n    value: function toXDRObject() {\n      var claimant = new _stellarXdr_generated2.default.ClaimantV0({\n        destination: _keypair.Keypair.fromPublicKey(this._destination).xdrAccountId(),\n        predicate: this._predicate\n      });\n\n      return _stellarXdr_generated2.default.Claimant.claimantTypeV0(claimant);\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'destination',\n    get: function get() {\n      return this._destination;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n\n    /**\n     * @type {xdr.ClaimPredicate}\n     * @readonly\n     */\n\n  }, {\n    key: 'predicate',\n    get: function get() {\n      return this._predicate;\n    },\n    set: function set(value) {\n      throw new Error('Claimant is immutable');\n    }\n  }], [{\n    key: 'predicateUnconditional',\n    value: function predicateUnconditional() {\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateUnconditional();\n    }\n\n    /**\n     * Returns an `and` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateAnd',\n    value: function predicateAnd(left, right) {\n      if (!(left instanceof _stellarXdr_generated2.default.ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _stellarXdr_generated2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateAnd([left, right]);\n    }\n\n    /**\n     * Returns an `or` claim predicate\n     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate\n     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateOr',\n    value: function predicateOr(left, right) {\n      if (!(left instanceof _stellarXdr_generated2.default.ClaimPredicate)) {\n        throw new Error('left Predicate should be an xdr.ClaimPredicate');\n      }\n      if (!(right instanceof _stellarXdr_generated2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateOr([left, right]);\n    }\n\n    /**\n     * Returns a `not` claim predicate\n     * @param {xdr.ClaimPredicate} predicate an xdr.ClaimPredicate\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateNot',\n    value: function predicateNot(predicate) {\n      if (!(predicate instanceof _stellarXdr_generated2.default.ClaimPredicate)) {\n        throw new Error('right Predicate should be an xdr.ClaimPredicate');\n      }\n\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateNot(predicate);\n    }\n\n    /**\n     * Returns a `BeforeAbsoluteTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation is less than this (absolute)\n     * Unix timestamp (expressed in seconds).\n     *\n     * @param {string} absBefore Unix epoch (in seconds) as a string\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateBeforeAbsoluteTime',\n    value: function predicateBeforeAbsoluteTime(absBefore) {\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateBeforeAbsoluteTime(_stellarXdr_generated2.default.Int64.fromString(absBefore));\n    }\n\n    /**\n     * Returns a `BeforeRelativeTime` claim predicate\n     *\n     * This predicate will be fulfilled if the closing time of the ledger that\n     * includes the CreateClaimableBalance operation plus this relative time delta\n     * (in seconds) is less than the current time.\n     *\n     * @param {strings} seconds seconds since closeTime of the ledger in which the ClaimableBalanceEntry was created (as string)\n     * @Return {xdr.ClaimPredicate}\n     */\n\n  }, {\n    key: 'predicateBeforeRelativeTime',\n    value: function predicateBeforeRelativeTime(seconds) {\n      return _stellarXdr_generated2.default.ClaimPredicate.claimPredicateBeforeRelativeTime(_stellarXdr_generated2.default.Int64.fromString(seconds));\n    }\n\n    /**\n     * Returns a claimant object from its XDR object representation.\n     * @param {xdr.Claimant} claimantXdr - The claimant xdr object.\n     * @returns {Claimant}\n     */\n\n  }, {\n    key: 'fromXDR',\n    value: function fromXDR(claimantXdr) {\n      var value = void 0;\n      switch (claimantXdr.switch()) {\n        case _stellarXdr_generated2.default.ClaimantType.claimantTypeV0():\n          value = claimantXdr.v0();\n          return new this(_strkey.StrKey.encodeEd25519PublicKey(value.destination().ed25519()), value.predicate());\n        default:\n          throw new Error('Invalid claimant type: ' + claimantXdr.switch().name);\n      }\n    }\n  }]);\n\n  return Claimant;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script"}