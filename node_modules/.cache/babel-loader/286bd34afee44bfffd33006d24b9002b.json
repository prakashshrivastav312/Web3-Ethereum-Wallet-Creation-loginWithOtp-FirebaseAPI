{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = __importStar(require(\"lodash\"));\n\nconst assert = __importStar(require(\"assert\"));\n\nfunction mergeIntervals(intervals) {\n  const stack = [[-Infinity, -Infinity]];\n\n  _.sortBy(intervals, x => x[0]).forEach(interval => {\n    const lastInterval = stack.pop();\n\n    if (interval[0] <= lastInterval[1] + 1) {\n      stack.push([lastInterval[0], Math.max(interval[1], lastInterval[1])]);\n    } else {\n      stack.push(lastInterval);\n      stack.push(interval);\n    }\n  });\n\n  return stack.slice(1);\n}\n\nclass RangeSet {\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.ranges = [];\n  }\n\n  serialize() {\n    return this.ranges.map(range => range[0].toString() + '-' + range[1].toString()).join(',');\n  }\n\n  addRange(start, end) {\n    assert.ok(start <= end, `invalid range ${start} <= ${end}`);\n    this.ranges = mergeIntervals(this.ranges.concat([[start, end]]));\n  }\n\n  addValue(value) {\n    this.addRange(value, value);\n  }\n\n  parseAndAddRanges(rangesString) {\n    const rangeStrings = rangesString.split(',');\n    rangeStrings.forEach(rangeString => {\n      const range = rangeString.split('-').map(Number);\n      this.addRange(range[0], range.length === 1 ? range[0] : range[1]);\n    });\n  }\n\n  containsRange(start, end) {\n    return this.ranges.some(range => range[0] <= start && range[1] >= end);\n  }\n\n  containsValue(value) {\n    return this.containsRange(value, value);\n  }\n\n}\n\nexports.default = RangeSet;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAIA,SAASA,cAAT,CAAwBC,SAAxB,EAA6C;EAC3C,MAAMC,KAAK,GAAe,CAAC,CAAC,CAACC,QAAF,EAAY,CAACA,QAAb,CAAD,CAA1B;;EACAC,CAAC,CAACC,MAAF,CAASJ,SAAT,EAAqBK,CAAD,IAAOA,CAAC,CAAC,CAAD,CAA5B,EAAiCC,OAAjC,CAA0CC,QAAD,IAAa;IACpD,MAAMC,YAAY,GAAaP,KAAK,CAACQ,GAAN,EAA/B;;IACA,IAAIF,QAAQ,CAAC,CAAD,CAAR,IAAeC,YAAY,CAAC,CAAD,CAAZ,GAAkB,CAArC,EAAwC;MACtCP,KAAK,CAACS,IAAN,CAAW,CAACF,YAAY,CAAC,CAAD,CAAb,EAAkBG,IAAI,CAACC,GAAL,CAASL,QAAQ,CAAC,CAAD,CAAjB,EAAsBC,YAAY,CAAC,CAAD,CAAlC,CAAlB,CAAX;IACD,CAFD,MAEO;MACLP,KAAK,CAACS,IAAN,CAAWF,YAAX;MACAP,KAAK,CAACS,IAAN,CAAWH,QAAX;IACD;EACF,CARD;;EASA,OAAON,KAAK,CAACY,KAAN,CAAY,CAAZ,CAAP;AACD;;AAED,MAAMC,QAAN,CAAc;EAGZC;IACE,KAAKC,KAAL;EACD;;EAEDA,KAAK;IACH,KAAKC,MAAL,GAAc,EAAd;EACD;;EAEDC,SAAS;IACP,OAAO,KAAKD,MAAL,CACJE,GADI,CACCC,KAAD,IAAWA,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,KAAsB,GAAtB,GAA4BD,KAAK,CAAC,CAAD,CAAL,CAASC,QAAT,EADvC,EAEJC,IAFI,CAEC,GAFD,CAAP;EAGD;;EAEDC,QAAQ,CAACC,KAAD,EAAgBC,GAAhB,EAA2B;IACjCC,MAAM,CAACC,EAAP,CAAUH,KAAK,IAAIC,GAAnB,EAAwB,iBAAiBD,KAAK,OAAOC,GAAG,EAAxD;IACA,KAAKR,MAAL,GAAclB,cAAc,CAAC,KAAKkB,MAAL,CAAYW,MAAZ,CAAmB,CAAC,CAACJ,KAAD,EAAQC,GAAR,CAAD,CAAnB,CAAD,CAA5B;EACD;;EAEDI,QAAQ,CAACC,KAAD,EAAc;IACpB,KAAKP,QAAL,CAAcO,KAAd,EAAqBA,KAArB;EACD;;EAEDC,iBAAiB,CAACC,YAAD,EAAqB;IACpC,MAAMC,YAAY,GAAGD,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAArB;IACAD,YAAY,CAAC3B,OAAb,CAAsB6B,WAAD,IAAgB;MACnC,MAAMf,KAAK,GAAGe,WAAW,CAACD,KAAZ,CAAkB,GAAlB,EAAuBf,GAAvB,CAA2BiB,MAA3B,CAAd;MACA,KAAKb,QAAL,CAAcH,KAAK,CAAC,CAAD,CAAnB,EAAwBA,KAAK,CAACiB,MAAN,KAAiB,CAAjB,GAAqBjB,KAAK,CAAC,CAAD,CAA1B,GAAgCA,KAAK,CAAC,CAAD,CAA7D;IACD,CAHD;EAID;;EAEDkB,aAAa,CAACd,KAAD,EAAgBC,GAAhB,EAA2B;IACtC,OAAO,KAAKR,MAAL,CAAYsB,IAAZ,CAAkBnB,KAAD,IAAWA,KAAK,CAAC,CAAD,CAAL,IAAYI,KAAZ,IAAqBJ,KAAK,CAAC,CAAD,CAAL,IAAYK,GAA7D,CAAP;EACD;;EAEDe,aAAa,CAACV,KAAD,EAAc;IACzB,OAAO,KAAKQ,aAAL,CAAmBR,KAAnB,EAA0BA,KAA1B,CAAP;EACD;;AAxCW;;AA2CdW,kBAAe3B,QAAf","names":["mergeIntervals","intervals","stack","Infinity","_","sortBy","x","forEach","interval","lastInterval","pop","push","Math","max","slice","RangeSet","constructor","reset","ranges","serialize","map","range","toString","join","addRange","start","end","assert","ok","concat","addValue","value","parseAndAddRanges","rangesString","rangeStrings","split","rangeString","Number","length","containsRange","some","containsValue","exports"],"sourceRoot":"","sources":["../../../src/common/rangeset.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}