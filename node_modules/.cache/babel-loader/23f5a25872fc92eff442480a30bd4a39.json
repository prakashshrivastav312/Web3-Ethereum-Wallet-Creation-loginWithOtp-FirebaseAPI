{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bscEstimateGas = exports.bscGetTransaction = exports.bscGetAccountBep20Address = exports.bscGetAccountBalance = exports.bscGetBlock = exports.bscGetCurrentBlock = exports.bscGetTransactionsCount = exports.bscBroadcast = void 0;\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n/**\n * Broadcasts signed transaction to the Bsc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BscBroadcast\" target=\"_blank\">Tatum API documentation</a>\n */\n\n\nconst bscBroadcast = async (txData, signatureId) => tatum_1.post(`/v3/bsc/broadcast`, {\n  txData,\n  signatureId\n});\n\nexports.bscBroadcast = bscBroadcast;\n/**\n * Returns a number of outgoing BSC transactions for the address from Bsc blockchain. <br>\n * When a transaction is sent, there can be multiple outgoing transactions, which are not yet processed by the blockchain.\n * To distinguish between them, there is a counter called a nonce, which represents the order of the transaction in the list of outgoing transactions. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BscGetTransactionCount\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bscGetTransactionsCount = async address => tatum_1.get(`/v3/bsc/transaction/count/${address}`);\n\nexports.bscGetTransactionsCount = bscGetTransactionsCount;\n/**\n * Returns information about Bsc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BscGetCurrentBlock\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bscGetCurrentBlock = async () => tatum_1.get(`/v3/bsc/block/current`);\n\nexports.bscGetCurrentBlock = bscGetCurrentBlock;\n/**\n * Returns block by its hash from Bsc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BscGetBlock\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bscGetBlock = async hash => tatum_1.get(`/v3/bsc/block/${hash}`);\n\nexports.bscGetBlock = bscGetBlock;\n/**\n * Returns balance on address from Bsc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BscGetBalance\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bscGetAccountBalance = async address => tatum_1.get(`/v3/bsc/account/balance/${address}`);\n\nexports.bscGetAccountBalance = bscGetAccountBalance;\n/**\n * TODO: This endpoint dont exists? @SamuelSramko\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BscBep20GetBalance\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bscGetAccountBep20Address = async (address, contractAddress) => tatum_1.get(`/v3/bsc/account/balance/bep20/${address}?contractAddress=${contractAddress}`);\n\nexports.bscGetAccountBep20Address = bscGetAccountBep20Address;\n/**\n * Returns transaction by hash from Bsc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BscGetTransaction\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bscGetTransaction = async hash => tatum_1.get(`/v3/bsc/transaction/${hash}`);\n\nexports.bscGetTransaction = bscGetTransaction;\n/**\n * Returns gasLimit and gasPrice estimation of the transaction from Bsc blockchain. <br>\n * Gas price is obtained from https://explorer.bitquery.io/bsc/gas. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BscEstimateGas\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bscEstimateGas = body => tatum_1.post('/v3/bsc/gas', body, model_1.EstimateGasEth);\n\nexports.bscEstimateGas = bscEstimateGas;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;AAEA;;;;;;AAIO,MAAMA,YAAY,GAAG,OAAOC,MAAP,EAAuBC,WAAvB,KACxBC,aAAK,mBAAL,EAA0B;EAACF,MAAD;EAASC;AAAT,CAA1B,CADG;;AAAME,uBAAYJ,YAAZ;AAGb;;;;;;;AAMO,MAAMK,uBAAuB,GAAG,MAAOC,OAAP,IAA4CH,YAAI,6BAA6BG,OAAO,EAAxC,CAA5E;;AAAMF,kCAAuBC,uBAAvB;AAEb;;;;;AAIO,MAAME,kBAAkB,GAAG,YAA6BJ,YAAI,uBAAJ,CAAxD;;AAAMC,6BAAkBG,kBAAlB;AAEb;;;;;AAIO,MAAMC,WAAW,GAAG,MAAOC,IAAP,IAA2CN,YAAI,iBAAiBM,IAAI,EAAzB,CAA/D;;AAAML,sBAAWI,WAAX;AAEb;;;;;AAIO,MAAME,oBAAoB,GAAG,MAAOJ,OAAP,IAA+CH,YAAI,2BAA2BG,OAAO,EAAtC,CAA5E;;AAAMF,+BAAoBM,oBAApB;AAEb;;;;;AAIO,MAAMC,yBAAyB,GAAG,OAAOL,OAAP,EAAwBM,eAAxB,KACrCT,YAAI,iCAAiCG,OAAO,oBAAoBM,eAAe,EAA/E,CADG;;AAAMR,oCAAyBO,yBAAzB;AAGb;;;;;AAIO,MAAME,iBAAiB,GAAG,MAAOJ,IAAP,IAAwCN,YAAI,uBAAuBM,IAAI,EAA/B,CAAlE;;AAAML,4BAAiBS,iBAAjB;AAEb;;;;;;AAKO,MAAMC,cAAc,GAAIC,IAAD,IAAmDZ,aAAK,aAAL,EAAoBY,IAApB,EAA0BC,sBAA1B,CAA1E;;AAAMZ,yBAAcU,cAAd","names":["bscBroadcast","txData","signatureId","tatum_1","exports","bscGetTransactionsCount","address","bscGetCurrentBlock","bscGetBlock","hash","bscGetAccountBalance","bscGetAccountBep20Address","contractAddress","bscGetTransaction","bscEstimateGas","body","model_1"],"sourceRoot":"","sources":["../../../src/blockchain/bsc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}