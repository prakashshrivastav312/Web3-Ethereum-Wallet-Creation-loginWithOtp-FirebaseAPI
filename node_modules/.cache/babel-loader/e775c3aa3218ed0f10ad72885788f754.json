{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddressBatch = exports.AddressQuery = void 0;\n\nconst class_transformer_1 = require(\"class-transformer\");\n\nconst class_validator_1 = require(\"class-validator\");\n\nclass AddressQuery {}\n\n__decorate([class_validator_1.IsNotEmpty(), class_validator_1.Length(24, 24), __metadata(\"design:type\", String)], AddressQuery.prototype, \"accountId\", void 0);\n\n__decorate([class_validator_1.IsOptional(), class_validator_1.Min(0), class_validator_1.Max(2147483647), __metadata(\"design:type\", Number)], AddressQuery.prototype, \"derivationKey\", void 0);\n\nexports.AddressQuery = AddressQuery;\n\nclass AddressBatch {}\n\n__decorate([class_validator_1.IsNotEmpty(), class_validator_1.ValidateNested({\n  each: true\n}), class_transformer_1.Type(() => AddressQuery), __metadata(\"design:type\", Array)], AddressBatch.prototype, \"addresses\", void 0);\n\nexports.AddressBatch = AddressBatch;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA,MAAaA,YAAb,CAAyB;;AAIrBC,YAFCC,8BAED,EADCA,yBAAO,EAAP,EAAW,EAAX,CACD;;AAKAD,YAHCC,8BAGD,EAFCA,sBAAI,CAAJ,CAED,EADCA,sBAAI,UAAJ,CACD;;AATJC;;AAYA,MAAaC,YAAb,CAAyB;;AAKrBH,YAHCC,8BAGD,EAFCA,iCAAe;EAACG,IAAI,EAAE;AAAP,CAAf,CAED,EADCC,yBAAK,MAAMN,YAAX,CACD;;AALJG","names":["AddressQuery","__decorate","class_validator_1","exports","AddressBatch","each","class_transformer_1"],"sourceRoot":"","sources":["../../../../src/model/request/CreateOffchainAddressesBatch.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}