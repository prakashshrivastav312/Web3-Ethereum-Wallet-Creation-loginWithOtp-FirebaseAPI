{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\n\nconst bech32 = __importStar(require(\"bech32\"));\n\nconst errors = __importStar(require(\"./errors\"));\n/**\n * The human-readable-part of the bech32 addresses.\n */\n\n\nconst HRP = \"erd\";\n/**\n * The length (in bytes) of a public key (from which a bech32 address can be obtained).\n */\n\nconst PUBKEY_LENGTH = 32;\nconst SMART_CONTRACT_HEX_PUBKEY_PREFIX = \"0\".repeat(16);\n/**\n * An Elrond Address, as an immutable object.\n */\n\nclass Address {\n  /**\n   * Creates an address object, given a raw string (whether a hex pubkey or a Bech32 address), a sequence of bytes, or another Address object.\n   */\n  constructor(value) {\n    // We keep a hex-encoded string as the \"backing\" value\n    this.valueHex = \"\";\n\n    if (!value) {\n      return;\n    }\n\n    if (value instanceof Address) {\n      return Address.fromAddress(value);\n    }\n\n    if (value instanceof Buffer) {\n      return Address.fromBuffer(value);\n    }\n\n    if (typeof value === \"string\") {\n      return Address.fromString(value);\n    }\n\n    throw new errors.ErrAddressCannotCreate(value);\n  }\n  /**\n   * Creates an address object from another address object\n   */\n\n\n  static fromAddress(address) {\n    return Address.fromValidHex(address.valueHex);\n  }\n\n  static fromValidHex(value) {\n    let result = new Address();\n    result.valueHex = value;\n    return result;\n  }\n  /**\n   * Creates an address object from a Buffer\n   */\n\n\n  static fromBuffer(buffer) {\n    if (buffer.length != PUBKEY_LENGTH) {\n      throw new errors.ErrAddressCannotCreate(buffer);\n    }\n\n    return Address.fromValidHex(buffer.toString(\"hex\"));\n  }\n  /**\n   * Creates an address object from a string (hex or bech32)\n   */\n\n\n  static fromString(value) {\n    if (Address.isValidHex(value)) {\n      return Address.fromValidHex(value);\n    }\n\n    return Address.fromBech32(value);\n  }\n\n  static isValidHex(value) {\n    return Buffer.from(value, \"hex\").length == PUBKEY_LENGTH;\n  }\n  /**\n   * Creates an address object from a hex-encoded string\n   */\n\n\n  static fromHex(value) {\n    if (!Address.isValidHex(value)) {\n      throw new errors.ErrAddressCannotCreate(value);\n    }\n\n    return Address.fromValidHex(value);\n  }\n  /**\n   * Creates an address object from a bech32-encoded string\n   */\n\n\n  static fromBech32(value) {\n    let decoded;\n\n    try {\n      decoded = bech32.decode(value);\n    } catch (err) {\n      throw new errors.ErrAddressCannotCreate(value, err);\n    }\n\n    let prefix = decoded.prefix;\n\n    if (prefix != HRP) {\n      throw new errors.ErrAddressBadHrp(HRP, prefix);\n    }\n\n    let pubkey = Buffer.from(bech32.fromWords(decoded.words));\n\n    if (pubkey.length != PUBKEY_LENGTH) {\n      throw new errors.ErrAddressCannotCreate(value);\n    }\n\n    return Address.fromValidHex(pubkey.toString(\"hex\"));\n  }\n  /**\n   * Returns the hex representation of the address (pubkey)\n   */\n\n\n  hex() {\n    this.assertNotEmpty();\n    return this.valueHex;\n  }\n  /**\n   * Returns the bech32 representation of the address\n   */\n\n\n  bech32() {\n    this.assertNotEmpty();\n    let words = bech32.toWords(this.pubkey());\n    let address = bech32.encode(HRP, words);\n    return address;\n  }\n  /**\n   * Returns the pubkey as raw bytes (buffer)\n   */\n\n\n  pubkey() {\n    this.assertNotEmpty();\n    return Buffer.from(this.valueHex, \"hex\");\n  }\n  /**\n   * Throws an error if the address is empty.\n   */\n\n\n  assertNotEmpty() {\n    if (this.isEmpty()) {\n      throw new errors.ErrAddressEmpty();\n    }\n  }\n  /**\n   * Returns whether the address is empty.\n   */\n\n\n  isEmpty() {\n    return !this.valueHex;\n  }\n  /**\n   * Compares the address to another address\n   */\n\n\n  equals(other) {\n    if (!other) {\n      return false;\n    }\n\n    return this.valueHex == other.valueHex;\n  }\n  /**\n   * Returns the bech32 representation of the address\n   */\n\n\n  toString() {\n    return this.bech32();\n  }\n  /**\n   * Converts the address to a pretty, plain JavaScript object.\n   */\n\n\n  toJSON() {\n    return {\n      bech32: this.bech32(),\n      pubkey: this.hex()\n    };\n  }\n  /**\n   * Creates the Zero address (the one that should be used when deploying smart contracts)\n   */\n\n\n  static Zero() {\n    return new Address(\"0\".repeat(64));\n  }\n\n  isContractAddress() {\n    return this.hex().startsWith(SMART_CONTRACT_HEX_PUBKEY_PREFIX);\n  }\n\n}\n\nexports.Address = Address;","map":{"version":3,"mappings":"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","names":["HRP","PUBKEY_LENGTH","SMART_CONTRACT_HEX_PUBKEY_PREFIX","repeat","Address","constructor","value","fromAddress","Buffer","fromBuffer","fromString","errors","ErrAddressCannotCreate","address","fromValidHex","valueHex","result","buffer","length","toString","isValidHex","fromBech32","from","fromHex","decoded","bech32","decode","err","prefix","ErrAddressBadHrp","pubkey","fromWords","words","hex","assertNotEmpty","toWords","encode","isEmpty","ErrAddressEmpty","equals","other","toJSON","Zero","isContractAddress","startsWith","exports"],"sourceRoot":"","sources":["../src/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}