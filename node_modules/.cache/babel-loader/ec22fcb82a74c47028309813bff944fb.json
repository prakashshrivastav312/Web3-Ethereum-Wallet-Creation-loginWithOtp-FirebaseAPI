{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transactionID = exports.sha512Half = exports.Sha512Half = void 0;\n\nvar hash_prefixes_1 = require(\"./hash-prefixes\");\n\nvar createHash = require(\"create-hash\");\n\nvar hash_256_1 = require(\"./types/hash-256\");\n\nvar binary_serializer_1 = require(\"./serdes/binary-serializer\");\n\nvar buffer_1 = require(\"buffer/\");\n/**\n * Class for hashing with SHA512\n * @extends BytesList So SerializedTypes can write bytes to a Sha512Half\n */\n\n\nvar Sha512Half =\n/** @class */\nfunction (_super) {\n  __extends(Sha512Half, _super);\n\n  function Sha512Half() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.hash = createHash('sha512');\n    return _this;\n  }\n  /**\n   * Construct a new Sha512Hash and write bytes this.hash\n   *\n   * @param bytes bytes to write to this.hash\n   * @returns the new Sha512Hash object\n   */\n\n\n  Sha512Half.put = function (bytes) {\n    return new Sha512Half().put(bytes);\n  };\n  /**\n   * Write bytes to an existing Sha512Hash\n   *\n   * @param bytes bytes to write to object\n   * @returns the Sha512 object\n   */\n\n\n  Sha512Half.prototype.put = function (bytes) {\n    this.hash.update(bytes);\n    return this;\n  };\n  /**\n   * Compute SHA512 hash and slice in half\n   *\n   * @returns half of a SHA512 hash\n   */\n\n\n  Sha512Half.prototype.finish256 = function () {\n    return buffer_1.Buffer.from(this.hash.digest().slice(0, 32));\n  };\n  /**\n   * Constructs a Hash256 from the Sha512Half object\n   *\n   * @returns a Hash256 object\n   */\n\n\n  Sha512Half.prototype.finish = function () {\n    return new hash_256_1.Hash256(this.finish256());\n  };\n\n  return Sha512Half;\n}(binary_serializer_1.BytesList);\n\nexports.Sha512Half = Sha512Half;\n/**\n * compute SHA512 hash of a list of bytes\n *\n * @param args zero or more arguments to hash\n * @returns the sha512half hash of the arguments.\n */\n\nfunction sha512Half() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var hash = new Sha512Half();\n  args.forEach(function (a) {\n    return hash.put(a);\n  });\n  return hash.finish256();\n}\n\nexports.sha512Half = sha512Half;\n/**\n * Construct a transactionID from a Serialized Transaction\n *\n * @param serialized bytes to hash\n * @returns a Hash256 object\n */\n\nfunction transactionID(serialized) {\n  return new hash_256_1.Hash256(sha512Half(hash_prefixes_1.HashPrefix.transactionID, serialized));\n}\n\nexports.transactionID = transactionID;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;AAEA;;;;;;AAIA;AAAA;AAAA;EAAyBA;;EAAzB;IAAA;;IACUC,aAAOC,UAAU,CAAC,QAAD,CAAjB;;EAwCT;EAtCC;;;;;;;;EAMOC,iBAAP,UAAWC,KAAX,EAAwB;IACtB,OAAO,IAAID,UAAJ,GAAiBE,GAAjB,CAAqBD,KAArB,CAAP;EACD,CAFM;EAIP;;;;;;;;EAMAD,qCAAIC,KAAJ,EAAiB;IACf,KAAKE,IAAL,CAAUC,MAAV,CAAiBH,KAAjB;IACA,OAAO,IAAP;EACD,CAHD;EAKA;;;;;;;EAKAD;IACE,OAAOK,gBAAOC,IAAP,CAAY,KAAKH,IAAL,CAAUI,MAAV,GAAmBC,KAAnB,CAAyB,CAAzB,EAA4B,EAA5B,CAAZ,CAAP;EACD,CAFD;EAIA;;;;;;;EAKAR;IACE,OAAO,IAAIS,kBAAJ,CAAY,KAAKC,SAAL,EAAZ,CAAP;EACD,CAFD;;EAGF;AAAC,CAzCD,CAAyBC,6BAAzB;;AAiESC;AAtBT;;;;;;;AAMA,SAASC,UAAT,GAAmB;EAAC;;OAAA,yCAAiB;IAAjBC;;;EAClB,IAAMX,IAAI,GAAG,IAAIH,UAAJ,EAAb;EACAc,IAAI,CAACC,OAAL,CAAa,UAACC,CAAD,EAAE;IAAK,WAAI,CAACd,GAAL,CAASc,CAAT;EAAW,CAA/B;EACA,OAAOb,IAAI,CAACO,SAAL,EAAP;AACD;;AAYoBE;AAVrB;;;;;;;AAMA,SAASK,aAAT,CAAuBC,UAAvB,EAAyC;EACvC,OAAO,IAAIT,kBAAJ,CAAYI,UAAU,CAACM,2BAAWF,aAAZ,EAA2BC,UAA3B,CAAtB,CAAP;AACD;;AAEgCN","names":["__extends","_this","createHash","Sha512Half","bytes","put","hash","update","buffer_1","from","digest","slice","hash_256_1","finish256","binary_serializer_1","exports","sha512Half","args","forEach","a","transactionID","serialized","hash_prefixes_1"],"sourceRoot":"","sources":["../src/hashes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}