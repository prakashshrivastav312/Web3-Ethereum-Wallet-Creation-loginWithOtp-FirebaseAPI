{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SmartContract = void 0;\n\nconst balance_1 = require(\"../balance\");\n\nconst address_1 = require(\"../address\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst transactionPayload_1 = require(\"../transactionPayload\");\n\nconst code_1 = require(\"./code\");\n\nconst codeMetadata_1 = require(\"./codeMetadata\");\n\nconst transactionPayloadBuilders_1 = require(\"./transactionPayloadBuilders\");\n\nconst function_1 = require(\"./function\");\n\nconst query_1 = require(\"./query\");\n\nconst utils_1 = require(\"../utils\");\n\nconst utils_2 = require(\"./codec/utils\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst interaction_1 = require(\"./interaction\");\n\nconst createKeccakHash = require(\"keccak\");\n/**\n * An abstraction for deploying and interacting with Smart Contracts.\n */\n\n\nclass SmartContract {\n  /**\n   * Create a SmartContract object by providing its address on the Network.\n   */\n  constructor(_ref) {\n    let {\n      address,\n      abi\n    } = _ref;\n    this.owner = new address_1.Address();\n    this.address = new address_1.Address();\n    this.code = code_1.Code.nothing();\n    this.codeMetadata = new codeMetadata_1.CodeMetadata();\n    this.trackOfTransactions = [];\n    /**\n     * This object contains a function for each endpoint defined by the contract.\n     * (a bit similar to web3js's \"contract.methods\").\n     */\n\n    this.methods = {};\n    this.address = address || new address_1.Address();\n    this.abi = abi;\n    this.methods = {};\n\n    if (abi) {\n      this.setupMethods();\n    }\n  }\n\n  setupMethods() {\n    let contract = this;\n    let abi = this.getAbi();\n\n    for (const definition of abi.getAllEndpoints()) {\n      let functionName = definition.name; // For each endpoint defined by the ABI, we attach a function to the \"methods\" object,\n      // a function that receives typed values as arguments\n      // and returns a prepared contract interaction.\n\n      this.methods[functionName] = function (args) {\n        let func = new function_1.ContractFunction(functionName);\n        let interaction = new interaction_1.Interaction(contract, func, func, args || []);\n        return interaction;\n      };\n    }\n  }\n  /**\n   * Sets the address, as on Network.\n   */\n\n\n  setAddress(address) {\n    this.address = address;\n  }\n  /**\n   * Gets the address, as on Network.\n   */\n\n\n  getAddress() {\n    return this.address;\n  }\n  /**\n   * Gets the owner address.\n   *\n   * Note that this function doesn't query the Network, but uses the information acquired when signing a deployment transaction.\n   * Therefore, currently, this function is useful only in the context of deploying Smart Contracts.\n   */\n\n\n  getOwner() {\n    this.owner.assertNotEmpty();\n    return this.owner;\n  }\n  /**\n   * Gets the {@link Code} of the Smart Contract. Does not query the Network.\n   */\n\n\n  getCode() {\n    return this.code;\n  }\n  /**\n   * Gets the {@link CodeMetadata} of the Smart Contract. Does not query the Network.\n   */\n\n\n  getCodeMetadata() {\n    return this.codeMetadata;\n  }\n\n  setAbi(abi) {\n    this.abi = abi;\n  }\n\n  getAbi() {\n    utils_1.guardValueIsSet(\"abi\", this.abi);\n    return this.abi;\n  }\n  /**\n   * Creates a {@link Transaction} for deploying the Smart Contract to the Network.\n   */\n\n\n  deploy(_ref2) {\n    let {\n      code,\n      codeMetadata,\n      initArguments,\n      value,\n      gasLimit\n    } = _ref2;\n    codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n    initArguments = initArguments || [];\n    value = value || balance_1.Balance.Zero();\n    let payload = transactionPayload_1.TransactionPayload.contractDeploy().setCode(code).setCodeMetadata(codeMetadata).setInitArgs(initArguments).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: address_1.Address.Zero(),\n      value: value,\n      gasLimit: gasLimit,\n      data: payload\n    });\n    this.code = code;\n    this.codeMetadata = codeMetadata;\n    transaction.onSigned.on(this.onDeploySigned.bind(this));\n    return transaction;\n  }\n\n  onDeploySigned(_ref3) {\n    let {\n      transaction,\n      signedBy\n    } = _ref3;\n    this.owner = signedBy;\n    let nonce = transaction.getNonce();\n    let address = SmartContract.computeAddress(this.owner, nonce);\n    this.setAddress(address);\n    this.trackOfTransactions.push(transaction);\n  }\n  /**\n   * Creates a {@link Transaction} for upgrading the Smart Contract on the Network.\n   */\n\n\n  upgrade(_ref4) {\n    let {\n      code,\n      codeMetadata,\n      initArguments,\n      value,\n      gasLimit\n    } = _ref4;\n    codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n    initArguments = initArguments || [];\n    value = value || balance_1.Balance.Zero();\n    let payload = transactionPayload_1.TransactionPayload.contractUpgrade().setCode(code).setCodeMetadata(codeMetadata).setInitArgs(initArguments).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: this.getAddress(),\n      value: value,\n      gasLimit: gasLimit,\n      data: payload\n    });\n    this.code = code;\n    this.codeMetadata = codeMetadata;\n    transaction.onSigned.on(this.onUpgradeSigned.bind(this));\n    return transaction;\n  }\n\n  onUpgradeSigned(_ref5) {\n    let {\n      transaction\n    } = _ref5;\n    this.trackOfTransactions.push(transaction);\n  }\n  /**\n   * Creates a {@link Transaction} for calling (a function of) the Smart Contract.\n   */\n\n\n  call(_ref6) {\n    let {\n      func,\n      args,\n      value,\n      gasLimit,\n      receiver\n    } = _ref6;\n    args = args || [];\n    value = value || balance_1.Balance.Zero();\n    let payload = transactionPayload_1.TransactionPayload.contractCall().setFunction(func).setArgs(args).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: receiver ? receiver : this.getAddress(),\n      value: value,\n      gasLimit: gasLimit,\n      data: payload\n    });\n    transaction.onSigned.on(this.onCallSigned.bind(this));\n    return transaction;\n  }\n\n  onCallSigned(_ref7) {\n    let {\n      transaction\n    } = _ref7;\n    this.trackOfTransactions.push(transaction);\n  }\n\n  runQuery(provider, _ref8) {\n    let {\n      func,\n      args,\n      value,\n      caller\n    } = _ref8;\n    return __awaiter(this, void 0, void 0, function* () {\n      let query = new query_1.Query({\n        address: this.address,\n        func: func,\n        args: args,\n        value: value,\n        caller: caller\n      });\n      let response = yield provider.queryContract(query);\n      return response;\n    });\n  }\n  /**\n   * Computes the address of a Smart Contract.\n   * The address is computed deterministically, from the address of the owner and the nonce of the deployment transaction.\n   *\n   * @param owner The owner of the Smart Contract\n   * @param nonce The owner nonce used for the deployment transaction\n   */\n\n\n  static computeAddress(owner, nonce) {\n    let initialPadding = Buffer.alloc(8, 0);\n    let ownerPubkey = owner.pubkey();\n    let shardSelector = ownerPubkey.slice(30);\n    let ownerNonceBytes = Buffer.alloc(8);\n    const bigNonce = new bignumber_js_1.default(nonce.valueOf().toString(10));\n    const bigNonceBuffer = utils_2.bigIntToBuffer(bigNonce);\n    ownerNonceBytes.write(bigNonceBuffer.reverse().toString('hex'), 'hex');\n    let bytesToHash = Buffer.concat([ownerPubkey, ownerNonceBytes]);\n    let hash = createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    let vmTypeBytes = Buffer.from(transactionPayloadBuilders_1.ArwenVirtualMachine, \"hex\");\n    let addressBytes = Buffer.concat([initialPadding, vmTypeBytes, hash.slice(10, 30), shardSelector]);\n    let address = new address_1.Address(addressBytes);\n    return address;\n  }\n\n}\n\nexports.SmartContract = SmartContract;","map":{"version":3,"mappings":"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","names":["createKeccakHash","require","SmartContract","constructor","address","abi","address_1","code_1","nothing","codeMetadata_1","methods","setupMethods","contract","getAbi","definition","getAllEndpoints","functionName","name","args","func","function_1","interaction","interaction_1","setAddress","getAddress","getOwner","owner","assertNotEmpty","getCode","code","getCodeMetadata","codeMetadata","setAbi","utils_1","deploy","initArguments","value","gasLimit","balance_1","Zero","payload","transactionPayload_1","contractDeploy","setCode","setCodeMetadata","setInitArgs","build","transaction","transaction_1","receiver","data","onSigned","on","onDeploySigned","bind","signedBy","nonce","getNonce","computeAddress","trackOfTransactions","push","upgrade","contractUpgrade","onUpgradeSigned","call","contractCall","setFunction","setArgs","onCallSigned","runQuery","provider","caller","query","query_1","response","queryContract","initialPadding","Buffer","alloc","ownerPubkey","pubkey","shardSelector","slice","ownerNonceBytes","bigNonce","bignumber_js_1","valueOf","toString","bigNonceBuffer","utils_2","write","reverse","bytesToHash","concat","hash","update","digest","vmTypeBytes","from","transactionPayloadBuilders_1","addressBytes","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/smartContract.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}