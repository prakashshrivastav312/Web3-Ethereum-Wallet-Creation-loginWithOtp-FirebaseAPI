{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Currency = void 0;\n\nvar hash_160_1 = require(\"./hash-160\");\n\nvar buffer_1 = require(\"buffer/\");\n\nvar XRP_HEX_REGEX = /^0{40}$/;\nvar ISO_REGEX = /^[A-Z0-9a-z?!@#$%^&*(){}[\\]|]{3}$/;\nvar HEX_REGEX = /^[A-F0-9]{40}$/; // eslint-disable-next-line no-control-regex\n\nvar STANDARD_FORMAT_HEX_REGEX = /^0{24}[\\x00-\\x7F]{6}0{10}$/;\n/**\n * Convert an ISO code to a currency bytes representation\n */\n\nfunction isoToBytes(iso) {\n  var bytes = buffer_1.Buffer.alloc(20);\n\n  if (iso !== 'XRP') {\n    var isoBytes = iso.split('').map(function (c) {\n      return c.charCodeAt(0);\n    });\n    bytes.set(isoBytes, 12);\n  }\n\n  return bytes;\n}\n/**\n * Tests if ISO is a valid iso code\n */\n\n\nfunction isIsoCode(iso) {\n  return ISO_REGEX.test(iso);\n}\n\nfunction isoCodeFromHex(code) {\n  var iso = code.toString();\n\n  if (iso === 'XRP') {\n    return null;\n  }\n\n  if (isIsoCode(iso)) {\n    return iso;\n  }\n\n  return null;\n}\n/**\n * Tests if hex is a valid hex-string\n */\n\n\nfunction isHex(hex) {\n  return HEX_REGEX.test(hex);\n}\n/**\n * Tests if a string is a valid representation of a currency\n */\n\n\nfunction isStringRepresentation(input) {\n  return input.length === 3 || isHex(input);\n}\n/**\n * Tests if a Buffer is a valid representation of a currency\n */\n\n\nfunction isBytesArray(bytes) {\n  return bytes.byteLength === 20;\n}\n/**\n * Ensures that a value is a valid representation of a currency\n */\n\n\nfunction isValidRepresentation(input) {\n  return input instanceof buffer_1.Buffer ? isBytesArray(input) : isStringRepresentation(input);\n}\n/**\n * Generate bytes from a string or buffer representation of a currency\n */\n\n\nfunction bytesFromRepresentation(input) {\n  if (!isValidRepresentation(input)) {\n    throw new Error(\"Unsupported Currency representation: \".concat(input));\n  }\n\n  return input.length === 3 ? isoToBytes(input) : buffer_1.Buffer.from(input, 'hex');\n}\n/**\n * Class defining how to encode and decode Currencies\n */\n\n\nvar Currency =\n/** @class */\nfunction (_super) {\n  __extends(Currency, _super);\n\n  function Currency(byteBuf) {\n    var _this = _super.call(this, byteBuf !== null && byteBuf !== void 0 ? byteBuf : Currency.XRP.bytes) || this;\n\n    var hex = _this.bytes.toString('hex');\n\n    if (XRP_HEX_REGEX.test(hex)) {\n      _this._iso = 'XRP';\n    } else if (STANDARD_FORMAT_HEX_REGEX.test(hex)) {\n      _this._iso = isoCodeFromHex(_this.bytes.slice(12, 15));\n    } else {\n      _this._iso = null;\n    }\n\n    return _this;\n  }\n  /**\n   * Return the ISO code of this currency\n   *\n   * @returns ISO code if it exists, else null\n   */\n\n\n  Currency.prototype.iso = function () {\n    return this._iso;\n  };\n  /**\n   * Constructs a Currency object\n   *\n   * @param val Currency object or a string representation of a currency\n   */\n\n\n  Currency.from = function (value) {\n    if (value instanceof Currency) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return new Currency(bytesFromRepresentation(value));\n    }\n\n    throw new Error('Cannot construct Currency from value given');\n  };\n  /**\n   * Gets the JSON representation of a currency\n   *\n   * @returns JSON representation\n   */\n\n\n  Currency.prototype.toJSON = function () {\n    var iso = this.iso();\n\n    if (iso !== null) {\n      return iso;\n    }\n\n    return this.bytes.toString('hex').toUpperCase();\n  };\n\n  Currency.XRP = new Currency(buffer_1.Buffer.alloc(20));\n  return Currency;\n}(hash_160_1.Hash160);\n\nexports.Currency = Currency;","map":{"version":3,"mappings":"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","names":["XRP_HEX_REGEX","ISO_REGEX","HEX_REGEX","STANDARD_FORMAT_HEX_REGEX","isoToBytes","iso","bytes","buffer_1","alloc","isoBytes","split","map","c","charCodeAt","set","isIsoCode","test","isoCodeFromHex","code","toString","isHex","hex","isStringRepresentation","input","length","isBytesArray","byteLength","isValidRepresentation","bytesFromRepresentation","Error","from","__extends","byteBuf","_super","Currency","XRP","_this","_iso","slice","value","toUpperCase","hash_160_1","exports"],"sourceRoot":"","sources":["../../src/types/currency.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}