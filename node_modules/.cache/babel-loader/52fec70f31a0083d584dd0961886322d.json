{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst BigNumber = require('bignumber.js');\n\nconst Contract = require('../../caver-contract');\n\nconst {\n  validateDeployParameterForKIP7,\n  determineSendParams,\n  kip7JsonInterface,\n  kip7ByteCode,\n  formatParamForUint256,\n  interfaceIds\n} = require('./kctHelper');\n\nconst {\n  isAddress,\n  toBuffer,\n  isHexStrict,\n  toHex\n} = require('../../caver-utils');\n\nconst KIP13 = require('./kip13');\n/**\n * The KIP7 class that helps you easily handle a smart contract that implements KIP-7 as a JavaScript object on the Klaytn blockchain platform (Klaytn).\n * @hideconstructor\n * @class\n */\n\n\nclass KIP7 extends Contract {\n  /**\n   * Deploys a KIP-7 token contract to Klaytn network.\n   *\n   * By default, it returns a KIP7 instance when the deployment is finished.\n   * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\n   *\n   * @example\n   * const tokenInfo = { name: 'TokenName', symbol: 'TKN', decimals: 18, initialSupply: new BigNumber(1000000000000000000) }\n   *\n   * // Below example will use `caver.wallet`.\n   * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}')\n   *\n   * // Use sendOptions instead of deployer address.\n   * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\n   * const deployed = await caver.kct.kip7.deploy(tokenInfo, sendOptions)\n   *\n   * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\n   * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}', wallet)\n   *\n   * @ignore\n   * @param {KIP7.KIP7DeployParams} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n   * @param {Contract.SendOptions|string} sendOptions The address of the account to deploy the KIP-7 token contract or an object holding parameters that are required for sending a transaction.\n   * @return {Promise<*>}\n   */\n  static deploy(tokenInfo, sendOptions) {\n    validateDeployParameterForKIP7(tokenInfo);\n    const {\n      name,\n      symbol,\n      decimals,\n      initialSupply\n    } = tokenInfo;\n    const kip7 = new KIP7(); // If sendOptions is string type, sendOptions means deployer's address\n\n    if (_.isString(sendOptions)) sendOptions = {\n      from: sendOptions,\n      gas: 4000000,\n      value: 0\n    };\n    sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 4000000;\n    return kip7.deploy({\n      data: kip7ByteCode,\n      arguments: [name, symbol, decimals, initialSupply]\n    }).send(sendOptions);\n  }\n  /**\n   * An object that defines the parameters required to deploy the KIP-7 contract.\n   *\n   * @typedef {object} KIP7.KIP7DetectedObject\n   * @property {boolean} IKIP7 - Whether to implement `IKIP7` interface.\n   * @property {boolean} IKIP7Metadata - Whether to implement `IKIP7Metadata` interface.\n   * @property {boolean} IKIP7Mintable - Whether to implement `IKIP7Mintable` interface.\n   * @property {boolean} IKIP7Burnable - Whether to implement `IKIP7Burnable` interface.\n   * @property {boolean} IKIP7Pausable - Whether to implement `IKIP7Pausable` interface.\n   */\n\n  /**\n   * Returns the information of the interface implemented by the token contract.\n   *\n   * @example\n   * const detected = await caver.kct.kip7.detectInterface('0x{address in hex}')\n   *\n   * @param {string} contractAddress The address of the KIP-7 token contract to detect.\n   * @return {Promise<KIP7.KIP7DetectedObject>}\n   */\n\n\n  static detectInterface(contractAddress) {\n    const kip7 = new KIP7(contractAddress);\n    return kip7.detectInterface();\n  }\n  /**\n   * KIP7 class represents the KIP-7 token contract.\n   *\n   * @constructor\n   * @param {string} tokenAddress - The KIP-7 token contract address.\n   * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n   */\n\n\n  constructor(tokenAddress) {\n    let abi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : kip7JsonInterface;\n\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`);\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    super(abi, tokenAddress);\n  }\n  /**\n   * Clones the current KIP7 instance.\n   *\n   * @example\n   * const cloned = kip7.clone()\n   * const cloned = kip7.clone('0x{new kip7 address}')\n   *\n   * @param {string} [tokenAddress] The address of the token contract.\n   * @return {KIP7}\n   */\n\n\n  clone() {\n    let tokenAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.address;\n    const cloned = new this.constructor(tokenAddress, this.options.jsonInterface);\n    cloned.setWallet(this._wallet);\n    return cloned;\n  }\n  /**\n   * Returns the information of the interface implemented by the token contract.\n   *\n   * @example\n   * const detected = await kip7.detectInterface()\n   *\n   * @return {Promise<KIP7.KIP7DetectedObject>}\n   */\n\n\n  async detectInterface() {\n    const detected = {\n      IKIP7: false,\n      IKIP7Metadata: false,\n      IKIP7Mintable: false,\n      IKIP7Burnable: false,\n      IKIP7Pausable: false\n    };\n    const notSupportedMsg = `This contract does not support KIP-13.`;\n    const contractAddress = this._address;\n\n    try {\n      const isSupported = await KIP13.isImplementedKIP13Interface(contractAddress);\n      if (isSupported !== true) throw new Error(notSupportedMsg); // Since there is an extension that has the same interface id even though it is a different KCT,\n      // it must be checked first whether the contract is a KIP-7 contract.\n\n      detected.IKIP7 = await this.supportsInterface(interfaceIds.kip7.IKIP7);\n      if (detected.IKIP7 === false) return detected;\n      await Promise.all(Object.keys(interfaceIds.kip7).map(async interfaceName => {\n        if (interfaceIds.kip7[interfaceName] !== interfaceIds.kip7.IKIP7) detected[interfaceName] = await this.supportsInterface(interfaceIds.kip7[interfaceName]);\n      }));\n      return detected;\n    } catch (e) {\n      throw new Error(notSupportedMsg);\n    }\n  }\n  /**\n   * Returns `true` if this contract implements the interface defined by `interfaceId`.\n   *\n   * @example\n   * const supported = await kip7.supportsInterface('0x65787371')\n   *\n   * @param {string} interfaceId The interface id to be checked.\n   * @return {Promise<boolean>}\n   */\n\n\n  async supportsInterface(interfaceId) {\n    const supported = await this.methods.supportsInterface(interfaceId).call();\n    return supported;\n  }\n  /**\n   * Returns the name of the token.\n   *\n   * @example\n   * const name = await kip7.name()\n   *\n   * @return {Promise<string>}\n   */\n\n\n  async name() {\n    const name = await this.methods.name().call();\n    return name;\n  }\n  /**\n   * Returns the symbol of the token.\n   *\n   * @example\n   * const symbol = await kip7.symbol()\n   *\n   * @return {Promise<string>}\n   */\n\n\n  async symbol() {\n    const symbol = await this.methods.symbol().call();\n    return symbol;\n  }\n  /**\n   * Returns the decimals of the token.\n   *\n   * @example\n   * const decimals = await kip7.decimals()\n   *\n   * @return {Promise<number>}\n   */\n\n\n  async decimals() {\n    const decimals = await this.methods.decimals().call();\n    return Number(decimals);\n  }\n  /**\n   * Returns the total supply of the token.\n   *\n   * @example\n   * const totalSupply = await kip7.totalSupply()\n   *\n   * @return {Promise<BigNumber>}\n   */\n\n\n  async totalSupply() {\n    const totalSupply = await this.methods.totalSupply().call();\n    return new BigNumber(totalSupply);\n  }\n  /**\n   * Returns the balance of the given account address.\n   *\n   * @example\n   * const balance = await kip7.balanceOf('0x{address in hex}')\n   *\n   * @param {string} account The address of the account to be checked for its balance.\n   * @return {Promise<BigNumber>}\n   */\n\n\n  async balanceOf(account) {\n    const balance = await this.methods.balanceOf(account).call();\n    return new BigNumber(balance);\n  }\n  /**\n   * Returns the amount of token that `spender` is allowed to withdraw from `owner`.\n   *\n   * @example\n   * const allowance = await kip7.allowance('0x{address in hex}', '0x{spender address}')\n   *\n   * @param {string} owner The address of the token owner's account.\n   * @param {string} spender The address of the account that spends tokens in place of the owner.\n   * @return {Promise<BigNumber>}\n   */\n\n\n  async allowance(owner, spender) {\n    const allowance = await this.methods.allowance(owner, spender).call();\n    return new BigNumber(allowance);\n  }\n  /**\n   * Returns `true` if the given account is a minter who can issue new KIP7 tokens.\n   *\n   * @example\n   * const isMinter = await kip7.isMinter('0x{address in hex}')\n   *\n   * @param {string} account The address of the account to be checked for having the minting right.\n   * @return {Promise<boolean>}\n   */\n\n\n  async isMinter(account) {\n    const isMinter = await this.methods.isMinter(account).call();\n    return isMinter;\n  }\n  /**\n   * Returns `true` if the given account is a pauser who can suspend transferring tokens.\n   *\n   * @example\n   * const isPauser = await kip7.isPauser('0x{address in hex}')\n   *\n   * @param {string} account The address of the account to be checked for having the right to suspend transferring tokens.\n   * @return {Promise<boolean>}\n   */\n\n\n  async isPauser(account) {\n    const isPauser = await this.methods.isPauser(account).call();\n    return isPauser;\n  }\n  /**\n   * Returns `true` if the contract is paused, and `false` otherwise.\n   *\n   * @example\n   * const isPaused = await kip7.paused()\n   *\n   * @method paused\n   * @return {Promise<boolean>}\n   */\n\n\n  async paused() {\n    const isPaused = await this.methods.paused().call();\n    return isPaused;\n  }\n  /**\n   * Sets the amount of the tokens of the token owner to be spent by the spender.\n   *\n   * @example\n   * const receipt = await kip7.approve('0x{spender address}', 10, { from: '0x{address in hex}' })\n   *\n   * @param {string} spender The address of the account who spends tokens in place of the owner.\n   * @param {BigNumber|string|number} amount The amount of token the spender is allowed to use.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async approve(spender, amount) {\n    let sendParam = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const executableObj = this.methods.approve(spender, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Transfers the given amount of the token from the token owner's balance to the recipient.\n   *\n   * The token owner should execute this token transfer with its own hands.\n   * Thus, the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip7.options.from`.\n   * Without `sendParam.from` nor `kip7.options.from` being provided, an error would occur.\n   *\n   * @example\n   * const receipt = await kip7.transfer('0x{address in hex}', 10, { from: '0x{address in hex}' })\n   *\n   * @param {string} recipient The address of the account to receive the token.\n   * @param {BigNumber|string|number} amount The amount of tokens you want to transfer.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async transfer(recipient, amount) {\n    let sendParam = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const executableObj = this.methods.transfer(recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Transfers the given amount of the token from the token owner's balance to the recipient.\n   *\n   * The address who was approved to send the token owner's tokens is expected to execute this token transferring transaction.\n   * Thus, the approved one should be the sender of this transaction whose address must be given at `sendParam.from` or `kip7.options.from`.\n   * Without `sendParam.from` nor `kip7.options.from` being provided, an error would occur.\n   *\n   * @example\n   * const receipt = await kip7.transferFrom('0x{address in hex}', '0x{address in hex}', 10000, { from: '0x{address in hex}' })\n   *\n   * @param {string} owner The address of the account that owns the token to be sent with allowance mechanism.\n   * @param {string} recipient The address of the account to receive the token.\n   * @param {BigNumber|string|number} amount The amount of tokens you want to transfer.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async transferFrom(owner, recipient, amount) {\n    let sendParam = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const executableObj = this.methods.transferFrom(owner, recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Safely transfers the given amount of the token from the token owner's balance to the recipient.\n   *\n   * The token owner should execute this token transfer with its own hands.\n   * Thus, the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip7.options.from`.\n   * Without `sendParam.from` nor `kip7.options.from` being provided, an error would occur.\n   *\n   * @example\n   * const receipt = await kip7.safeTransfer('0x{address in hex}', 10, { from: '0x{address in hex}' })\n   *\n   * @param {string} recipient The address of the account to receive the token.\n   * @param {BigNumber|string|number} amount The amount of tokens you want to transfer.\n   * @param {Buffer|string|number} [data] The optional data to send along with the call.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async safeTransfer(recipient, amount, data) {\n    let sendParam = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`);\n        sendParam = data;\n        data = undefined;\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    const executableObj = data ? this.methods.safeTransfer(recipient, formatParamForUint256(amount), data) : this.methods.safeTransfer(recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Safely transfers the given amount of the token from the token owner's balance to the recipient.\n   *\n   * The address who was approved to send the token owner's tokens is expected to execute this token transferring transaction.\n   * Thus, the approved one should be the sender of this transaction whose address must be given at `sendParam.from` or `kip7.options.from`.\n   * Without `sendParam.from` nor `kip7.options.from` being provided, an error would occur.\n   *\n   * @example\n   * const receipt = await kip7.safeTransferFrom('0x{address in hex}', '0x{address in hex}', 10000, { from: '0x{address in hex}' })\n   *\n   * @param {string} owner The address of the account that owns the token to be sent with allowance mechanism.\n   * @param {string} recipient The address of the account to receive the token.\n   * @param {BigNumber|string|number} amount The amount of tokens you want to transfer.\n   * @param {Buffer|string|number} [data] The optional data to send along with the call.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async safeTransferFrom(owner, recipient, amount, data) {\n    let sendParam = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`);\n        sendParam = data;\n        data = undefined;\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    const executableObj = data ? this.methods.safeTransferFrom(owner, recipient, formatParamForUint256(amount), data) : this.methods.safeTransferFrom(owner, recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Creates the `amount` of token and issues it to the `account`, increasing the total supply of token.\n   * The account sending transaction to execute the mint must be a Minter with a MinterRole.\n   *\n   * @example\n   * const receipt = await kip7.mint('0x{address in hex}', 10000, { from: '0x{minter address}' })\n   *\n   * @param {string} account The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|string|number} amount The amount of tokens to mint.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async mint(account, amount) {\n    let sendParam = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const executableObj = this.methods.mint(account, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Adds an account as a minter, who are permitted to mint tokens.\n   * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n   *\n   * @example\n   * const receipt = await kip7.addMinter('0x{address in hex}', { from: '0x{minter address}' })\n   *\n   * @param {string} account The address of account to add as minter.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async addMinter(account) {\n    let sendParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const executableObj = this.methods.addMinter(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Renounces the right to mint tokens. Only a minter address can renounce the minting right.\n   * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n   *\n   * @example\n   * const receipt = await kip7.renounceMinter({ from: '0x{minter address}' })\n   *\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async renounceMinter() {\n    let sendParam = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const executableObj = this.methods.renounceMinter();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Destroys the `amount` of tokens in the sender's balance.\n   * Without `sendParam.from` nor `kip7.options.from` being provided, an error would occur.\n   *\n   * @example\n   * const receipt = await kip7.burn(1000, { from: '0x{address in hex}' })\n   *\n   * @param {BigNumber|string|number} amount The amount of tokens to destroy.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async burn(amount) {\n    let sendParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const executableObj = this.methods.burn(formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Destroys the given number of tokens from `account`.\n   * The allowance of the sender specified in `sendParam.from` or `kip7.options.from` is reduced alongside the balance of account.\n   *\n   * @example\n   * const receipt = await kip7.burnFrom('0x{address in hex}', 1000, { from: '0x{address in hex}' })\n   *\n   * @param {string} account The address of the account that owns the token to be burned with allowance mechanism.\n   * @param {BigNumber|string|number} amount The amount of tokens to destroy.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async burnFrom(account, amount) {\n    let sendParam = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const executableObj = this.methods.burnFrom(account, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Adds an account as a pauser that has the right to suspend the contract.\n   * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n   *\n   * @example\n   * const receipt = await kip7.addPauser('0x{address in hex}', { from: '0x{address in hex}' })\n   *\n   * @param {string} account The address of account to add as pauser.\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async addPauser(account) {\n    let sendParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const executableObj = this.methods.addPauser(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Suspends functions related to sending tokens.\n   * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n   *\n   * @example\n   * const receipt = await kip7.pause({ from: '0x{address in hex}' })\n   *\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async pause() {\n    let sendParam = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const executableObj = this.methods.pause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Resumes the paused contract.\n   * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n   *\n   * @example\n   * const receipt = await kip7.unpause({ from: '0x{address in hex}' })\n   *\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async unpause() {\n    let sendParam = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const executableObj = this.methods.unpause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * Renounces the right to pause the contract. Only a pauser address can renounce the pausing right.\n   * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n   *\n   * @example\n   * const receipt = await kip7.renouncePauser({ from: '0x{address in hex}' })\n   *\n   * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n   * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async renouncePauser() {\n    let sendParam = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const executableObj = this.methods.renouncePauser();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n\n}\n/**\n * The byte code of the KIP-7 token contract.\n *\n * @example\n * caver.kct.kip7.byteCode\n *\n * @static\n * @type {string}\n */\n\n\nKIP7.byteCode = kip7ByteCode;\n/**\n * The abi of the KIP-7 token contract.\n *\n * @example\n * caver.kct.kip7.abi\n *\n * @static\n * @type {Array.<object>}\n */\n\nKIP7.abi = kip7JsonInterface;\nmodule.exports = KIP7;","map":{"version":3,"names":["_","require","BigNumber","Contract","validateDeployParameterForKIP7","determineSendParams","kip7JsonInterface","kip7ByteCode","formatParamForUint256","interfaceIds","isAddress","toBuffer","isHexStrict","toHex","KIP13","KIP7","deploy","tokenInfo","sendOptions","name","symbol","decimals","initialSupply","kip7","isString","from","gas","value","undefined","data","arguments","send","detectInterface","contractAddress","constructor","tokenAddress","abi","Error","clone","options","address","cloned","jsonInterface","setWallet","_wallet","detected","IKIP7","IKIP7Metadata","IKIP7Mintable","IKIP7Burnable","IKIP7Pausable","notSupportedMsg","_address","isSupported","isImplementedKIP13Interface","supportsInterface","Promise","all","Object","keys","map","interfaceName","e","interfaceId","supported","methods","call","Number","totalSupply","balanceOf","account","balance","allowance","owner","spender","isMinter","isPauser","paused","isPaused","approve","amount","sendParam","executableObj","transfer","recipient","transferFrom","safeTransfer","isObject","length","isBuffer","safeTransferFrom","mint","addMinter","renounceMinter","burn","burnFrom","addPauser","pause","unpause","renouncePauser","byteCode","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-kct/src/kip7.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst BigNumber = require('bignumber.js')\n\nconst Contract = require('../../caver-contract')\nconst {\n    validateDeployParameterForKIP7,\n    determineSendParams,\n    kip7JsonInterface,\n    kip7ByteCode,\n    formatParamForUint256,\n    interfaceIds,\n} = require('./kctHelper')\nconst { isAddress, toBuffer, isHexStrict, toHex } = require('../../caver-utils')\nconst KIP13 = require('./kip13')\n\n/**\n * The KIP7 class that helps you easily handle a smart contract that implements KIP-7 as a JavaScript object on the Klaytn blockchain platform (Klaytn).\n * @hideconstructor\n * @class\n */\nclass KIP7 extends Contract {\n    /**\n     * Deploys a KIP-7 token contract to Klaytn network.\n     *\n     * By default, it returns a KIP7 instance when the deployment is finished.\n     * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\n     *\n     * @example\n     * const tokenInfo = { name: 'TokenName', symbol: 'TKN', decimals: 18, initialSupply: new BigNumber(1000000000000000000) }\n     *\n     * // Below example will use `caver.wallet`.\n     * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}')\n     *\n     * // Use sendOptions instead of deployer address.\n     * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\n     * const deployed = await caver.kct.kip7.deploy(tokenInfo, sendOptions)\n     *\n     * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\n     * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}', wallet)\n     *\n     * @ignore\n     * @param {KIP7.KIP7DeployParams} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n     * @param {Contract.SendOptions|string} sendOptions The address of the account to deploy the KIP-7 token contract or an object holding parameters that are required for sending a transaction.\n     * @return {Promise<*>}\n     */\n    static deploy(tokenInfo, sendOptions) {\n        validateDeployParameterForKIP7(tokenInfo)\n\n        const { name, symbol, decimals, initialSupply } = tokenInfo\n        const kip7 = new KIP7()\n\n        // If sendOptions is string type, sendOptions means deployer's address\n        if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 4000000, value: 0 }\n        sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 4000000\n\n        return kip7\n            .deploy({\n                data: kip7ByteCode,\n                arguments: [name, symbol, decimals, initialSupply],\n            })\n            .send(sendOptions)\n    }\n\n    /**\n     * An object that defines the parameters required to deploy the KIP-7 contract.\n     *\n     * @typedef {object} KIP7.KIP7DetectedObject\n     * @property {boolean} IKIP7 - Whether to implement `IKIP7` interface.\n     * @property {boolean} IKIP7Metadata - Whether to implement `IKIP7Metadata` interface.\n     * @property {boolean} IKIP7Mintable - Whether to implement `IKIP7Mintable` interface.\n     * @property {boolean} IKIP7Burnable - Whether to implement `IKIP7Burnable` interface.\n     * @property {boolean} IKIP7Pausable - Whether to implement `IKIP7Pausable` interface.\n     */\n    /**\n     * Returns the information of the interface implemented by the token contract.\n     *\n     * @example\n     * const detected = await caver.kct.kip7.detectInterface('0x{address in hex}')\n     *\n     * @param {string} contractAddress The address of the KIP-7 token contract to detect.\n     * @return {Promise<KIP7.KIP7DetectedObject>}\n     */\n    static detectInterface(contractAddress) {\n        const kip7 = new KIP7(contractAddress)\n        return kip7.detectInterface()\n    }\n\n    /**\n     * KIP7 class represents the KIP-7 token contract.\n     *\n     * @constructor\n     * @param {string} tokenAddress - The KIP-7 token contract address.\n     * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n     */\n    constructor(tokenAddress, abi = kip7JsonInterface) {\n        if (tokenAddress) {\n            if (_.isString(tokenAddress)) {\n                if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`)\n            } else {\n                abi = tokenAddress\n                tokenAddress = undefined\n            }\n        }\n\n        super(abi, tokenAddress)\n    }\n\n    /**\n     * Clones the current KIP7 instance.\n     *\n     * @example\n     * const cloned = kip7.clone()\n     * const cloned = kip7.clone('0x{new kip7 address}')\n     *\n     * @param {string} [tokenAddress] The address of the token contract.\n     * @return {KIP7}\n     */\n    clone(tokenAddress = this.options.address) {\n        const cloned = new this.constructor(tokenAddress, this.options.jsonInterface)\n        cloned.setWallet(this._wallet)\n        return cloned\n    }\n\n    /**\n     * Returns the information of the interface implemented by the token contract.\n     *\n     * @example\n     * const detected = await kip7.detectInterface()\n     *\n     * @return {Promise<KIP7.KIP7DetectedObject>}\n     */\n    async detectInterface() {\n        const detected = {\n            IKIP7: false,\n            IKIP7Metadata: false,\n            IKIP7Mintable: false,\n            IKIP7Burnable: false,\n            IKIP7Pausable: false,\n        }\n\n        const notSupportedMsg = `This contract does not support KIP-13.`\n        const contractAddress = this._address\n\n        try {\n            const isSupported = await KIP13.isImplementedKIP13Interface(contractAddress)\n            if (isSupported !== true) throw new Error(notSupportedMsg)\n\n            // Since there is an extension that has the same interface id even though it is a different KCT,\n            // it must be checked first whether the contract is a KIP-7 contract.\n            detected.IKIP7 = await this.supportsInterface(interfaceIds.kip7.IKIP7)\n            if (detected.IKIP7 === false) return detected\n\n            await Promise.all(\n                Object.keys(interfaceIds.kip7).map(async interfaceName => {\n                    if (interfaceIds.kip7[interfaceName] !== interfaceIds.kip7.IKIP7)\n                        detected[interfaceName] = await this.supportsInterface(interfaceIds.kip7[interfaceName])\n                })\n            )\n            return detected\n        } catch (e) {\n            throw new Error(notSupportedMsg)\n        }\n    }\n\n    /**\n     * Returns `true` if this contract implements the interface defined by `interfaceId`.\n     *\n     * @example\n     * const supported = await kip7.supportsInterface('0x65787371')\n     *\n     * @param {string} interfaceId The interface id to be checked.\n     * @return {Promise<boolean>}\n     */\n    async supportsInterface(interfaceId) {\n        const supported = await this.methods.supportsInterface(interfaceId).call()\n        return supported\n    }\n\n    /**\n     * Returns the name of the token.\n     *\n     * @example\n     * const name = await kip7.name()\n     *\n     * @return {Promise<string>}\n     */\n    async name() {\n        const name = await this.methods.name().call()\n        return name\n    }\n\n    /**\n     * Returns the symbol of the token.\n     *\n     * @example\n     * const symbol = await kip7.symbol()\n     *\n     * @return {Promise<string>}\n     */\n    async symbol() {\n        const symbol = await this.methods.symbol().call()\n        return symbol\n    }\n\n    /**\n     * Returns the decimals of the token.\n     *\n     * @example\n     * const decimals = await kip7.decimals()\n     *\n     * @return {Promise<number>}\n     */\n    async decimals() {\n        const decimals = await this.methods.decimals().call()\n        return Number(decimals)\n    }\n\n    /**\n     * Returns the total supply of the token.\n     *\n     * @example\n     * const totalSupply = await kip7.totalSupply()\n     *\n     * @return {Promise<BigNumber>}\n     */\n    async totalSupply() {\n        const totalSupply = await this.methods.totalSupply().call()\n        return new BigNumber(totalSupply)\n    }\n\n    /**\n     * Returns the balance of the given account address.\n     *\n     * @example\n     * const balance = await kip7.balanceOf('0x{address in hex}')\n     *\n     * @param {string} account The address of the account to be checked for its balance.\n     * @return {Promise<BigNumber>}\n     */\n    async balanceOf(account) {\n        const balance = await this.methods.balanceOf(account).call()\n        return new BigNumber(balance)\n    }\n\n    /**\n     * Returns the amount of token that `spender` is allowed to withdraw from `owner`.\n     *\n     * @example\n     * const allowance = await kip7.allowance('0x{address in hex}', '0x{spender address}')\n     *\n     * @param {string} owner The address of the token owner's account.\n     * @param {string} spender The address of the account that spends tokens in place of the owner.\n     * @return {Promise<BigNumber>}\n     */\n    async allowance(owner, spender) {\n        const allowance = await this.methods.allowance(owner, spender).call()\n        return new BigNumber(allowance)\n    }\n\n    /**\n     * Returns `true` if the given account is a minter who can issue new KIP7 tokens.\n     *\n     * @example\n     * const isMinter = await kip7.isMinter('0x{address in hex}')\n     *\n     * @param {string} account The address of the account to be checked for having the minting right.\n     * @return {Promise<boolean>}\n     */\n    async isMinter(account) {\n        const isMinter = await this.methods.isMinter(account).call()\n        return isMinter\n    }\n\n    /**\n     * Returns `true` if the given account is a pauser who can suspend transferring tokens.\n     *\n     * @example\n     * const isPauser = await kip7.isPauser('0x{address in hex}')\n     *\n     * @param {string} account The address of the account to be checked for having the right to suspend transferring tokens.\n     * @return {Promise<boolean>}\n     */\n    async isPauser(account) {\n        const isPauser = await this.methods.isPauser(account).call()\n        return isPauser\n    }\n\n    /**\n     * Returns `true` if the contract is paused, and `false` otherwise.\n     *\n     * @example\n     * const isPaused = await kip7.paused()\n     *\n     * @method paused\n     * @return {Promise<boolean>}\n     */\n    async paused() {\n        const isPaused = await this.methods.paused().call()\n        return isPaused\n    }\n\n    /**\n     * Sets the amount of the tokens of the token owner to be spent by the spender.\n     *\n     * @example\n     * const receipt = await kip7.approve('0x{spender address}', 10, { from: '0x{address in hex}' })\n     *\n     * @param {string} spender The address of the account who spends tokens in place of the owner.\n     * @param {BigNumber|string|number} amount The amount of token the spender is allowed to use.\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async approve(spender, amount, sendParam = {}) {\n        const executableObj = this.methods.approve(spender, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Transfers the given amount of the token from the token owner's balance to the recipient.\n     *\n     * The token owner should execute this token transfer with its own hands.\n     * Thus, the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip7.options.from`.\n     * Without `sendParam.from` nor `kip7.options.from` being provided, an error would occur.\n     *\n     * @example\n     * const receipt = await kip7.transfer('0x{address in hex}', 10, { from: '0x{address in hex}' })\n     *\n     * @param {string} recipient The address of the account to receive the token.\n     * @param {BigNumber|string|number} amount The amount of tokens you want to transfer.\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async transfer(recipient, amount, sendParam = {}) {\n        const executableObj = this.methods.transfer(recipient, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Transfers the given amount of the token from the token owner's balance to the recipient.\n     *\n     * The address who was approved to send the token owner's tokens is expected to execute this token transferring transaction.\n     * Thus, the approved one should be the sender of this transaction whose address must be given at `sendParam.from` or `kip7.options.from`.\n     * Without `sendParam.from` nor `kip7.options.from` being provided, an error would occur.\n     *\n     * @example\n     * const receipt = await kip7.transferFrom('0x{address in hex}', '0x{address in hex}', 10000, { from: '0x{address in hex}' })\n     *\n     * @param {string} owner The address of the account that owns the token to be sent with allowance mechanism.\n     * @param {string} recipient The address of the account to receive the token.\n     * @param {BigNumber|string|number} amount The amount of tokens you want to transfer.\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async transferFrom(owner, recipient, amount, sendParam = {}) {\n        const executableObj = this.methods.transferFrom(owner, recipient, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Safely transfers the given amount of the token from the token owner's balance to the recipient.\n     *\n     * The token owner should execute this token transfer with its own hands.\n     * Thus, the token owner should be the sender of this transaction whose address must be given at `sendParam.from` or `kip7.options.from`.\n     * Without `sendParam.from` nor `kip7.options.from` being provided, an error would occur.\n     *\n     * @example\n     * const receipt = await kip7.safeTransfer('0x{address in hex}', 10, { from: '0x{address in hex}' })\n     *\n     * @param {string} recipient The address of the account to receive the token.\n     * @param {BigNumber|string|number} amount The amount of tokens you want to transfer.\n     * @param {Buffer|string|number} [data] The optional data to send along with the call.\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async safeTransfer(recipient, amount, data, sendParam = {}) {\n        if (data && _.isObject(data)) {\n            if (data.gas !== undefined || data.from !== undefined) {\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\n                sendParam = data\n                data = undefined\n            }\n        }\n\n        if (data && !_.isBuffer(data)) {\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\n            data = toBuffer(data)\n        }\n\n        const executableObj = data\n            ? this.methods.safeTransfer(recipient, formatParamForUint256(amount), data)\n            : this.methods.safeTransfer(recipient, formatParamForUint256(amount))\n\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Safely transfers the given amount of the token from the token owner's balance to the recipient.\n     *\n     * The address who was approved to send the token owner's tokens is expected to execute this token transferring transaction.\n     * Thus, the approved one should be the sender of this transaction whose address must be given at `sendParam.from` or `kip7.options.from`.\n     * Without `sendParam.from` nor `kip7.options.from` being provided, an error would occur.\n     *\n     * @example\n     * const receipt = await kip7.safeTransferFrom('0x{address in hex}', '0x{address in hex}', 10000, { from: '0x{address in hex}' })\n     *\n     * @param {string} owner The address of the account that owns the token to be sent with allowance mechanism.\n     * @param {string} recipient The address of the account to receive the token.\n     * @param {BigNumber|string|number} amount The amount of tokens you want to transfer.\n     * @param {Buffer|string|number} [data] The optional data to send along with the call.\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async safeTransferFrom(owner, recipient, amount, data, sendParam = {}) {\n        if (data && _.isObject(data)) {\n            if (data.gas !== undefined || data.from !== undefined) {\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\n                sendParam = data\n                data = undefined\n            }\n        }\n\n        if (data && !_.isBuffer(data)) {\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\n            data = toBuffer(data)\n        }\n\n        const executableObj = data\n            ? this.methods.safeTransferFrom(owner, recipient, formatParamForUint256(amount), data)\n            : this.methods.safeTransferFrom(owner, recipient, formatParamForUint256(amount))\n\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Creates the `amount` of token and issues it to the `account`, increasing the total supply of token.\n     * The account sending transaction to execute the mint must be a Minter with a MinterRole.\n     *\n     * @example\n     * const receipt = await kip7.mint('0x{address in hex}', 10000, { from: '0x{minter address}' })\n     *\n     * @param {string} account The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|string|number} amount The amount of tokens to mint.\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async mint(account, amount, sendParam = {}) {\n        const executableObj = this.methods.mint(account, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Adds an account as a minter, who are permitted to mint tokens.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @example\n     * const receipt = await kip7.addMinter('0x{address in hex}', { from: '0x{minter address}' })\n     *\n     * @param {string} account The address of account to add as minter.\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async addMinter(account, sendParam = {}) {\n        const executableObj = this.methods.addMinter(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Renounces the right to mint tokens. Only a minter address can renounce the minting right.\n     * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n     *\n     * @example\n     * const receipt = await kip7.renounceMinter({ from: '0x{minter address}' })\n     *\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async renounceMinter(sendParam = {}) {\n        const executableObj = this.methods.renounceMinter()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Destroys the `amount` of tokens in the sender's balance.\n     * Without `sendParam.from` nor `kip7.options.from` being provided, an error would occur.\n     *\n     * @example\n     * const receipt = await kip7.burn(1000, { from: '0x{address in hex}' })\n     *\n     * @param {BigNumber|string|number} amount The amount of tokens to destroy.\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async burn(amount, sendParam = {}) {\n        const executableObj = this.methods.burn(formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Destroys the given number of tokens from `account`.\n     * The allowance of the sender specified in `sendParam.from` or `kip7.options.from` is reduced alongside the balance of account.\n     *\n     * @example\n     * const receipt = await kip7.burnFrom('0x{address in hex}', 1000, { from: '0x{address in hex}' })\n     *\n     * @param {string} account The address of the account that owns the token to be burned with allowance mechanism.\n     * @param {BigNumber|string|number} amount The amount of tokens to destroy.\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async burnFrom(account, amount, sendParam = {}) {\n        const executableObj = this.methods.burnFrom(account, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Adds an account as a pauser that has the right to suspend the contract.\n     * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n     *\n     * @example\n     * const receipt = await kip7.addPauser('0x{address in hex}', { from: '0x{address in hex}' })\n     *\n     * @param {string} account The address of account to add as pauser.\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async addPauser(account, sendParam = {}) {\n        const executableObj = this.methods.addPauser(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Suspends functions related to sending tokens.\n     * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n     *\n     * @example\n     * const receipt = await kip7.pause({ from: '0x{address in hex}' })\n     *\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async pause(sendParam = {}) {\n        const executableObj = this.methods.pause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Resumes the paused contract.\n     * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n     *\n     * @example\n     * const receipt = await kip7.unpause({ from: '0x{address in hex}' })\n     *\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async unpause(sendParam = {}) {\n        const executableObj = this.methods.unpause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * Renounces the right to pause the contract. Only a pauser address can renounce the pausing right.\n     * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n     *\n     * @example\n     * const receipt = await kip7.renouncePauser({ from: '0x{address in hex}' })\n     *\n     * @param {Contract.SendOptions} [sendParam] An object holding parameters that are required for sending a transaction.\n     * @return {Promise<object>} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async renouncePauser(sendParam = {}) {\n        const executableObj = this.methods.renouncePauser()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n}\n\n/**\n * The byte code of the KIP-7 token contract.\n *\n * @example\n * caver.kct.kip7.byteCode\n *\n * @static\n * @type {string}\n */\nKIP7.byteCode = kip7ByteCode\n\n/**\n * The abi of the KIP-7 token contract.\n *\n * @example\n * caver.kct.kip7.abi\n *\n * @static\n * @type {Array.<object>}\n */\nKIP7.abi = kip7JsonInterface\n\nmodule.exports = KIP7\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}