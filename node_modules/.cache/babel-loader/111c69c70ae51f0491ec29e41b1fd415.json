{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isPostalCodeValidator from 'validator/lib/isPostalCode';\nexport var IS_POSTAL_CODE = 'isPostalCode';\n/**\n * Check if the string is a postal code,\n * (locale is one of [ 'AD', 'AT', 'AU', 'BE', 'BG', 'BR', 'CA', 'CH', 'CZ', 'DE', 'DK', 'DZ', 'EE', 'ES', 'FI', 'FR', 'GB', 'GR', 'HR', 'HU', 'ID', 'IE' 'IL', 'IN', 'IR', 'IS', 'IT', 'JP', 'KE', 'LI', 'LT', 'LU', 'LV', 'MT', 'MX', 'NL', 'NO', 'NZ', 'PL', 'PR', 'PT', 'RO', 'RU', 'SA', 'SE', 'SI', 'TN', 'TW', 'UA', 'US', 'ZA', 'ZM' ] OR 'any'. If 'any' is used, function will check if any of the locals match. Locale list is validator.isPostalCodeLocales.).\n * If given value is not a string, then it returns false.\n */\n\nexport function isPostalCode(value, locale) {\n  return typeof value === 'string' && isPostalCodeValidator(value, locale);\n}\n/**\n * Check if the string is a postal code,\n * (locale is one of [ 'AD', 'AT', 'AU', 'BE', 'BG', 'BR', 'CA', 'CH', 'CZ', 'DE', 'DK', 'DZ', 'EE', 'ES', 'FI', 'FR', 'GB', 'GR', 'HR', 'HU', 'ID', 'IE' 'IL', 'IN', 'IR', 'IS', 'IT', 'JP', 'KE', 'LI', 'LT', 'LU', 'LV', 'MT', 'MX', 'NL', 'NO', 'NZ', 'PL', 'PR', 'PT', 'RO', 'RU', 'SA', 'SE', 'SI', 'TN', 'TW', 'UA', 'US', 'ZA', 'ZM' ] OR 'any'. If 'any' is used, function will check if any of the locals match. Locale list is validator.isPostalCodeLocales.).\n * If given value is not a string, then it returns false.\n */\n\nexport function IsPostalCode(locale, validationOptions) {\n  return ValidateBy({\n    name: IS_POSTAL_CODE,\n    constraints: [locale],\n    validator: {\n      validate: function (value, args) {\n        return isPostalCode(value, args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a postal code';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAT,EAAuBC,UAAvB,QAAyC,sBAAzC;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AAGA,OAAO,IAAMC,cAAc,GAAG,cAAvB;AAEP;;;;;;AAKA,OAAM,SAAUC,YAAV,CAAuBC,KAAvB,EAAuCC,MAAvC,EAAmF;EACvF,OAAO,OAAOD,KAAP,KAAiB,QAAjB,IAA6BH,qBAAqB,CAACG,KAAD,EAAQC,MAAR,CAAzD;AACD;AAED;;;;;;AAKA,OAAM,SAAUC,YAAV,CACJD,MADI,EAEJE,iBAFI,EAEiC;EAErC,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEN,cADR;IAEEO,WAAW,EAAE,CAACJ,MAAD,CAFf;IAGEK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACP,KAAD,EAAQQ,IAAR,EAAY;QAAc,mBAAY,CAACR,KAAD,EAAQQ,IAAI,CAACH,WAAL,CAAiB,CAAjB,CAAR,CAAZ;MAAwC,CADnE;MAETI,cAAc,EAAEd,YAAY,CAAC,sBAAU;QAAI,iBAAU,GAAG,iCAAb;MAA8C,CAA7D,EAA+DQ,iBAA/D;IAFnB;EAHb,CADe,EASfA,iBATe,CAAjB;AAWD","names":["buildMessage","ValidateBy","isPostalCodeValidator","IS_POSTAL_CODE","isPostalCode","value","locale","IsPostalCode","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsPostalCode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}