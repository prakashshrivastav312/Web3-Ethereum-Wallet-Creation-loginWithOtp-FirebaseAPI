{"ast":null,"code":"'use strict';\n\nconst multiaddr = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await (await api.post('swarm/peers', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json();\n    return (res.Peers || []).map(peer => {\n      const info = {};\n\n      try {\n        info.addr = multiaddr(peer.Addr);\n        info.peer = peer.Peer;\n      } catch (error) {\n        info.error = error;\n        info.rawPeerInfo = peer;\n      }\n\n      if (peer.Muxer) {\n        info.muxer = peer.Muxer;\n      }\n\n      if (peer.Latency) {\n        info.latency = peer.Latency;\n      }\n\n      if (peer.Streams) {\n        info.streams = peer.Streams;\n      }\n\n      if (peer.Direction != null) {\n        info.direction = peer.Direction;\n      }\n\n      return info;\n    });\n  };\n});","map":{"version":3,"names":["multiaddr","require","configure","toUrlSearchParams","module","exports","api","options","res","post","timeout","signal","searchParams","headers","json","Peers","map","peer","info","addr","Addr","Peer","error","rawPeerInfo","Muxer","muxer","Latency","latency","Streams","streams","Direction","direction"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/swarm/peers.js"],"sourcesContent":["'use strict'\n\nconst multiaddr = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (options = {}) => {\n    const res = await (await api.post('swarm/peers', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Peers || []).map(peer => {\n      const info = {}\n      try {\n        info.addr = multiaddr(peer.Addr)\n        info.peer = peer.Peer\n      } catch (error) {\n        info.error = error\n        info.rawPeerInfo = peer\n      }\n      if (peer.Muxer) {\n        info.muxer = peer.Muxer\n      }\n      if (peer.Latency) {\n        info.latency = peer.Latency\n      }\n      if (peer.Streams) {\n        info.streams = peer.Streams\n      }\n      if (peer.Direction != null) {\n        info.direction = peer.Direction\n      }\n      return info\n    })\n  }\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC,OAAO,kBAAwB;IAAA,IAAjBC,OAAiB,uEAAP,EAAO;IAC7B,MAAMC,GAAG,GAAG,MAAM,CAAC,MAAMF,GAAG,CAACG,IAAJ,CAAS,aAAT,EAAwB;MAC/CC,OAAO,EAAEH,OAAO,CAACG,OAD8B;MAE/CC,MAAM,EAAEJ,OAAO,CAACI,MAF+B;MAG/CC,YAAY,EAAET,iBAAiB,CAACI,OAAD,CAHgB;MAI/CM,OAAO,EAAEN,OAAO,CAACM;IAJ8B,CAAxB,CAAP,EAKdC,IALc,EAAlB;IAOA,OAAO,CAACN,GAAG,CAACO,KAAJ,IAAa,EAAd,EAAkBC,GAAlB,CAAsBC,IAAI,IAAI;MACnC,MAAMC,IAAI,GAAG,EAAb;;MACA,IAAI;QACFA,IAAI,CAACC,IAAL,GAAYnB,SAAS,CAACiB,IAAI,CAACG,IAAN,CAArB;QACAF,IAAI,CAACD,IAAL,GAAYA,IAAI,CAACI,IAAjB;MACD,CAHD,CAGE,OAAOC,KAAP,EAAc;QACdJ,IAAI,CAACI,KAAL,GAAaA,KAAb;QACAJ,IAAI,CAACK,WAAL,GAAmBN,IAAnB;MACD;;MACD,IAAIA,IAAI,CAACO,KAAT,EAAgB;QACdN,IAAI,CAACO,KAAL,GAAaR,IAAI,CAACO,KAAlB;MACD;;MACD,IAAIP,IAAI,CAACS,OAAT,EAAkB;QAChBR,IAAI,CAACS,OAAL,GAAeV,IAAI,CAACS,OAApB;MACD;;MACD,IAAIT,IAAI,CAACW,OAAT,EAAkB;QAChBV,IAAI,CAACW,OAAL,GAAeZ,IAAI,CAACW,OAApB;MACD;;MACD,IAAIX,IAAI,CAACa,SAAL,IAAkB,IAAtB,EAA4B;QAC1BZ,IAAI,CAACa,SAAL,GAAiBd,IAAI,CAACa,SAAtB;MACD;;MACD,OAAOZ,IAAP;IACD,CAtBM,CAAP;EAuBD,CA/BD;AAgCD,CAjCyB,CAA1B"},"metadata":{},"sourceType":"script"}