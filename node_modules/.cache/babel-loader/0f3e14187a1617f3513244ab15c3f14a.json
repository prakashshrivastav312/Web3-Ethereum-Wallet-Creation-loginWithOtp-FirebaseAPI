{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserWallet = void 0;\n\nconst userKeys_1 = require(\"./userKeys\");\n\nconst crypto_1 = require(\"../crypto\");\n\nconst derivationParams_1 = require(\"../crypto/derivationParams\");\n\nclass UserWallet {\n  /**\n   * Copied from: https://github.com/ElrondNetwork/elrond-core-js/blob/v1.28.0/src/account.js#L76\n   * Notes: adjustements (code refactoring, no change in logic), in terms of:\n   *  - typing (since this is the TypeScript version)\n   *  - error handling (in line with erdjs's error system)\n   *  - references to crypto functions\n   *  - references to object members\n   *\n   * Given a password, generates the contents for a file containing the account's secret key,\n   * passed through a password-based key derivation function (kdf).\n   */\n  constructor(secretKey, password) {\n    let randomness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new crypto_1.Randomness();\n    const text = Buffer.concat([secretKey.valueOf(), secretKey.generatePublicKey().valueOf()]);\n    this.encryptedData = crypto_1.Encryptor.encrypt(text, password, randomness);\n    this.publicKey = secretKey.generatePublicKey();\n  }\n  /**\n   * Copied from: https://github.com/ElrondNetwork/elrond-core-js/blob/v1.28.0/src/account.js#L42\n   * Notes: adjustements (code refactoring, no change in logic), in terms of:\n   *  - typing (since this is the TypeScript version)\n   *  - error handling (in line with erdjs's error system)\n   *  - references to crypto functions\n   *  - references to object members\n   *\n   * From an encrypted keyfile, given the password, loads the secret key and the public key.\n   */\n\n\n  static decryptSecretKey(keyFileObject, password) {\n    const encryptedData = UserWallet.edFromJSON(keyFileObject);\n    let text = crypto_1.Decryptor.decrypt(encryptedData, password);\n\n    while (text.length < 32) {\n      let zeroPadding = Buffer.from([0x00]);\n      text = Buffer.concat([zeroPadding, text]);\n    }\n\n    let seed = text.slice(0, 32);\n    return new userKeys_1.UserSecretKey(seed);\n  }\n\n  static edFromJSON(keyfileObject) {\n    return new crypto_1.EncryptedData({\n      version: crypto_1.Version,\n      id: keyfileObject.id,\n      cipher: keyfileObject.crypto.cipher,\n      ciphertext: keyfileObject.crypto.ciphertext,\n      iv: keyfileObject.crypto.cipherparams.iv,\n      kdf: keyfileObject.crypto.kdf,\n      kdfparams: new derivationParams_1.ScryptKeyDerivationParams(keyfileObject.crypto.kdfparams.n, keyfileObject.crypto.kdfparams.r, keyfileObject.crypto.kdfparams.p, keyfileObject.crypto.kdfparams.dklen),\n      salt: keyfileObject.crypto.kdfparams.salt,\n      mac: keyfileObject.crypto.mac\n    });\n  }\n  /**\n   * Converts the encrypted keyfile to plain JavaScript object.\n   */\n\n\n  toJSON() {\n    return {\n      version: crypto_1.Version,\n      id: this.encryptedData.id,\n      address: this.publicKey.hex(),\n      bech32: this.publicKey.toAddress().toString(),\n      crypto: {\n        ciphertext: this.encryptedData.ciphertext,\n        cipherparams: {\n          iv: this.encryptedData.iv\n        },\n        cipher: crypto_1.CipherAlgorithm,\n        kdf: crypto_1.KeyDerivationFunction,\n        kdfparams: {\n          dklen: this.encryptedData.kdfparams.dklen,\n          salt: this.encryptedData.salt,\n          n: this.encryptedData.kdfparams.n,\n          r: this.encryptedData.kdfparams.r,\n          p: this.encryptedData.kdfparams.p\n        },\n        mac: this.encryptedData.mac\n      }\n    };\n  }\n\n}\n\nexports.UserWallet = UserWallet;","map":{"version":3,"mappings":"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","names":["UserWallet","constructor","secretKey","password","randomness","crypto_1","text","Buffer","concat","valueOf","generatePublicKey","encryptedData","encrypt","publicKey","decryptSecretKey","keyFileObject","edFromJSON","decrypt","length","zeroPadding","from","seed","slice","userKeys_1","keyfileObject","version","id","cipher","crypto","ciphertext","iv","cipherparams","kdf","kdfparams","derivationParams_1","n","r","p","dklen","salt","mac","toJSON","address","hex","bech32","toAddress","toString","exports"],"sourceRoot":"","sources":["../../src/walletcore/userWallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}