{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst assert = __importStar(require(\"assert\"));\n\nconst common_1 = require(\"../../common\");\n\nconst amount_1 = __importDefault(require(\"./amount\"));\n\nconst utils_1 = require(\"./utils\");\n\nconst claimFlags = common_1.txFlags.PaymentChannelClaim;\n\nfunction parsePaymentChannelClaim(tx) {\n  assert.ok(tx.TransactionType === 'PaymentChannelClaim');\n  return common_1.removeUndefined({\n    memos: utils_1.parseMemos(tx),\n    channel: tx.Channel,\n    balance: tx.Balance && amount_1.default(tx.Balance).value,\n    amount: tx.Amount && amount_1.default(tx.Amount).value,\n    signature: tx.Signature,\n    publicKey: tx.PublicKey,\n    renew: Boolean(tx.Flags & claimFlags.Renew) || undefined,\n    close: Boolean(tx.Flags & claimFlags.Close) || undefined\n  });\n}\n\nexports.default = parsePaymentChannelClaim;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA,MAAMA,UAAU,GAAGC,iBAAQC,mBAA3B;;AAEA,SAASC,wBAAT,CAAkCC,EAAlC,EAAyC;EACvCC,MAAM,CAACC,EAAP,CAAUF,EAAE,CAACG,eAAH,KAAuB,qBAAjC;EAEA,OAAON,yBAAgB;IACrBO,KAAK,EAAEC,mBAAWL,EAAX,CADc;IAErBM,OAAO,EAAEN,EAAE,CAACO,OAFS;IAGrBC,OAAO,EAAER,EAAE,CAACS,OAAH,IAAcC,iBAAYV,EAAE,CAACS,OAAf,EAAwBE,KAH1B;IAIrBC,MAAM,EAAEZ,EAAE,CAACa,MAAH,IAAaH,iBAAYV,EAAE,CAACa,MAAf,EAAuBF,KAJvB;IAKrBG,SAAS,EAAEd,EAAE,CAACe,SALO;IAMrBC,SAAS,EAAEhB,EAAE,CAACiB,SANO;IAOrBC,KAAK,EAAEC,OAAO,CAACnB,EAAE,CAACoB,KAAH,GAAWxB,UAAU,CAACyB,KAAvB,CAAP,IAAwCC,SAP1B;IAQrBC,KAAK,EAAEJ,OAAO,CAACnB,EAAE,CAACoB,KAAH,GAAWxB,UAAU,CAAC4B,KAAvB,CAAP,IAAwCF;EAR1B,CAAhB,CAAP;AAUD;;AAEDG,kBAAe1B,wBAAf","names":["claimFlags","common_1","PaymentChannelClaim","parsePaymentChannelClaim","tx","assert","ok","TransactionType","memos","utils_1","channel","Channel","balance","Balance","amount_1","value","amount","Amount","signature","Signature","publicKey","PublicKey","renew","Boolean","Flags","Renew","undefined","close","Close","exports"],"sourceRoot":"","sources":["../../../../src/ledger/parse/payment-channel-claim.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}