{"ast":null,"code":"import { publicKeyToAddress } from './cry/address';\nimport { blake2b256 } from './cry/blake2b';\nimport { secp256k1 } from './cry/secp256k1';\nimport { RLP } from './rlp';\n/** Transaction class defines VeChainThor's multi-clause transaction */\n\nexport class Transaction {\n  /**\n   * construct a transaction object with given body\n   * @param body body of tx\n   */\n  constructor(body) {\n    this.body = Object.assign({}, body);\n  }\n  /** decode from Buffer to transaction\n   * @param raw encoded buffer\n   * @param unsigned to indicator if the encoded buffer contains signature\n   */\n\n\n  static decode(raw, unsigned) {\n    let body;\n    let signature;\n\n    if (unsigned) {\n      body = unsignedTxRLP.decode(raw);\n    } else {\n      const decoded = txRLP.decode(raw);\n      signature = decoded.signature;\n      delete decoded.signature;\n      body = decoded;\n    }\n\n    const reserved = body.reserved;\n\n    if (reserved.length > 0) {\n      if (reserved[reserved.length - 1].length === 0) {\n        throw new Error('invalid reserved fields: not trimmed');\n      }\n\n      const features = featuresKind.buffer(reserved[0], 'reserved.features').decode();\n      body.reserved = {\n        features\n      };\n\n      if (reserved.length > 1) {\n        body.reserved.unused = reserved.slice(1);\n      }\n    } else {\n      delete body.reserved;\n    }\n\n    const tx = new Transaction(body);\n\n    if (signature) {\n      tx.signature = signature;\n    }\n\n    return tx;\n  }\n  /**\n   * returns transaction ID\n   * null returned if something wrong (e.g. invalid signature)\n   */\n\n\n  get id() {\n    if (!this._signatureValid) {\n      return null;\n    }\n\n    try {\n      const signingHash = this.signingHash();\n      const pubKey = secp256k1.recover(signingHash, this.signature.slice(0, 65));\n      const origin = publicKeyToAddress(pubKey);\n      return '0x' + blake2b256(signingHash, origin).toString('hex');\n    } catch (_a) {\n      return null;\n    }\n  }\n  /**\n   * compute signing hashes.\n   * It returns tx hash for origin or delegator depends on param `delegateFor`.\n   * @param delegateFor address of intended tx origin. If set, the returned hash is for delegator to sign.\n   */\n\n\n  signingHash(delegateFor) {\n    const reserved = this._encodeReserved();\n\n    const buf = unsignedTxRLP.encode(Object.assign(Object.assign({}, this.body), {\n      reserved\n    }));\n    const hash = blake2b256(buf);\n\n    if (delegateFor) {\n      if (!/^0x[0-9a-f]{40}$/i.test(delegateFor)) {\n        throw new Error('delegateFor expected address');\n      }\n\n      return blake2b256(hash, Buffer.from(delegateFor.slice(2), 'hex'));\n    }\n\n    return hash;\n  }\n  /** returns tx origin. null returned if no signature or not incorrectly signed */\n\n\n  get origin() {\n    if (!this._signatureValid) {\n      return null;\n    }\n\n    try {\n      const signingHash = this.signingHash();\n      const pubKey = secp256k1.recover(signingHash, this.signature.slice(0, 65));\n      return '0x' + publicKeyToAddress(pubKey).toString('hex');\n    } catch (_a) {\n      return null;\n    }\n  }\n  /** returns tx delegator. null returned if no signature or not incorrectly signed */\n\n\n  get delegator() {\n    if (!this.delegated) {\n      return null;\n    }\n\n    if (!this._signatureValid) {\n      return null;\n    }\n\n    const origin = this.origin;\n\n    if (!origin) {\n      return null;\n    }\n\n    try {\n      const signingHash = this.signingHash(origin);\n      const pubKey = secp256k1.recover(signingHash, this.signature.slice(65));\n      return '0x' + publicKeyToAddress(pubKey).toString('hex');\n    } catch (_a) {\n      return null;\n    }\n  }\n  /** returns whether delegated. see https://github.com/vechain/VIPs/blob/master/vips/VIP-191.md */\n\n\n  get delegated() {\n    // tslint:disable-next-line:no-bitwise\n    return (((this.body.reserved || {}).features || 0) & Transaction.DELEGATED_MASK) === Transaction.DELEGATED_MASK;\n  }\n  /** returns intrinsic gas it takes */\n\n\n  get intrinsicGas() {\n    return Transaction.intrinsicGas(this.body.clauses);\n  }\n  /** encode into Buffer */\n\n\n  encode() {\n    const reserved = this._encodeReserved();\n\n    if (this.signature) {\n      return txRLP.encode(Object.assign(Object.assign({}, this.body), {\n        reserved,\n        signature: this.signature\n      }));\n    }\n\n    return unsignedTxRLP.encode(Object.assign(Object.assign({}, this.body), {\n      reserved\n    }));\n  }\n\n  _encodeReserved() {\n    const reserved = this.body.reserved || {};\n    const list = [featuresKind.data(reserved.features || 0, 'reserved.features').encode(), ...(reserved.unused || [])]; // trim\n\n    while (list.length > 0) {\n      if (list[list.length - 1].length === 0) {\n        list.pop();\n      } else {\n        break;\n      }\n    }\n\n    return list;\n  }\n\n  get _signatureValid() {\n    const expectedSigLen = this.delegated ? 65 * 2 : 65;\n    return this.signature ? this.signature.length === expectedSigLen : false;\n  }\n\n}\nTransaction.DELEGATED_MASK = 1;\n\n(function (Transaction) {\n  /**\n   * calculates intrinsic gas that a tx costs with the given clauses.\n   * @param clauses\n   */\n  function intrinsicGas(clauses) {\n    const txGas = 5000;\n    const clauseGas = 16000;\n    const clauseGasContractCreation = 48000;\n\n    if (clauses.length === 0) {\n      return txGas + clauseGas;\n    }\n\n    return clauses.reduce((sum, c) => {\n      if (c.to) {\n        sum += clauseGas;\n      } else {\n        sum += clauseGasContractCreation;\n      }\n\n      sum += dataGas(c.data);\n      return sum;\n    }, txGas);\n  }\n\n  Transaction.intrinsicGas = intrinsicGas;\n\n  function dataGas(data) {\n    const zgas = 4;\n    const nzgas = 68;\n    let sum = 0;\n\n    for (let i = 2; i < data.length; i += 2) {\n      if (data.substr(i, 2) === '00') {\n        sum += zgas;\n      } else {\n        sum += nzgas;\n      }\n    }\n\n    return sum;\n  }\n})(Transaction || (Transaction = {}));\n\nconst unsignedTxRLP = new RLP({\n  name: 'tx',\n  kind: [{\n    name: 'chainTag',\n    kind: new RLP.NumericKind(1)\n  }, {\n    name: 'blockRef',\n    kind: new RLP.CompactFixedBlobKind(8)\n  }, {\n    name: 'expiration',\n    kind: new RLP.NumericKind(4)\n  }, {\n    name: 'clauses',\n    kind: {\n      item: [{\n        name: 'to',\n        kind: new RLP.NullableFixedBlobKind(20)\n      }, {\n        name: 'value',\n        kind: new RLP.NumericKind(32)\n      }, {\n        name: 'data',\n        kind: new RLP.BlobKind()\n      }]\n    }\n  }, {\n    name: 'gasPriceCoef',\n    kind: new RLP.NumericKind(1)\n  }, {\n    name: 'gas',\n    kind: new RLP.NumericKind(8)\n  }, {\n    name: 'dependsOn',\n    kind: new RLP.NullableFixedBlobKind(32)\n  }, {\n    name: 'nonce',\n    kind: new RLP.NumericKind(8)\n  }, {\n    name: 'reserved',\n    kind: {\n      item: new RLP.BufferKind()\n    }\n  }]\n});\nconst txRLP = new RLP({\n  name: 'tx',\n  kind: [...unsignedTxRLP.profile.kind, {\n    name: 'signature',\n    kind: new RLP.BufferKind()\n  }]\n});\nconst featuresKind = new RLP.NumericKind(4);","map":{"version":3,"mappings":"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","names":["publicKeyToAddress","blake2b256","secp256k1","RLP","Transaction","constructor","body","Object","decode","raw","unsigned","signature","unsignedTxRLP","decoded","txRLP","reserved","length","Error","features","featuresKind","buffer","unused","slice","tx","id","_signatureValid","signingHash","pubKey","recover","origin","toString","delegateFor","_encodeReserved","buf","encode","hash","test","Buffer","from","delegator","delegated","DELEGATED_MASK","intrinsicGas","clauses","list","data","pop","expectedSigLen","txGas","clauseGas","clauseGasContractCreation","reduce","sum","c","to","dataGas","zgas","nzgas","i","substr","name","kind","NumericKind","CompactFixedBlobKind","item","NullableFixedBlobKind","BlobKind","BufferKind","profile"],"sourceRoot":"","sources":["../src/transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}