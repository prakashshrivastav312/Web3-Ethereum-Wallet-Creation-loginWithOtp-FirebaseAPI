{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst multicodec = require('multicodec');\n\nconst loadFormat = require('../lib/ipld-formats');\n\nmodule.exports = configure((api, opts) => {\n  const getBlock = require('../block/get')(opts);\n\n  const dagResolve = require('./resolve')(opts);\n\n  const load = loadFormat(opts.ipld);\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/get')>}\n   */\n\n  const get = async function (cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const resolved = await dagResolve(cid, options);\n    const block = await getBlock(resolved.cid, options);\n    const codecName = multicodec.getName(resolved.cid.code);\n    const format = await load(codecName);\n\n    if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n      resolved.remainderPath = '/';\n    }\n\n    return format.resolver.resolve(block.data, resolved.remainderPath);\n  };\n\n  return get;\n});","map":{"version":3,"names":["configure","require","multicodec","loadFormat","module","exports","api","opts","getBlock","dagResolve","load","ipld","get","cid","options","resolved","block","codecName","getName","code","format","RAW","remainderPath","resolver","resolve","data"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/dag/get.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst multicodec = require('multicodec')\nconst loadFormat = require('../lib/ipld-formats')\n\nmodule.exports = configure((api, opts) => {\n  const getBlock = require('../block/get')(opts)\n  const dagResolve = require('./resolve')(opts)\n  const load = loadFormat(opts.ipld)\n\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/get')>}\n   */\n  const get = async (cid, options = {}) => {\n    const resolved = await dagResolve(cid, options)\n    const block = await getBlock(resolved.cid, options)\n\n    const codecName = multicodec.getName(resolved.cid.code)\n    const format = await load(codecName)\n\n    if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n      resolved.remainderPath = '/'\n    }\n\n    return format.resolver.resolve(block.data, resolved.remainderPath)\n  }\n\n  return get\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,qBAAD,CAA1B;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,CAACM,GAAD,EAAMC,IAAN,KAAe;EACxC,MAAMC,QAAQ,GAAGP,OAAO,CAAC,cAAD,CAAP,CAAwBM,IAAxB,CAAjB;;EACA,MAAME,UAAU,GAAGR,OAAO,CAAC,WAAD,CAAP,CAAqBM,IAArB,CAAnB;;EACA,MAAMG,IAAI,GAAGP,UAAU,CAACI,IAAI,CAACI,IAAN,CAAvB;EAEA;AACF;AACA;;EACE,MAAMC,GAAG,GAAG,gBAAOC,GAAP,EAA6B;IAAA,IAAjBC,OAAiB,uEAAP,EAAO;IACvC,MAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACI,GAAD,EAAMC,OAAN,CAAjC;IACA,MAAME,KAAK,GAAG,MAAMR,QAAQ,CAACO,QAAQ,CAACF,GAAV,EAAeC,OAAf,CAA5B;IAEA,MAAMG,SAAS,GAAGf,UAAU,CAACgB,OAAX,CAAmBH,QAAQ,CAACF,GAAT,CAAaM,IAAhC,CAAlB;IACA,MAAMC,MAAM,GAAG,MAAMV,IAAI,CAACO,SAAD,CAAzB;;IAEA,IAAIF,QAAQ,CAACF,GAAT,CAAaM,IAAb,KAAsBjB,UAAU,CAACmB,GAAjC,IAAwC,CAACN,QAAQ,CAACO,aAAtD,EAAqE;MACnEP,QAAQ,CAACO,aAAT,GAAyB,GAAzB;IACD;;IAED,OAAOF,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwBR,KAAK,CAACS,IAA9B,EAAoCV,QAAQ,CAACO,aAA7C,CAAP;EACD,CAZD;;EAcA,OAAOV,GAAP;AACD,CAvByB,CAA1B"},"metadata":{},"sourceType":"script"}