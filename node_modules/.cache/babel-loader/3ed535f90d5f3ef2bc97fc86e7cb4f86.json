{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidSecret = exports.iso8601ToRippleTime = exports.rippleTimeToISO8601 = exports.removeUndefined = exports.convertKeysFromSnakeCaseToCamelCase = exports.toRippledAmount = exports.xrpToDrops = exports.dropsToXrp = void 0;\n\nconst _ = __importStar(require(\"lodash\"));\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst ripple_keypairs_1 = require(\"ripple-keypairs\");\n\nconst errors_1 = require(\"./errors\");\n\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\n\nfunction isValidSecret(secret) {\n  try {\n    ripple_keypairs_1.deriveKeypair(secret);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexports.isValidSecret = isValidSecret;\n\nfunction dropsToXrp(drops) {\n  if (typeof drops === 'string') {\n    if (!drops.match(/^-?[0-9]*\\.?[0-9]*$/)) {\n      throw new errors_1.ValidationError(`dropsToXrp: invalid value '${drops}',` + ` should be a number matching (^-?[0-9]*\\\\.?[0-9]*$).`);\n    } else if (drops === '.') {\n      throw new errors_1.ValidationError(`dropsToXrp: invalid value '${drops}',` + ` should be a BigNumber or string-encoded number.`);\n    }\n  }\n\n  drops = new bignumber_js_1.default(drops).toString(10);\n\n  if (drops.includes('.')) {\n    throw new errors_1.ValidationError(`dropsToXrp: value '${drops}' has` + ` too many decimal places.`);\n  }\n\n  if (!drops.match(/^-?[0-9]+$/)) {\n    throw new errors_1.ValidationError(`dropsToXrp: failed sanity check -` + ` value '${drops}',` + ` does not match (^-?[0-9]+$).`);\n  }\n\n  return new bignumber_js_1.default(drops).dividedBy(1000000.0).toString(10);\n}\n\nexports.dropsToXrp = dropsToXrp;\n\nfunction xrpToDrops(xrp) {\n  if (typeof xrp === 'string') {\n    if (!xrp.match(/^-?[0-9]*\\.?[0-9]*$/)) {\n      throw new errors_1.ValidationError(`xrpToDrops: invalid value '${xrp}',` + ` should be a number matching (^-?[0-9]*\\\\.?[0-9]*$).`);\n    } else if (xrp === '.') {\n      throw new errors_1.ValidationError(`xrpToDrops: invalid value '${xrp}',` + ` should be a BigNumber or string-encoded number.`);\n    }\n  }\n\n  xrp = new bignumber_js_1.default(xrp).toString(10);\n\n  if (!xrp.match(/^-?[0-9.]+$/)) {\n    throw new errors_1.ValidationError(`xrpToDrops: failed sanity check -` + ` value '${xrp}',` + ` does not match (^-?[0-9.]+$).`);\n  }\n\n  const components = xrp.split('.');\n\n  if (components.length > 2) {\n    throw new errors_1.ValidationError(`xrpToDrops: failed sanity check -` + ` value '${xrp}' has` + ` too many decimal points.`);\n  }\n\n  const fraction = components[1] || '0';\n\n  if (fraction.length > 6) {\n    throw new errors_1.ValidationError(`xrpToDrops: value '${xrp}' has` + ` too many decimal places.`);\n  }\n\n  return new bignumber_js_1.default(xrp).times(1000000.0).integerValue(bignumber_js_1.default.ROUND_FLOOR).toString(10);\n}\n\nexports.xrpToDrops = xrpToDrops;\n\nfunction toRippledAmount(amount) {\n  if (typeof amount === 'string') return amount;\n\n  if (amount.currency === 'XRP') {\n    return xrpToDrops(amount.value);\n  }\n\n  if (amount.currency === 'drops') {\n    return amount.value;\n  }\n\n  let issuer = amount.counterparty || amount.issuer;\n  let tag = false;\n\n  try {\n    ({\n      classicAddress: issuer,\n      tag\n    } = ripple_address_codec_1.xAddressToClassicAddress(issuer));\n  } catch (e) {}\n\n  if (tag !== false) {\n    throw new errors_1.ValidationError(\"Issuer X-address includes a tag\");\n  }\n\n  return {\n    currency: amount.currency,\n    issuer,\n    value: amount.value\n  };\n}\n\nexports.toRippledAmount = toRippledAmount;\n\nfunction convertKeysFromSnakeCaseToCamelCase(obj) {\n  if (typeof obj === 'object') {\n    const accumulator = Array.isArray(obj) ? [] : {};\n    let newKey;\n    return Object.entries(obj).reduce((result, _ref) => {\n      let [key, value] = _ref;\n      newKey = key;\n      const FINDSNAKE = /([a-zA-Z]_[a-zA-Z])/g;\n\n      if (FINDSNAKE.test(key)) {\n        newKey = key.replace(FINDSNAKE, r => r[0] + r[2].toUpperCase());\n      }\n\n      result[newKey] = convertKeysFromSnakeCaseToCamelCase(value);\n      return result;\n    }, accumulator);\n  }\n\n  return obj;\n}\n\nexports.convertKeysFromSnakeCaseToCamelCase = convertKeysFromSnakeCaseToCamelCase;\n\nfunction removeUndefined(obj) {\n  return _.omitBy(obj, value => value == null);\n}\n\nexports.removeUndefined = removeUndefined;\n\nfunction rippleToUnixTimestamp(rpepoch) {\n  return (rpepoch + 0x386d4380) * 1000;\n}\n\nfunction unixToRippleTimestamp(timestamp) {\n  return Math.round(timestamp / 1000) - 0x386d4380;\n}\n\nfunction rippleTimeToISO8601(rippleTime) {\n  return new Date(rippleToUnixTimestamp(rippleTime)).toISOString();\n}\n\nexports.rippleTimeToISO8601 = rippleTimeToISO8601;\n\nfunction iso8601ToRippleTime(iso8601) {\n  return unixToRippleTimestamp(Date.parse(iso8601));\n}\n\nexports.iso8601ToRippleTime = iso8601ToRippleTime;","map":{"version":3,"mappings":"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","names":["isValidSecret","secret","ripple_keypairs_1","err","exports","dropsToXrp","drops","match","errors_1","bignumber_js_1","toString","includes","dividedBy","xrpToDrops","xrp","components","split","length","fraction","times","integerValue","ROUND_FLOOR","toRippledAmount","amount","currency","value","issuer","counterparty","tag","classicAddress","ripple_address_codec_1","e","convertKeysFromSnakeCaseToCamelCase","obj","accumulator","Array","isArray","newKey","Object","entries","reduce","result","key","FINDSNAKE","test","replace","r","toUpperCase","removeUndefined","_","omitBy","rippleToUnixTimestamp","rpepoch","unixToRippleTimestamp","timestamp","Math","round","rippleTimeToISO8601","rippleTime","Date","toISOString","iso8601ToRippleTime","iso8601","parse"],"sourceRoot":"","sources":["../../../src/common/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}