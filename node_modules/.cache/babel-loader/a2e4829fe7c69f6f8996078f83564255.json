{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionalValue = exports.OptionalType = void 0;\n\nconst utils_1 = require(\"../../utils\");\n\nconst types_1 = require(\"./types\");\n/**\n * An optional is an algebraic type. It holds zero or one values.\n */\n\n\nclass OptionalType extends types_1.Type {\n  constructor(typeParameter) {\n    super(\"Optional\", [typeParameter], types_1.TypeCardinality.variable(1));\n  }\n\n}\n\nexports.OptionalType = OptionalType;\n\nclass OptionalValue extends types_1.TypedValue {\n  constructor(type) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super(type); // TODO: assert value is of type type.getFirstTypeParameter()\n\n    this.value = value;\n  }\n\n  isSet() {\n    return this.value ? true : false;\n  }\n\n  getTypedValue() {\n    utils_1.guardValueIsSet(\"value\", this.value);\n    return this.value;\n  }\n\n  valueOf() {\n    return this.value ? this.value.valueOf() : null;\n  }\n\n  equals(other) {\n    var _a;\n\n    return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.equals(other.value)) || false;\n  }\n\n}\n\nexports.OptionalValue = OptionalValue;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;AAEA;;;;;AAGA,MAAaA,YAAb,SAAkCC,YAAlC,CAAsC;EAClCC,YAAYC,aAAZ,EAA+B;IAC3B,MAAM,UAAN,EAAkB,CAACA,aAAD,CAAlB,EAAmCF,wBAAgBG,QAAhB,CAAyB,CAAzB,CAAnC;EACH;;AAHiC;;AAAtCC;;AAMA,MAAaC,aAAb,SAAmCL,kBAAnC,CAA6C;EAGzCC,YAAYK,IAAZ,EAA+D;IAAA,IAA/BC,KAA+B,uEAAJ,IAAI;IAC3D,MAAMD,IAAN,EAD2D,CAG3D;;IAEA,KAAKC,KAAL,GAAaA,KAAb;EACH;;EAEDC,KAAK;IACD,OAAO,KAAKD,KAAL,GAAa,IAAb,GAAoB,KAA3B;EACH;;EAEDE,aAAa;IACTC,wBAAgB,OAAhB,EAAyB,KAAKH,KAA9B;IACA,OAAO,KAAKA,KAAZ;EACH;;EAEDI,OAAO;IACH,OAAO,KAAKJ,KAAL,GAAa,KAAKA,KAAL,CAAWI,OAAX,EAAb,GAAoC,IAA3C;EACH;;EAEDC,MAAM,CAACC,KAAD,EAAqB;;;IACvB,OAAO,YAAKN,KAAL,MAAU,IAAV,IAAUO,aAAV,GAAU,MAAV,GAAUA,GAAEF,MAAF,CAASC,KAAK,CAACN,KAAf,CAAV,KAAmC,KAA1C;EACH;;AA1BwC;;AAA7CH","names":["OptionalType","types_1","constructor","typeParameter","variable","exports","OptionalValue","type","value","isSet","getTypedValue","utils_1","valueOf","equals","other","_a"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/algebraic.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}