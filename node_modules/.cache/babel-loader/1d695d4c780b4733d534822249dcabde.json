{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendXdcDeployErc721Transaction = exports.sendXdcErc721Transaction = exports.sendXdcUpdateCashbackForAuthorErc721Transaction = exports.sendXdcBurnErc721Transaction = exports.sendXdcMintMultipleErc721Transaction = exports.sendXdcMintMultipleCashbackErc721Transaction = exports.sendXdcMintErcCashback721Transaction = exports.sendXdcMintErc721Transaction = exports.sendXdcSmartContractMethodInvocationTransaction = exports.sendXdcDeployErc20Transaction = exports.sendXdcCustomErc20Transaction = exports.sendXdcOrErc20Transaction = exports.sendXdcStoreDataTransaction = exports.sendXdcSmartContractReadMethodInvocationTransaction = exports.prepareXdcDeployErc721SignedTransaction = exports.prepareXdcUpdateCashbackForAuthorErc721SignedTransaction = exports.prepareXdcTransferErc721SignedTransaction = exports.prepareXdcBurnErc721SignedTransaction = exports.prepareXdcMintMultipleErc721SignedTransaction = exports.prepareXdcMintMultipleCashbackErc721SignedTransaction = exports.prepareXdcMintErcCashback721SignedTransaction = exports.prepareXdcMintErc721SignedTransaction = exports.prepareXdcSmartContractWriteMethodInvocation = exports.prepareXdcDeployErc20SignedTransaction = exports.prepareXdcCustomErc20SignedTransaction = exports.prepareXdcOrErc20SignedTransaction = exports.prepareXdcBurnErc20SignedTransaction = exports.prepareXdcMintErc20SignedTransaction = exports.prepareXdcStoreDataTransaction = exports.signXdcKMSTransaction = exports.getXdcClient = exports.xdcGetGasPriceInWei = exports.fromXdcAddress = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst web3_1 = __importDefault(require(\"web3\"));\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst token_abi_1 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst token_bytecode_1 = __importDefault(require(\"../contracts/erc20/token_bytecode\"));\n\nconst erc721_abi_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_abi\"));\n\nconst erc721_bytecode_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_bytecode\"));\n\nconst model_1 = require(\"../model\");\n\nconst erc721_abi_2 = __importDefault(require(\"../contracts/erc721General/erc721_abi\"));\n\nconst erc721_bytecode_2 = __importDefault(require(\"../contracts/erc721General/erc721_bytecode\"));\n\nconst erc721Provenance_abi_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_abi\"));\n\nconst erc721Provenance_bytecode_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_bytecode\"));\n/**\n * Convert XDC address format.\n */\n\n\nconst fromXdcAddress = xdcAddress => {\n  return xdcAddress.trim().replace('xdc', '0x');\n};\n\nexports.fromXdcAddress = fromXdcAddress;\n/**\n * Estimate Gas price for the transaction.\n */\n\nconst xdcGetGasPriceInWei = async () => {\n  const gasStationUrl = 'https://rpc.xinfin.network/';\n\n  try {\n    const {\n      data\n    } = await tatum_1.axios.post(`${gasStationUrl}gasPrice`, {\n      'jsonrpc': '2.0',\n      'method': 'eth_gasPrice',\n      'params': [],\n      'id': 1\n    });\n    return data ? web3_1.default.utils.toWei(data, 'wei') : web3_1.default.utils.toWei('5', 'kwei');\n  } catch (e) {\n    return web3_1.default.utils.toWei('5', 'kwei');\n  }\n\n  return web3_1.default.utils.toWei('5', 'kwei');\n};\n\nexports.xdcGetGasPriceInWei = xdcGetGasPriceInWei;\n/**\n * Returns XDC server to connect to.\n *\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @param fromPrivateKey optional private key of sender account\n */\n\nconst getXdcClient = (provider, fromPrivateKey) => {\n  const client = new web3_1.default(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/xdc/web3/${process.env.TATUM_API_KEY}`);\n\n  if (fromPrivateKey) {\n    client.eth.accounts.wallet.clear();\n    client.eth.accounts.wallet.add(fromPrivateKey);\n    client.eth.defaultAccount = client.eth.accounts.wallet[0].address;\n  }\n\n  return client;\n};\n\nexports.getXdcClient = getXdcClient;\n/**\n * Sign XDC pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signXdcKMSTransaction = async (tx, fromPrivateKey, provider) => {\n  if (tx.chain !== model_1.Currency.XDC) {\n    throw Error('Unsupported chain.');\n  }\n\n  const client = exports.getXdcClient(provider, fromPrivateKey);\n  const transactionConfig = JSON.parse(tx.serializedTransaction);\n  transactionConfig.gas = await client.eth.estimateGas(transactionConfig);\n\n  if (!transactionConfig.nonce) {\n    transactionConfig.nonce = await blockchain_1.xdcGetTransactionsCount(client.eth.defaultAccount);\n  }\n\n  return (await client.eth.accounts.signTransaction(transactionConfig, fromPrivateKey)).rawTransaction;\n};\n\nexports.signXdcKMSTransaction = signXdcKMSTransaction;\n/**\n * Sign XDC Store data transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcStoreDataTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateRecord);\n  const {\n    fromPrivateKey,\n    to,\n    ethFee,\n    data,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getXdcClient(provider, fromPrivateKey);\n  const address = to || client.eth.defaultAccount;\n\n  if (!address) {\n    throw new Error('Recipient must be provided.');\n  }\n\n  const hexData = client.utils.isHex(data) ? client.utils.stringToHex(data) : client.utils.toHex(data);\n  const addressNonce = nonce ? nonce : await blockchain_1.xdcGetTransactionsCount(address);\n  const customFee = ethFee ? Object.assign(Object.assign({}, ethFee), {\n    gasPrice: client.utils.toWei(ethFee.gasPrice, 'gwei')\n  }) : {\n    gasLimit: `${hexData.length * 68 + 21000}`,\n    gasPrice: await exports.xdcGetGasPriceInWei()\n  };\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(address),\n    value: '0',\n    gasPrice: customFee.gasPrice,\n    gas: customFee.gasLimit,\n    data: hexData,\n    nonce: addressNonce\n  };\n\n  if (signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;\n};\n\nexports.prepareXdcStoreDataTransaction = prepareXdcStoreDataTransaction;\n/**\n * Sign ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param client Web3 client of the XDC Server to connect to. If not set, default public server will be used.\n * @param transaction content of the transaction to broadcast\n * @param signatureId signature ID\n * @param fromPrivateKey private key\n * @param fee Fee object\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareErc20SignedTransactionAbstraction = async (client, transaction, signatureId, fromPrivateKey, fee) => {\n  var _a;\n\n  const gasPrice = fee ? client.utils.toWei(fee.gasPrice, 'gwei') : await exports.xdcGetGasPriceInWei();\n  const tx = Object.assign(Object.assign({}, transaction), {\n    gasPrice\n  });\n\n  if (signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  tx.gas = (_a = fee === null || fee === void 0 ? void 0 : fee.gasLimit) !== null && _a !== void 0 ? _a : await client.eth.estimateGas(tx);\n  return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;\n};\n/**\n * Sign ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst prepareXdcMintErc20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.MintErc20);\n  const {\n    fromPrivateKey,\n    amount,\n    to,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_1.default, exports.fromXdcAddress(contractAddress));\n  const digits = new bignumber_js_1.BigNumber(10).pow(await contract.methods.decimals().call());\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(contractAddress),\n    data: contract.methods.mint(exports.fromXdcAddress(to), `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(digits).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareXdcMintErc20SignedTransaction = prepareXdcMintErc20SignedTransaction;\n/**\n * Sign ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcBurnErc20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.BurnErc20);\n  const {\n    fromPrivateKey,\n    amount,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_1.default, exports.fromXdcAddress(contractAddress));\n  const digits = new bignumber_js_1.BigNumber(10).pow(await contract.methods.decimals().call());\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(contractAddress),\n    data: contract.methods.burn(`0x${new bignumber_js_1.BigNumber(amount).multipliedBy(digits).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey);\n};\n\nexports.prepareXdcBurnErc20SignedTransaction = prepareXdcBurnErc20SignedTransaction;\n/**\n * Sign XDC or supported ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcOrErc20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferErc20);\n  const {\n    fromPrivateKey,\n    to,\n    amount,\n    fee,\n    data,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getXdcClient(provider, fromPrivateKey);\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(to),\n    value: client.utils.toWei(`${amount}`, 'ether'),\n    data: client.utils.isHex(data) ? client.utils.stringToHex(data) : client.utils.toHex(data),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareXdcOrErc20SignedTransaction = prepareXdcOrErc20SignedTransaction;\n/**\n * Sign XDC custom ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcCustomErc20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.TransferErc20);\n  const {\n    fromPrivateKey,\n    to,\n    amount,\n    contractAddress,\n    digits,\n    fee,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract([constants_1.TRANSFER_METHOD_ABI], exports.fromXdcAddress(contractAddress));\n  const decimals = new bignumber_js_1.BigNumber(10).pow(digits);\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(contractAddress),\n    data: contract.methods.transfer(exports.fromXdcAddress(to), `0x${new bignumber_js_1.BigNumber(amount).multipliedBy(decimals).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareXdcCustomErc20SignedTransaction = prepareXdcCustomErc20SignedTransaction;\n/**\n * Sign XDC deploy ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcDeployErc20SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.DeployErc20);\n  const {\n    name,\n    address,\n    symbol,\n    supply,\n    digits,\n    fromPrivateKey,\n    nonce,\n    fee,\n    signatureId,\n    totalCap\n  } = body;\n  const client = exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_1.default);\n\n  const _digits = new bignumber_js_1.BigNumber(10).pow(digits);\n\n  const deploy = contract.deploy({\n    data: token_bytecode_1.default,\n    arguments: [name, symbol, address, digits, `0x${new bignumber_js_1.BigNumber(totalCap || supply).multipliedBy(_digits).toString(16)}`, `0x${new bignumber_js_1.BigNumber(supply).multipliedBy(_digits).toString(16)}`]\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareXdcDeployErc20SignedTransaction = prepareXdcDeployErc20SignedTransaction;\n/**\n * Sign XDC invoke smart contract transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcSmartContractWriteMethodInvocation = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractMethodInvocation);\n  const {\n    fromPrivateKey,\n    fee,\n    params,\n    methodName,\n    methodABI,\n    contractAddress,\n    amount,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getXdcClient(provider, fromPrivateKey);\n  const contract = new client.eth.Contract([methodABI]);\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(contractAddress),\n    value: web3_utils_1.toWei(amount || '0', 'ether'),\n    data: contract.methods[methodName](...params).encodeABI(),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareXdcSmartContractWriteMethodInvocation = prepareXdcSmartContractWriteMethodInvocation;\n/**\n * Sign XDC mint ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcMintErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    fee,\n    url,\n    signatureId\n  } = body;\n  const client = exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, exports.fromXdcAddress(contractAddress));\n\n  if (contractAddress) {\n    const tx = {\n      from: 0,\n      to: exports.fromXdcAddress(contractAddress),\n      data: contract.methods.mintWithTokenURI(exports.fromXdcAddress(to), tokenId, url).encodeABI(),\n      nonce\n    };\n    return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n  }\n\n  throw new Error('Contract address should not be empty!');\n};\n\nexports.prepareXdcMintErc721SignedTransaction = prepareXdcMintErc721SignedTransaction;\n/**\n * Sign XDC mint ERC 721 transaction with cashback via private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcMintErcCashback721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    nonce,\n    fee,\n    url,\n    signatureId,\n    authorAddresses,\n    cashbackValues\n  } = body;\n  const client = exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, exports.fromXdcAddress(contractAddress));\n  const cb = [];\n  const cashbacks = cashbackValues;\n\n  for (const c of cashbacks) {\n    cb.push(`0x${new bignumber_js_1.BigNumber(client.utils.toWei(c, 'ether')).toString(16)}`);\n  }\n\n  if (contractAddress) {\n    const tx = {\n      from: 0,\n      to: exports.fromXdcAddress(contractAddress),\n      data: contract.methods.mintWithCashback(exports.fromXdcAddress(to), tokenId, url, authorAddresses, cb).encodeABI(),\n      nonce\n    };\n    return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n  }\n\n  throw new Error('Contract address should not be empty!');\n};\n\nexports.prepareXdcMintErcCashback721SignedTransaction = prepareXdcMintErcCashback721SignedTransaction;\n/**\n * Sign XDC mint multiple ERC 721 Cashback transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcMintMultipleCashbackErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    nonce,\n    signatureId,\n    authorAddresses,\n    cashbackValues,\n    fee\n  } = body;\n  const client = await exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, exports.fromXdcAddress(contractAddress));\n  const cashbacks = cashbackValues;\n  const cb = [];\n\n  for (const c of cashbacks) {\n    const cb2 = [];\n\n    for (const c2 of c) {\n      cb2.push(`0x${new bignumber_js_1.BigNumber(client.utils.toWei(c2, 'ether')).toString(16)}`);\n    }\n\n    cb.push(cb2);\n  }\n\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(contractAddress),\n    data: contract.methods.mintMultipleCashback(to.map(t => exports.fromXdcAddress(t)), tokenId, url, authorAddresses, cb).encodeABI(),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareXdcMintMultipleCashbackErc721SignedTransaction = prepareXdcMintMultipleCashbackErc721SignedTransaction;\n/**\n * Sign XDC mint multiple ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcMintMultipleErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    contractAddress,\n    url,\n    nonce,\n    signatureId,\n    fee\n  } = body;\n  const client = await exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, exports.fromXdcAddress(contractAddress));\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(contractAddress),\n    data: contract.methods.mintMultiple(to.map(t => exports.fromXdcAddress(t)), tokenId, url).encodeABI(),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareXdcMintMultipleErc721SignedTransaction = prepareXdcMintMultipleErc721SignedTransaction;\n/**\n * Sign XDC burn ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcBurnErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthBurnErc721);\n  const {\n    fromPrivateKey,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, exports.fromXdcAddress(contractAddress));\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(contractAddress),\n    data: contract.methods.burn(tokenId).encodeABI(),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareXdcBurnErc721SignedTransaction = prepareXdcBurnErc721SignedTransaction;\n/**\n * Sign XDC transfer ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcTransferErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthTransferErc721);\n  const {\n    fromPrivateKey,\n    to,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId,\n    value\n  } = body;\n  const client = await exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, exports.fromXdcAddress(contractAddress));\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(contractAddress),\n    data: contract.methods.safeTransfer(exports.fromXdcAddress(to), tokenId).encodeABI(),\n    nonce,\n    value: value ? `0x${new bignumber_js_1.BigNumber(value).multipliedBy(1e18).toString(16)}` : undefined\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareXdcTransferErc721SignedTransaction = prepareXdcTransferErc721SignedTransaction;\n/**\n * Sign XDC update cashback ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcUpdateCashbackForAuthorErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.UpdateCashbackErc721);\n  const {\n    fromPrivateKey,\n    cashbackValue,\n    tokenId,\n    fee,\n    contractAddress,\n    nonce,\n    signatureId\n  } = body;\n  const client = await exports.getXdcClient(provider, fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(erc721_abi_1.default, exports.fromXdcAddress(contractAddress));\n  const tx = {\n    from: 0,\n    to: exports.fromXdcAddress(contractAddress),\n    data: contract.methods.updateCashbackForAuthor(tokenId, `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(cashbackValue, 'ether')).toString(16)}`).encodeABI(),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareXdcUpdateCashbackForAuthorErc721SignedTransaction = prepareXdcUpdateCashbackForAuthorErc721SignedTransaction;\n/**\n * Sign XDC deploy ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXdcDeployErc721SignedTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.EthDeployErc721);\n  const {\n    fromPrivateKey,\n    fee,\n    name,\n    symbol,\n    provenance,\n    cashback,\n    nonce,\n    signatureId,\n    publicMint\n  } = body;\n  const client = await exports.getXdcClient(provider, fromPrivateKey);\n\n  if (provenance && cashback) {\n    throw new Error('Only one of provenance or cashback must be present and true.');\n  }\n\n  let abi = erc721_abi_2.default;\n  let data = erc721_bytecode_2.default;\n\n  if (provenance) {\n    abi = erc721Provenance_abi_1.default;\n    data = erc721Provenance_bytecode_1.default;\n  } else if (cashback) {\n    abi = erc721_abi_1.default;\n    data = erc721_bytecode_1.default;\n  } // @ts-ignore\n\n\n  const contract = new client.eth.Contract(abi, null, {\n    data\n  }); // @ts-ignore\n\n  const deploy = contract.deploy({\n    arguments: [name, symbol, publicMint ? publicMint : false]\n  });\n  const tx = {\n    from: 0,\n    data: deploy.encodeABI(),\n    nonce\n  };\n  return await prepareErc20SignedTransactionAbstraction(client, tx, signatureId, fromPrivateKey, fee);\n};\n\nexports.prepareXdcDeployErc721SignedTransaction = prepareXdcDeployErc721SignedTransaction;\n/**\n * Send XDC invoke smart contract transaction to the blockchain.\n * Invoked method only reads from blockchain the data and returns them back.\n *\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n */\n\nconst sendXdcSmartContractReadMethodInvocationTransaction = async (body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractReadMethodInvocation);\n  const {\n    params,\n    methodName,\n    methodABI,\n    contractAddress\n  } = body;\n  const client = exports.getXdcClient(provider);\n  const contract = new client.eth.Contract([methodABI], exports.fromXdcAddress(contractAddress));\n  return {\n    data: await contract.methods[methodName](...params).call()\n  };\n};\n\nexports.sendXdcSmartContractReadMethodInvocationTransaction = sendXdcSmartContractReadMethodInvocationTransaction;\n/**\n * Send XDC store data transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcStoreDataTransaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcStoreDataTransaction(body, provider), body.signatureId);\n\nexports.sendXdcStoreDataTransaction = sendXdcStoreDataTransaction;\n/**\n * Send XDC or supported ERC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcOrErc20Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcOrErc20SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcOrErc20Transaction = sendXdcOrErc20Transaction;\n/**\n * Send XDC custom ERC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcCustomErc20Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcCustomErc20SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcCustomErc20Transaction = sendXdcCustomErc20Transaction;\n/**\n * Send XDC deploy ERC20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcDeployErc20Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcDeployErc20SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcDeployErc20Transaction = sendXdcDeployErc20Transaction;\n/**\n * Send XDC invoke smart contract transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcSmartContractMethodInvocationTransaction = async (body, provider) => {\n  if (body.methodABI.stateMutability === 'view') {\n    return exports.sendXdcSmartContractReadMethodInvocationTransaction(body, provider);\n  }\n\n  return blockchain_1.xdcBroadcast(await exports.prepareXdcSmartContractWriteMethodInvocation(body, provider), body.signatureId);\n};\n\nexports.sendXdcSmartContractMethodInvocationTransaction = sendXdcSmartContractMethodInvocationTransaction;\n/**\n * Send XDC ERC721 mint transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcMintErc721Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcMintErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcMintErc721Transaction = sendXdcMintErc721Transaction;\n/**\n * Send XDC ERC721 mint transaction to the blockchain with cashback details. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcMintErcCashback721Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcMintErcCashback721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcMintErcCashback721Transaction = sendXdcMintErcCashback721Transaction;\n/**\n * Send XDC ERC721 mint multiple transaction with cashback to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcMintMultipleCashbackErc721Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcMintMultipleCashbackErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcMintMultipleCashbackErc721Transaction = sendXdcMintMultipleCashbackErc721Transaction;\n/**\n * Send XDC ERC721 mint multiple transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcMintMultipleErc721Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcMintMultipleErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcMintMultipleErc721Transaction = sendXdcMintMultipleErc721Transaction;\n/**\n * Send XDC ERC721 burn transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcBurnErc721Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcBurnErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcBurnErc721Transaction = sendXdcBurnErc721Transaction;\n\nconst sendXdcUpdateCashbackForAuthorErc721Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcUpdateCashbackForAuthorErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcUpdateCashbackForAuthorErc721Transaction = sendXdcUpdateCashbackForAuthorErc721Transaction;\n/**\n * Send XDC ERC721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcErc721Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcTransferErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcErc721Transaction = sendXdcErc721Transaction;\n/**\n * Send XDC ERC721 deploy to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendXdcDeployErc721Transaction = async (body, provider) => blockchain_1.xdcBroadcast(await exports.prepareXdcDeployErc721SignedTransaction(body, provider), body.signatureId);\n\nexports.sendXdcDeployErc721Transaction = sendXdcDeployErc721Transaction; // TODO: add ERC-1155 support","map":{"version":3,"mappings":"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","names":["fromXdcAddress","xdcAddress","trim","replace","exports","xdcGetGasPriceInWei","gasStationUrl","data","tatum_1","post","web3_1","utils","toWei","e","getXdcClient","provider","fromPrivateKey","client","process","env","TATUM_API_URL","constants_1","TATUM_API_KEY","eth","accounts","wallet","clear","add","defaultAccount","address","signXdcKMSTransaction","tx","chain","model_1","XDC","Error","transactionConfig","JSON","parse","serializedTransaction","gas","estimateGas","nonce","blockchain_1","signTransaction","rawTransaction","prepareXdcStoreDataTransaction","body","to","ethFee","signatureId","hexData","isHex","stringToHex","toHex","addressNonce","customFee","Object","gasPrice","gasLimit","length","from","value","stringify","prepareErc20SignedTransactionAbstraction","transaction","fee","_a","prepareXdcMintErc20SignedTransaction","amount","contractAddress","contract","Contract","token_abi_1","digits","bignumber_js_1","pow","methods","decimals","call","mint","multipliedBy","toString","encodeABI","prepareXdcBurnErc20SignedTransaction","burn","prepareXdcOrErc20SignedTransaction","prepareXdcCustomErc20SignedTransaction","transfer","prepareXdcDeployErc20SignedTransaction","name","symbol","supply","totalCap","_digits","deploy","token_bytecode_1","arguments","prepareXdcSmartContractWriteMethodInvocation","params","methodName","methodABI","web3_utils_1","prepareXdcMintErc721SignedTransaction","tokenId","url","erc721_abi_1","mintWithTokenURI","prepareXdcMintErcCashback721SignedTransaction","authorAddresses","cashbackValues","cb","cashbacks","c","push","mintWithCashback","prepareXdcMintMultipleCashbackErc721SignedTransaction","cb2","c2","mintMultipleCashback","map","t","prepareXdcMintMultipleErc721SignedTransaction","mintMultiple","prepareXdcBurnErc721SignedTransaction","prepareXdcTransferErc721SignedTransaction","safeTransfer","undefined","prepareXdcUpdateCashbackForAuthorErc721SignedTransaction","cashbackValue","updateCashbackForAuthor","prepareXdcDeployErc721SignedTransaction","provenance","cashback","publicMint","abi","erc721_abi_2","erc721_bytecode_2","erc721Provenance_abi_1","erc721Provenance_bytecode_1","erc721_bytecode_1","sendXdcSmartContractReadMethodInvocationTransaction","sendXdcStoreDataTransaction","sendXdcOrErc20Transaction","sendXdcCustomErc20Transaction","sendXdcDeployErc20Transaction","sendXdcSmartContractMethodInvocationTransaction","stateMutability","sendXdcMintErc721Transaction","sendXdcMintErcCashback721Transaction","sendXdcMintMultipleCashbackErc721Transaction","sendXdcMintMultipleErc721Transaction","sendXdcBurnErc721Transaction","sendXdcUpdateCashbackForAuthorErc721Transaction","sendXdcErc721Transaction","sendXdcDeployErc721Transaction"],"sourceRoot":"","sources":["../../../src/transaction/xdc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}