{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TestWallet = exports.loadTestWallet = exports.loadPassword = exports.loadMnemonic = exports.loadTestWallets = exports.syncTestWallets = exports.loadAndSyncTestWallets = void 0;\n\nconst fs = __importStar(require(\"fs\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst account_1 = require(\"../account\");\n\nconst address_1 = require(\"../address\");\n\nconst walletcore_1 = require(\"../walletcore\");\n\nconst userSigner_1 = require(\"../walletcore/userSigner\");\n\nfunction loadAndSyncTestWallets(provider) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let wallets = yield loadTestWallets();\n    yield syncTestWallets(wallets, provider);\n    return wallets;\n  });\n}\n\nexports.loadAndSyncTestWallets = loadAndSyncTestWallets;\n\nfunction syncTestWallets(wallets, provider) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield Promise.all(Object.values(wallets).map(wallet => __awaiter(this, void 0, void 0, function* () {\n      return wallet.sync(provider);\n    })));\n  });\n}\n\nexports.syncTestWallets = syncTestWallets;\n\nfunction loadTestWallets() {\n  return __awaiter(this, void 0, void 0, function* () {\n    let walletNames = [\"alice\", \"bob\", \"carol\", \"dan\", \"eve\", \"frank\", \"grace\", \"heidi\", \"ivan\", \"judy\", \"mallory\", \"mike\"];\n    let wallets = yield Promise.all(walletNames.map(name => __awaiter(this, void 0, void 0, function* () {\n      return yield loadTestWallet(name);\n    })));\n    let walletMap = {};\n\n    for (let i in walletNames) {\n      walletMap[walletNames[i]] = wallets[i];\n    }\n\n    return walletMap;\n  });\n}\n\nexports.loadTestWallets = loadTestWallets;\n\nfunction loadMnemonic() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield readTestWalletFileContents(\"mnemonic.txt\");\n  });\n}\n\nexports.loadMnemonic = loadMnemonic;\n\nfunction loadPassword() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield readTestWalletFileContents(\"password.txt\");\n  });\n}\n\nexports.loadPassword = loadPassword;\n\nfunction loadTestWallet(name) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let jsonContents = JSON.parse(yield readTestWalletFileContents(name + \".json\"));\n    let pemContents = yield readTestWalletFileContents(name + \".pem\");\n    let pemKey = walletcore_1.UserSecretKey.fromPem(pemContents);\n    return new TestWallet(new address_1.Address(jsonContents.address), pemKey.hex(), jsonContents, pemContents);\n  });\n}\n\nexports.loadTestWallet = loadTestWallet;\n\nfunction readTestWalletFileContents(name) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let basePath = path.join(__dirname, \"testwallets\");\n    let filePath = path.join(basePath, name);\n    return yield fs.promises.readFile(filePath, {\n      encoding: \"utf8\"\n    });\n  });\n}\n\nclass TestWallet {\n  constructor(address, secretKeyHex, keyFileObject, pemFileText) {\n    this.address = address;\n    this.secretKeyHex = secretKeyHex;\n    this.secretKey = Buffer.from(secretKeyHex, \"hex\");\n    this.signer = new userSigner_1.UserSigner(walletcore_1.UserSecretKey.fromString(secretKeyHex));\n    this.keyFileObject = keyFileObject;\n    this.pemFileText = pemFileText;\n    this.account = new account_1.Account(this.address);\n  }\n\n  sync(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.account.sync(provider);\n      return this;\n    });\n  }\n\n}\n\nexports.TestWallet = TestWallet;","map":{"version":3,"mappings":"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","names":["loadAndSyncTestWallets","provider","wallets","loadTestWallets","syncTestWallets","exports","Promise","all","Object","values","map","wallet","__awaiter","sync","walletNames","name","loadTestWallet","walletMap","i","loadMnemonic","readTestWalletFileContents","loadPassword","jsonContents","JSON","parse","pemContents","pemKey","walletcore_1","fromPem","TestWallet","address_1","address","hex","basePath","path","join","__dirname","filePath","fs","promises","readFile","encoding","constructor","secretKeyHex","keyFileObject","pemFileText","secretKey","Buffer","from","signer","userSigner_1","fromString","account","account_1"],"sourceRoot":"","sources":["../../src/testutils/wallets.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}