{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.countTransactionsByLedger = exports.countTransactionsByCustomer = exports.countTransactionsByAccount = exports.getTransactionsByLedger = exports.getTransactionsByCustomer = exports.getTransactionsByAccount = exports.storeTransaction = exports.getTransactionsByReference = void 0;\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getTransactionsByReference\" target=\"_blank\">Tatum API documentation</a>\n */\n\n\nconst getTransactionsByReference = async reference => tatum_1.get(`/v3/ledger/transaction/reference/${reference}`);\n\nexports.getTransactionsByReference = getTransactionsByReference;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/sendTransaction\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst storeTransaction = async transaction => tatum_1.post(`/v3/ledger/transaction`, transaction, model_1.CreateTransaction);\n\nexports.storeTransaction = storeTransaction;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getTransactionsByAccountId\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getTransactionsByAccount = async function (filter) {\n  let pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return tatum_1.post(`/v3/ledger/transaction/account?pageSize=${pageSize}&offset=${offset}`, filter, model_1.TransactionFilter);\n};\n\nexports.getTransactionsByAccount = getTransactionsByAccount;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getTransactionsByCustomerId\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getTransactionsByCustomer = async function (filter) {\n  let pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return tatum_1.post(`/v3/ledger/transaction/customer?pageSize=${pageSize}&offset=${offset}`, filter, model_1.TransactionFilter);\n};\n\nexports.getTransactionsByCustomer = getTransactionsByCustomer;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getTransactions\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getTransactionsByLedger = async function (filter) {\n  let pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return tatum_1.post(`/v3/ledger/transaction/ledger?pageSize=${pageSize}&offset=${offset}`, filter, model_1.TransactionFilter);\n};\n\nexports.getTransactionsByLedger = getTransactionsByLedger;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getTransactionsByAccountId\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst countTransactionsByAccount = async filter => tatum_1.post(`/v3/ledger/transaction/account?count=true`, filter, model_1.TransactionFilter);\n\nexports.countTransactionsByAccount = countTransactionsByAccount;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getTransactionsByCustomerId\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst countTransactionsByCustomer = async filter => tatum_1.post(`/v3/ledger/transaction/customer?count=true`, filter, model_1.TransactionFilter);\n\nexports.countTransactionsByCustomer = countTransactionsByCustomer;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/getTransactions\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst countTransactionsByLedger = async filter => tatum_1.post(`/v3/ledger/transaction/ledger?count=true`, filter, model_1.TransactionFilter);\n\nexports.countTransactionsByLedger = countTransactionsByLedger;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;AAEA;;;;;AAGO,MAAMA,0BAA0B,GAAG,MAAOC,SAAP,IAAqDC,YAAI,oCAAoCD,SAAS,EAAjD,CAAxF;;AAAME,qCAA0BH,0BAA1B;AAEb;;;;AAGO,MAAMI,gBAAgB,GAAG,MAAOC,WAAP,IAC9BH,aAAK,wBAAL,EAA+BG,WAA/B,EAA4CC,yBAA5C,CADK;;AAAMH,2BAAgBC,gBAAhB;AAGb;;;;AAGO,MAAMG,wBAAwB,GAAG,gBAAOC,MAAP;EAAA,IAAkCC,QAAlC,uEAA6C,EAA7C;EAAA,IAAiDC,MAAjD,uEAA0D,CAA1D;EAAA,OACtCR,aAAK,2CAA2CO,QAAQ,WAAWC,MAAM,EAAzE,EAA6EF,MAA7E,EAAqFF,yBAArF,CADsC;AAAA,CAAjC;;AAAMH,mCAAwBI,wBAAxB;AAGb;;;;AAGO,MAAMI,yBAAyB,GAAG,gBAAOH,MAAP;EAAA,IAAkCC,QAAlC,uEAA6C,EAA7C;EAAA,IAAiDC,MAAjD,uEAA0D,CAA1D;EAAA,OACvCR,aAAK,4CAA4CO,QAAQ,WAAWC,MAAM,EAA1E,EAA8EF,MAA9E,EAAsFF,yBAAtF,CADuC;AAAA,CAAlC;;AAAMH,oCAAyBQ,yBAAzB;AAGb;;;;AAGO,MAAMC,uBAAuB,GAAG,gBAAOJ,MAAP;EAAA,IAAkCC,QAAlC,uEAA6C,EAA7C;EAAA,IAAiDC,MAAjD,uEAA0D,CAA1D;EAAA,OACrCR,aAAK,0CAA0CO,QAAQ,WAAWC,MAAM,EAAxE,EAA4EF,MAA5E,EAAoFF,yBAApF,CADqC;AAAA,CAAhC;;AAAMH,kCAAuBS,uBAAvB;AAGb;;;;AAGO,MAAMC,0BAA0B,GAAG,MAAOL,MAAP,IACxCN,aAAK,2CAAL,EAAkDM,MAAlD,EAA0DF,yBAA1D,CADK;;AAAMH,qCAA0BU,0BAA1B;AAGb;;;;AAGO,MAAMC,2BAA2B,GAAG,MAAON,MAAP,IACzCN,aAAK,4CAAL,EAAmDM,MAAnD,EAA2DF,yBAA3D,CADK;;AAAMH,sCAA2BW,2BAA3B;AAGb;;;;AAGO,MAAMC,yBAAyB,GAAG,MAAOP,MAAP,IACvCN,aAAK,0CAAL,EAAiDM,MAAjD,EAAyDF,yBAAzD,CADK;;AAAMH,oCAAyBY,yBAAzB","names":["getTransactionsByReference","reference","tatum_1","exports","storeTransaction","transaction","model_1","getTransactionsByAccount","filter","pageSize","offset","getTransactionsByCustomer","getTransactionsByLedger","countTransactionsByAccount","countTransactionsByCustomer","countTransactionsByLedger"],"sourceRoot":"","sources":["../../../src/ledger/transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}