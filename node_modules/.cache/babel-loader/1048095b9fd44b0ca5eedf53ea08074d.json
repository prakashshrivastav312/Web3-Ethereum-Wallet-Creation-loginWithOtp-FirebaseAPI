{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendAuctionSettle = exports.sendAuctionCancel = exports.sendAuctionBid = exports.sendAuctionCreate = exports.sendAuctionApproveErc20Transfer = exports.sendAuctionApproveNftTransfer = exports.sendAuctionUpdateFeeRecipient = exports.sendAuctionUpdateFee = exports.prepareAuctionSettle = exports.prepareAuctionCancel = exports.prepareAuctionBid = exports.prepareAuctionCreate = exports.prepareAuctionApproveErc20Transfer = exports.prepareAuctionApproveNftTransfer = exports.prepareAuctionUpdateFeeRecipient = exports.prepareAuctionUpdateFee = exports.prepareDeployAuction = exports.deployAuction = exports.getAuctionFeeRecipient = exports.getAuction = exports.getAuctionFee = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst tatum_1 = require(\"../../connector/tatum\");\n\nconst erc1155_abi_1 = __importDefault(require(\"../../contracts/erc1155/erc1155_abi\"));\n\nconst erc721_abi_1 = __importDefault(require(\"../../contracts/erc721Cashback/erc721_abi\"));\n\nconst marketplace_1 = require(\"../../contracts/marketplace\");\n\nconst fungible_1 = require(\"../../fungible\");\n\nconst helpers_1 = require(\"../../helpers\");\n\nconst model_1 = require(\"../../model\");\n\nconst transaction_1 = require(\"../../transaction\");\n\nconst caver_js_1 = __importDefault(require(\"caver-js\"));\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/MPAuctionFee\" target=\"_blank\">Tatum API documentation</a>\n */\n\n\nconst getAuctionFee = async (chain, contractAddress) => tatum_1.get(`/v3/blockchain/auction/auction/${chain}/${contractAddress}/fee`);\n\nexports.getAuctionFee = getAuctionFee;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/MPAuction\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getAuction = async (chain, contractAddress, auctionId) => tatum_1.get(`/v3/blockchain/auction/auction/${chain}/${contractAddress}/auction/${auctionId}`);\n\nexports.getAuction = getAuction;\n/**\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/MPAuctionRecipient\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst getAuctionFeeRecipient = async (chain, contractAddress) => tatum_1.get(`/v3/blockchain/auction/auction/${chain}/${contractAddress}/recipient`);\n\nexports.getAuctionFeeRecipient = getAuctionFeeRecipient;\n/**\n * Deploy new smart contract for NFT auction logic. Smart contract enables auction operator to create new auction for NFT (ERC-721/1155).\n * Operator can set a fee in percentage, which will be paid on top of the price of the asset.\n * can be offered for native asset - ETH, BSC, etc. - or any ERC20 token - this is configurable during auction creation.\n * Before auction is created, seller must approve transfer of the NFT to the auction contract.\n * Buyer will bid for the asset from the auction using native asset - send assets along the gid() smart contract call, or via ERC20 token.\n * Buyer of the auction must perform approval for the smart contract to access ERC20 token, before the actual bid() method is called.\n * Once there is higher bid than the actual one, the previous bidder's funds will be returned to him and new bidder will be the current winning one.\n * When auction ends, anyone can settle the auction - NFT will be sent to the bidder, assets to the seller and fee to the operator.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst deployAuction = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareDeployAuction(testnet, body, provider), body.signatureId);\n\nexports.deployAuction = deployAuction;\n/**\n * Prepare signed transaction for NFT auction logic. Smart contract enables auction operator to create new auction for NFT (ERC-721/1155).\n * Operator can set a fee in percentage, which will be paid on top of the price of the asset.\n * can be offered for native asset - ETH, BSC, etc. - or any ERC20 token - this is configurable during auction creation.\n * Before auction is created, seller must approve transfer of the NFT to the auction contract.\n * Buyer will bid for the asset from the auction using native asset - send assets along the gid() smart contract call, or via ERC20 token.\n * Buyer of the auction must perform approval for the smart contract to access ERC20 token, before the actual bid() method is called.\n * Once there is higher bid than the actual one, the previous bidder's funds will be returned to him and new bidder will be the current winning one.\n * When auction ends, anyone can settle the auction - NFT will be sent to the bidder, assets to the seller and fee to the operator.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareDeployAuction = async (testnet, body, provider) => {\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return await transaction_1.prepareCeloDeployAuctionSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ONE:\n      return await transaction_1.prepareOneDeployAuctionSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.ETH:\n      return await transaction_1.prepareEthDeployAuctionSignedTransaction(body, provider);\n\n    case model_1.Currency.BSC:\n      return await transaction_1.prepareBscDeployAuctionSignedTransaction(body, provider);\n\n    case model_1.Currency.MATIC:\n      return await transaction_1.preparePolygonDeployAuctionSignedTransaction(testnet, body, provider);\n\n    case model_1.Currency.KLAY:\n      return await transaction_1.prepareKlaytnDeployAuctionSignedTransaction(testnet, body, provider);\n\n    default:\n      throw new Error('Unsupported chain');\n  }\n};\n\nexports.prepareDeployAuction = prepareDeployAuction;\n/**\n * Update auction fee.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareAuctionUpdateFee = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.UpdateAuctionFee);\n  const params = [`0x${new bignumber_js_1.default(body.auctionFee).toString(16)}`];\n  return await helpers_1.helperPrepareSCCall(testnet, body, model_1.UpdateAuctionFee, 'setAuctionFee', params, undefined, provider, marketplace_1.auction.abi);\n};\n\nexports.prepareAuctionUpdateFee = prepareAuctionUpdateFee;\n/**\n * Update auction fee recipient.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareAuctionUpdateFeeRecipient = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.UpdateMarketplaceFeeRecipient);\n  const params = [body.feeRecipient];\n  return await helpers_1.helperPrepareSCCall(testnet, body, model_1.UpdateMarketplaceFeeRecipient, 'setAuctionFeeRecipient', params, undefined, provider, marketplace_1.auction.abi);\n};\n\nexports.prepareAuctionUpdateFeeRecipient = prepareAuctionUpdateFeeRecipient;\n/**\n * Approve NFT transfer for auction to perform listing of the asset.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareAuctionApproveNftTransfer = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.ApproveNftTransfer);\n  const params = body.isErc721 ? [body.spender, `0x${new bignumber_js_1.default(body.tokenId).toString(16)}`] : [body.spender, true];\n  return await helpers_1.helperPrepareSCCall(testnet, body, model_1.ApproveNftTransfer, body.isErc721 ? 'approve' : 'setApprovalForAll', params, undefined, provider, body.isErc721 ? erc721_abi_1.default : erc1155_abi_1.default);\n};\n\nexports.prepareAuctionApproveNftTransfer = prepareAuctionApproveNftTransfer;\n/**\n * Approve ERC20 transfer for auction to perform bidding on the asset in the auction.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareAuctionApproveErc20Transfer = async (testnet, body, provider) => {\n  return fungible_1.prepareApproveErc20(testnet, body, provider);\n};\n\nexports.prepareAuctionApproveErc20Transfer = prepareAuctionApproveErc20Transfer;\n/**\n * Create new auction on the auction contract. Before auction, seller must approve spending of the NFT token for the Auction contract.\n * After auction is created, auction contract transfers the asset to the auction smart contract.\n * Only auction for existing NFTs can be created - seller must be owner of the NFT asset.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareAuctionCreate = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.CreateAuction);\n  const params = [body.id, body.isErc721, body.nftAddress.trim(), `0x${new bignumber_js_1.default(body.tokenId).toString(16)}`, body.seller.trim(), `0x${new bignumber_js_1.default(body.amount || 0).toString(16)}`, `0x${new bignumber_js_1.default(body.endedAt).toString(16)}`, body.erc20Address || '0x0000000000000000000000000000000000000000'];\n  body.amount = undefined;\n  return await helpers_1.helperPrepareSCCall(testnet, body, model_1.CreateAuction, 'createAuction', params, undefined, provider, marketplace_1.auction.abi);\n};\n\nexports.prepareAuctionCreate = prepareAuctionCreate;\n/**\n * Bid on the auction. Buyer must either send native assets with this operation, or approve ERC20 token spending before.\n * After auction is sold, it's in a pending state to be processed by the auction. Noone receives the assets unless the auction operator processes that.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareAuctionBid = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.InvokeAuctionOperation);\n  const web3 = helpers_1.helperGetWeb3Client(testnet, body.chain, provider);\n  const c = web3 instanceof caver_js_1.default ? web3.klay : web3.eth; // @ts-ignore\n\n  const a = await new c.Contract(marketplace_1.auction.abi, body.contractAddress).methods.getAuction(body.id).call();\n  let decimals = 18;\n  let methodName = 'bid';\n  const b = Object.assign({}, body);\n\n  if (a[6] !== '0x0000000000000000000000000000000000000000') {\n    // @ts-ignore\n    decimals = await fungible_1.getErc20Decimals(testnet, body.chain, a[6], provider);\n\n    if (body.bidder) {\n      methodName = 'bidForExternalBidder';\n    }\n  } else if (body.bidder) {\n    throw new Error('Bidder could be present only for ERC20 based auctions.');\n  } else {\n    b.amount = body.amount ? body.amount : body.bidValue;\n  }\n\n  const params = [body.id, `0x${new bignumber_js_1.default(body.bidValue).multipliedBy(new bignumber_js_1.default(10).pow(decimals)).toString(16)}`];\n\n  if (body.bidder) {\n    params.push(body.bidder.trim());\n  }\n\n  return await helpers_1.helperPrepareSCCall(testnet, b, model_1.InvokeAuctionOperation, methodName, params, undefined, provider, marketplace_1.auction.abi);\n};\n\nexports.prepareAuctionBid = prepareAuctionBid;\n/**\n * Cancel auction on the auction. Only possible for the seller or the operator. There must be no buyer present for that auction. NFT asset is sent back to the seller.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareAuctionCancel = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.InvokeAuctionOperation);\n  const params = [body.id];\n  return await helpers_1.helperPrepareSCCall(testnet, body, model_1.InvokeAuctionOperation, 'cancelAuction', params, undefined, provider, marketplace_1.auction.abi);\n};\n\nexports.prepareAuctionCancel = prepareAuctionCancel;\n/**\n * Settle auction. There must be buyer present for that auction. NFT will be sent to the bidder, assets to the seller and fee to the operator.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst prepareAuctionSettle = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.InvokeAuctionOperation);\n  const params = [body.id];\n  return await helpers_1.helperPrepareSCCall(testnet, body, model_1.InvokeAuctionOperation, 'settleAuction', params, undefined, provider, marketplace_1.auction.abi);\n};\n\nexports.prepareAuctionSettle = prepareAuctionSettle;\n/**\n * Update auction fee.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendAuctionUpdateFee = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionUpdateFee(testnet, body, provider), body.signatureId);\n\nexports.sendAuctionUpdateFee = sendAuctionUpdateFee;\n/**\n * Update auction fee recipient.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendAuctionUpdateFeeRecipient = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionUpdateFeeRecipient(testnet, body, provider), body.signatureId);\n\nexports.sendAuctionUpdateFeeRecipient = sendAuctionUpdateFeeRecipient;\n/**\n * Approve NFT transfer for auction to perform listing of the asset.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendAuctionApproveNftTransfer = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionApproveNftTransfer(testnet, body, provider), body.signatureId);\n\nexports.sendAuctionApproveNftTransfer = sendAuctionApproveNftTransfer;\n/**\n * Approve ERC20 transfer for auction to perform bidding on the asset in the auction.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendAuctionApproveErc20Transfer = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionApproveErc20Transfer(testnet, body, provider), body.signatureId);\n\nexports.sendAuctionApproveErc20Transfer = sendAuctionApproveErc20Transfer;\n/**\n * Create new auction on the auction contract. Before auction, seller must approve spending of the NFT token for the Auction contract.\n * After auction is created, auction contract transfers the asset to the auction smart contract.\n * Only auction for existing NFTs can be created - seller must be owner of the NFT asset.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendAuctionCreate = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionCreate(testnet, body, provider), body.signatureId);\n\nexports.sendAuctionCreate = sendAuctionCreate;\n/**\n * Bid auction on the auction. Buyer must either send native assets with this operation, or approve ERC20 token spending before.\n * After auction is sold, it's in a pending state to be processed by the auction. Noone receives the assets unless the auction operator processes that.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendAuctionBid = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionBid(testnet, body, provider), body.signatureId);\n\nexports.sendAuctionBid = sendAuctionBid;\n/**\n * Cancel auction on the auction. Only possible for the seller or the operator. There must be no buyer present for that auction. NFT asset is sent back to the seller.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendAuctionCancel = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionCancel(testnet, body, provider), body.signatureId);\n\nexports.sendAuctionCancel = sendAuctionCancel;\n/**\n * Settle auction. There must be buyer present for that auction. NFT will be sent to the bidder, assets to the seller and fee to the operator.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendAuctionSettle = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionSettle(testnet, body, provider), body.signatureId);\n\nexports.sendAuctionSettle = sendAuctionSettle;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAUA;;AAQA;AAkDA;;;;;AAGO,MAAMA,aAAa,GAAG,OAAOC,KAAP,EAAwBC,eAAxB,KAC3BC,YAAI,kCAAkCF,KAAK,IAAIC,eAAe,MAA9D,CADK;;AAAME,wBAAaJ,aAAb;AAGb;;;;AAGO,MAAMK,UAAU,GAAG,OAAOJ,KAAP,EAAwBC,eAAxB,EAAiDI,SAAjD,KACxBH,YAAI,kCAAkCF,KAAK,IAAIC,eAAe,YAAYI,SAAS,EAAnF,CADK;;AAAMF,qBAAUC,UAAV;AAGb;;;;AAGO,MAAME,sBAAsB,GAAG,OAAON,KAAP,EAAwBC,eAAxB,KACpCC,YAAI,kCAAkCF,KAAK,IAAIC,eAAe,YAA9D,CADK;;AAAME,iCAAsBG,sBAAtB;AAIb;;;;;;;;;;;;;;;AAcO,MAAMC,aAAa,GAAG,OAAOC,OAAP,EAAyBC,IAAzB,EAAiDC,QAAjD,KAC3BC,4BAAkBF,IAAI,CAACT,KAAvB,EAA8B,MAAMG,6BAAqBK,OAArB,EAA8BC,IAA9B,EAAoCC,QAApC,CAApC,EAAmFD,IAAI,CAACG,WAAxF,CADK;;AAAMT,wBAAaI,aAAb;AAGb;;;;;;;;;;;;;;;AAcO,MAAMM,oBAAoB,GAAG,OAAOL,OAAP,EAAyBC,IAAzB,EAAiDC,QAAjD,KAAsE;EACxG,QAAQD,IAAI,CAACT,KAAb;IACE,KAAKc,iBAASC,IAAd;MACE,OAAO,MAAMC,wDAA0CR,OAA1C,EAAmDC,IAAnD,EAAyDC,QAAzD,CAAb;;IACF,KAAKI,iBAASG,GAAd;MACE,OAAO,MAAMD,uDAAyCR,OAAzC,EAAkDC,IAAlD,EAAwDC,QAAxD,CAAb;;IACF,KAAKI,iBAASI,GAAd;MACE,OAAO,MAAMF,uDAAyCP,IAAzC,EAA+CC,QAA/C,CAAb;;IACF,KAAKI,iBAASK,GAAd;MACE,OAAO,MAAMH,uDAAyCP,IAAzC,EAA+CC,QAA/C,CAAb;;IACF,KAAKI,iBAASM,KAAd;MACE,OAAO,MAAMJ,2DAA6CR,OAA7C,EAAsDC,IAAtD,EAA4DC,QAA5D,CAAb;;IACF,KAAKI,iBAASO,IAAd;MACE,OAAO,MAAML,0DAA4CR,OAA5C,EAAqDC,IAArD,EAA2DC,QAA3D,CAAb;;IACF;MACE,MAAM,IAAIY,KAAJ,CAAU,mBAAV,CAAN;EAdJ;AAgBD,CAjBM;;AAAMnB,+BAAoBU,oBAApB;AAmBb;;;;;;;;AAOO,MAAMU,uBAAuB,GAAG,OAAOf,OAAP,EAAyBC,IAAzB,EAAiDC,QAAjD,KAAsE;EAC3G,MAAMR,qBAAaO,IAAb,EAAmBK,wBAAnB,CAAN;EACA,MAAMU,MAAM,GAAG,CAAC,KAAK,IAAIC,sBAAJ,CAAchB,IAAI,CAACiB,UAAnB,EAA+BC,QAA/B,CAAwC,EAAxC,CAA2C,EAAjD,CAAf;EACA,OAAO,MAAMhB,8BAAoBH,OAApB,EAA6BC,IAA7B,EAAmCK,wBAAnC,EAAqD,eAArD,EAAsEU,MAAtE,EAA8EI,SAA9E,EAAyFlB,QAAzF,EAAmGmB,sBAAQC,GAA3G,CAAb;AACD,CAJM;;AAAM3B,kCAAuBoB,uBAAvB;AAMb;;;;;;;;AAOO,MAAMQ,gCAAgC,GAAG,OAAOvB,OAAP,EAAyBC,IAAzB,EAA8DC,QAA9D,KAAmF;EACjI,MAAMR,qBAAaO,IAAb,EAAmBK,qCAAnB,CAAN;EACA,MAAMU,MAAM,GAAG,CAACf,IAAI,CAACuB,YAAN,CAAf;EACA,OAAO,MAAMrB,8BAAoBH,OAApB,EAA6BC,IAA7B,EAAmCK,qCAAnC,EAAkE,wBAAlE,EAA4FU,MAA5F,EAAoGI,SAApG,EAA+GlB,QAA/G,EAAyHmB,sBAAQC,GAAjI,CAAb;AACD,CAJM;;AAAM3B,2CAAgC4B,gCAAhC;AAMb;;;;;;;;AAOO,MAAME,gCAAgC,GAAG,OAAOzB,OAAP,EAAyBC,IAAzB,EAAmDC,QAAnD,KAAwE;EACtH,MAAMR,qBAAaO,IAAb,EAAmBK,0BAAnB,CAAN;EACA,MAAMU,MAAM,GAAGf,IAAI,CAACyB,QAAL,GAAgB,CAACzB,IAAI,CAAC0B,OAAN,EAAe,KAAK,IAAIV,sBAAJ,CAAchB,IAAI,CAAC2B,OAAnB,EAA4BT,QAA5B,CAAqC,EAArC,CAAwC,EAA5D,CAAhB,GAAkF,CAAClB,IAAI,CAAC0B,OAAN,EAAe,IAAf,CAAjG;EACA,OAAO,MAAMxB,8BAAoBH,OAApB,EAA6BC,IAA7B,EAAmCK,0BAAnC,EAAuDL,IAAI,CAACyB,QAAL,GAAgB,SAAhB,GAA4B,mBAAnF,EAAwGV,MAAxG,EAAgHI,SAAhH,EAA2HlB,QAA3H,EACXD,IAAI,CAACyB,QAAL,GAAgBG,oBAAhB,GAA6BC,qBADlB,CAAb;AAED,CALM;;AAAMnC,2CAAgC8B,gCAAhC;AAOb;;;;;;;;AAOO,MAAMM,kCAAkC,GAAG,OAAO/B,OAAP,EAAyBC,IAAzB,EAA6CC,QAA7C,KAAkE;EAClH,OAAO8B,+BAAoBhC,OAApB,EAA6BC,IAA7B,EAAmCC,QAAnC,CAAP;AACD,CAFM;;AAAMP,6CAAkCoC,kCAAlC;AAIb;;;;;;;;;;AASO,MAAME,oBAAoB,GAAG,OAAOjC,OAAP,EAAyBC,IAAzB,EAA8CC,QAA9C,KAAmE;EACrG,MAAMR,qBAAaO,IAAb,EAAmBK,qBAAnB,CAAN;EACA,MAAMU,MAAM,GAAG,CAACf,IAAI,CAACiC,EAAN,EAAUjC,IAAI,CAACyB,QAAf,EAAyBzB,IAAI,CAACkC,UAAL,CAAgBC,IAAhB,EAAzB,EAAiD,KAAK,IAAInB,sBAAJ,CAAchB,IAAI,CAAC2B,OAAnB,EAA4BT,QAA5B,CAAqC,EAArC,CAAwC,EAA9F,EACblB,IAAI,CAACoC,MAAL,CAAYD,IAAZ,EADa,EACO,KAAK,IAAInB,sBAAJ,CAAchB,IAAI,CAACqC,MAAL,IAAe,CAA7B,EAAgCnB,QAAhC,CAAyC,EAAzC,CAA4C,EADxD,EAEb,KAAK,IAAIF,sBAAJ,CAAchB,IAAI,CAACsC,OAAnB,EAA4BpB,QAA5B,CAAqC,EAArC,CAAwC,EAFhC,EAEoClB,IAAI,CAACuC,YAAL,IAAqB,4CAFzD,CAAf;EAGAvC,IAAI,CAACqC,MAAL,GAAclB,SAAd;EACA,OAAO,MAAMjB,8BAAoBH,OAApB,EAA6BC,IAA7B,EAAmCK,qBAAnC,EAAkD,eAAlD,EAAmEU,MAAnE,EAA2EI,SAA3E,EAAsFlB,QAAtF,EAAgGmB,sBAAQC,GAAxG,CAAb;AACD,CAPM;;AAAM3B,+BAAoBsC,oBAApB;AASb;;;;;;;;;AAQO,MAAMQ,iBAAiB,GAAG,OAAOzC,OAAP,EAAyBC,IAAzB,EAAuDC,QAAvD,KAA4E;EAC3G,MAAMR,qBAAaO,IAAb,EAAmBK,8BAAnB,CAAN;EAEA,MAAMoC,IAAI,GAAGvC,8BAAoBH,OAApB,EAA6BC,IAAI,CAACT,KAAlC,EAAyCU,QAAzC,CAAb;EACA,MAAMyC,CAAC,GAAGD,IAAI,YAAYE,kBAAhB,GAAwBF,IAAI,CAACG,IAA7B,GAAoCH,IAAI,CAACI,GAAnD,CAJ2G,CAK3G;;EACA,MAAMC,CAAC,GAAG,MAAO,IAAIJ,CAAC,CAACK,QAAN,CAAe3B,sBAAQC,GAAvB,EAA4BrB,IAAI,CAACR,eAAjC,CAAD,CAAoDwD,OAApD,CAA4DrD,UAA5D,CAAuEK,IAAI,CAACiC,EAA5E,EAAgFgB,IAAhF,EAAhB;EACA,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,UAAU,GAAG,KAAjB;EACA,MAAMC,CAAC,qBAAapD,IAAb,CAAP;;EACA,IAAI8C,CAAC,CAAC,CAAD,CAAD,KAAS,4CAAb,EAA2D;IACzD;IACAI,QAAQ,GAAG,MAAMnB,4BAAiBhC,OAAjB,EAA0BC,IAAI,CAACT,KAA/B,EAAsCuD,CAAC,CAAC,CAAD,CAAvC,EAA4C7C,QAA5C,CAAjB;;IACA,IAAID,IAAI,CAACqD,MAAT,EAAiB;MACfF,UAAU,GAAG,sBAAb;IACD;EACF,CAND,MAMO,IAAInD,IAAI,CAACqD,MAAT,EAAiB;IACtB,MAAM,IAAIxC,KAAJ,CAAU,wDAAV,CAAN;EACD,CAFM,MAEA;IACLuC,CAAC,CAACf,MAAF,GAAWrC,IAAI,CAACqC,MAAL,GAAcrC,IAAI,CAACqC,MAAnB,GAA4BrC,IAAI,CAACsD,QAA5C;EACD;;EAED,MAAMvC,MAAM,GAAG,CAACf,IAAI,CAACiC,EAAN,EAAU,KAAK,IAAIjB,sBAAJ,CAAchB,IAAI,CAACsD,QAAnB,EAA6BC,YAA7B,CAA0C,IAAIvC,sBAAJ,CAAc,EAAd,EAAkBwC,GAAlB,CAAsBN,QAAtB,CAA1C,EAA2EhC,QAA3E,CAAoF,EAApF,CAAuF,EAAtG,CAAf;;EACA,IAAIlB,IAAI,CAACqD,MAAT,EAAiB;IACftC,MAAM,CAAC0C,IAAP,CAAYzD,IAAI,CAACqD,MAAL,CAAYlB,IAAZ,EAAZ;EACD;;EACD,OAAO,MAAMjC,8BAAoBH,OAApB,EAA6BqD,CAA7B,EAAgC/C,8BAAhC,EAAwD8C,UAAxD,EAAoEpC,MAApE,EAA4EI,SAA5E,EAAuFlB,QAAvF,EAAiGmB,sBAAQC,GAAzG,CAAb;AACD,CA3BM;;AAAM3B,4BAAiB8C,iBAAjB;AA6Bb;;;;;;;;AAOO,MAAMkB,oBAAoB,GAAG,OAAO3D,OAAP,EAAyBC,IAAzB,EAAuDC,QAAvD,KAA4E;EAC9G,MAAMR,qBAAaO,IAAb,EAAmBK,8BAAnB,CAAN;EACA,MAAMU,MAAM,GAAG,CAACf,IAAI,CAACiC,EAAN,CAAf;EACA,OAAO,MAAM/B,8BAAoBH,OAApB,EAA6BC,IAA7B,EAAmCK,8BAAnC,EAA2D,eAA3D,EAA4EU,MAA5E,EAAoFI,SAApF,EAA+FlB,QAA/F,EAAyGmB,sBAAQC,GAAjH,CAAb;AACD,CAJM;;AAAM3B,+BAAoBgE,oBAApB;AAMb;;;;;;;;AAOO,MAAMC,oBAAoB,GAAG,OAAO5D,OAAP,EAAyBC,IAAzB,EAAuDC,QAAvD,KAA4E;EAC9G,MAAMR,qBAAaO,IAAb,EAAmBK,8BAAnB,CAAN;EACA,MAAMU,MAAM,GAAG,CAACf,IAAI,CAACiC,EAAN,CAAf;EACA,OAAO,MAAM/B,8BAAoBH,OAApB,EAA6BC,IAA7B,EAAmCK,8BAAnC,EAA2D,eAA3D,EAA4EU,MAA5E,EAAoFI,SAApF,EAA+FlB,QAA/F,EAAyGmB,sBAAQC,GAAjH,CAAb;AACD,CAJM;;AAAM3B,+BAAoBiE,oBAApB;AAMb;;;;;;;;AAOO,MAAMC,oBAAoB,GAAG,OAAO7D,OAAP,EAAyBC,IAAzB,EAAiDC,QAAjD,KAClCC,4BAAkBF,IAAI,CAACT,KAAvB,EAA8B,MAAMG,gCAAwBK,OAAxB,EAAiCC,IAAjC,EAAuCC,QAAvC,CAApC,EAAsFD,IAAI,CAACG,WAA3F,CADK;;AAAMT,+BAAoBkE,oBAApB;AAEb;;;;;;;;AAOO,MAAMC,6BAA6B,GAAG,OAAO9D,OAAP,EAAyBC,IAAzB,EAA8DC,QAA9D,KAC3CC,4BAAkBF,IAAI,CAACT,KAAvB,EAA8B,MAAMG,yCAAiCK,OAAjC,EAA0CC,IAA1C,EAAgDC,QAAhD,CAApC,EAA+FD,IAAI,CAACG,WAApG,CADK;;AAAMT,wCAA6BmE,6BAA7B;AAEb;;;;;;;;AAOO,MAAMC,6BAA6B,GAAG,OAAO/D,OAAP,EAAyBC,IAAzB,EAAmDC,QAAnD,KAC3CC,4BAAkBF,IAAI,CAACT,KAAvB,EAA8B,MAAMG,yCAAiCK,OAAjC,EAA0CC,IAA1C,EAAgDC,QAAhD,CAApC,EAA+FD,IAAI,CAACG,WAApG,CADK;;AAAMT,wCAA6BoE,6BAA7B;AAEb;;;;;;;;AAOO,MAAMC,+BAA+B,GAAG,OAAOhE,OAAP,EAAyBC,IAAzB,EAA6CC,QAA7C,KAC7CC,4BAAkBF,IAAI,CAACT,KAAvB,EAA8B,MAAMG,2CAAmCK,OAAnC,EAA4CC,IAA5C,EAAkDC,QAAlD,CAApC,EAAiGD,IAAI,CAACG,WAAtG,CADK;;AAAMT,0CAA+BqE,+BAA/B;AAEb;;;;;;;;;;AASO,MAAMC,iBAAiB,GAAG,OAAOjE,OAAP,EAAyBC,IAAzB,EAA8CC,QAA9C,KAC/BC,4BAAkBF,IAAI,CAACT,KAAvB,EAA8B,MAAMG,6BAAqBK,OAArB,EAA8BC,IAA9B,EAAoCC,QAApC,CAApC,EAAmFD,IAAI,CAACG,WAAxF,CADK;;AAAMT,4BAAiBsE,iBAAjB;AAEb;;;;;;;;;AAQO,MAAMC,cAAc,GAAG,OAAOlE,OAAP,EAAyBC,IAAzB,EAAuDC,QAAvD,KAC5BC,4BAAkBF,IAAI,CAACT,KAAvB,EAA8B,MAAMG,0BAAkBK,OAAlB,EAA2BC,IAA3B,EAAiCC,QAAjC,CAApC,EAAgFD,IAAI,CAACG,WAArF,CADK;;AAAMT,yBAAcuE,cAAd;AAEb;;;;;;;;AAOO,MAAMC,iBAAiB,GAAG,OAAOnE,OAAP,EAAyBC,IAAzB,EAAuDC,QAAvD,KAC/BC,4BAAkBF,IAAI,CAACT,KAAvB,EAA8B,MAAMG,6BAAqBK,OAArB,EAA8BC,IAA9B,EAAoCC,QAApC,CAApC,EAAmFD,IAAI,CAACG,WAAxF,CADK;;AAAMT,4BAAiBwE,iBAAjB;AAGb;;;;;;;;AAOO,MAAMC,iBAAiB,GAAG,OAAOpE,OAAP,EAAyBC,IAAzB,EAAuDC,QAAvD,KAC/BC,4BAAkBF,IAAI,CAACT,KAAvB,EAA8B,MAAMG,6BAAqBK,OAArB,EAA8BC,IAA9B,EAAoCC,QAApC,CAApC,EAAmFD,IAAI,CAACG,WAAxF,CADK;;AAAMT,4BAAiByE,iBAAjB","names":["getAuctionFee","chain","contractAddress","tatum_1","exports","getAuction","auctionId","getAuctionFeeRecipient","deployAuction","testnet","body","provider","helpers_1","signatureId","prepareDeployAuction","model_1","CELO","transaction_1","ONE","ETH","BSC","MATIC","KLAY","Error","prepareAuctionUpdateFee","params","bignumber_js_1","auctionFee","toString","undefined","marketplace_1","abi","prepareAuctionUpdateFeeRecipient","feeRecipient","prepareAuctionApproveNftTransfer","isErc721","spender","tokenId","erc721_abi_1","erc1155_abi_1","prepareAuctionApproveErc20Transfer","fungible_1","prepareAuctionCreate","id","nftAddress","trim","seller","amount","endedAt","erc20Address","prepareAuctionBid","web3","c","caver_js_1","klay","eth","a","Contract","methods","call","decimals","methodName","b","bidder","bidValue","multipliedBy","pow","push","prepareAuctionCancel","prepareAuctionSettle","sendAuctionUpdateFee","sendAuctionUpdateFeeRecipient","sendAuctionApproveNftTransfer","sendAuctionApproveErc20Transfer","sendAuctionCreate","sendAuctionBid","sendAuctionCancel","sendAuctionSettle"],"sourceRoot":"","sources":["../../../../src/nft/marketplace/auction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}