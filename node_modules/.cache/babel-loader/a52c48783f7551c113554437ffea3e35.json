{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractTransaction = require('../abstractTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  isNot\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeValueTransfer)) throw new Error(`Cannot decode to ValueTransfer. The prefix must be ${TX_TYPE_TAG.TxTypeValueTransfer}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, to, value, from, signatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    from,\n    signatures\n  };\n}\n/**\n * Represents a value transfer transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/basic#txtypevaluetransfer|ValueTransfer} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractTransaction\n */\n\n\nclass ValueTransfer extends AbstractTransaction {\n  /**\n   * Creates a value transfer transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a ValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {ValueTransfer}\n   */\n  static create(createTxObj, klaytnCall) {\n    return new ValueTransfer(createTxObj, klaytnCall);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a ValueTransfer transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded value transfer transaction.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {ValueTransfer}\n   */\n\n\n  static decode(rlpEncoded, klaytnCall) {\n    return new ValueTransfer(_decode(rlpEncoded), klaytnCall);\n  }\n  /**\n   * Creates a value transfer transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a ValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   */\n\n\n  constructor(createTxObj, klaytnCall) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeValueTransfer, createTxObj, klaytnCall);\n    this.to = createTxObj.to;\n    this.value = createTxObj.value;\n    if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get gasPrice() {\n    return this._gasPrice;\n  }\n\n  set gasPrice(g) {\n    this._gasPrice = utils.numberToHex(g);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`);\n    this._to = address.toLowerCase();\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   *\n   * @example\n   * const result = tx.getRLPEncoding()\n   *\n   * @return {string} An RLP-encoded transaction string.\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeValueTransfer + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), signatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * This method has to be overrided in classes which extends AbstractTransaction.\n   * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n   *\n   * @example\n   * const result = tx.getCommonRLPEncodingForSignature()\n   *\n   * @return {string} An RLP-encoded transaction string without signature.\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeValueTransfer, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase()]);\n  }\n  /**\n   * Fills in the optional variables in transaction.\n   *\n   * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n   * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n   *\n   * @example\n   * await tx.fillTransaction()\n   */\n\n\n  async fillTransaction() {\n    const [chainId, gasPrice, nonce] = await Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce]);\n    this.chainId = chainId;\n    this.gasPrice = gasPrice;\n    this.nonce = nonce;\n  }\n  /**\n   * Checks that member variables that can be defined by the user are defined.\n   * If there is an undefined variable, an error occurs.\n   *\n   * @ignore\n   */\n\n\n  validateOptionalValues() {\n    super.validateOptionalValues();\n    if (this.gasPrice === undefined) throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`);\n  }\n\n}\n\nmodule.exports = ValueTransfer;","map":{"version":3,"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","isNot","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeValueTransfer","Error","typeDettached","slice","nonce","gasPrice","gas","to","value","from","signatures","decode","trimLeadingZero","ValueTransfer","create","createTxObj","klaytnCall","constructor","isString","undefined","_gasPrice","g","numberToHex","_to","address","isAddress","toLowerCase","_value","val","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","getCommonRLPEncodingForSignature","fillTransaction","chainId","Promise","all","getChainId","getGasPrice","getNonce","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/valueTransfer/valueTransfer.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractTransaction = require('../abstractTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG, isNot } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeValueTransfer))\n        throw new Error(`Cannot decode to ValueTransfer. The prefix must be ${TX_TYPE_TAG.TxTypeValueTransfer}: ${rlpEncoded}`)\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, to, value, from, signatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        to,\n        value: utils.trimLeadingZero(value),\n        from,\n        signatures,\n    }\n}\n\n/**\n * Represents a value transfer transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/basic#txtypevaluetransfer|ValueTransfer} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractTransaction\n */\nclass ValueTransfer extends AbstractTransaction {\n    /**\n     * Creates a value transfer transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a ValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {ValueTransfer}\n     */\n    static create(createTxObj, klaytnCall) {\n        return new ValueTransfer(createTxObj, klaytnCall)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a ValueTransfer transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded value transfer transaction.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {ValueTransfer}\n     */\n    static decode(rlpEncoded, klaytnCall) {\n        return new ValueTransfer(_decode(rlpEncoded), klaytnCall)\n    }\n\n    /**\n     * Creates a value transfer transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a ValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     */\n    constructor(createTxObj, klaytnCall) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeValueTransfer, createTxObj, klaytnCall)\n\n        this.to = createTxObj.to\n        this.value = createTxObj.value\n\n        if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice\n    }\n\n    /**\n     * @type {string}\n     */\n    get gasPrice() {\n        return this._gasPrice\n    }\n\n    set gasPrice(g) {\n        this._gasPrice = utils.numberToHex(g)\n    }\n\n    /**\n     * @type {string}\n     */\n    get to() {\n        return this._to\n    }\n\n    set to(address) {\n        if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`)\n        this._to = address.toLowerCase()\n    }\n\n    /**\n     * @type {string}\n     */\n    get value() {\n        return this._value\n    }\n\n    set value(val) {\n        this._value = utils.numberToHex(val)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     *\n     * @example\n     * const result = tx.getRLPEncoding()\n     *\n     * @return {string} An RLP-encoded transaction string.\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeValueTransfer +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.to.toLowerCase(),\n                Bytes.fromNat(this.value),\n                this.from.toLowerCase(),\n                signatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * This method has to be overrided in classes which extends AbstractTransaction.\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n     *\n     * @example\n     * const result = tx.getCommonRLPEncodingForSignature()\n     *\n     * @return {string} An RLP-encoded transaction string without signature.\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeValueTransfer,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.from.toLowerCase(),\n        ])\n    }\n\n    /**\n     * Fills in the optional variables in transaction.\n     *\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n     *\n     * @example\n     * await tx.fillTransaction()\n     */\n    async fillTransaction() {\n        const [chainId, gasPrice, nonce] = await Promise.all([\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\n            isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice,\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\n        ])\n\n        this.chainId = chainId\n        this.gasPrice = gasPrice\n        this.nonce = nonce\n    }\n\n    /**\n     * Checks that member variables that can be defined by the user are defined.\n     * If there is an undefined variable, an error occurs.\n     *\n     * @ignore\n     */\n    validateOptionalValues() {\n        super.validateOptionalValues()\n        if (this.gasPrice === undefined)\n            throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`)\n    }\n}\n\nmodule.exports = ValueTransfer\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}