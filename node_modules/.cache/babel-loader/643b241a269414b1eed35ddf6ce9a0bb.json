{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar inherits = require('inherits');\n\nvar Transaction = require('../transaction');\n\nvar Input = require('./input');\n\nvar Output = require('../output');\n\nvar $ = require('../../util/preconditions');\n\nvar Script = require('../../script');\n\nvar Signature = require('../../crypto/signature');\n\nvar Sighash = require('../sighash');\n\nvar PublicKey = require('../../publickey');\n\nvar BufferUtil = require('../../util/buffer');\n\nvar TransactionSignature = require('../signature');\n/**\n * @constructor\n */\n\n\nfunction MultiSigInput(input, pubkeys, threshold, signatures) {\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  this.publicKeys = _.sortBy(pubkeys, function (publicKey) {\n    return publicKey.toString('hex');\n  });\n  $.checkState(Script.buildMultisigOut(this.publicKeys, threshold).equals(this.output.script), 'Provided public keys don\\'t match to the provided output script');\n  this.publicKeyIndex = {};\n\n  _.each(this.publicKeys, function (publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n\n  this.threshold = threshold; // Empty array of signatures\n\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\n\ninherits(MultiSigInput, Input);\n\nMultiSigInput.prototype.toObject = function () {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function (publicKey) {\n    return publicKey.toString();\n  });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigInput.prototype._deserializeSignatures = function (signatures) {\n  return _.map(signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigInput.prototype._serializeSignatures = function () {\n  return _.map(this.signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n\n    return signature.toObject();\n  });\n};\n\nMultiSigInput.prototype.getSignatures = function (transaction, privateKey, index, sigtype) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  var self = this;\n  var results = [];\n\n  _.each(this.publicKeys, function (publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.output.script),\n        sigtype: sigtype\n      }));\n    }\n  });\n\n  return results;\n};\n\nMultiSigInput.prototype.addSignature = function (transaction, signature) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]), 'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature));\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n\n  this._updateScript();\n\n  return this;\n};\n\nMultiSigInput.prototype._updateScript = function () {\n  this.setScript(Script.buildMultisigIn(this.publicKeys, this.threshold, this._createSignatures()));\n  return this;\n};\n\nMultiSigInput.prototype._createSignatures = function () {\n  return _.map(_.filter(this.signatures, function (signature) {\n    return !_.isUndefined(signature);\n  }), function (signature) {\n    return BufferUtil.concat([signature.signature.toDER(), BufferUtil.integerAsSingleByteBuffer(signature.sigtype)]);\n  });\n};\n\nMultiSigInput.prototype.clearSignatures = function () {\n  this.signatures = new Array(this.publicKeys.length);\n\n  this._updateScript();\n};\n\nMultiSigInput.prototype.isFullySigned = function () {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigInput.prototype.countMissingSignatures = function () {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigInput.prototype.countSignatures = function () {\n  return _.reduce(this.signatures, function (sum, signature) {\n    return sum + !!signature;\n  }, 0);\n};\n\nMultiSigInput.prototype.publicKeysWithoutSignature = function () {\n  var self = this;\n  return _.filter(this.publicKeys, function (publicKey) {\n    return !self.signatures[self.publicKeyIndex[publicKey.toString()]];\n  });\n};\n\nMultiSigInput.prototype.isValidSignature = function (transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.output.script);\n};\n/**\n *\n * @param {Buffer[]} signatures\n * @param {PublicKey[]} publicKeys\n * @param {Transaction} transaction\n * @param {Integer} inputIndex\n * @param {Input} input\n * @returns {TransactionSignature[]}\n */\n\n\nMultiSigInput.normalizeSignatures = function (transaction, input, inputIndex, signatures, publicKeys) {\n  return publicKeys.map(function (pubKey) {\n    var signatureMatch = null;\n    signatures = signatures.filter(function (signatureBuffer) {\n      if (signatureMatch) {\n        return true;\n      }\n\n      var signature = new TransactionSignature({\n        signature: Signature.fromTxFormat(signatureBuffer),\n        publicKey: pubKey,\n        prevTxId: input.prevTxId,\n        outputIndex: input.outputIndex,\n        inputIndex: inputIndex,\n        sigtype: Signature.SIGHASH_ALL\n      });\n      signature.signature.nhashtype = signature.sigtype;\n      var isMatch = Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, input.output.script);\n\n      if (isMatch) {\n        signatureMatch = signature;\n        return false;\n      }\n\n      return true;\n    });\n    return signatureMatch ? signatureMatch : null;\n  });\n};\n\nMultiSigInput.OPCODES_SIZE = 1; // 0\n\nMultiSigInput.SIGNATURE_SIZE = 73; // size (1) + DER (<=72)\n\nMultiSigInput.prototype._estimateSize = function () {\n  return MultiSigInput.OPCODES_SIZE + this.threshold * MultiSigInput.SIGNATURE_SIZE;\n};\n\nmodule.exports = MultiSigInput;","map":{"version":3,"names":["_","require","inherits","Transaction","Input","Output","$","Script","Signature","Sighash","PublicKey","BufferUtil","TransactionSignature","MultiSigInput","input","pubkeys","threshold","signatures","apply","arguments","self","publicKeys","sortBy","publicKey","toString","checkState","buildMultisigOut","equals","output","script","publicKeyIndex","each","index","_deserializeSignatures","Array","length","prototype","toObject","obj","map","_serializeSignatures","signature","undefined","getSignatures","transaction","privateKey","sigtype","SIGHASH_ALL","results","push","prevTxId","outputIndex","inputIndex","sign","addSignature","isFullySigned","checkArgument","isUndefined","isValidSignature","_updateScript","setScript","buildMultisigIn","_createSignatures","filter","concat","toDER","integerAsSingleByteBuffer","clearSignatures","countSignatures","countMissingSignatures","reduce","sum","publicKeysWithoutSignature","nhashtype","verify","normalizeSignatures","pubKey","signatureMatch","signatureBuffer","fromTxFormat","isMatch","OPCODES_SIZE","SIGNATURE_SIZE","_estimateSize","module","exports"],"sources":["C:/Users/acer/node_modules/bitcore-lib-doge/lib/transaction/input/multisig.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar inherits = require('inherits');\nvar Transaction = require('../transaction');\nvar Input = require('./input');\nvar Output = require('../output');\nvar $ = require('../../util/preconditions');\n\nvar Script = require('../../script');\nvar Signature = require('../../crypto/signature');\nvar Sighash = require('../sighash');\nvar PublicKey = require('../../publickey');\nvar BufferUtil = require('../../util/buffer');\nvar TransactionSignature = require('../signature');\n\n/**\n * @constructor\n */\nfunction MultiSigInput(input, pubkeys, threshold, signatures) {\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  this.publicKeys = _.sortBy(pubkeys, function(publicKey) { return publicKey.toString('hex'); });\n  $.checkState(Script.buildMultisigOut(this.publicKeys, threshold).equals(this.output.script),\n    'Provided public keys don\\'t match to the provided output script');\n  this.publicKeyIndex = {};\n  _.each(this.publicKeys, function(publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n  this.threshold = threshold;\n  // Empty array of signatures\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\ninherits(MultiSigInput, Input);\n\nMultiSigInput.prototype.toObject = function() {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function(publicKey) { return publicKey.toString(); });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigInput.prototype._deserializeSignatures = function(signatures) {\n  return _.map(signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigInput.prototype._serializeSignatures = function() {\n  return _.map(this.signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return signature.toObject();\n  });\n};\n\nMultiSigInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n\n  var self = this;\n  var results = [];\n  _.each(this.publicKeys, function(publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.output.script),\n        sigtype: sigtype\n      }));\n    }\n  });\n\n  return results;\n};\n\nMultiSigInput.prototype.addSignature = function(transaction, signature) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]),\n    'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature));\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n  this._updateScript();\n  return this;\n};\n\nMultiSigInput.prototype._updateScript = function() {\n  this.setScript(Script.buildMultisigIn(\n    this.publicKeys,\n    this.threshold,\n    this._createSignatures()\n  ));\n  return this;\n};\n\nMultiSigInput.prototype._createSignatures = function() {\n  return _.map(\n    _.filter(this.signatures, function(signature) { return !_.isUndefined(signature); }),\n    function(signature) {\n      return BufferUtil.concat([\n        signature.signature.toDER(),\n        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)\n      ]);\n    }\n  );\n};\n\nMultiSigInput.prototype.clearSignatures = function() {\n  this.signatures = new Array(this.publicKeys.length);\n  this._updateScript();\n};\n\nMultiSigInput.prototype.isFullySigned = function() {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigInput.prototype.countMissingSignatures = function() {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigInput.prototype.countSignatures = function() {\n  return _.reduce(this.signatures, function(sum, signature) {\n    return sum + (!!signature);\n  }, 0);\n};\n\nMultiSigInput.prototype.publicKeysWithoutSignature = function() {\n  var self = this;\n  return _.filter(this.publicKeys, function(publicKey) {\n    return !(self.signatures[self.publicKeyIndex[publicKey.toString()]]);\n  });\n};\n\nMultiSigInput.prototype.isValidSignature = function(transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(\n    transaction,\n    signature.signature,\n    signature.publicKey,\n    signature.inputIndex,\n    this.output.script\n  );\n};\n\n/**\n *\n * @param {Buffer[]} signatures\n * @param {PublicKey[]} publicKeys\n * @param {Transaction} transaction\n * @param {Integer} inputIndex\n * @param {Input} input\n * @returns {TransactionSignature[]}\n */\nMultiSigInput.normalizeSignatures = function(transaction, input, inputIndex, signatures, publicKeys) {\n  return publicKeys.map(function (pubKey) {\n    var signatureMatch = null;\n    signatures = signatures.filter(function (signatureBuffer) {\n      if (signatureMatch) {\n        return true;\n      }\n\n      var signature = new TransactionSignature({\n        signature: Signature.fromTxFormat(signatureBuffer),\n        publicKey: pubKey,\n        prevTxId: input.prevTxId,\n        outputIndex: input.outputIndex,\n        inputIndex: inputIndex,\n        sigtype: Signature.SIGHASH_ALL\n      });\n\n      signature.signature.nhashtype = signature.sigtype;\n      var isMatch = Sighash.verify(\n          transaction,\n          signature.signature,\n          signature.publicKey,\n          signature.inputIndex,\n          input.output.script\n      );\n\n      if (isMatch) {\n        signatureMatch = signature;\n        return false;\n      }\n\n      return true;\n    });\n\n    return signatureMatch ? signatureMatch : null;\n  });\n};\n\nMultiSigInput.OPCODES_SIZE = 1; // 0\nMultiSigInput.SIGNATURE_SIZE = 73; // size (1) + DER (<=72)\n\nMultiSigInput.prototype._estimateSize = function() {\n  return MultiSigInput.OPCODES_SIZE +\n    this.threshold * MultiSigInput.SIGNATURE_SIZE;\n};\n\nmodule.exports = MultiSigInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}