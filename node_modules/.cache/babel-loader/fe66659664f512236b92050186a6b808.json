{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Keypair = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _tweetnacl = require('tweetnacl');\n\nvar _tweetnacl2 = _interopRequireDefault(_tweetnacl);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _signing = require('./signing');\n\nvar _strkey = require('./strkey');\n\nvar _hashing = require('./hashing');\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * `Keypair` represents public (and secret) keys of the account.\n *\n * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other\n * public-key signature systems.\n *\n * Use more convenient methods to create `Keypair` object:\n * * `{@link Keypair.fromPublicKey}`\n * * `{@link Keypair.fromSecret}`\n * * `{@link Keypair.random}`\n *\n * @constructor\n * @param {object} keys At least one of keys must be provided.\n * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)\n * @param {Buffer} [keys.publicKey] Raw public key\n * @param {Buffer} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)\n */\n\n\nvar Keypair = exports.Keypair = function () {\n  function Keypair(keys) {\n    _classCallCheck(this, Keypair);\n\n    if (keys.type !== 'ed25519') {\n      throw new Error('Invalid keys type');\n    }\n\n    this.type = keys.type;\n\n    if (keys.secretKey) {\n      keys.secretKey = Buffer.from(keys.secretKey);\n\n      if (keys.secretKey.length !== 32) {\n        throw new Error('secretKey length is invalid');\n      }\n\n      this._secretSeed = keys.secretKey;\n      this._publicKey = (0, _signing.generate)(keys.secretKey);\n      this._secretKey = Buffer.concat([keys.secretKey, this._publicKey]);\n\n      if (keys.publicKey && !this._publicKey.equals(Buffer.from(keys.publicKey))) {\n        throw new Error('secretKey does not match publicKey');\n      }\n    } else {\n      this._publicKey = Buffer.from(keys.publicKey);\n\n      if (this._publicKey.length !== 32) {\n        throw new Error('publicKey length is invalid');\n      }\n    }\n  }\n  /**\n   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending\n   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.\n   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)\n   * @returns {Keypair}\n   */\n\n\n  _createClass(Keypair, [{\n    key: 'xdrAccountId',\n    value: function xdrAccountId() {\n      return new _stellarXdr_generated2.default.AccountId.publicKeyTypeEd25519(this._publicKey);\n    }\n  }, {\n    key: 'xdrPublicKey',\n    value: function xdrPublicKey() {\n      return new _stellarXdr_generated2.default.PublicKey.publicKeyTypeEd25519(this._publicKey);\n    }\n    /**\n     * Creates a {@link xdr.MuxedAccount} object from the public key.\n     *\n     * You will get a different type of muxed account depending on whether or not\n     * you pass an ID.\n     *\n     * @param  {string} [id] - stringified integer indicating the underlying muxed\n     *     ID of the new account object\n     *\n     * @return {xdr.MuxedAccount}\n     */\n\n  }, {\n    key: 'xdrMuxedAccount',\n    value: function xdrMuxedAccount(id) {\n      if (!(0, _isUndefined2.default)(id)) {\n        if (!(0, _isString2.default)(id)) {\n          throw new TypeError('expected string for ID, got ' + (typeof id === 'undefined' ? 'undefined' : _typeof(id)));\n        }\n\n        return _stellarXdr_generated2.default.MuxedAccount.keyTypeMuxedEd25519(new _stellarXdr_generated2.default.MuxedAccountMed25519({\n          id: _stellarXdr_generated2.default.Uint64.fromString(id),\n          ed25519: this._publicKey\n        }));\n      }\n\n      return new _stellarXdr_generated2.default.MuxedAccount.keyTypeEd25519(this._publicKey);\n    }\n    /**\n     * Returns raw public key\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'rawPublicKey',\n    value: function rawPublicKey() {\n      return this._publicKey;\n    }\n  }, {\n    key: 'signatureHint',\n    value: function signatureHint() {\n      var a = this.xdrAccountId().toXDR();\n      return a.slice(a.length - 4);\n    }\n    /**\n     * Returns public key associated with this `Keypair` object.\n     * @returns {string}\n     */\n\n  }, {\n    key: 'publicKey',\n    value: function publicKey() {\n      return _strkey.StrKey.encodeEd25519PublicKey(this._publicKey);\n    }\n    /**\n     * Returns secret key associated with this `Keypair` object\n     * @returns {string}\n     */\n\n  }, {\n    key: 'secret',\n    value: function secret() {\n      if (!this._secretSeed) {\n        throw new Error('no secret key available');\n      }\n\n      if (this.type === 'ed25519') {\n        return _strkey.StrKey.encodeEd25519SecretSeed(this._secretSeed);\n      }\n\n      throw new Error('Invalid Keypair type');\n    }\n    /**\n     * Returns raw secret key.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'rawSecretKey',\n    value: function rawSecretKey() {\n      return this._secretSeed;\n    }\n    /**\n     * Returns `true` if this `Keypair` object contains secret key and can sign.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'canSign',\n    value: function canSign() {\n      return !!this._secretKey;\n    }\n    /**\n     * Signs data.\n     * @param {Buffer} data Data to sign\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'sign',\n    value: function sign(data) {\n      if (!this.canSign()) {\n        throw new Error('cannot sign: no secret key available');\n      }\n\n      return (0, _signing.sign)(data, this._secretKey);\n    }\n    /**\n     * Verifies if `signature` for `data` is valid.\n     * @param {Buffer} data Signed data\n     * @param {Buffer} signature Signature\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'verify',\n    value: function verify(data, signature) {\n      return (0, _signing.verify)(data, signature, this._publicKey);\n    }\n  }, {\n    key: 'signDecorated',\n    value: function signDecorated(data) {\n      var signature = this.sign(data);\n      var hint = this.signatureHint();\n      return new _stellarXdr_generated2.default.DecoratedSignature({\n        hint: hint,\n        signature: signature\n      });\n    }\n  }], [{\n    key: 'fromSecret',\n    value: function fromSecret(secret) {\n      var rawSecret = _strkey.StrKey.decodeEd25519SecretSeed(secret);\n\n      return this.fromRawEd25519Seed(rawSecret);\n    }\n    /**\n     * Creates a new `Keypair` object from ed25519 secret key seed raw bytes.\n     *\n     * @param {Buffer} rawSeed Raw 32-byte ed25519 secret key seed\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromRawEd25519Seed',\n    value: function fromRawEd25519Seed(rawSeed) {\n      return new this({\n        type: 'ed25519',\n        secretKey: rawSeed\n      });\n    }\n    /**\n     * Returns `Keypair` object representing network master key.\n     * @param {string} networkPassphrase passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'master',\n    value: function master(networkPassphrase) {\n      if (!networkPassphrase) {\n        throw new Error('No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.');\n      }\n\n      return this.fromRawEd25519Seed((0, _hashing.hash)(networkPassphrase));\n    }\n    /**\n     * Creates a new `Keypair` object from public key.\n     * @param {string} publicKey public key (ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`)\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromPublicKey',\n    value: function fromPublicKey(publicKey) {\n      publicKey = _strkey.StrKey.decodeEd25519PublicKey(publicKey);\n\n      if (publicKey.length !== 32) {\n        throw new Error('Invalid Stellar public key');\n      }\n\n      return new this({\n        type: 'ed25519',\n        publicKey: publicKey\n      });\n    }\n    /**\n     * Create a random `Keypair` object.\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'random',\n    value: function random() {\n      var secret = _tweetnacl2.default.randomBytes(32);\n\n      return this.fromRawEd25519Seed(secret);\n    }\n  }]);\n\n  return Keypair;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","Keypair","undefined","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","_tweetnacl","require","_tweetnacl2","_interopRequireDefault","_isUndefined","_isUndefined2","_isString","_isString2","_signing","_strkey","_hashing","_stellarXdr_generated","_stellarXdr_generated2","__esModule","default","_classCallCheck","instance","TypeError","keys","type","Error","secretKey","Buffer","from","_secretSeed","_publicKey","generate","_secretKey","concat","publicKey","equals","xdrAccountId","AccountId","publicKeyTypeEd25519","xdrPublicKey","PublicKey","xdrMuxedAccount","id","MuxedAccount","keyTypeMuxedEd25519","MuxedAccountMed25519","Uint64","fromString","ed25519","keyTypeEd25519","rawPublicKey","signatureHint","a","toXDR","slice","StrKey","encodeEd25519PublicKey","secret","encodeEd25519SecretSeed","rawSecretKey","canSign","sign","data","verify","signature","signDecorated","hint","DecoratedSignature","fromSecret","rawSecret","decodeEd25519SecretSeed","fromRawEd25519Seed","rawSeed","master","networkPassphrase","hash","fromPublicKey","decodeEd25519PublicKey","random","randomBytes"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/keypair.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Keypair = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tweetnacl = require('tweetnacl');\n\nvar _tweetnacl2 = _interopRequireDefault(_tweetnacl);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _signing = require('./signing');\n\nvar _strkey = require('./strkey');\n\nvar _hashing = require('./hashing');\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * `Keypair` represents public (and secret) keys of the account.\n *\n * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other\n * public-key signature systems.\n *\n * Use more convenient methods to create `Keypair` object:\n * * `{@link Keypair.fromPublicKey}`\n * * `{@link Keypair.fromSecret}`\n * * `{@link Keypair.random}`\n *\n * @constructor\n * @param {object} keys At least one of keys must be provided.\n * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)\n * @param {Buffer} [keys.publicKey] Raw public key\n * @param {Buffer} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)\n */\nvar Keypair = exports.Keypair = function () {\n  function Keypair(keys) {\n    _classCallCheck(this, Keypair);\n\n    if (keys.type !== 'ed25519') {\n      throw new Error('Invalid keys type');\n    }\n\n    this.type = keys.type;\n\n    if (keys.secretKey) {\n      keys.secretKey = Buffer.from(keys.secretKey);\n\n      if (keys.secretKey.length !== 32) {\n        throw new Error('secretKey length is invalid');\n      }\n\n      this._secretSeed = keys.secretKey;\n      this._publicKey = (0, _signing.generate)(keys.secretKey);\n      this._secretKey = Buffer.concat([keys.secretKey, this._publicKey]);\n\n      if (keys.publicKey && !this._publicKey.equals(Buffer.from(keys.publicKey))) {\n        throw new Error('secretKey does not match publicKey');\n      }\n    } else {\n      this._publicKey = Buffer.from(keys.publicKey);\n\n      if (this._publicKey.length !== 32) {\n        throw new Error('publicKey length is invalid');\n      }\n    }\n  }\n\n  /**\n   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending\n   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.\n   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)\n   * @returns {Keypair}\n   */\n\n\n  _createClass(Keypair, [{\n    key: 'xdrAccountId',\n    value: function xdrAccountId() {\n      return new _stellarXdr_generated2.default.AccountId.publicKeyTypeEd25519(this._publicKey);\n    }\n  }, {\n    key: 'xdrPublicKey',\n    value: function xdrPublicKey() {\n      return new _stellarXdr_generated2.default.PublicKey.publicKeyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Creates a {@link xdr.MuxedAccount} object from the public key.\n     *\n     * You will get a different type of muxed account depending on whether or not\n     * you pass an ID.\n     *\n     * @param  {string} [id] - stringified integer indicating the underlying muxed\n     *     ID of the new account object\n     *\n     * @return {xdr.MuxedAccount}\n     */\n\n  }, {\n    key: 'xdrMuxedAccount',\n    value: function xdrMuxedAccount(id) {\n      if (!(0, _isUndefined2.default)(id)) {\n        if (!(0, _isString2.default)(id)) {\n          throw new TypeError('expected string for ID, got ' + (typeof id === 'undefined' ? 'undefined' : _typeof(id)));\n        }\n\n        return _stellarXdr_generated2.default.MuxedAccount.keyTypeMuxedEd25519(new _stellarXdr_generated2.default.MuxedAccountMed25519({\n          id: _stellarXdr_generated2.default.Uint64.fromString(id),\n          ed25519: this._publicKey\n        }));\n      }\n\n      return new _stellarXdr_generated2.default.MuxedAccount.keyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Returns raw public key\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'rawPublicKey',\n    value: function rawPublicKey() {\n      return this._publicKey;\n    }\n  }, {\n    key: 'signatureHint',\n    value: function signatureHint() {\n      var a = this.xdrAccountId().toXDR();\n\n      return a.slice(a.length - 4);\n    }\n\n    /**\n     * Returns public key associated with this `Keypair` object.\n     * @returns {string}\n     */\n\n  }, {\n    key: 'publicKey',\n    value: function publicKey() {\n      return _strkey.StrKey.encodeEd25519PublicKey(this._publicKey);\n    }\n\n    /**\n     * Returns secret key associated with this `Keypair` object\n     * @returns {string}\n     */\n\n  }, {\n    key: 'secret',\n    value: function secret() {\n      if (!this._secretSeed) {\n        throw new Error('no secret key available');\n      }\n\n      if (this.type === 'ed25519') {\n        return _strkey.StrKey.encodeEd25519SecretSeed(this._secretSeed);\n      }\n\n      throw new Error('Invalid Keypair type');\n    }\n\n    /**\n     * Returns raw secret key.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'rawSecretKey',\n    value: function rawSecretKey() {\n      return this._secretSeed;\n    }\n\n    /**\n     * Returns `true` if this `Keypair` object contains secret key and can sign.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'canSign',\n    value: function canSign() {\n      return !!this._secretKey;\n    }\n\n    /**\n     * Signs data.\n     * @param {Buffer} data Data to sign\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'sign',\n    value: function sign(data) {\n      if (!this.canSign()) {\n        throw new Error('cannot sign: no secret key available');\n      }\n\n      return (0, _signing.sign)(data, this._secretKey);\n    }\n\n    /**\n     * Verifies if `signature` for `data` is valid.\n     * @param {Buffer} data Signed data\n     * @param {Buffer} signature Signature\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'verify',\n    value: function verify(data, signature) {\n      return (0, _signing.verify)(data, signature, this._publicKey);\n    }\n  }, {\n    key: 'signDecorated',\n    value: function signDecorated(data) {\n      var signature = this.sign(data);\n      var hint = this.signatureHint();\n\n      return new _stellarXdr_generated2.default.DecoratedSignature({ hint: hint, signature: signature });\n    }\n  }], [{\n    key: 'fromSecret',\n    value: function fromSecret(secret) {\n      var rawSecret = _strkey.StrKey.decodeEd25519SecretSeed(secret);\n      return this.fromRawEd25519Seed(rawSecret);\n    }\n\n    /**\n     * Creates a new `Keypair` object from ed25519 secret key seed raw bytes.\n     *\n     * @param {Buffer} rawSeed Raw 32-byte ed25519 secret key seed\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromRawEd25519Seed',\n    value: function fromRawEd25519Seed(rawSeed) {\n      return new this({ type: 'ed25519', secretKey: rawSeed });\n    }\n\n    /**\n     * Returns `Keypair` object representing network master key.\n     * @param {string} networkPassphrase passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'master',\n    value: function master(networkPassphrase) {\n      if (!networkPassphrase) {\n        throw new Error('No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.');\n      }\n\n      return this.fromRawEd25519Seed((0, _hashing.hash)(networkPassphrase));\n    }\n\n    /**\n     * Creates a new `Keypair` object from public key.\n     * @param {string} publicKey public key (ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`)\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromPublicKey',\n    value: function fromPublicKey(publicKey) {\n      publicKey = _strkey.StrKey.decodeEd25519PublicKey(publicKey);\n      if (publicKey.length !== 32) {\n        throw new Error('Invalid Stellar public key');\n      }\n      return new this({ type: 'ed25519', publicKey: publicKey });\n    }\n\n    /**\n     * Create a random `Keypair` object.\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'random',\n    value: function random() {\n      var secret = _tweetnacl2.default.randomBytes(32);\n      return this.fromRawEd25519Seed(secret);\n    }\n  }]);\n\n  return Keypair;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script"}