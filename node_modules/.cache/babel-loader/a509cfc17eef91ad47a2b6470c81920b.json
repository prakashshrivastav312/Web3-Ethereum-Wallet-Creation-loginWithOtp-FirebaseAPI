{"ast":null,"code":"'use strict';\n\nvar inherits = require('inherits');\n\nvar $ = require('../../util/preconditions');\n\nvar BufferUtil = require('../../util/buffer');\n\nvar Hash = require('../../crypto/hash');\n\nvar Input = require('./input');\n\nvar Output = require('../output');\n\nvar Sighash = require('../sighash');\n\nvar SighashWitness = require('../sighashwitness');\n\nvar BufferWriter = require('../../encoding/bufferwriter');\n\nvar BufferUtil = require('../../util/buffer');\n\nvar Script = require('../../script');\n\nvar Signature = require('../../crypto/signature');\n\nvar TransactionSignature = require('../signature');\n/**\n * Represents a special kind of input of PayToPublicKeyHash kind.\n * @constructor\n */\n\n\nfunction PublicKeyHashInput() {\n  Input.apply(this, arguments);\n}\n\ninherits(PublicKeyHashInput, Input);\n\nPublicKeyHashInput.prototype.getRedeemScript = function (publicKey) {\n  if (!this.redeemScript) {\n    var redeemScript = Script.buildWitnessV0Out(publicKey);\n\n    if (Script.buildScriptHashOut(redeemScript).equals(this.output.script)) {\n      var scriptSig = new Script();\n      scriptSig.add(redeemScript.toBuffer());\n      this.setScript(scriptSig);\n      this.redeemScript = redeemScript;\n    }\n  }\n\n  return this.redeemScript;\n};\n\nPublicKeyHashInput.prototype.getScriptCode = function (publicKey) {\n  var writer = new BufferWriter();\n  var script;\n\n  if (this.output.script.isScriptHashOut()) {\n    script = this.getRedeemScript(publicKey);\n  } else {\n    script = this.output.script;\n  }\n\n  var scriptBuffer = Script.buildPublicKeyHashOut(script.toAddress()).toBuffer();\n  writer.writeVarintNum(scriptBuffer.length);\n  writer.write(scriptBuffer);\n  return writer.toBuffer();\n};\n\nPublicKeyHashInput.prototype.getSighash = function (transaction, privateKey, index, sigtype) {\n  var scriptCode = this.getScriptCode(privateKey);\n  var satoshisBuffer = this.getSatoshisBuffer();\n  return SighashWitness.sighash(transaction, sigtype, index, scriptCode, satoshisBuffer);\n};\n/* jshint maxparams: 5 */\n\n/**\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key with which to sign the transaction\n * @param {number} index - the index of the input in the transaction input vector\n * @param {number=} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL\n * @param {Buffer=} hashData - the precalculated hash of the public key associated with the privateKey provided\n * @return {Array} of objects that can be\n */\n\n\nPublicKeyHashInput.prototype.getSignatures = function (transaction, privateKey, index, sigtype, hashData) {\n  $.checkState(this.output instanceof Output);\n  hashData = hashData || Hash.sha256ripemd160(privateKey.publicKey.toBuffer());\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  var script;\n\n  if (this.output.script.isScriptHashOut()) {\n    script = this.getRedeemScript(privateKey.publicKey);\n  } else {\n    script = this.output.script;\n  }\n\n  if (script && BufferUtil.equals(hashData, script.getPublicKeyHash())) {\n    return [new TransactionSignature({\n      publicKey: privateKey.publicKey,\n      prevTxId: this.prevTxId,\n      outputIndex: this.outputIndex,\n      inputIndex: index,\n      signature: Sighash.sign(transaction, privateKey, sigtype, index, this.output.script),\n      sigtype: sigtype\n    })];\n  }\n\n  return [];\n};\n/* jshint maxparams: 3 */\n\n/**\n * Add the provided signature\n *\n * @param {Object} signature\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {number=} signature.sigtype\n * @return {PublicKeyHashInput} this, for chaining\n */\n\n\nPublicKeyHashInput.prototype.addSignature = function (transaction, signature) {\n  $.checkState(this.isValidSignature(transaction, signature), 'Signature is invalid');\n  this.setScript(Script.buildPublicKeyHashIn(signature.publicKey, signature.signature.toDER(), signature.sigtype));\n  return this;\n};\n/**\n * Clear the input's signature\n * @return {PublicKeyHashInput} this, for chaining\n */\n\n\nPublicKeyHashInput.prototype.clearSignatures = function () {\n  this.setScript(Script.empty());\n  this.setWitnesses([]);\n  return this;\n};\n/**\n * Query whether the input is signed\n * @return {boolean}\n */\n\n\nPublicKeyHashInput.prototype.isFullySigned = function () {\n  return this.script.isPublicKeyHashIn() || this.hasWitnesses();\n};\n\nPublicKeyHashInput.prototype.isValidSignature = function (transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.output.script);\n};\n\nPublicKeyHashInput.SCRIPT_MAX_SIZE = 73 + 34; // sigsize (1 + 72) + pubkey (1 + 33)\n\nPublicKeyHashInput.prototype._estimateSize = function () {\n  return PublicKeyHashInput.SCRIPT_MAX_SIZE;\n};\n\nmodule.exports = PublicKeyHashInput;","map":{"version":3,"names":["inherits","require","$","BufferUtil","Hash","Input","Output","Sighash","SighashWitness","BufferWriter","Script","Signature","TransactionSignature","PublicKeyHashInput","apply","arguments","prototype","getRedeemScript","publicKey","redeemScript","buildWitnessV0Out","buildScriptHashOut","equals","output","script","scriptSig","add","toBuffer","setScript","getScriptCode","writer","isScriptHashOut","scriptBuffer","buildPublicKeyHashOut","toAddress","writeVarintNum","length","write","getSighash","transaction","privateKey","index","sigtype","scriptCode","satoshisBuffer","getSatoshisBuffer","sighash","getSignatures","hashData","checkState","sha256ripemd160","SIGHASH_ALL","getPublicKeyHash","prevTxId","outputIndex","inputIndex","signature","sign","addSignature","isValidSignature","buildPublicKeyHashIn","toDER","clearSignatures","empty","setWitnesses","isFullySigned","isPublicKeyHashIn","hasWitnesses","nhashtype","verify","SCRIPT_MAX_SIZE","_estimateSize","module","exports"],"sources":["C:/Users/acer/node_modules/bitcore-lib-doge/lib/transaction/input/publickeyhash.js"],"sourcesContent":["'use strict';\n\nvar inherits = require('inherits');\n\nvar $ = require('../../util/preconditions');\nvar BufferUtil = require('../../util/buffer');\n\nvar Hash = require('../../crypto/hash');\nvar Input = require('./input');\nvar Output = require('../output');\nvar Sighash = require('../sighash');\nvar SighashWitness = require('../sighashwitness');\nvar BufferWriter = require('../../encoding/bufferwriter');\nvar BufferUtil = require('../../util/buffer');\nvar Script = require('../../script');\nvar Signature = require('../../crypto/signature');\nvar TransactionSignature = require('../signature');\n\n/**\n * Represents a special kind of input of PayToPublicKeyHash kind.\n * @constructor\n */\nfunction PublicKeyHashInput() {\n  Input.apply(this, arguments);\n}\ninherits(PublicKeyHashInput, Input);\n\nPublicKeyHashInput.prototype.getRedeemScript = function(publicKey) {\n  if (!this.redeemScript) {\n    var redeemScript = Script.buildWitnessV0Out(publicKey);\n    if (Script.buildScriptHashOut(redeemScript).equals(this.output.script)) {\n      var scriptSig = new Script();\n      scriptSig.add(redeemScript.toBuffer());\n      this.setScript(scriptSig);\n      this.redeemScript = redeemScript;\n    }\n  }\n  return this.redeemScript;\n};\n\nPublicKeyHashInput.prototype.getScriptCode = function(publicKey) {\n  var writer = new BufferWriter();\n  var script;\n  if (this.output.script.isScriptHashOut()) {\n    script = this.getRedeemScript(publicKey);\n  } else {\n    script = this.output.script;\n  }\n  var scriptBuffer = Script.buildPublicKeyHashOut(script.toAddress()).toBuffer();\n  writer.writeVarintNum(scriptBuffer.length);\n  writer.write(scriptBuffer);\n  return writer.toBuffer();\n};\n\nPublicKeyHashInput.prototype.getSighash = function(transaction, privateKey, index, sigtype) {\n  var scriptCode = this.getScriptCode(privateKey);\n  var satoshisBuffer = this.getSatoshisBuffer();\n  return SighashWitness.sighash(transaction, sigtype, index, scriptCode, satoshisBuffer);\n};\n\n/* jshint maxparams: 5 */\n/**\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key with which to sign the transaction\n * @param {number} index - the index of the input in the transaction input vector\n * @param {number=} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL\n * @param {Buffer=} hashData - the precalculated hash of the public key associated with the privateKey provided\n * @return {Array} of objects that can be\n */\nPublicKeyHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData) {\n  $.checkState(this.output instanceof Output);\n  hashData = hashData || Hash.sha256ripemd160(privateKey.publicKey.toBuffer());\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n\n  var script;\n  if (this.output.script.isScriptHashOut()) {\n    script = this.getRedeemScript(privateKey.publicKey);\n  } else {\n    script = this.output.script;\n  }\n\n  if (script && BufferUtil.equals(hashData, script.getPublicKeyHash())) {\n    return [new TransactionSignature({\n      publicKey: privateKey.publicKey,\n      prevTxId: this.prevTxId,\n      outputIndex: this.outputIndex,\n      inputIndex: index,\n      signature: Sighash.sign(transaction, privateKey, sigtype, index, this.output.script),\n      sigtype: sigtype\n    })];\n  }\n  return [];\n};\n/* jshint maxparams: 3 */\n\n/**\n * Add the provided signature\n *\n * @param {Object} signature\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {number=} signature.sigtype\n * @return {PublicKeyHashInput} this, for chaining\n */\nPublicKeyHashInput.prototype.addSignature = function(transaction, signature) {\n  $.checkState(this.isValidSignature(transaction, signature), 'Signature is invalid');\n\n  this.setScript(Script.buildPublicKeyHashIn(\n    signature.publicKey,\n    signature.signature.toDER(),\n    signature.sigtype\n  ));\n\n  return this;\n};\n\n/**\n * Clear the input's signature\n * @return {PublicKeyHashInput} this, for chaining\n */\nPublicKeyHashInput.prototype.clearSignatures = function() {\n  this.setScript(Script.empty());\n  this.setWitnesses([]);\n  return this;\n};\n\n/**\n * Query whether the input is signed\n * @return {boolean}\n */\nPublicKeyHashInput.prototype.isFullySigned = function() {\n  return this.script.isPublicKeyHashIn() || this.hasWitnesses();\n};\n\nPublicKeyHashInput.prototype.isValidSignature = function(transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(\n    transaction,\n    signature.signature,\n    signature.publicKey,\n    signature.inputIndex,\n    this.output.script\n  );\n};\n\n\nPublicKeyHashInput.SCRIPT_MAX_SIZE = 73 + 34; // sigsize (1 + 72) + pubkey (1 + 33)\n\nPublicKeyHashInput.prototype._estimateSize = function() {\n  return PublicKeyHashInput.SCRIPT_MAX_SIZE;\n};\n\nmodule.exports = PublicKeyHashInput;"],"mappings":"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"},"metadata":{},"sourceType":"script"}