{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionPayload = void 0;\n\nconst transactionPayloadBuilders_1 = require(\"./smartcontracts/transactionPayloadBuilders\");\n/**\n * The \"data\" field of a {@link Transaction}, as an immutable object.\n */\n\n\nclass TransactionPayload {\n  /**\n   * Creates a TransactionPayload from a utf-8 string or from a buffer.\n   */\n  constructor(data) {\n    this.data = Buffer.from(data || []);\n  }\n  /**\n   * Creates a TransactionPayload from a base-64 encoded string.\n   */\n\n\n  static fromEncoded(encoded) {\n    if (!encoded) {\n      return new TransactionPayload(\"\");\n    }\n\n    let decoded = Buffer.from(encoded, \"base64\").toString();\n    return new TransactionPayload(decoded);\n  }\n  /**\n   * Returns whether the \"data\" is void.\n   */\n\n\n  isEmpty() {\n    return this.data.length == 0;\n  }\n  /**\n   * Returns the base-64 representation of the data.\n   */\n\n\n  encoded() {\n    return this.data.toString(\"base64\");\n  }\n  /**\n   * Returns the data as a buffer.\n   */\n\n\n  valueOf() {\n    return this.data;\n  }\n\n  toString() {\n    return this.data.toString();\n  }\n\n  getEncodedArguments() {\n    return this.toString().split(\"@\");\n  }\n\n  getRawArguments() {\n    return this.getEncodedArguments().map(argument => Buffer.from(argument, \"hex\"));\n  }\n  /**\n   * Returns the length of the data.\n   */\n\n\n  length() {\n    return Buffer.from(this.data).length;\n  }\n  /**\n   * Returns a new builder, to be used for contract deploy transactions.\n   */\n\n\n  static contractDeploy() {\n    return new transactionPayloadBuilders_1.ContractDeployPayloadBuilder();\n  }\n  /**\n   * Returns a new builder, to be used for contract upgrade transactions.\n   */\n\n\n  static contractUpgrade() {\n    return new transactionPayloadBuilders_1.ContractUpgradePayloadBuilder();\n  }\n  /**\n   * Returns a new builder, to be used for contract call transactions.\n   */\n\n\n  static contractCall() {\n    return new transactionPayloadBuilders_1.ContractCallPayloadBuilder();\n  }\n\n}\n\nexports.TransactionPayload = TransactionPayload;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;;;AAGA,MAAaA,kBAAb,CAA+B;EAG3B;;;EAGAC,YAAYC,IAAZ,EAAkC;IAC9B,KAAKA,IAAL,GAAYC,MAAM,CAACC,IAAP,CAAYF,IAAI,IAAI,EAApB,CAAZ;EACH;EAED;;;;;EAGkB,OAAXG,WAAW,CAACC,OAAD,EAAiB;IAC/B,IAAI,CAACA,OAAL,EAAc;MACV,OAAO,IAAIN,kBAAJ,CAAuB,EAAvB,CAAP;IACH;;IAED,IAAIO,OAAO,GAAGJ,MAAM,CAACC,IAAP,CAAYE,OAAZ,EAAqB,QAArB,EAA+BE,QAA/B,EAAd;IACA,OAAO,IAAIR,kBAAJ,CAAuBO,OAAvB,CAAP;EACH;EAED;;;;;EAGAE,OAAO;IACH,OAAO,KAAKP,IAAL,CAAUQ,MAAV,IAAoB,CAA3B;EACH;EAED;;;;;EAGAJ,OAAO;IACH,OAAO,KAAKJ,IAAL,CAAUM,QAAV,CAAmB,QAAnB,CAAP;EACH;EAED;;;;;EAGAG,OAAO;IACH,OAAO,KAAKT,IAAZ;EACH;;EAEDM,QAAQ;IACJ,OAAO,KAAKN,IAAL,CAAUM,QAAV,EAAP;EACH;;EAEDI,mBAAmB;IACf,OAAO,KAAKJ,QAAL,GAAgBK,KAAhB,CAAsB,GAAtB,CAAP;EACH;;EAEDC,eAAe;IACX,OAAO,KAAKF,mBAAL,GAA2BG,GAA3B,CAA+BC,QAAQ,IAAIb,MAAM,CAACC,IAAP,CAAYY,QAAZ,EAAsB,KAAtB,CAA3C,CAAP;EACH;EAED;;;;;EAGAN,MAAM;IACF,OAAOP,MAAM,CAACC,IAAP,CAAY,KAAKF,IAAjB,EAAuBQ,MAA9B;EACH;EAED;;;;;EAGqB,OAAdO,cAAc;IACjB,OAAO,IAAIC,yDAAJ,EAAP;EACH;EAED;;;;;EAGsB,OAAfC,eAAe;IAClB,OAAO,IAAID,0DAAJ,EAAP;EACH;EAED;;;;;EAGmB,OAAZE,YAAY;IACf,OAAO,IAAIF,uDAAJ,EAAP;EACH;;AAjF0B;;AAA/BG","names":["TransactionPayload","constructor","data","Buffer","from","fromEncoded","encoded","decoded","toString","isEmpty","length","valueOf","getEncodedArguments","split","getRawArguments","map","argument","contractDeploy","transactionPayloadBuilders_1","contractUpgrade","contractCall","exports"],"sourceRoot":"","sources":["../src/transactionPayload.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}