{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lodash_1 = __importDefault(require(\"lodash\"));\n\nconst utils = __importStar(require(\"./utils\"));\n\nconst ripple_keypairs_1 = __importDefault(require(\"ripple-keypairs\"));\n\nconst ripple_binary_codec_1 = __importDefault(require(\"ripple-binary-codec\"));\n\nconst hashes_1 = require(\"../common/hashes\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst common_1 = require(\"../common\");\n\nconst validate = utils.common.validate;\n\nfunction computeSignature(tx, privateKey, signAs) {\n  const signingData = signAs ? ripple_binary_codec_1.default.encodeForMultisigning(tx, signAs) : ripple_binary_codec_1.default.encodeForSigning(tx);\n  return ripple_keypairs_1.default.sign(signingData, privateKey);\n}\n\nfunction signWithKeypair(api, txJSON, keypair) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    signAs: ''\n  };\n  validate.sign({\n    txJSON,\n    keypair\n  });\n  const tx = JSON.parse(txJSON);\n\n  if (tx.TxnSignature || tx.Signers) {\n    throw new utils.common.errors.ValidationError('txJSON must not contain \"TxnSignature\" or \"Signers\" properties');\n  }\n\n  checkFee(api, tx.Fee);\n  const txToSignAndEncode = Object.assign({}, tx);\n  txToSignAndEncode.SigningPubKey = options.signAs ? '' : keypair.publicKey;\n\n  if (options.signAs) {\n    const signer = {\n      Account: options.signAs,\n      SigningPubKey: keypair.publicKey,\n      TxnSignature: computeSignature(txToSignAndEncode, keypair.privateKey, options.signAs)\n    };\n    txToSignAndEncode.Signers = [{\n      Signer: signer\n    }];\n  } else {\n    txToSignAndEncode.TxnSignature = computeSignature(txToSignAndEncode, keypair.privateKey);\n  }\n\n  const serialized = ripple_binary_codec_1.default.encode(txToSignAndEncode);\n  checkTxSerialization(serialized, tx);\n  return {\n    signedTransaction: serialized,\n    id: hashes_1.computeBinaryTransactionHash(serialized)\n  };\n}\n\nfunction objectDiff(a, b) {\n  const diffs = {};\n\n  const compare = function (i1, i2, k) {\n    const type1 = Object.prototype.toString.call(i1);\n    const type2 = Object.prototype.toString.call(i2);\n\n    if (type2 === '[object Undefined]') {\n      diffs[k] = null;\n      return;\n    }\n\n    if (type1 !== type2) {\n      diffs[k] = i2;\n      return;\n    }\n\n    if (type1 === '[object Object]') {\n      const objDiff = objectDiff(i1, i2);\n\n      if (Object.keys(objDiff).length > 0) {\n        diffs[k] = objDiff;\n      }\n\n      return;\n    }\n\n    if (type1 === '[object Array]') {\n      if (!lodash_1.default.isEqual(i1, i2)) {\n        diffs[k] = i2;\n      }\n\n      return;\n    }\n\n    if (type1 === '[object Function]') {\n      if (i1.toString() !== i2.toString()) {\n        diffs[k] = i2;\n      }\n\n      return;\n    }\n\n    if (i1 !== i2) {\n      diffs[k] = i2;\n    }\n  };\n\n  for (const key in a) {\n    if (a.hasOwnProperty(key)) {\n      compare(a[key], b[key], key);\n    }\n  }\n\n  for (const key in b) {\n    if (b.hasOwnProperty(key)) {\n      if (!a[key] && a[key] !== b[key]) {\n        diffs[key] = b[key];\n      }\n    }\n  }\n\n  return diffs;\n}\n\nfunction checkTxSerialization(serialized, tx) {\n  var _a;\n\n  const decoded = ripple_binary_codec_1.default.decode(serialized);\n\n  if (!decoded.TxnSignature && !decoded.Signers) {\n    throw new utils.common.errors.ValidationError('Serialized transaction must have a TxnSignature or Signers property');\n  }\n\n  delete decoded.TxnSignature;\n  delete decoded.Signers;\n\n  if (!tx.SigningPubKey) {\n    delete decoded.SigningPubKey;\n  }\n\n  (_a = tx.Memos) === null || _a === void 0 ? void 0 : _a.map(memo => {\n    var _a, _b, _c;\n\n    if ((_a = memo === null || memo === void 0 ? void 0 : memo.Memo) === null || _a === void 0 ? void 0 : _a.MemoData) {\n      memo.Memo.MemoData = memo.Memo.MemoData.toUpperCase();\n    }\n\n    if ((_b = memo === null || memo === void 0 ? void 0 : memo.Memo) === null || _b === void 0 ? void 0 : _b.MemoType) {\n      memo.Memo.MemoType = memo.Memo.MemoType.toUpperCase();\n    }\n\n    if ((_c = memo === null || memo === void 0 ? void 0 : memo.Memo) === null || _c === void 0 ? void 0 : _c.MemoFormat) {\n      memo.Memo.MemoFormat = memo.Memo.MemoFormat.toUpperCase();\n    }\n\n    return memo;\n  });\n\n  if (!lodash_1.default.isEqual(decoded, tx)) {\n    const error = new utils.common.errors.ValidationError('Serialized transaction does not match original txJSON. See `error.data`');\n    error.data = {\n      decoded,\n      tx,\n      diff: objectDiff(tx, decoded)\n    };\n    throw error;\n  }\n}\n\nfunction checkFee(api, txFee) {\n  const fee = new bignumber_js_1.default(txFee);\n  const maxFeeDrops = common_1.xrpToDrops(api._maxFeeXRP);\n\n  if (fee.isGreaterThan(maxFeeDrops)) {\n    throw new utils.common.errors.ValidationError(`\"Fee\" should not exceed \"${maxFeeDrops}\". ` + 'To use a higher fee, set `maxFeeXRP` in the RippleAPI constructor.');\n  }\n}\n\nfunction sign(txJSON, secret, options, keypair) {\n  if (typeof secret === 'string') {\n    validate.sign({\n      txJSON,\n      secret\n    });\n    return signWithKeypair(this, txJSON, ripple_keypairs_1.default.deriveKeypair(secret), options);\n  } else {\n    if (!keypair && !secret) {\n      throw new utils.common.errors.ValidationError('sign: Missing secret or keypair.');\n    }\n\n    return signWithKeypair(this, txJSON, keypair ? keypair : secret, options);\n  }\n}\n\nexports.default = sign;","map":{"version":3,"mappings":"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","names":["validate","utils","common","computeSignature","tx","privateKey","signAs","signingData","ripple_binary_codec_1","encodeForMultisigning","encodeForSigning","ripple_keypairs_1","sign","signWithKeypair","api","txJSON","keypair","options","JSON","parse","TxnSignature","Signers","errors","ValidationError","checkFee","Fee","txToSignAndEncode","Object","assign","SigningPubKey","publicKey","signer","Account","Signer","serialized","encode","checkTxSerialization","signedTransaction","id","hashes_1","objectDiff","a","b","diffs","compare","i1","i2","k","type1","prototype","toString","call","type2","objDiff","keys","length","lodash_1","isEqual","key","hasOwnProperty","decoded","decode","Memos","_a","map","memo","Memo","MemoData","toUpperCase","_b","MemoType","_c","MemoFormat","error","data","diff","txFee","fee","bignumber_js_1","maxFeeDrops","common_1","_maxFeeXRP","isGreaterThan","secret","deriveKeypair","exports"],"sourceRoot":"","sources":["../../../src/transaction/sign.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}