{"ast":null,"code":"// <scriptSig> {serialized scriptPubKey script}\nvar Buffer = require('safe-buffer').Buffer;\n\nvar bscript = require('../../script');\n\nvar typeforce = require('typeforce');\n\nvar p2ms = require('../multisig/');\n\nvar p2pk = require('../pubkey/');\n\nvar p2pkh = require('../pubkeyhash/');\n\nvar p2wpkho = require('../witnesspubkeyhash/output');\n\nvar p2wsho = require('../witnessscripthash/output');\n\nfunction check(script, allowIncomplete) {\n  var chunks = bscript.decompile(script);\n  if (chunks.length < 1) return false;\n  var lastChunk = chunks[chunks.length - 1];\n  if (!Buffer.isBuffer(lastChunk)) return false;\n  var scriptSigChunks = bscript.decompile(bscript.compile(chunks.slice(0, -1)));\n  var redeemScriptChunks = bscript.decompile(lastChunk); // is redeemScript a valid script?\n\n  if (redeemScriptChunks.length === 0) return false; // is redeemScriptSig push only?\n\n  if (!bscript.isPushOnly(scriptSigChunks)) return false; // is witness?\n\n  if (chunks.length === 1) {\n    return p2wsho.check(redeemScriptChunks) || p2wpkho.check(redeemScriptChunks);\n  } // match types\n\n\n  if (p2pkh.input.check(scriptSigChunks) && p2pkh.output.check(redeemScriptChunks)) return true;\n  if (p2ms.input.check(scriptSigChunks, allowIncomplete) && p2ms.output.check(redeemScriptChunks)) return true;\n  if (p2pk.input.check(scriptSigChunks) && p2pk.output.check(redeemScriptChunks)) return true;\n  return false;\n}\n\ncheck.toJSON = function () {\n  return 'scriptHash input';\n};\n\nfunction encodeStack(redeemScriptStack, redeemScript) {\n  var serializedScriptPubKey = bscript.compile(redeemScript);\n  return [].concat(redeemScriptStack, serializedScriptPubKey);\n}\n\nfunction encode(redeemScriptSig, redeemScript) {\n  var redeemScriptStack = bscript.decompile(redeemScriptSig);\n  return bscript.compile(encodeStack(redeemScriptStack, redeemScript));\n}\n\nfunction decodeStack(stack) {\n  typeforce(typeforce.Array, stack);\n  typeforce(check, stack);\n  return {\n    redeemScriptStack: stack.slice(0, -1),\n    redeemScript: stack[stack.length - 1]\n  };\n}\n\nfunction decode(buffer) {\n  var stack = bscript.decompile(buffer);\n  var result = decodeStack(stack);\n  result.redeemScriptSig = bscript.compile(result.redeemScriptStack);\n  delete result.redeemScriptStack;\n  return result;\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  decodeStack: decodeStack,\n  encode: encode,\n  encodeStack: encodeStack\n};","map":{"version":3,"names":["Buffer","require","bscript","typeforce","p2ms","p2pk","p2pkh","p2wpkho","p2wsho","check","script","allowIncomplete","chunks","decompile","length","lastChunk","isBuffer","scriptSigChunks","compile","slice","redeemScriptChunks","isPushOnly","input","output","toJSON","encodeStack","redeemScriptStack","redeemScript","serializedScriptPubKey","concat","encode","redeemScriptSig","decodeStack","stack","Array","decode","buffer","result","module","exports"],"sources":["C:/Users/acer/node_modules/@tatumio/bitcoincashjs2-lib/src/templates/scripthash/input.js"],"sourcesContent":["// <scriptSig> {serialized scriptPubKey script}\n\nvar Buffer = require('safe-buffer').Buffer\nvar bscript = require('../../script')\nvar typeforce = require('typeforce')\n\nvar p2ms = require('../multisig/')\nvar p2pk = require('../pubkey/')\nvar p2pkh = require('../pubkeyhash/')\nvar p2wpkho = require('../witnesspubkeyhash/output')\nvar p2wsho = require('../witnessscripthash/output')\n\nfunction check (script, allowIncomplete) {\n  var chunks = bscript.decompile(script)\n  if (chunks.length < 1) return false\n\n  var lastChunk = chunks[chunks.length - 1]\n  if (!Buffer.isBuffer(lastChunk)) return false\n\n  var scriptSigChunks = bscript.decompile(bscript.compile(chunks.slice(0, -1)))\n  var redeemScriptChunks = bscript.decompile(lastChunk)\n\n  // is redeemScript a valid script?\n  if (redeemScriptChunks.length === 0) return false\n\n  // is redeemScriptSig push only?\n  if (!bscript.isPushOnly(scriptSigChunks)) return false\n\n  // is witness?\n  if (chunks.length === 1) {\n    return p2wsho.check(redeemScriptChunks) ||\n      p2wpkho.check(redeemScriptChunks)\n  }\n\n  // match types\n  if (p2pkh.input.check(scriptSigChunks) &&\n    p2pkh.output.check(redeemScriptChunks)) return true\n\n  if (p2ms.input.check(scriptSigChunks, allowIncomplete) &&\n    p2ms.output.check(redeemScriptChunks)) return true\n\n  if (p2pk.input.check(scriptSigChunks) &&\n    p2pk.output.check(redeemScriptChunks)) return true\n\n  return false\n}\ncheck.toJSON = function () { return 'scriptHash input' }\n\nfunction encodeStack (redeemScriptStack, redeemScript) {\n  var serializedScriptPubKey = bscript.compile(redeemScript)\n\n  return [].concat(redeemScriptStack, serializedScriptPubKey)\n}\n\nfunction encode (redeemScriptSig, redeemScript) {\n  var redeemScriptStack = bscript.decompile(redeemScriptSig)\n\n  return bscript.compile(encodeStack(redeemScriptStack, redeemScript))\n}\n\nfunction decodeStack (stack) {\n  typeforce(typeforce.Array, stack)\n  typeforce(check, stack)\n\n  return {\n    redeemScriptStack: stack.slice(0, -1),\n    redeemScript: stack[stack.length - 1]\n  }\n}\n\nfunction decode (buffer) {\n  var stack = bscript.decompile(buffer)\n  var result = decodeStack(stack)\n  result.redeemScriptSig = bscript.compile(result.redeemScriptStack)\n  delete result.redeemScriptStack\n  return result\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  decodeStack: decodeStack,\n  encode: encode,\n  encodeStack: encodeStack\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}