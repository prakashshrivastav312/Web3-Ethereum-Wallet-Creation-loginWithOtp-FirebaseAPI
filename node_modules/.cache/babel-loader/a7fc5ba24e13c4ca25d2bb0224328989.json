{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst raw = require('ipld-raw');\n\nconst multicodec = require('multicodec');\n\nconst noop = () => {};\n/**\n * @typedef {import('cids')} CID\n */\n\n/**\n * Return an object containing supported IPLD Formats\n *\n * @param {object} [options] - IPLD options passed to the http client constructor\n * @param {Array} [options.formats] - A list of IPLD Formats to use\n * @param {Function} [options.loadFormat] - An async function that can load a format when passed a codec number\n * @returns {Function}\n */\n\n\nmodule.exports = function () {\n  let {\n    formats = [],\n    loadFormat = noop\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  formats = formats || [];\n  loadFormat = loadFormat || noop;\n  const configuredFormats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: raw\n  };\n  formats.forEach(format => {\n    configuredFormats[format.codec] = format;\n  });\n  /**\n   * Attempts to load an IPLD format for the passed CID\n   *\n   * @param {import('multicodec').CodecName} codec - The code to load the format for\n   * @returns {Promise<object>} - An IPLD format\n   */\n\n  const loadResolver = async codec => {\n    // @ts-ignore - codec is a string and not a CodecName\n    const number = multicodec.getNumber(codec);\n    const format = configuredFormats[number] || (await loadFormat(codec));\n\n    if (!format) {\n      throw Object.assign(new Error(`Missing IPLD format \"${codec}\"`), {\n        missingMulticodec: codec\n      });\n    }\n\n    return format;\n  };\n\n  return loadResolver;\n};","map":{"version":3,"names":["dagPB","require","dagCBOR","raw","multicodec","noop","module","exports","formats","loadFormat","configuredFormats","DAG_PB","DAG_CBOR","RAW","forEach","format","codec","loadResolver","number","getNumber","Object","assign","Error","missingMulticodec"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/lib/ipld-formats.js"],"sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst raw = require('ipld-raw')\nconst multicodec = require('multicodec')\n\nconst noop = () => {}\n\n/**\n * @typedef {import('cids')} CID\n */\n\n/**\n * Return an object containing supported IPLD Formats\n *\n * @param {object} [options] - IPLD options passed to the http client constructor\n * @param {Array} [options.formats] - A list of IPLD Formats to use\n * @param {Function} [options.loadFormat] - An async function that can load a format when passed a codec number\n * @returns {Function}\n */\nmodule.exports = ({ formats = [], loadFormat = noop } = {}) => {\n  formats = formats || []\n  loadFormat = loadFormat || noop\n\n  const configuredFormats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: raw\n  }\n\n  formats.forEach(format => {\n    configuredFormats[format.codec] = format\n  })\n\n  /**\n   * Attempts to load an IPLD format for the passed CID\n   *\n   * @param {import('multicodec').CodecName} codec - The code to load the format for\n   * @returns {Promise<object>} - An IPLD format\n   */\n  const loadResolver = async (codec) => {\n    // @ts-ignore - codec is a string and not a CodecName\n    const number = multicodec.getNumber(codec)\n    const format = configuredFormats[number] || await loadFormat(codec)\n\n    if (!format) {\n      throw Object.assign(\n        new Error(`Missing IPLD format \"${codec}\"`),\n        { missingMulticodec: codec }\n      )\n    }\n\n    return format\n  }\n\n  return loadResolver\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMI,IAAI,GAAG,MAAM,CAAE,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,YAA8C;EAAA,IAA7C;IAAEC,OAAO,GAAG,EAAZ;IAAgBC,UAAU,GAAGJ;EAA7B,CAA6C,uEAAP,EAAO;EAC7DG,OAAO,GAAGA,OAAO,IAAI,EAArB;EACAC,UAAU,GAAGA,UAAU,IAAIJ,IAA3B;EAEA,MAAMK,iBAAiB,GAAG;IACxB,CAACN,UAAU,CAACO,MAAZ,GAAqBX,KADG;IAExB,CAACI,UAAU,CAACQ,QAAZ,GAAuBV,OAFC;IAGxB,CAACE,UAAU,CAACS,GAAZ,GAAkBV;EAHM,CAA1B;EAMAK,OAAO,CAACM,OAAR,CAAgBC,MAAM,IAAI;IACxBL,iBAAiB,CAACK,MAAM,CAACC,KAAR,CAAjB,GAAkCD,MAAlC;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;AACA;;EACE,MAAME,YAAY,GAAG,MAAOD,KAAP,IAAiB;IACpC;IACA,MAAME,MAAM,GAAGd,UAAU,CAACe,SAAX,CAAqBH,KAArB,CAAf;IACA,MAAMD,MAAM,GAAGL,iBAAiB,CAACQ,MAAD,CAAjB,KAA6B,MAAMT,UAAU,CAACO,KAAD,CAA7C,CAAf;;IAEA,IAAI,CAACD,MAAL,EAAa;MACX,MAAMK,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,CAAW,wBAAuBN,KAAM,GAAxC,CADI,EAEJ;QAAEO,iBAAiB,EAAEP;MAArB,CAFI,CAAN;IAID;;IAED,OAAOD,MAAP;EACD,CAbD;;EAeA,OAAOE,YAAP;AACD,CApCD"},"metadata":{},"sourceType":"script"}