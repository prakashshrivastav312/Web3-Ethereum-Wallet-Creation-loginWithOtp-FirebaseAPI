{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendPolygonBurnMultiTokenBatchSignedTransaction = exports.sendPolygonBurnMultiTokenSignedTransaction = exports.sendPolygonDeployErc721SignedTransaction = exports.sendPolygonUpdateCashbackForAuthorErc721SignedTransaction = exports.sendPolygonTransferErc721SignedTransaction = exports.sendPolygonBurnErc721SignedTransaction = exports.sendPolygonMintMultipleErc721SignedTransaction = exports.sendPolygonMintMultipleErc721ProvenanceSignedTransaction = exports.sendPolygonMintMultipleCashbackErc721SignedTransaction = exports.sendPolygonMintErc721ProvenanceSignedTransaction = exports.sendPolygonMintCashbackErc721SignedTransaction = exports.sendPolygonMintErc721SignedTransaction = exports.sendPolygonDeployErc20SignedTransaction = exports.sendPolygonTransferErc20SignedTransaction = exports.sendPolygonBurnErc20SignedTransaction = exports.sendPolygonMintErc20SignedTransaction = exports.sendPolygonStoreDataTransaction = exports.sendPolygonSmartContractReadMethodInvocationTransaction = exports.preparePolygonSmartContractWriteMethodInvocation = exports.preparePolygonDeployMultiTokenSignedTransaction = exports.preparePolygonMintMultiTokenBatchSignedTransaction = exports.preparePolygonMintMultiTokenSignedTransaction = exports.preparePolygonBatchTransferMultiTokenSignedTransaction = exports.preparePolygonTransferMultiTokenSignedTransaction = exports.preparePolygonBurnMultiTokenBatchSignedTransaction = exports.preparePolygonBurnMultiTokenSignedTransaction = exports.preparePolygonDeployAuctionSignedTransaction = exports.preparePolygonDeployMarketplaceListingSignedTransaction = exports.preparePolygonDeployErc721SignedTransaction = exports.preparePolygonUpdateCashbackForAuthorErc721SignedTransaction = exports.preparePolygonTransferErc721SignedTransaction = exports.preparePolygonBurnErc721SignedTransaction = exports.preparePolygonMintMultipleErc721SignedTransaction = exports.preparePolygonMintMultipleCashbackErc721SignedTransaction = exports.preparePolygonMintMultipleErc721ProvenanceSignedTransaction = exports.preparePolygonMintCashbackErc721SignedTransaction = exports.preparePolygonMintErc721ProvenanceSignedTransaction = exports.preparePolygonMintErc721SignedTransaction = exports.preparePolygonDeployErc20SignedTransaction = exports.preparePolygonTransferErc20SignedTransaction = exports.preparePolygonBurnErc20SignedTransaction = exports.preparePolygonMintErc20SignedTransaction = exports.preparePolygonStoreDataTransaction = exports.preparePolygonSignedTransaction = exports.preparePolygonGenerateCustodialWalletSignedTransaction = exports.getPolygonErc20ContractDecimals = exports.signPolygonKMSTransaction = exports.preparePolygonClient = exports.sendPolygonTransaction = exports.polygonGetGasPriceInWei = void 0;\nexports.sendPolygonDeployMarketplaceListingSignedTransaction = exports.sendPolygonSmartContractMethodInvocationTransaction = exports.sendPolygonGenerateCustodialWalletSignedTransaction = exports.sendPolygonDeployMultiTokenSignedTransaction = exports.sendPolygonMintMultiTokenBatchSignedTransaction = exports.sendPolygonMintMultiTokenSignedTransaction = exports.sendPolygonBatchTransferMultiTokenSignedTransaction = exports.sendPolygonTransferMultiTokenSignedTransaction = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst web3_1 = __importDefault(require(\"web3\"));\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst erc1155_abi_1 = __importDefault(require(\"../contracts/erc1155/erc1155_abi\"));\n\nconst erc1155_bytecode_1 = __importDefault(require(\"../contracts/erc1155/erc1155_bytecode\"));\n\nconst token_abi_1 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst token_abi_2 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst token_bytecode_1 = __importDefault(require(\"../contracts/erc20/token_bytecode\"));\n\nconst erc721_abi_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_abi\"));\n\nconst erc721_bytecode_1 = __importDefault(require(\"../contracts/erc721Cashback/erc721_bytecode\"));\n\nconst erc721Provenance_abi_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_abi\"));\n\nconst erc721Provenance_bytecode_1 = __importDefault(require(\"../contracts/erc721Provenance/erc721Provenance_bytecode\"));\n\nconst marketplace_1 = require(\"../contracts/marketplace\");\n\nconst model_1 = require(\"../model\");\n\nconst nft_1 = require(\"../nft\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst erc721_abi_2 = __importDefault(require(\"../contracts/erc721General/erc721_abi\"));\n\nconst erc721_bytecode_2 = __importDefault(require(\"../contracts/erc721General/erc721_bytecode\"));\n/**\n * Estimate Gas price for the transaction.\n */\n\n\nconst polygonGetGasPriceInWei = async () => {\n  const {\n    data\n  } = await tatum_1.axios.get('https://gasstation-mainnet.matic.network');\n  return web3_1.default.utils.toWei(`${Math.max(30, Math.ceil(data.fast))}`, 'gwei');\n};\n\nexports.polygonGetGasPriceInWei = polygonGetGasPriceInWei;\n\nconst prepareGeneralTx = async (client, testnet, fromPrivateKey, signatureId, to, amount, nonce, data, gasLimit, gasPrice) => {\n  const tx = {\n    from: 0,\n    to,\n    value: amount ? `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(amount, 'ether')).toString(16)}` : undefined,\n    data,\n    gas: gasLimit,\n    nonce,\n    gasPrice: gasPrice ? `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(gasPrice, 'gwei')).toString(16)}` : await exports.polygonGetGasPriceInWei()\n  };\n\n  if (signatureId) {\n    return JSON.stringify(tx);\n  }\n\n  tx.gas = gasLimit || (await client.eth.estimateGas({\n    to,\n    data: data || '',\n    value: tx.value\n  }));\n  return (await client.eth.accounts.signTransaction(tx, fromPrivateKey)).rawTransaction;\n};\n/**\n * Send Polygon transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\n\nconst sendPolygonTransaction = async (testnet, body, provider) => {\n  return blockchain_1.polygonBroadcast(await exports.preparePolygonSignedTransaction(testnet, body, provider));\n};\n\nexports.sendPolygonTransaction = sendPolygonTransaction;\n\nconst preparePolygonClient = (testnet, provider, fromPrivateKey) => {\n  const client = new web3_1.default(provider || `${process.env.TATUM_API_URL || constants_1.TATUM_API_URL}/v3/polygon/web3/${process.env.TATUM_API_KEY}`);\n\n  if (fromPrivateKey) {\n    client.eth.accounts.wallet.clear();\n    client.eth.accounts.wallet.add(fromPrivateKey);\n    client.eth.defaultAccount = client.eth.accounts.wallet[0].address;\n  }\n\n  return client;\n};\n\nexports.preparePolygonClient = preparePolygonClient;\n/**\n * Sign Polygon pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param fromPrivateKey private key to sign transaction with.\n * @param testnet mainnet or testnet version\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signPolygonKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {\n  if (tx.chain !== model_1.Currency.MATIC) {\n    throw Error('Unsupported chain.');\n  }\n\n  const client = exports.preparePolygonClient(testnet, provider, fromPrivateKey);\n  const transactionConfig = JSON.parse(tx.serializedTransaction);\n\n  if (!transactionConfig.gas) {\n    transactionConfig.gas = await client.eth.estimateGas({\n      to: transactionConfig.to,\n      data: transactionConfig.data\n    });\n  }\n\n  if (!transactionConfig.gasPrice || transactionConfig.gasPrice === '0' || transactionConfig.gasPrice === 0 || transactionConfig.gasPrice === '0x0') {\n    transactionConfig.gasPrice = await exports.polygonGetGasPriceInWei();\n  }\n\n  return (await client.eth.accounts.signTransaction(transactionConfig, fromPrivateKey)).rawTransaction;\n};\n\nexports.signPolygonKMSTransaction = signPolygonKMSTransaction;\n\nconst getPolygonErc20ContractDecimals = async (testnet, contractAddress, provider) => {\n  if (!contractAddress) {\n    throw new Error('Contract address not set.');\n  }\n\n  const client = await exports.preparePolygonClient(testnet, provider); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_1.default, contractAddress.trim());\n  return await contract.methods.decimals().call();\n};\n\nexports.getPolygonErc20ContractDecimals = getPolygonErc20ContractDecimals;\n/**\n * Sign Polygon generate custodial wallet transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonGenerateCustodialWalletSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.GenerateCustodialAddress);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n  const {\n    abi,\n    code\n  } = wallet_1.obtainCustodialAddressType(body); // @ts-ignore\n\n  const contract = new client.eth.Contract(abi);\n  const data = contract.deploy({\n    data: code\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonGenerateCustodialWalletSignedTransaction = preparePolygonGenerateCustodialWalletSignedTransaction;\n/**\n * Sign Polygon transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.TransferErc20);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n  let data;\n  let to = body.to;\n\n  if (body.currency === model_1.Currency.MATIC) {\n    data = body.data ? client.utils.isHex(body.data) ? client.utils.stringToHex(body.data) : client.utils.toHex(body.data) : undefined;\n  } else {\n    to = constants_1.CONTRACT_ADDRESSES[body.currency]; // @ts-ignore\n\n    const contract = new client.eth.Contract([constants_1.TRANSFER_METHOD_ABI], to);\n    const digits = new bignumber_js_1.BigNumber(10).pow(constants_1.CONTRACT_DECIMALS[body.currency]);\n    data = contract.methods.transfer(body.to.trim(), `0x${new bignumber_js_1.BigNumber(body.amount).multipliedBy(digits).toString(16)}`).encodeABI();\n  }\n\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.to, body.amount, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonSignedTransaction = preparePolygonSignedTransaction;\n/**\n * Sign Polygon store data transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonStoreDataTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.CreateRecord);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n  const hexData = web3_utils_1.isHex(body.data) ? web3_utils_1.stringToHex(body.data) : web3_utils_1.toHex(body.data);\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.to || client.eth.accounts.wallet[0].address, undefined, body.nonce, hexData, (_a = body.ethFee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.ethFee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonStoreDataTransaction = preparePolygonStoreDataTransaction;\n/**\n * Sign Polygon mint erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonMintErc20SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.MintErc20);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_2.default, body.contractAddress.trim().trim());\n  const digits = new bignumber_js_1.BigNumber(10).pow(await contract.methods.decimals().call());\n  const data = contract.methods.mint(body.to.trim(), `0x${new bignumber_js_1.BigNumber(body.amount).multipliedBy(digits).toString(16)}`).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonMintErc20SignedTransaction = preparePolygonMintErc20SignedTransaction;\n/**\n * Sign Polygon burn erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonBurnErc20SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.BurnErc20);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_2.default, body.contractAddress.trim().trim());\n  const digits = new bignumber_js_1.BigNumber(10).pow(await contract.methods.decimals().call());\n  const data = contract.methods.burn(`0x${new bignumber_js_1.BigNumber(body.amount).multipliedBy(digits).toString(16)}`).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonBurnErc20SignedTransaction = preparePolygonBurnErc20SignedTransaction;\n/**\n * Sign Polygon transfer erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonTransferErc20SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.TransferErc20);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n  const decimals = new bignumber_js_1.BigNumber(10).pow(body.digits); // @ts-ignore\n\n  const data = new client.eth.Contract(token_abi_2.default, body.contractAddress.trim().trim()).methods.transfer(body.to.trim(), `0x${new bignumber_js_1.BigNumber(body.amount).multipliedBy(decimals).toString(16)}`).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonTransferErc20SignedTransaction = preparePolygonTransferErc20SignedTransaction;\n/**\n * Sign Polygon deploy erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonDeployErc20SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.DeployErc20);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(token_abi_2.default);\n  const data = contract.deploy({\n    data: token_bytecode_1.default,\n    arguments: [body.name, body.symbol, body.address.trim(), body.digits, `0x${new bignumber_js_1.BigNumber(body.totalCap || body.supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(body.digits)).toString(16)}`, `0x${new bignumber_js_1.BigNumber(body.supply).multipliedBy(new bignumber_js_1.BigNumber(10).pow(body.digits)).toString(16)}`]\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonDeployErc20SignedTransaction = preparePolygonDeployErc20SignedTransaction;\n/**\n * Sign Polygon mint erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonMintErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintWithTokenURI(body.to.trim(), body.tokenId, body.url).encodeABI();\n\n  if (body.contractAddress) {\n    return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n  }\n\n  throw new Error('Contract address should not be empty!');\n};\n\nexports.preparePolygonMintErc721SignedTransaction = preparePolygonMintErc721SignedTransaction;\n/**\n * Sign Polygon mint cashback erc721 provenance transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonMintErc721ProvenanceSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b, _c, _d;\n\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n  const cb = [];\n  const fv = [];\n\n  if (body.cashbackValues && body.fixedValues && body.authorAddresses) {\n    body.cashbackValues.map(c => cb.push(`0x${new bignumber_js_1.BigNumber(c).multipliedBy(100).toString(16)}`));\n    body.fixedValues.map(c => fv.push(`0x${new bignumber_js_1.BigNumber(client.utils.toWei(c, 'ether')).toString(16)}`));\n  }\n\n  if (body.erc20) {\n    // @ts-ignore\n    const data = new client.eth.Contract(erc721Provenance_abi_1.default, body.contractAddress.trim()).methods.mintWithTokenURI(body.to.trim(), body.tokenId, body.url, body.authorAddresses ? body.authorAddresses : [], cb, fv, body.erc20).encodeABI();\n\n    if (body.contractAddress) {\n      return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n    }\n\n    throw new Error('Contract address should not be empty!');\n  } else {\n    // @ts-ignore\n    const data = new client.eth.Contract(erc721Provenance_abi_1.default, body.contractAddress.trim()).methods.mintWithTokenURI(body.to.trim(), body.tokenId, body.url, body.authorAddresses ? body.authorAddresses : [], cb, fv).encodeABI();\n\n    if (body.contractAddress) {\n      return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_c = body.fee) === null || _c === void 0 ? void 0 : _c.gasLimit, (_d = body.fee) === null || _d === void 0 ? void 0 : _d.gasPrice);\n    }\n\n    throw new Error('Contract address should not be empty!');\n  }\n};\n\nexports.preparePolygonMintErc721ProvenanceSignedTransaction = preparePolygonMintErc721ProvenanceSignedTransaction;\n/**\n * Sign Polygon mint cashback erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonMintCashbackErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b, _c, _d;\n\n  await tatum_1.validateBody(body, model_1.EthMintErc721);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n  const cashbacks = body.cashbackValues;\n  const cb = cashbacks.map(c => `0x${new bignumber_js_1.BigNumber(client.utils.toWei(c, 'ether')).toString(16)}`);\n\n  if (body.erc20) {\n    // @ts-ignore\n    const data = new client.eth.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintWithCashback(body.to.trim(), body.tokenId, body.url, body.authorAddresses, cb, body.erc20).encodeABI();\n\n    if (body.contractAddress) {\n      return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n    }\n\n    throw new Error('Contract address should not be empty!');\n  } else {\n    // @ts-ignore\n    const data = new client.eth.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintWithCashback(body.to.trim(), body.tokenId, body.url, body.authorAddresses, cb).encodeABI();\n\n    if (body.contractAddress) {\n      return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_c = body.fee) === null || _c === void 0 ? void 0 : _c.gasLimit, (_d = body.fee) === null || _d === void 0 ? void 0 : _d.gasPrice);\n    }\n\n    throw new Error('Contract address should not be empty!');\n  }\n};\n\nexports.preparePolygonMintCashbackErc721SignedTransaction = preparePolygonMintCashbackErc721SignedTransaction;\n/**\n * Sign Polygon mint multiple cashback erc721 provenance transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonMintMultipleErc721ProvenanceSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b, _c, _d;\n\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n  const cb = [];\n  const fv = [];\n\n  if (body.cashbackValues && body.fixedValues && body.authorAddresses) {\n    for (let i = 0; i < body.cashbackValues.length; i++) {\n      const cb2 = [];\n      const fv2 = [];\n\n      for (let j = 0; j < body.cashbackValues[i].length; j++) {\n        cb2.push(`0x${new bignumber_js_1.BigNumber(body.cashbackValues[i][j]).multipliedBy(100).toString(16)}`);\n        fv2.push(`0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(body.fixedValues[i][j], 'ether')).toString(16)}`);\n      }\n\n      cb.push(cb2);\n      fv.push(fv2);\n    }\n  }\n\n  if (body.erc20) {\n    // @ts-ignore\n    const data = new client.eth.Contract(erc721Provenance_abi_1.default, body.contractAddress.trim()).methods.mintMultiple(body.to.map(t => t.trim()), body.tokenId, body.url, body.authorAddresses ? body.authorAddresses : [], cb, fv, body.erc20).encodeABI();\n    return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n  } else {\n    // @ts-ignore\n    const data = new client.eth.Contract(erc721Provenance_abi_1.default, body.contractAddress.trim()).methods.mintMultiple(body.to.map(t => t.trim()), body.tokenId, body.url, body.authorAddresses ? body.authorAddresses : [], cb, fv).encodeABI();\n    return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_c = body.fee) === null || _c === void 0 ? void 0 : _c.gasLimit, (_d = body.fee) === null || _d === void 0 ? void 0 : _d.gasPrice);\n  }\n};\n\nexports.preparePolygonMintMultipleErc721ProvenanceSignedTransaction = preparePolygonMintMultipleErc721ProvenanceSignedTransaction;\n/**\n * Sign Polygon mint multiple cashback erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonMintMultipleCashbackErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b, _c, _d;\n\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n  const cashbacks = body.cashbackValues;\n  const cb = cashbacks.map(cashback => cashback.map(c => `0x${new bignumber_js_1.BigNumber(client.utils.toWei(c, 'ether')).toString(16)}`));\n\n  if (body.erc20) {\n    // @ts-ignore\n    const data = new client.eth.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintMultipleCashback(body.to.map(t => t.trim()), body.tokenId, body.url, body.authorAddresses, cb, body.erc20).encodeABI();\n    return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n  } else {\n    // @ts-ignore\n    const data = new client.eth.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintMultipleCashback(body.to.map(t => t.trim()), body.tokenId, body.url, body.authorAddresses, cb).encodeABI();\n    return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_c = body.fee) === null || _c === void 0 ? void 0 : _c.gasLimit, (_d = body.fee) === null || _d === void 0 ? void 0 : _d.gasPrice);\n  }\n};\n\nexports.preparePolygonMintMultipleCashbackErc721SignedTransaction = preparePolygonMintMultipleCashbackErc721SignedTransaction;\n/**\n * Sign Polygon mint multiple erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonMintMultipleErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthMintMultipleErc721);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.mintMultiple(body.to.map(t => t.trim()), body.tokenId, body.url).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonMintMultipleErc721SignedTransaction = preparePolygonMintMultipleErc721SignedTransaction;\n/**\n * Sign Polygon burn erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonBurnErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthBurnErc721);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.burn(body.tokenId).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonBurnErc721SignedTransaction = preparePolygonBurnErc721SignedTransaction;\n/**\n * Sign Polygon transfer erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonTransferErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthTransferErc721);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const contract = new client.eth.Contract(body.provenance ? erc721Provenance_abi_1.default : erc721_abi_1.default, body.contractAddress.trim());\n  const dataBytes = body.provenance ? Buffer.from(body.provenanceData + '\\'\\'\\'###\\'\\'\\'' + web3_utils_1.toWei(body.tokenPrice, 'ether'), 'utf8') : '';\n  const data = body.provenance ? contract.methods.safeTransfer(body.to.trim(), body.tokenId, `0x${dataBytes.toString('hex')}`).encodeABI() : contract.methods.safeTransfer(body.to.trim(), body.tokenId).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), body.value, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonTransferErc721SignedTransaction = preparePolygonTransferErc721SignedTransaction;\n/**\n * Sign Polygon update cashback for author erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonUpdateCashbackForAuthorErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.UpdateCashbackErc721);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(erc721_abi_1.default, body.contractAddress.trim()).methods.updateCashbackForAuthor(body.tokenId, `0x${new bignumber_js_1.BigNumber(web3_utils_1.toWei(body.cashbackValue, 'ether')).toString(16)}`).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonUpdateCashbackForAuthorErc721SignedTransaction = preparePolygonUpdateCashbackForAuthorErc721SignedTransaction;\n/**\n * Sign Polygon deploy erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonDeployErc721SignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthDeployErc721);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n\n  if (body.provenance && body.cashback) {\n    throw new Error('Only one of provenance or cashback must be present and true.');\n  }\n\n  let abi = erc721_abi_2.default;\n  let deployData = erc721_bytecode_2.default;\n\n  if (body.provenance) {\n    abi = erc721Provenance_abi_1.default;\n    deployData = erc721Provenance_bytecode_1.default;\n  } else if (body.cashback) {\n    abi = erc721_abi_1.default;\n    deployData = erc721_bytecode_1.default;\n  } // @ts-ignore\n\n\n  const data = new client.eth.Contract(abi).deploy({\n    arguments: [body.name, body.symbol, body.publicMint ? body.publicMint : false],\n    data: deployData\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonDeployErc721SignedTransaction = preparePolygonDeployErc721SignedTransaction;\n/**\n * Sign Polygon generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst preparePolygonDeployMarketplaceListingSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.DeployMarketplaceListing);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(marketplace_1.listing.abi).deploy({\n    arguments: [body.marketplaceFee, body.feeRecipient],\n    data: marketplace_1.listing.data\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonDeployMarketplaceListingSignedTransaction = preparePolygonDeployMarketplaceListingSignedTransaction;\n/**\n * Sign Polygon deploy NFT Auction contract transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS\n */\n\nconst preparePolygonDeployAuctionSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.DeployNftAuction);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(marketplace_1.auction.abi).deploy({\n    arguments: [body.auctionFee, body.feeRecipient],\n    data: marketplace_1.auction.data\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonDeployAuctionSignedTransaction = preparePolygonDeployAuctionSignedTransaction;\n/**\n * Sign Polygon burn multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonBurnMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthBurnMultiToken);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.burn(body.account.trim(), body.tokenId, body.amount).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonBurnMultiTokenSignedTransaction = preparePolygonBurnMultiTokenSignedTransaction;\n/**\n * Sign Polygon burn multiple tokens batch transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonBurnMultiTokenBatchSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthBurnMultiTokenBatch);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.burnBatch(body.account.trim(), body.tokenId, body.amounts).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonBurnMultiTokenBatchSignedTransaction = preparePolygonBurnMultiTokenBatchSignedTransaction;\n/**\n * Sign Polygon transfer multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonTransferMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.TransferMultiToken);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.safeTransfer(body.to.trim(), body.tokenId, `0x${new bignumber_js_1.BigNumber(body.amount).toString(16)}`, body.data ? body.data : '0x0').encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonTransferMultiTokenSignedTransaction = preparePolygonTransferMultiTokenSignedTransaction;\n/**\n * Sign Polygon batch transfer multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonBatchTransferMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.TransferMultiTokenBatch);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n  const amts = body.amounts.map(amt => `0x${new bignumber_js_1.BigNumber(amt).toString(16)}`); // @ts-ignore\n\n  const data = new client.eth.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.safeBatchTransfer(body.to.trim(), body.tokenId.map(token => token.trim()), amts, body.data ? body.data : '0x0').encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonBatchTransferMultiTokenSignedTransaction = preparePolygonBatchTransferMultiTokenSignedTransaction;\n/**\n * Sign Polygon mint multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonMintMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.MintMultiToken);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.mint(body.to.trim(), body.tokenId, `0x${new bignumber_js_1.BigNumber(body.amount).toString(16)}`, body.data ? body.data : '0x0').encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonMintMultiTokenSignedTransaction = preparePolygonMintMultiTokenSignedTransaction;\n/**\n * Sign Polygon mint multiple tokens batch transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonMintMultiTokenBatchSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.MintMultiTokenBatch);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey);\n  const batchAmounts = body.amounts.map(amts => amts.map(amt => `0x${new bignumber_js_1.BigNumber(amt).toString(16)}`)); // @ts-ignore\n\n  const data = new client.eth.Contract(erc1155_abi_1.default, body.contractAddress.trim()).methods.mintBatch(body.to, body.tokenId, batchAmounts, body.data ? body.data : '0x0').encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, body.contractAddress.trim(), undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonMintMultiTokenBatchSignedTransaction = preparePolygonMintMultiTokenBatchSignedTransaction;\n/**\n * Sign Polygon deploy multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonDeployMultiTokenSignedTransaction = async (testnet, body, provider) => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.EthDeployMultiToken);\n  const client = await exports.preparePolygonClient(testnet, provider, body.fromPrivateKey); // @ts-ignore\n\n  const data = new client.eth.Contract(erc1155_abi_1.default).deploy({\n    arguments: [body.uri, body.publicMint ? body.publicMint : false],\n    data: erc1155_bytecode_1.default\n  }).encodeABI();\n  return prepareGeneralTx(client, testnet, body.fromPrivateKey, body.signatureId, undefined, undefined, body.nonce, data, (_a = body.fee) === null || _a === void 0 ? void 0 : _a.gasLimit, (_b = body.fee) === null || _b === void 0 ? void 0 : _b.gasPrice);\n};\n\nexports.preparePolygonDeployMultiTokenSignedTransaction = preparePolygonDeployMultiTokenSignedTransaction;\n/**\n * Sign Polygon smart contract write method invocation transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Polygon Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst preparePolygonSmartContractWriteMethodInvocation = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractMethodInvocation);\n  const {\n    fromPrivateKey,\n    fee,\n    params,\n    methodName,\n    methodABI,\n    contractAddress,\n    nonce,\n    amount,\n    signatureId\n  } = body;\n  const client = await exports.preparePolygonClient(testnet, provider, fromPrivateKey);\n  const data = new client.eth.Contract([methodABI]).methods[methodName](...params).encodeABI();\n  return prepareGeneralTx(client, testnet, fromPrivateKey, signatureId, contractAddress.trim(), amount, nonce, data, fee === null || fee === void 0 ? void 0 : fee.gasLimit, fee === null || fee === void 0 ? void 0 : fee.gasPrice);\n};\n\nexports.preparePolygonSmartContractWriteMethodInvocation = preparePolygonSmartContractWriteMethodInvocation;\n\nconst sendPolygonSmartContractReadMethodInvocationTransaction = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.SmartContractReadMethodInvocation);\n  const {\n    params,\n    methodName,\n    methodABI,\n    contractAddress\n  } = body;\n  const client = exports.preparePolygonClient(testnet, provider);\n  const contract = new client.eth.Contract([methodABI], contractAddress);\n  return {\n    data: await contract.methods[methodName](...params).call()\n  };\n};\n\nexports.sendPolygonSmartContractReadMethodInvocationTransaction = sendPolygonSmartContractReadMethodInvocationTransaction;\n/**\n * Send Polygon smart store data transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonStoreDataTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonStoreDataTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonStoreDataTransaction = sendPolygonStoreDataTransaction;\n/**\n * Send Polygon mint erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonMintErc20SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonMintErc20SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonMintErc20SignedTransaction = sendPolygonMintErc20SignedTransaction;\n/**\n * Send Polygon burn erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonBurnErc20SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonBurnErc20SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonBurnErc20SignedTransaction = sendPolygonBurnErc20SignedTransaction;\n/**\n * Send Polygon transfer erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonTransferErc20SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonTransferErc20SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonTransferErc20SignedTransaction = sendPolygonTransferErc20SignedTransaction;\n/**\n * Send Polygon deploy erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonDeployErc20SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonDeployErc20SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonDeployErc20SignedTransaction = sendPolygonDeployErc20SignedTransaction;\n/**\n * Send Polygon mint erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonMintErc721SignedTransaction = async (testnet, body, provider) => {\n  if (!body.fromPrivateKey) {\n    return nft_1.mintNFT(body);\n  }\n\n  return blockchain_1.polygonBroadcast(await exports.preparePolygonMintErc721SignedTransaction(testnet, body, provider), body.signatureId);\n};\n\nexports.sendPolygonMintErc721SignedTransaction = sendPolygonMintErc721SignedTransaction;\n/**\n * Send Polygon mint cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonMintCashbackErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonMintCashbackErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonMintCashbackErc721SignedTransaction = sendPolygonMintCashbackErc721SignedTransaction;\n/**\n * Send Polygon mint cashback erc721 provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonMintErc721ProvenanceSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonMintErc721ProvenanceSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonMintErc721ProvenanceSignedTransaction = sendPolygonMintErc721ProvenanceSignedTransaction;\n/**\n * Send Polygon mint multiple erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonMintMultipleCashbackErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonMintMultipleCashbackErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonMintMultipleCashbackErc721SignedTransaction = sendPolygonMintMultipleCashbackErc721SignedTransaction;\n/**\n * Send Polygon mint multiple erc721 Provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonMintMultipleErc721ProvenanceSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonMintMultipleErc721ProvenanceSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonMintMultipleErc721ProvenanceSignedTransaction = sendPolygonMintMultipleErc721ProvenanceSignedTransaction;\n/**\n * Send Polygon mint multiple erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonMintMultipleErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonMintMultipleErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonMintMultipleErc721SignedTransaction = sendPolygonMintMultipleErc721SignedTransaction;\n/**\n * Send Polygon burn erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonBurnErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonBurnErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonBurnErc721SignedTransaction = sendPolygonBurnErc721SignedTransaction;\n/**\n * Send Polygon transfer erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonTransferErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonTransferErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonTransferErc721SignedTransaction = sendPolygonTransferErc721SignedTransaction;\n/**\n * Send Polygon update cashback for author erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonUpdateCashbackForAuthorErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonUpdateCashbackForAuthorErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonUpdateCashbackForAuthorErc721SignedTransaction = sendPolygonUpdateCashbackForAuthorErc721SignedTransaction;\n/**\n * Send Polygon deploy erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonDeployErc721SignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonDeployErc721SignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonDeployErc721SignedTransaction = sendPolygonDeployErc721SignedTransaction;\n/**\n * Send Polygon burn multiple tokens erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonBurnMultiTokenSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonBurnMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonBurnMultiTokenSignedTransaction = sendPolygonBurnMultiTokenSignedTransaction;\n/**\n * Send Polygon burn multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonBurnMultiTokenBatchSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonBurnMultiTokenBatchSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonBurnMultiTokenBatchSignedTransaction = sendPolygonBurnMultiTokenBatchSignedTransaction;\n/**\n * Send Polygon transfer multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonTransferMultiTokenSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonTransferMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonTransferMultiTokenSignedTransaction = sendPolygonTransferMultiTokenSignedTransaction;\n/**\n * Send Polygon batch transfer multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonBatchTransferMultiTokenSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonBatchTransferMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonBatchTransferMultiTokenSignedTransaction = sendPolygonBatchTransferMultiTokenSignedTransaction;\n/**\n * Send Polygon mint multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonMintMultiTokenSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonMintMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonMintMultiTokenSignedTransaction = sendPolygonMintMultiTokenSignedTransaction;\n/**\n * Send Polygon mint multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonMintMultiTokenBatchSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonMintMultiTokenBatchSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonMintMultiTokenBatchSignedTransaction = sendPolygonMintMultiTokenBatchSignedTransaction;\n/**\n * Send Polygon deploy multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonDeployMultiTokenSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonDeployMultiTokenSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonDeployMultiTokenSignedTransaction = sendPolygonDeployMultiTokenSignedTransaction;\n/**\n * Send Polygon generate custodial wallet transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonGenerateCustodialWalletSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonGenerateCustodialWalletSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonGenerateCustodialWalletSignedTransaction = sendPolygonGenerateCustodialWalletSignedTransaction;\n/**\n * Send Polygon smart contract method invocation transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet\n * @param body content of the transaction to broadcast\n * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendPolygonSmartContractMethodInvocationTransaction = async (testnet, body, provider) => {\n  if (body.methodABI.stateMutability === 'view') {\n    return exports.sendPolygonSmartContractReadMethodInvocationTransaction(testnet, body, provider);\n  }\n\n  return blockchain_1.polygonBroadcast(await exports.preparePolygonSmartContractWriteMethodInvocation(testnet, body, provider), body.signatureId);\n};\n\nexports.sendPolygonSmartContractMethodInvocationTransaction = sendPolygonSmartContractMethodInvocationTransaction;\n/**\n * Deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\nconst sendPolygonDeployMarketplaceListingSignedTransaction = async (testnet, body, provider) => blockchain_1.polygonBroadcast(await exports.preparePolygonDeployMarketplaceListingSignedTransaction(testnet, body, provider), body.signatureId);\n\nexports.sendPolygonDeployMarketplaceListingSignedTransaction = sendPolygonDeployMarketplaceListingSignedTransaction;","map":{"version":3,"mappings":"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","names":["polygonGetGasPriceInWei","data","tatum_1","get","web3_1","utils","toWei","Math","max","ceil","fast","exports","prepareGeneralTx","client","testnet","fromPrivateKey","signatureId","to","amount","nonce","gasLimit","gasPrice","tx","from","value","bignumber_js_1","web3_utils_1","toString","undefined","gas","JSON","stringify","eth","estimateGas","accounts","signTransaction","rawTransaction","sendPolygonTransaction","body","provider","blockchain_1","preparePolygonClient","process","env","TATUM_API_URL","constants_1","TATUM_API_KEY","wallet","clear","add","defaultAccount","address","signPolygonKMSTransaction","chain","model_1","MATIC","Error","transactionConfig","parse","serializedTransaction","getPolygonErc20ContractDecimals","contractAddress","contract","Contract","token_abi_1","trim","methods","decimals","call","preparePolygonGenerateCustodialWalletSignedTransaction","abi","code","wallet_1","deploy","encodeABI","fee","_a","_b","preparePolygonSignedTransaction","currency","isHex","stringToHex","toHex","digits","pow","transfer","multipliedBy","preparePolygonStoreDataTransaction","hexData","ethFee","preparePolygonMintErc20SignedTransaction","token_abi_2","mint","preparePolygonBurnErc20SignedTransaction","burn","preparePolygonTransferErc20SignedTransaction","preparePolygonDeployErc20SignedTransaction","token_bytecode_1","arguments","name","symbol","totalCap","supply","preparePolygonMintErc721SignedTransaction","erc721_abi_1","mintWithTokenURI","tokenId","url","preparePolygonMintErc721ProvenanceSignedTransaction","cb","fv","cashbackValues","fixedValues","authorAddresses","map","c","push","erc20","erc721Provenance_abi_1","_c","_d","preparePolygonMintCashbackErc721SignedTransaction","cashbacks","mintWithCashback","preparePolygonMintMultipleErc721ProvenanceSignedTransaction","i","length","cb2","fv2","j","mintMultiple","t","preparePolygonMintMultipleCashbackErc721SignedTransaction","cashback","mintMultipleCashback","preparePolygonMintMultipleErc721SignedTransaction","preparePolygonBurnErc721SignedTransaction","preparePolygonTransferErc721SignedTransaction","provenance","dataBytes","Buffer","provenanceData","tokenPrice","safeTransfer","preparePolygonUpdateCashbackForAuthorErc721SignedTransaction","updateCashbackForAuthor","cashbackValue","preparePolygonDeployErc721SignedTransaction","erc721_abi_2","deployData","erc721_bytecode_2","erc721Provenance_bytecode_1","erc721_bytecode_1","publicMint","preparePolygonDeployMarketplaceListingSignedTransaction","marketplace_1","marketplaceFee","feeRecipient","preparePolygonDeployAuctionSignedTransaction","auctionFee","preparePolygonBurnMultiTokenSignedTransaction","erc1155_abi_1","account","preparePolygonBurnMultiTokenBatchSignedTransaction","burnBatch","amounts","preparePolygonTransferMultiTokenSignedTransaction","preparePolygonBatchTransferMultiTokenSignedTransaction","amts","amt","safeBatchTransfer","token","preparePolygonMintMultiTokenSignedTransaction","preparePolygonMintMultiTokenBatchSignedTransaction","batchAmounts","mintBatch","preparePolygonDeployMultiTokenSignedTransaction","uri","erc1155_bytecode_1","preparePolygonSmartContractWriteMethodInvocation","params","methodName","methodABI","sendPolygonSmartContractReadMethodInvocationTransaction","sendPolygonStoreDataTransaction","sendPolygonMintErc20SignedTransaction","sendPolygonBurnErc20SignedTransaction","sendPolygonTransferErc20SignedTransaction","sendPolygonDeployErc20SignedTransaction","sendPolygonMintErc721SignedTransaction","nft_1","sendPolygonMintCashbackErc721SignedTransaction","sendPolygonMintErc721ProvenanceSignedTransaction","sendPolygonMintMultipleCashbackErc721SignedTransaction","sendPolygonMintMultipleErc721ProvenanceSignedTransaction","sendPolygonMintMultipleErc721SignedTransaction","sendPolygonBurnErc721SignedTransaction","sendPolygonTransferErc721SignedTransaction","sendPolygonUpdateCashbackForAuthorErc721SignedTransaction","sendPolygonDeployErc721SignedTransaction","sendPolygonBurnMultiTokenSignedTransaction","sendPolygonBurnMultiTokenBatchSignedTransaction","sendPolygonTransferMultiTokenSignedTransaction","sendPolygonBatchTransferMultiTokenSignedTransaction","sendPolygonMintMultiTokenSignedTransaction","sendPolygonMintMultiTokenBatchSignedTransaction","sendPolygonDeployMultiTokenSignedTransaction","sendPolygonGenerateCustodialWalletSignedTransaction","sendPolygonSmartContractMethodInvocationTransaction","stateMutability","sendPolygonDeployMarketplaceListingSignedTransaction"],"sourceRoot":"","sources":["../../../src/transaction/polygon.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}