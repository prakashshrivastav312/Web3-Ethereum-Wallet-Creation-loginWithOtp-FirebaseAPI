{"ast":null,"code":"import * as SecretStorage from '@vechain/ethers/utils/secret-storage';\nexport var Keystore;\n\n(function (Keystore) {\n  /**\n   * encrypt private key to keystore with given password\n   * @param privateKey the private key to be encrypted\n   * @param password password to encrypt the private key\n   */\n  function encrypt(privateKey, password) {\n    return SecretStorage.encrypt('0x' + privateKey.toString('hex'), password, {\n      scrypt: {\n        N: 131072,\n        p: 1,\n        r: 8\n      }\n    }).then(str => normalize(JSON.parse(str)));\n  }\n\n  Keystore.encrypt = encrypt;\n  /**\n   * decrypt private key from keystore\n   * an error thrown if not well formed\n   * @param ks the keystore\n   * @param password password to decrypt keystore\n   */\n\n  function decrypt(ks, password) {\n    return SecretStorage.decrypt(JSON.stringify(ks), password).then(sk => Buffer.from(sk.privateKey.slice(2), 'hex'));\n  }\n\n  Keystore.decrypt = decrypt;\n  /**\n   * roughly check whether keystore is well formed\n   * @param ks the keystore\n   */\n\n  function wellFormed(ks) {\n    try {\n      validate(normalize(ks));\n      return true;\n    } catch (_a) {\n      return false;\n    }\n  }\n\n  Keystore.wellFormed = wellFormed;\n  /** normalize keystore. e.g. lower case keys */\n\n  function normalize(obj) {\n    const lowerKey = o => {\n      return Object.keys(o).reduce((converted, k) => {\n        let v = o[k];\n\n        if (typeof v === 'object') {\n          v = lowerKey(v);\n        }\n\n        converted[k.toLowerCase()] = v;\n        return converted;\n      }, {});\n    };\n\n    return lowerKey(obj);\n  }\n\n  function validate(ks) {\n    if (ks.version !== 1 && ks.version !== 3) {\n      throw new Error('unsupported version');\n    }\n\n    if (!/^[0-9a-f]{40}$/i.test(ks.address)) {\n      throw new Error('invalid address');\n    }\n\n    if (!/^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$/i.test(ks.id)) {\n      throw new Error('invalid id');\n    }\n\n    if (typeof ks.crypto !== 'object') {\n      throw new Error('invalid crypto');\n    }\n\n    return ks;\n  }\n})(Keystore || (Keystore = {}));","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,aAAZ,MAA+B,sCAA/B;AAUA,OAAM,IAAWC,QAAX;;AAAN,WAAiBA,QAAjB,EAAyB;EACrB;;;;;EAKA,SAAgBC,OAAhB,CAAwBC,UAAxB,EAA4CC,QAA5C,EAA4D;IACxD,OAAOJ,aAAa,CAACE,OAAd,CACH,OAAOC,UAAU,CAACE,QAAX,CAAoB,KAApB,CADJ,EAEHD,QAFG,EAEO;MACVE,MAAM,EAAE;QACJC,CAAC,EAAE,MADC;QAEJC,CAAC,EAAE,CAFC;QAGJC,CAAC,EAAE;MAHC;IADE,CAFP,EAQJC,IARI,CAQCC,GAAG,IAAIC,SAAS,CAACC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAD,CARjB,CAAP;EASH;;EAVeV,mBAAOC,OAAP;EAYhB;;;;;;;EAMA,SAAgBa,OAAhB,CAAwBC,EAAxB,EAAsCZ,QAAtC,EAAsD;IAClD,OAAOJ,aAAa,CAACe,OAAd,CAAsBF,IAAI,CAACI,SAAL,CAAeD,EAAf,CAAtB,EAA0CZ,QAA1C,EACFM,IADE,CACGQ,EAAE,IAAIC,MAAM,CAACC,IAAP,CAAYF,EAAE,CAACf,UAAH,CAAckB,KAAd,CAAoB,CAApB,CAAZ,EAAoC,KAApC,CADT,CAAP;EAEH;;EAHepB,mBAAOc,OAAP;EAKhB;;;;;EAIA,SAAgBO,UAAhB,CAA2BN,EAA3B,EAAkC;IAC9B,IAAI;MACAO,QAAQ,CAACX,SAAS,CAACI,EAAD,CAAV,CAAR;MACA,OAAO,IAAP;IACH,CAHD,CAGE,WAAM;MACJ,OAAO,KAAP;IACH;EACJ;;EAPef,sBAAUqB,UAAV;EAShB;;EACA,SAASV,SAAT,CAAmBY,GAAnB,EAA8B;IAC1B,MAAMC,QAAQ,GAAIC,CAAD,IAAc;MAC3B,OAAOC,MAAM,CAACC,IAAP,CAAYF,CAAZ,EAAeG,MAAf,CAAsB,CAACC,SAAD,EAAYC,CAAZ,KAAiB;QAC1C,IAAIC,CAAC,GAAIN,CAAS,CAACK,CAAD,CAAlB;;QACA,IAAI,OAAOC,CAAP,KAAa,QAAjB,EAA2B;UACvBA,CAAC,GAAGP,QAAQ,CAACO,CAAD,CAAZ;QACH;;QACDF,SAAS,CAACC,CAAC,CAACE,WAAF,EAAD,CAAT,GAA6BD,CAA7B;QACA,OAAOF,SAAP;MACH,CAPM,EAOJ,EAPI,CAAP;IAQH,CATD;;IAUA,OAAOL,QAAQ,CAACD,GAAD,CAAf;EACH;;EAED,SAASD,QAAT,CAAkBP,EAAlB,EAA8B;IAC1B,IAAIA,EAAE,CAACkB,OAAH,KAAe,CAAf,IAAoBlB,EAAE,CAACkB,OAAH,KAAe,CAAvC,EAA0C;MACtC,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;IACH;;IACD,IAAI,CAAC,kBAAkBC,IAAlB,CAAuBpB,EAAE,CAACqB,OAA1B,CAAL,EAAyC;MACrC,MAAM,IAAIF,KAAJ,CAAU,iBAAV,CAAN;IACH;;IACD,IAAI,CAAC,kEAAkEC,IAAlE,CAAuEpB,EAAE,CAACsB,EAA1E,CAAL,EAAoF;MAChF,MAAM,IAAIH,KAAJ,CAAU,YAAV,CAAN;IACH;;IACD,IAAI,OAAOnB,EAAE,CAACuB,MAAV,KAAqB,QAAzB,EAAmC;MAC/B,MAAM,IAAIJ,KAAJ,CAAU,gBAAV,CAAN;IACH;;IACD,OAAOnB,EAAP;EACH;AACJ,CAxED,EAAiBf,QAAQ,KAARA,QAAQ,MAAzB","names":["SecretStorage","Keystore","encrypt","privateKey","password","toString","scrypt","N","p","r","then","str","normalize","JSON","parse","decrypt","ks","stringify","sk","Buffer","from","slice","wellFormed","validate","obj","lowerKey","o","Object","keys","reduce","converted","k","v","toLowerCase","version","Error","test","address","id","crypto"],"sourceRoot":"","sources":["../../src/cry/keystore.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}