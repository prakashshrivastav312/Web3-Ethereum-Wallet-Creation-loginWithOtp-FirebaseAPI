{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultInteractionRunner = void 0;\n/**\n * An interaction runner suitable for backends or wallets.\n * Not suitable for dapps, which depend on external signers (wallets, ledger etc.).\n */\n\nclass DefaultInteractionRunner {\n  constructor(checker, signer, provider) {\n    this.checker = checker;\n    this.signer = signer;\n    this.provider = provider;\n  }\n  /**\n   * Given an interaction, broadcasts its compiled transaction.\n   */\n\n\n  run(interaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.checkInteraction(interaction);\n      let transaction = interaction.buildTransaction();\n      yield this.signer.sign(transaction);\n      yield transaction.send(this.provider);\n      return transaction;\n    });\n  }\n  /**\n   * Given an interaction, broadcasts its compiled transaction (and also waits for its execution on the Network).\n   */\n\n\n  runAwaitExecution(interaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.checkInteraction(interaction);\n      let transaction = yield this.run(interaction);\n      yield transaction.awaitExecuted(this.provider); // This will wait until the transaction is notarized, as well (so that SCRs are returned by the API).\n\n      let transactionOnNetwork = yield transaction.getAsOnNetwork(this.provider);\n      let bundle = interaction.interpretExecutionResults(transactionOnNetwork);\n      return bundle;\n    });\n  }\n\n  runQuery(interaction, caller) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.checkInteraction(interaction);\n      let query = interaction.buildQuery();\n      query.caller = caller || this.signer.getAddress();\n      let response = yield this.provider.queryContract(query);\n      let bundle = interaction.interpretQueryResponse(response);\n      return bundle;\n    });\n  }\n\n  runSimulation(interaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.checkInteraction(interaction);\n      let transaction = interaction.buildTransaction();\n      yield this.signer.sign(transaction);\n      return yield transaction.simulate(this.provider);\n    });\n  }\n\n  checkInteraction(interaction) {\n    this.checker.checkInteraction(interaction);\n  }\n\n}\n\nexports.DefaultInteractionRunner = DefaultInteractionRunner;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;AAIA,MAAaA,wBAAb,CAAqC;EAKjCC,YAAYC,OAAZ,EAA0CC,MAA1C,EAA2DC,QAA3D,EAA8E;IAC1E,KAAKF,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,QAAL,GAAgBA,QAAhB;EACH;EAED;;;;;EAGMC,GAAG,CAACC,WAAD,EAAyB;;MAC9B,KAAKC,gBAAL,CAAsBD,WAAtB;MAEA,IAAIE,WAAW,GAAGF,WAAW,CAACG,gBAAZ,EAAlB;MACA,MAAM,KAAKN,MAAL,CAAYO,IAAZ,CAAiBF,WAAjB,CAAN;MACA,MAAMA,WAAW,CAACG,IAAZ,CAAiB,KAAKP,QAAtB,CAAN;MACA,OAAOI,WAAP;IACH;EAAA;EAED;;;;;EAGMI,iBAAiB,CAACN,WAAD,EAAyB;;MAC5C,KAAKC,gBAAL,CAAsBD,WAAtB;MAEA,IAAIE,WAAW,GAAG,MAAM,KAAKH,GAAL,CAASC,WAAT,CAAxB;MACA,MAAME,WAAW,CAACK,aAAZ,CAA0B,KAAKT,QAA/B,CAAN,EACA;;MACA,IAAIU,oBAAoB,GAAG,MAAMN,WAAW,CAACO,cAAZ,CAA2B,KAAKX,QAAhC,CAAjC;MACA,IAAIY,MAAM,GAAGV,WAAW,CAACW,yBAAZ,CAAsCH,oBAAtC,CAAb;MACA,OAAOE,MAAP;IACH;EAAA;;EAEKE,QAAQ,CAACZ,WAAD,EAA2Ba,MAA3B,EAA2C;;MACrD,KAAKZ,gBAAL,CAAsBD,WAAtB;MAEA,IAAIc,KAAK,GAAGd,WAAW,CAACe,UAAZ,EAAZ;MACAD,KAAK,CAACD,MAAN,GAAeA,MAAM,IAAI,KAAKhB,MAAL,CAAYmB,UAAZ,EAAzB;MACA,IAAIC,QAAQ,GAAG,MAAM,KAAKnB,QAAL,CAAcoB,aAAd,CAA4BJ,KAA5B,CAArB;MACA,IAAIJ,MAAM,GAAGV,WAAW,CAACmB,sBAAZ,CAAmCF,QAAnC,CAAb;MACA,OAAOP,MAAP;IACH;EAAA;;EAEKU,aAAa,CAACpB,WAAD,EAAyB;;MACxC,KAAKC,gBAAL,CAAsBD,WAAtB;MAEA,IAAIE,WAAW,GAAGF,WAAW,CAACG,gBAAZ,EAAlB;MACA,MAAM,KAAKN,MAAL,CAAYO,IAAZ,CAAiBF,WAAjB,CAAN;MACA,OAAO,MAAMA,WAAW,CAACmB,QAAZ,CAAqB,KAAKvB,QAA1B,CAAb;IACH;EAAA;;EAEOG,gBAAgB,CAACD,WAAD,EAAyB;IAC7C,KAAKJ,OAAL,CAAaK,gBAAb,CAA8BD,WAA9B;EACH;;AAzDgC;;AAArCsB","names":["DefaultInteractionRunner","constructor","checker","signer","provider","run","interaction","checkInteraction","transaction","buildTransaction","sign","send","runAwaitExecution","awaitExecuted","transactionOnNetwork","getAsOnNetwork","bundle","interpretExecutionResults","runQuery","caller","query","buildQuery","getAddress","response","queryContract","interpretQueryResponse","runSimulation","simulate","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/defaultRunner.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}