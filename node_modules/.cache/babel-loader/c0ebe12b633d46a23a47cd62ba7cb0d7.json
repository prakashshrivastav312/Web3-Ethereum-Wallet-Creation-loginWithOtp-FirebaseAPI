{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of the web3.js library.\n\n    The web3.js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The web3.js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the web3.js. If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Gav Wood <gav@parity.io>\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea <marian@ethereum.org>\n * @date 2017\n */\nglobal.rootRequire = name => require(`${__dirname}/packages/${name}/src/index.js`);\n\nconst {\n  packageInit,\n  providers\n} = require('./packages/caver-core');\n\nconst Klay = require('./packages/caver-klay');\n\nconst Account = require('./packages/caver-account');\n\nconst KeyringContainer = require('./packages/caver-wallet');\n\nconst Transaction = require('./packages/caver-transaction');\n\nconst RPC = require('./packages/caver-rpc');\n\nconst abi = require('./packages/caver-abi');\n\nconst BaseContract = require('./packages/caver-contract');\n\nconst KCT = require('./packages/caver-kct');\n\nconst Validator = require('./packages/caver-validator');\n\nconst core = require('./packages/caver-core');\n\nconst middleware = require('./packages/caver-middleware');\n\nconst utils = require('./packages/caver-utils');\n\nconst formatters = require('./packages/caver-core-helpers').formatters;\n\nconst IPFS = require('./packages/caver-ipfs');\n\nconst {\n  version\n} = require('./package.json');\n/**\n * A caver class implemented to use Klaytn easily.\n *\n * @example\n * const Caver = require('caver-js')\n * const caver = new Caver('http://{your en url}:{port}')\n *\n * // If you want to create a provider, you can do like below.\n * const httpProvider = new Caver.providers.HttpProvider('http://{your en url}:{port}')\n * const caver = new Caver(httpProvider)\n *\n * // Use websocket provider with Caver.\n * const websocketProvider = new Caver.providers.WebsocketProvider('ws://{your en url}:{port}')\n * const caver = new Caver(websocketProvider)\n * caver.currentProvider.connection.close()\n *\n * @class\n * @constructor\n * @param {string|HttpProvider|WebsocketProvider|IpcProvider} [provider] - The url string of the Node to connect with. You can pass the provider instance directly.\n */\n\n\nfunction Caver(provider, net) {\n  const _this = this;\n\n  this.use = middleware.registerMiddleware.bind(middleware); // sets _requestmanager etc\n\n  packageInit(this, [provider, net]);\n  /** @type {string} */\n\n  this.version = version;\n  /** @type {module:utils} */\n\n  this.utils = utils;\n  /** @type {typeof Account} */\n\n  this.account = Account;\n  /** @type {ABI} */\n\n  this.abi = abi;\n  /** @type {KeyringContainer} */\n\n  this.wallet = new KeyringContainer(); // ex) call `caver.klay.property` || `caver.klay.method(...)`\n\n  /** @type {KCT} */\n\n  this.kct = new KCT(this);\n  this.klay = new Klay(this);\n  /** @type {RPC} */\n\n  this.rpc = new RPC(this);\n  /** @type {Validator} */\n\n  this.validator = new Validator(this.rpc.klay.klaytnCall);\n  /** @type {module:Transaction} */\n\n  this.transaction = new Transaction(this.rpc.klay.klaytnCall);\n  /** @type {IPFS} */\n\n  this.ipfs = new IPFS(); // overwrite package setProvider\n\n  const setProvider = this.setProvider;\n  /**\n   * Changes the current provider of the Caver.\n   * You can access the provider's constructor via `const Caver = require('caver-js'); const provider = new Caver.providers.XXXProvider('...')`.\n   *\n   * @example\n   * const isSet = caver.setProvider('http://{your en url}:{port}')\n   * const isSet = caver.setProvider(new Caver.providers.HttpProvider('http://{your en url}:{port}'))\n   *\n   * const isSet = caver.setProvider('ws://{your en url}:{port}')\n   * const isSet = caver.setProvider(new Caver.providers.WebsocketProvider('http://{your en url}:{port}'))\n   *\n   * @param {string|HttpProvider|WebsocketProvider|IpcProvider} p - The url string of the Node or the provider instance.\n   * @return {boolean} `true` means provider is set successfully.\n   */\n\n  this.setProvider = (p, n) => {\n    setProvider.apply(this, [p, n]);\n\n    _this.klay.setRequestManager(_this._requestManager);\n\n    _this.rpc.setRequestManager(_this._requestManager);\n\n    _this.kct.setRequestManager(_this._requestManager);\n\n    _this.contract._requestManager = _this._requestManager;\n    _this.contract.currentProvider = _this._provider;\n    return true;\n  };\n\n  const self = this;\n\n  const Contract = function Contract() {\n    BaseContract.apply(this, arguments);\n    core.packageInit(this, [self]);\n    this.setWallet(self.wallet);\n  };\n\n  Contract.create = function () {\n    // With `caver.contract`, `caver.wallet` must be set in the `contarct._wallet`,\n    // so the Contract constructor defined above must be called here.\n    return new Contract(...arguments);\n  };\n\n  Contract.setProvider = function () {\n    BaseContract.setProvider.apply(this, arguments);\n  };\n\n  Contract.prototype = Object.create(BaseContract.prototype);\n  Contract.prototype.constructor = Contract;\n  /** @type {typeof Contract} */\n\n  this.contract = Contract;\n  this.contract._requestManager = this._requestManager;\n  this.contract.currentProvider = this._requestManager.provider;\n}\n/**\n * @type {module:utils}\n *\n * @example\n * const utils = require('caver-js').utils\n * */\n\n\nCaver.utils = utils;\n/**\n * @type {ABI}\n *\n * @example\n * const abi = require('caver-js').abi\n * */\n\nCaver.abi = abi;\n/**\n * The account key types which are used in the `caver.account` package.\n *\n * @typedef {object} Caver.Providers\n * @property {typeof WebsocketProvider} WebsocketProvider - Class representing WebsocketProvider.\n * @property {typeof HttpProvider} HttpProvider - Class representing HttpProvider.\n * @property {typeof IpcProvider} IpcProvider - Class representing IpcProvider.\n */\n\n/**\n * @type {Caver.Providers}\n *\n * @example\n * const providers = require('./index').providers\n * */\n\nCaver.providers = providers;\nmodule.exports = Caver;\nmodule.exports.formatters = formatters;","map":{"version":3,"names":["global","rootRequire","name","require","__dirname","packageInit","providers","Klay","Account","KeyringContainer","Transaction","RPC","abi","BaseContract","KCT","Validator","core","middleware","utils","formatters","IPFS","version","Caver","provider","net","_this","use","registerMiddleware","bind","account","wallet","kct","klay","rpc","validator","klaytnCall","transaction","ipfs","setProvider","p","n","apply","setRequestManager","_requestManager","contract","currentProvider","_provider","self","Contract","arguments","setWallet","create","prototype","Object","constructor","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/index.js"],"sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of the web3.js library.\n\n    The web3.js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The web3.js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the web3.js. If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Gav Wood <gav@parity.io>\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea <marian@ethereum.org>\n * @date 2017\n */\n\nglobal.rootRequire = name => require(`${__dirname}/packages/${name}/src/index.js`)\n\nconst { packageInit, providers } = require('./packages/caver-core')\nconst Klay = require('./packages/caver-klay')\nconst Account = require('./packages/caver-account')\nconst KeyringContainer = require('./packages/caver-wallet')\nconst Transaction = require('./packages/caver-transaction')\nconst RPC = require('./packages/caver-rpc')\nconst abi = require('./packages/caver-abi')\nconst BaseContract = require('./packages/caver-contract')\nconst KCT = require('./packages/caver-kct')\nconst Validator = require('./packages/caver-validator')\n\nconst core = require('./packages/caver-core')\nconst middleware = require('./packages/caver-middleware')\nconst utils = require('./packages/caver-utils')\nconst formatters = require('./packages/caver-core-helpers').formatters\n\nconst IPFS = require('./packages/caver-ipfs')\n\nconst { version } = require('./package.json')\n\n/**\n * A caver class implemented to use Klaytn easily.\n *\n * @example\n * const Caver = require('caver-js')\n * const caver = new Caver('http://{your en url}:{port}')\n *\n * // If you want to create a provider, you can do like below.\n * const httpProvider = new Caver.providers.HttpProvider('http://{your en url}:{port}')\n * const caver = new Caver(httpProvider)\n *\n * // Use websocket provider with Caver.\n * const websocketProvider = new Caver.providers.WebsocketProvider('ws://{your en url}:{port}')\n * const caver = new Caver(websocketProvider)\n * caver.currentProvider.connection.close()\n *\n * @class\n * @constructor\n * @param {string|HttpProvider|WebsocketProvider|IpcProvider} [provider] - The url string of the Node to connect with. You can pass the provider instance directly.\n */\nfunction Caver(provider, net) {\n    const _this = this\n\n    this.use = middleware.registerMiddleware.bind(middleware)\n    // sets _requestmanager etc\n    packageInit(this, [provider, net])\n\n    /** @type {string} */\n    this.version = version\n\n    /** @type {module:utils} */\n    this.utils = utils\n    /** @type {typeof Account} */\n    this.account = Account\n\n    /** @type {ABI} */\n    this.abi = abi\n    /** @type {KeyringContainer} */\n    this.wallet = new KeyringContainer()\n\n    // ex) call `caver.klay.property` || `caver.klay.method(...)`\n    /** @type {KCT} */\n    this.kct = new KCT(this)\n    this.klay = new Klay(this)\n    /** @type {RPC} */\n    this.rpc = new RPC(this)\n\n    /** @type {Validator} */\n    this.validator = new Validator(this.rpc.klay.klaytnCall)\n    /** @type {module:Transaction} */\n    this.transaction = new Transaction(this.rpc.klay.klaytnCall)\n\n    /** @type {IPFS} */\n    this.ipfs = new IPFS()\n\n    // overwrite package setProvider\n    const setProvider = this.setProvider\n    /**\n     * Changes the current provider of the Caver.\n     * You can access the provider's constructor via `const Caver = require('caver-js'); const provider = new Caver.providers.XXXProvider('...')`.\n     *\n     * @example\n     * const isSet = caver.setProvider('http://{your en url}:{port}')\n     * const isSet = caver.setProvider(new Caver.providers.HttpProvider('http://{your en url}:{port}'))\n     *\n     * const isSet = caver.setProvider('ws://{your en url}:{port}')\n     * const isSet = caver.setProvider(new Caver.providers.WebsocketProvider('http://{your en url}:{port}'))\n     *\n     * @param {string|HttpProvider|WebsocketProvider|IpcProvider} p - The url string of the Node or the provider instance.\n     * @return {boolean} `true` means provider is set successfully.\n     */\n    this.setProvider = (p, n) => {\n        setProvider.apply(this, [p, n])\n        _this.klay.setRequestManager(_this._requestManager)\n        _this.rpc.setRequestManager(_this._requestManager)\n        _this.kct.setRequestManager(_this._requestManager)\n        _this.contract._requestManager = _this._requestManager\n        _this.contract.currentProvider = _this._provider\n        return true\n    }\n\n    const self = this\n    const Contract = function Contract() {\n        BaseContract.apply(this, arguments)\n\n        core.packageInit(this, [self])\n        this.setWallet(self.wallet)\n    }\n\n    Contract.create = function() {\n        // With `caver.contract`, `caver.wallet` must be set in the `contarct._wallet`,\n        // so the Contract constructor defined above must be called here.\n        return new Contract(...arguments)\n    }\n\n    Contract.setProvider = function() {\n        BaseContract.setProvider.apply(this, arguments)\n    }\n\n    Contract.prototype = Object.create(BaseContract.prototype)\n    Contract.prototype.constructor = Contract\n\n    /** @type {typeof Contract} */\n    this.contract = Contract\n    this.contract._requestManager = this._requestManager\n    this.contract.currentProvider = this._requestManager.provider\n}\n\n/**\n * @type {module:utils}\n *\n * @example\n * const utils = require('caver-js').utils\n * */\nCaver.utils = utils\n\n/**\n * @type {ABI}\n *\n * @example\n * const abi = require('caver-js').abi\n * */\nCaver.abi = abi\n\n/**\n * The account key types which are used in the `caver.account` package.\n *\n * @typedef {object} Caver.Providers\n * @property {typeof WebsocketProvider} WebsocketProvider - Class representing WebsocketProvider.\n * @property {typeof HttpProvider} HttpProvider - Class representing HttpProvider.\n * @property {typeof IpcProvider} IpcProvider - Class representing IpcProvider.\n */\n/**\n * @type {Caver.Providers}\n *\n * @example\n * const providers = require('./index').providers\n * */\nCaver.providers = providers\n\nmodule.exports = Caver\nmodule.exports.formatters = formatters\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}