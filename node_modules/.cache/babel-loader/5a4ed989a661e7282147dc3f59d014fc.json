{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setOptions = setOptions;\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction weightCheckFunction(value, name) {\n  if (value >= 0 && value <= 255) {\n    return true;\n  }\n\n  throw new Error(name + ' value must be between 0 and 255');\n}\n/**\n * Returns an XDR SetOptionsOp. A \"set options\" operations set or clear account flags,\n * set the account's inflation destination, and/or add new signers to the account.\n * The flags used in `opts.clearFlags` and `opts.setFlags` can be the following:\n *   - `{@link AuthRequiredFlag}`\n *   - `{@link AuthRevocableFlag}`\n *   - `{@link AuthImmutableFlag}`\n *   - `{@link AuthClawbackEnabledFlag}`\n *\n * It's possible to set/clear multiple flags at once using logical or.\n *\n * @function\n * @alias Operation.setOptions\n *\n * @param {object} opts Options object\n * @param {string} [opts.inflationDest] - Set this account ID as the account's inflation destination.\n * @param {(number|string)} [opts.clearFlags] - Bitmap integer for which account flags to clear.\n * @param {(number|string)} [opts.setFlags] - Bitmap integer for which account flags to set.\n * @param {number|string} [opts.masterWeight] - The master key weight.\n * @param {number|string} [opts.lowThreshold] - The sum weight for the low threshold.\n * @param {number|string} [opts.medThreshold] - The sum weight for the medium threshold.\n * @param {number|string} [opts.highThreshold] - The sum weight for the high threshold.\n * @param {object} [opts.signer] - Add or remove a signer from the account. The signer is\n *                                 deleted if the weight is 0. Only one of `ed25519PublicKey`, `sha256Hash`, `preAuthTx` should be defined.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string) of preimage that will unlock funds. Preimage should be used as signature of future transaction.\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction that will unlock funds.\n * @param {number|string} [opts.signer.weight] - The weight of the new signer (0 to delete or 1-255)\n * @param {string} [opts.homeDomain] - sets the home domain used for reverse federation lookup.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.SetOptionsOp}  XDR operation\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\n\n/* eslint-disable no-param-reassign */\n\n\nfunction setOptions(opts) {\n  var attributes = {};\n\n  if (opts.inflationDest) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.inflationDest)) {\n      throw new Error('inflationDest is invalid');\n    }\n\n    attributes.inflationDest = _keypair.Keypair.fromPublicKey(opts.inflationDest).xdrAccountId();\n  }\n\n  attributes.clearFlags = this._checkUnsignedIntValue('clearFlags', opts.clearFlags);\n  attributes.setFlags = this._checkUnsignedIntValue('setFlags', opts.setFlags);\n  attributes.masterWeight = this._checkUnsignedIntValue('masterWeight', opts.masterWeight, weightCheckFunction);\n  attributes.lowThreshold = this._checkUnsignedIntValue('lowThreshold', opts.lowThreshold, weightCheckFunction);\n  attributes.medThreshold = this._checkUnsignedIntValue('medThreshold', opts.medThreshold, weightCheckFunction);\n  attributes.highThreshold = this._checkUnsignedIntValue('highThreshold', opts.highThreshold, weightCheckFunction);\n\n  if (!(0, _isUndefined2.default)(opts.homeDomain) && !(0, _isString2.default)(opts.homeDomain)) {\n    throw new TypeError('homeDomain argument must be of type String');\n  }\n\n  attributes.homeDomain = opts.homeDomain;\n\n  if (opts.signer) {\n    var weight = this._checkUnsignedIntValue('signer.weight', opts.signer.weight, weightCheckFunction);\n\n    var key = void 0;\n    var setValues = 0;\n\n    if (opts.signer.ed25519PublicKey) {\n      if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n        throw new Error('signer.ed25519PublicKey is invalid.');\n      }\n\n      var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey); // eslint-disable-next-line new-cap\n\n\n      key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeEd25519(rawKey);\n      setValues += 1;\n    }\n\n    if (opts.signer.preAuthTx) {\n      if ((0, _isString2.default)(opts.signer.preAuthTx)) {\n        opts.signer.preAuthTx = Buffer.from(opts.signer.preAuthTx, 'hex');\n      }\n\n      if (!(Buffer.isBuffer(opts.signer.preAuthTx) && opts.signer.preAuthTx.length === 32)) {\n        throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n      } // eslint-disable-next-line new-cap\n\n\n      key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypePreAuthTx(opts.signer.preAuthTx);\n      setValues += 1;\n    }\n\n    if (opts.signer.sha256Hash) {\n      if ((0, _isString2.default)(opts.signer.sha256Hash)) {\n        opts.signer.sha256Hash = Buffer.from(opts.signer.sha256Hash, 'hex');\n      }\n\n      if (!(Buffer.isBuffer(opts.signer.sha256Hash) && opts.signer.sha256Hash.length === 32)) {\n        throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n      } // eslint-disable-next-line new-cap\n\n\n      key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeHashX(opts.signer.sha256Hash);\n      setValues += 1;\n    }\n\n    if (setValues !== 1) {\n      throw new Error('Signer object must contain exactly one of signer.ed25519PublicKey, signer.sha256Hash, signer.preAuthTx.');\n    }\n\n    attributes.signer = new _stellarXdr_generated2.default.Signer({\n      key: key,\n      weight: weight\n    });\n  }\n\n  var setOptionsOp = new _stellarXdr_generated2.default.SetOptionsOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.setOptions(setOptionsOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","setOptions","_isUndefined","require","_isUndefined2","_interopRequireDefault","_isString","_isString2","_stellarXdr_generated","_stellarXdr_generated2","_keypair","_strkey","obj","__esModule","default","weightCheckFunction","name","Error","opts","attributes","inflationDest","StrKey","isValidEd25519PublicKey","Keypair","fromPublicKey","xdrAccountId","clearFlags","_checkUnsignedIntValue","setFlags","masterWeight","lowThreshold","medThreshold","highThreshold","homeDomain","TypeError","signer","weight","key","setValues","ed25519PublicKey","rawKey","decodeEd25519PublicKey","SignerKey","signerKeyTypeEd25519","preAuthTx","Buffer","from","isBuffer","length","signerKeyTypePreAuthTx","sha256Hash","signerKeyTypeHashX","Signer","setOptionsOp","SetOptionsOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operations/set_options.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setOptions = setOptions;\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction weightCheckFunction(value, name) {\n  if (value >= 0 && value <= 255) {\n    return true;\n  }\n  throw new Error(name + ' value must be between 0 and 255');\n}\n\n/**\n * Returns an XDR SetOptionsOp. A \"set options\" operations set or clear account flags,\n * set the account's inflation destination, and/or add new signers to the account.\n * The flags used in `opts.clearFlags` and `opts.setFlags` can be the following:\n *   - `{@link AuthRequiredFlag}`\n *   - `{@link AuthRevocableFlag}`\n *   - `{@link AuthImmutableFlag}`\n *   - `{@link AuthClawbackEnabledFlag}`\n *\n * It's possible to set/clear multiple flags at once using logical or.\n *\n * @function\n * @alias Operation.setOptions\n *\n * @param {object} opts Options object\n * @param {string} [opts.inflationDest] - Set this account ID as the account's inflation destination.\n * @param {(number|string)} [opts.clearFlags] - Bitmap integer for which account flags to clear.\n * @param {(number|string)} [opts.setFlags] - Bitmap integer for which account flags to set.\n * @param {number|string} [opts.masterWeight] - The master key weight.\n * @param {number|string} [opts.lowThreshold] - The sum weight for the low threshold.\n * @param {number|string} [opts.medThreshold] - The sum weight for the medium threshold.\n * @param {number|string} [opts.highThreshold] - The sum weight for the high threshold.\n * @param {object} [opts.signer] - Add or remove a signer from the account. The signer is\n *                                 deleted if the weight is 0. Only one of `ed25519PublicKey`, `sha256Hash`, `preAuthTx` should be defined.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string) of preimage that will unlock funds. Preimage should be used as signature of future transaction.\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction that will unlock funds.\n * @param {number|string} [opts.signer.weight] - The weight of the new signer (0 to delete or 1-255)\n * @param {string} [opts.homeDomain] - sets the home domain used for reverse federation lookup.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.SetOptionsOp}  XDR operation\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\n/* eslint-disable no-param-reassign */\n\nfunction setOptions(opts) {\n  var attributes = {};\n\n  if (opts.inflationDest) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.inflationDest)) {\n      throw new Error('inflationDest is invalid');\n    }\n    attributes.inflationDest = _keypair.Keypair.fromPublicKey(opts.inflationDest).xdrAccountId();\n  }\n\n  attributes.clearFlags = this._checkUnsignedIntValue('clearFlags', opts.clearFlags);\n  attributes.setFlags = this._checkUnsignedIntValue('setFlags', opts.setFlags);\n  attributes.masterWeight = this._checkUnsignedIntValue('masterWeight', opts.masterWeight, weightCheckFunction);\n  attributes.lowThreshold = this._checkUnsignedIntValue('lowThreshold', opts.lowThreshold, weightCheckFunction);\n  attributes.medThreshold = this._checkUnsignedIntValue('medThreshold', opts.medThreshold, weightCheckFunction);\n  attributes.highThreshold = this._checkUnsignedIntValue('highThreshold', opts.highThreshold, weightCheckFunction);\n\n  if (!(0, _isUndefined2.default)(opts.homeDomain) && !(0, _isString2.default)(opts.homeDomain)) {\n    throw new TypeError('homeDomain argument must be of type String');\n  }\n  attributes.homeDomain = opts.homeDomain;\n\n  if (opts.signer) {\n    var weight = this._checkUnsignedIntValue('signer.weight', opts.signer.weight, weightCheckFunction);\n    var key = void 0;\n\n    var setValues = 0;\n\n    if (opts.signer.ed25519PublicKey) {\n      if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n        throw new Error('signer.ed25519PublicKey is invalid.');\n      }\n      var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n      // eslint-disable-next-line new-cap\n      key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeEd25519(rawKey);\n      setValues += 1;\n    }\n\n    if (opts.signer.preAuthTx) {\n      if ((0, _isString2.default)(opts.signer.preAuthTx)) {\n        opts.signer.preAuthTx = Buffer.from(opts.signer.preAuthTx, 'hex');\n      }\n\n      if (!(Buffer.isBuffer(opts.signer.preAuthTx) && opts.signer.preAuthTx.length === 32)) {\n        throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypePreAuthTx(opts.signer.preAuthTx);\n      setValues += 1;\n    }\n\n    if (opts.signer.sha256Hash) {\n      if ((0, _isString2.default)(opts.signer.sha256Hash)) {\n        opts.signer.sha256Hash = Buffer.from(opts.signer.sha256Hash, 'hex');\n      }\n\n      if (!(Buffer.isBuffer(opts.signer.sha256Hash) && opts.signer.sha256Hash.length === 32)) {\n        throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n      }\n\n      // eslint-disable-next-line new-cap\n      key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeHashX(opts.signer.sha256Hash);\n      setValues += 1;\n    }\n\n    if (setValues !== 1) {\n      throw new Error('Signer object must contain exactly one of signer.ed25519PublicKey, signer.sha256Hash, signer.preAuthTx.');\n    }\n\n    attributes.signer = new _stellarXdr_generated2.default.Signer({ key: key, weight: weight });\n  }\n\n  var setOptionsOp = new _stellarXdr_generated2.default.SetOptionsOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.setOptions(setOptionsOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}