{"ast":null,"code":"import { getMetadataStorage } from './metadata/MetadataStorage';\nimport { Validator } from './validation/Validator';\nimport { getFromContainer } from './container'; // -------------------------------------------------------------------------\n// Export everything api users needs\n// -------------------------------------------------------------------------\n\nexport * from './container';\nexport * from './decorator/decorators';\nexport * from './decorator/ValidationOptions';\nexport * from './validation/ValidatorConstraintInterface';\nexport * from './validation/ValidationError';\nexport * from './validation/ValidatorOptions';\nexport * from './validation/ValidationArguments';\nexport * from './validation/ValidationTypes';\nexport * from './validation/Validator';\nexport * from './validation-schema/ValidationSchema';\nexport * from './register-decorator';\nexport * from './metadata/MetadataStorage';\n/**\n * Validates given object by object's decorators or given validation schema.\n */\n\nexport function validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Validates given object by object's decorators or given validation schema and reject on error.\n */\n\nexport function validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validateOrReject(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Validates given object by object's decorators or given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\n\nexport function validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions) {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions, maybeValidatorOptions);\n  } else {\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions);\n  }\n}\n/**\n * Registers a new validation schema.\n */\n\nexport function registerSchema(schema) {\n  getMetadataStorage().addValidationSchema(schema);\n}","map":{"version":3,"mappings":"AAGA,SAASA,kBAAT,QAAmC,4BAAnC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,gBAAT,QAAiC,aAAjC,C,CAEA;AACA;AACA;;AAEA,cAAc,aAAd;AACA,cAAc,wBAAd;AACA,cAAc,+BAAd;AACA,cAAc,2CAAd;AACA,cAAc,8BAAd;AACA,cAAc,+BAAd;AACA,cAAc,kCAAd;AACA,cAAc,8BAAd;AACA,cAAc,wBAAd;AACA,cAAc,sCAAd;AACA,cAAc,sBAAd;AACA,cAAc,4BAAd;AAoBA;;;;AAGA,OAAM,SAAUC,QAAV,CACJC,kBADI,EAEJC,yBAFI,EAGJC,qBAHI,EAGoC;EAExC,IAAI,OAAOF,kBAAP,KAA8B,QAAlC,EAA4C;IAC1C,OAAOF,gBAAgB,CAACD,SAAD,CAAhB,CAA4BE,QAA5B,CACLC,kBADK,EAELC,yBAFK,EAGLC,qBAHK,CAAP;EAKD,CAND,MAMO;IACL,OAAOJ,gBAAgB,CAACD,SAAD,CAAhB,CAA4BE,QAA5B,CAAqCC,kBAArC,EAAyDC,yBAAzD,CAAP;EACD;AACF;AAgBD;;;;AAGA,OAAM,SAAUE,gBAAV,CACJH,kBADI,EAEJC,yBAFI,EAGJC,qBAHI,EAGoC;EAExC,IAAI,OAAOF,kBAAP,KAA8B,QAAlC,EAA4C;IAC1C,OAAOF,gBAAgB,CAACD,SAAD,CAAhB,CAA4BM,gBAA5B,CACLH,kBADK,EAELC,yBAFK,EAGLC,qBAHK,CAAP;EAKD,CAND,MAMO;IACL,OAAOJ,gBAAgB,CAACD,SAAD,CAAhB,CAA4BM,gBAA5B,CACLH,kBADK,EAELC,yBAFK,CAAP;EAID;AACF;AAoBD;;;;;;AAKA,OAAM,SAAUG,YAAV,CACJJ,kBADI,EAEJC,yBAFI,EAGJC,qBAHI,EAGoC;EAExC,IAAI,OAAOF,kBAAP,KAA8B,QAAlC,EAA4C;IAC1C,OAAOF,gBAAgB,CAACD,SAAD,CAAhB,CAA4BO,YAA5B,CACLJ,kBADK,EAELC,yBAFK,EAGLC,qBAHK,CAAP;EAKD,CAND,MAMO;IACL,OAAOJ,gBAAgB,CAACD,SAAD,CAAhB,CAA4BO,YAA5B,CAAyCJ,kBAAzC,EAA6DC,yBAA7D,CAAP;EACD;AACF;AAED;;;;AAGA,OAAM,SAAUI,cAAV,CAAyBC,MAAzB,EAAiD;EACrDV,kBAAkB,GAAGW,mBAArB,CAAyCD,MAAzC;AACD","names":["getMetadataStorage","Validator","getFromContainer","validate","schemaNameOrObject","objectOrValidationOptions","maybeValidatorOptions","validateOrReject","validateSync","registerSchema","schema","addValidationSchema"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}