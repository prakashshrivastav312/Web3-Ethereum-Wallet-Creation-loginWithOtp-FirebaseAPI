{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\nconst _ = require('lodash');\n\nconst BaseKIP7 = require('./kip7');\n\nconst BaseKIP17 = require('./kip17');\n\nconst KIP37 = require('./kip37');\n\nconst KIP13 = require('./kip13');\n\nconst core = require('../../caver-core');\n\nconst {\n  validateDeployParameterForKIP7,\n  validateDeployParameterForKIP17,\n  kip7ByteCode,\n  kip17ByteCode\n} = require('./kctHelper');\n/**\n * A class that manages KCT supported by caver.\n * @hideconstructor\n * @class\n */\n\n\nclass KCT {\n  constructor() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const _this = this; // sets _requestmanager\n\n\n    core.packageInit(this, args); // overwrite package setRequestManager\n\n    const setRequestManager = this.setRequestManager;\n\n    this.setRequestManager = function (manager) {\n      setRequestManager(manager);\n      _this.kip7._requestManager = _this._requestManager;\n      _this.kip7.currentProvider = _this._provider;\n      _this.kip17._requestManager = _this._requestManager;\n      _this.kip17.currentProvider = _this._provider;\n      _this.kip37._requestManager = _this._requestManager;\n      _this.kip37.currentProvider = _this._provider;\n      return true;\n    }; // overwrite setProvider\n\n\n    const setProvider = this.setProvider;\n\n    this.setProvider = function () {\n      setProvider.apply(_this, arguments);\n\n      _this.setRequestManager(_this._requestManager);\n    };\n    /**\n     * The KIP7 wrapping class that helps you to use KIP7 class with common architecture features.\n     * This class can be used via `caver.kct.kip7`, and this will use `keyrings` intead of `accounts` when operate with smart contract.\n     * @ignore\n     * @class\n     */\n\n\n    class KIP7 extends BaseKIP7 {\n      /**\n       * Creates a new KIP7 instance with its bound methods and events.\n       *\n       * @example\n       * const kip7 = caver.kct.kip7.create('0x{address in hex}')\n       *\n       * @param {string} tokenAddress - The KIP-7 token contract address.\n       * @param {Array.<object>} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n       * @return {KIP7}\n       */\n      static create(tokenAddress, abi) {\n        return new KIP7(tokenAddress, abi);\n      }\n      /**\n       * An object that defines the parameters required to deploy the KIP-7 contract.\n       *\n       * @typedef {object} KIP7.KIP7DeployParams\n       * @property {string} name - The name of the token.\n       * @property {string} symbol - The symbol of the token.\n       * @property {number} decimals - The number of decimal places the token uses.\n       * @property {string|BigNumber|number} initialSupply - The total amount of token to be supplied initially.\n       */\n\n      /**\n       * Deploys the KIP-7 token contract to the Klaytn blockchain.\n       * A contract deployed using `caver.kct.kip7.deploy` is a fungible token that follows the KIP-7 standard.\n       * The KIP7 instance deployed and returned through this function uses the `keyringContainer` instead of accounts.\n       *\n       * By default, it returns a KIP7 instance when the deployment is finished.\n       * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\n       *\n       * @example\n       * const tokenInfo = {\n       *     name: 'Test',\n       *     symbol: 'TST',\n       *     decimals: 10,\n       *     initialSupply: '1000000000000000000',\n       * }\n       * // Below example will use `caver.wallet`.\n       * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}')\n       *\n       * // Use sendOptions instead of deployer address.\n       * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\n       * const deployed = await caver.kct.kip7.deploy(tokenInfo, sendOptions)\n       *\n       * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\n       * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}', wallet)\n       *\n       * @param {KIP7.KIP7DeployParams} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n       * @param {Contract.SendOptions|String} sendOptions The address of the account to deploy the KIP-7 token contract or a {@link Contract.SendOptions|SendOptions object} holding parameters that are required for sending a transaction.\n       * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\n       * @return {Promise<*>}\n       */\n\n\n      static deploy(tokenInfo, sendOptions, wallet) {\n        validateDeployParameterForKIP7(tokenInfo);\n        const {\n          name,\n          symbol,\n          decimals,\n          initialSupply\n        } = tokenInfo;\n        const kip7 = new KIP7();\n        if (wallet !== undefined) kip7.setWallet(wallet); // If sendOptions is string type, sendOptions means deployer's address\n\n        if (_.isString(sendOptions)) sendOptions = {\n          from: sendOptions,\n          gas: 4000000,\n          value: 0\n        };\n        sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 4000000;\n        return kip7.deploy({\n          data: kip7ByteCode,\n          arguments: [name, symbol, decimals, initialSupply]\n        }).send(sendOptions);\n      }\n      /**\n       * Wrapping class of the KIP7.\n       * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\n       *\n       * @constructor\n       * @param {string} tokenAddress - The KIP-7 token contract address.\n       * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n       */\n\n\n      constructor(tokenAddress, abi) {\n        super(tokenAddress, abi);\n        core.packageInit(this, [_this]);\n        this.setWallet(args[0].wallet);\n      }\n\n    }\n    /** @type {typeof KIP7} */\n\n\n    this.kip7 = KIP7;\n    /**\n     * The KIP17 wrapping class that helps you to use KIP17 class with common architecture features.\n     * This class can be used via `caver.kct.kip17`, and this will use `keyrings` intead of `accounts` when operate with smart contract.\n     * @ignore\n     * @class\n     */\n\n    class KIP17 extends BaseKIP17 {\n      /**\n       * Creates an instance of KIP17.\n       *\n       * @example\n       * const kip17 = caver.kct.kip17.create('0x{address in hex}')\n       *\n       * @param {string} tokenAddress - The KIP-17 token contract address.\n       * @param {Array.<object>} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n       * @return {KIP17}\n       */\n      static create(tokenAddress, abi) {\n        return new KIP17(tokenAddress, abi);\n      }\n      /**\n       * An object that defines the parameters required to deploy the KIP-17 contract.\n       *\n       * @typedef {object} KIP17.KIP17DeployParams\n       * @property {string} name - The name of the token.\n       * @property {string} symbol - The symbol of the token.\n       */\n\n      /**\n       * Deploys the KIP-17 token contract to the Klaytn blockchain.\n       * A contract deployed using `caver.kct.kip17.deploy` is a non-fungible token that follows the KIP-17 standard.\n       * The KIP17 instance deployed and returned through this function uses the `keyringContainer` instead of accounts.\n       *\n       * By default, it returns a KIP17 instance when the deployment is finished.\n       * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\n       *\n       * @param {KIP17.KIP17DeployParams} tokenInfo The object that defines the name and symbol of the token to deploy.\n       * @param {Contract.SendOptions|String} sendOptions The address of the account to deploy the KIP-17 token contract or a {@link Contract.SendOptions|SendOptions object} holding parameters that are required for sending a transaction.\n       * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\n       * @return {Promise<*>}\n       */\n\n\n      static deploy(tokenInfo, sendOptions, wallet) {\n        validateDeployParameterForKIP17(tokenInfo);\n        const {\n          name,\n          symbol\n        } = tokenInfo;\n        const kip17 = new KIP17();\n        if (wallet !== undefined) kip17.setWallet(wallet); // If sendOptions is string type, sendOptions means deployer's address\n\n        if (_.isString(sendOptions)) sendOptions = {\n          from: sendOptions,\n          gas: 6600000,\n          value: 0\n        };\n        sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000;\n        return kip17.deploy({\n          data: kip17ByteCode,\n          arguments: [name, symbol]\n        }).send(sendOptions);\n      }\n      /**\n       * Wrapping class of the KIP17.\n       * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\n       *\n       * @constructor\n       * @param {string} tokenAddress - The KIP-17 token contract address.\n       * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n       */\n\n\n      constructor(tokenAddress, abi) {\n        super(tokenAddress, abi);\n        core.packageInit(this, [_this]);\n        this.setWallet(args[0].wallet);\n      }\n\n    }\n    /** @type {typeof KIP17} */\n\n\n    this.kip17 = KIP17;\n    /** @type {typeof KIP37} */\n\n    this.kip37 = KIP37;\n    this.kip37.wallet = args[0].wallet;\n    this.kip37._requestManager = this._requestManager;\n    this.kip37.currentProvider = this._requestManager.provider;\n    /** @type {typeof KIP13} */\n\n    this.kip13 = KIP13;\n    this.kip13._requestManager = this._requestManager;\n    this.kip13.currentProvider = this._requestManager.provider;\n  }\n\n}\n\nmodule.exports = KCT;","map":{"version":3,"names":["_","require","BaseKIP7","BaseKIP17","KIP37","KIP13","core","validateDeployParameterForKIP7","validateDeployParameterForKIP17","kip7ByteCode","kip17ByteCode","KCT","constructor","args","_this","packageInit","setRequestManager","manager","kip7","_requestManager","currentProvider","_provider","kip17","kip37","setProvider","apply","arguments","KIP7","create","tokenAddress","abi","deploy","tokenInfo","sendOptions","wallet","name","symbol","decimals","initialSupply","undefined","setWallet","isString","from","gas","value","data","send","KIP17","provider","kip13","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-kct/src/index.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\n\nconst _ = require('lodash')\nconst BaseKIP7 = require('./kip7')\nconst BaseKIP17 = require('./kip17')\nconst KIP37 = require('./kip37')\nconst KIP13 = require('./kip13')\nconst core = require('../../caver-core')\nconst { validateDeployParameterForKIP7, validateDeployParameterForKIP17, kip7ByteCode, kip17ByteCode } = require('./kctHelper')\n\n/**\n * A class that manages KCT supported by caver.\n * @hideconstructor\n * @class\n */\nclass KCT {\n    constructor(...args) {\n        const _this = this\n\n        // sets _requestmanager\n        core.packageInit(this, args)\n\n        // overwrite package setRequestManager\n        const setRequestManager = this.setRequestManager\n        this.setRequestManager = function(manager) {\n            setRequestManager(manager)\n\n            _this.kip7._requestManager = _this._requestManager\n            _this.kip7.currentProvider = _this._provider\n            _this.kip17._requestManager = _this._requestManager\n            _this.kip17.currentProvider = _this._provider\n            _this.kip37._requestManager = _this._requestManager\n            _this.kip37.currentProvider = _this._provider\n\n            return true\n        }\n\n        // overwrite setProvider\n        const setProvider = this.setProvider\n        this.setProvider = function() {\n            setProvider.apply(_this, arguments)\n            _this.setRequestManager(_this._requestManager)\n        }\n\n        /**\n         * The KIP7 wrapping class that helps you to use KIP7 class with common architecture features.\n         * This class can be used via `caver.kct.kip7`, and this will use `keyrings` intead of `accounts` when operate with smart contract.\n         * @ignore\n         * @class\n         */\n        class KIP7 extends BaseKIP7 {\n            /**\n             * Creates a new KIP7 instance with its bound methods and events.\n             *\n             * @example\n             * const kip7 = caver.kct.kip7.create('0x{address in hex}')\n             *\n             * @param {string} tokenAddress - The KIP-7 token contract address.\n             * @param {Array.<object>} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n             * @return {KIP7}\n             */\n            static create(tokenAddress, abi) {\n                return new KIP7(tokenAddress, abi)\n            }\n\n            /**\n             * An object that defines the parameters required to deploy the KIP-7 contract.\n             *\n             * @typedef {object} KIP7.KIP7DeployParams\n             * @property {string} name - The name of the token.\n             * @property {string} symbol - The symbol of the token.\n             * @property {number} decimals - The number of decimal places the token uses.\n             * @property {string|BigNumber|number} initialSupply - The total amount of token to be supplied initially.\n             */\n            /**\n             * Deploys the KIP-7 token contract to the Klaytn blockchain.\n             * A contract deployed using `caver.kct.kip7.deploy` is a fungible token that follows the KIP-7 standard.\n             * The KIP7 instance deployed and returned through this function uses the `keyringContainer` instead of accounts.\n             *\n             * By default, it returns a KIP7 instance when the deployment is finished.\n             * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\n             *\n             * @example\n             * const tokenInfo = {\n             *     name: 'Test',\n             *     symbol: 'TST',\n             *     decimals: 10,\n             *     initialSupply: '1000000000000000000',\n             * }\n             * // Below example will use `caver.wallet`.\n             * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}')\n             *\n             * // Use sendOptions instead of deployer address.\n             * const sendOptions = { from: '0x{deployer address}', feeDelegation: true, feePayer: '0x{fee payer address}' }\n             * const deployed = await caver.kct.kip7.deploy(tokenInfo, sendOptions)\n             *\n             * // If you want to use your own wallet that implements the 'IWallet' interface, pass it into the last parameter.\n             * const deployed = await caver.kct.kip7.deploy(tokenInfo, '0x{deployer address}', wallet)\n             *\n             * @param {KIP7.KIP7DeployParams} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n             * @param {Contract.SendOptions|String} sendOptions The address of the account to deploy the KIP-7 token contract or a {@link Contract.SendOptions|SendOptions object} holding parameters that are required for sending a transaction.\n             * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\n             * @return {Promise<*>}\n             */\n            static deploy(tokenInfo, sendOptions, wallet) {\n                validateDeployParameterForKIP7(tokenInfo)\n\n                const { name, symbol, decimals, initialSupply } = tokenInfo\n                const kip7 = new KIP7()\n                if (wallet !== undefined) kip7.setWallet(wallet)\n\n                // If sendOptions is string type, sendOptions means deployer's address\n                if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 4000000, value: 0 }\n                sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 4000000\n\n                return kip7\n                    .deploy({\n                        data: kip7ByteCode,\n                        arguments: [name, symbol, decimals, initialSupply],\n                    })\n                    .send(sendOptions)\n            }\n\n            /**\n             * Wrapping class of the KIP7.\n             * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\n             *\n             * @constructor\n             * @param {string} tokenAddress - The KIP-7 token contract address.\n             * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n             */\n            constructor(tokenAddress, abi) {\n                super(tokenAddress, abi)\n                core.packageInit(this, [_this])\n                this.setWallet(args[0].wallet)\n            }\n        }\n        /** @type {typeof KIP7} */\n        this.kip7 = KIP7\n\n        /**\n         * The KIP17 wrapping class that helps you to use KIP17 class with common architecture features.\n         * This class can be used via `caver.kct.kip17`, and this will use `keyrings` intead of `accounts` when operate with smart contract.\n         * @ignore\n         * @class\n         */\n        class KIP17 extends BaseKIP17 {\n            /**\n             * Creates an instance of KIP17.\n             *\n             * @example\n             * const kip17 = caver.kct.kip17.create('0x{address in hex}')\n             *\n             * @param {string} tokenAddress - The KIP-17 token contract address.\n             * @param {Array.<object>} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n             * @return {KIP17}\n             */\n            static create(tokenAddress, abi) {\n                return new KIP17(tokenAddress, abi)\n            }\n\n            /**\n             * An object that defines the parameters required to deploy the KIP-17 contract.\n             *\n             * @typedef {object} KIP17.KIP17DeployParams\n             * @property {string} name - The name of the token.\n             * @property {string} symbol - The symbol of the token.\n             */\n            /**\n             * Deploys the KIP-17 token contract to the Klaytn blockchain.\n             * A contract deployed using `caver.kct.kip17.deploy` is a non-fungible token that follows the KIP-17 standard.\n             * The KIP17 instance deployed and returned through this function uses the `keyringContainer` instead of accounts.\n             *\n             * By default, it returns a KIP17 instance when the deployment is finished.\n             * If you define a custom function in the `contractDeployFormatter` field in {@link Contract.SendOptions|SendOptions}, you can control return type.\n             *\n             * @param {KIP17.KIP17DeployParams} tokenInfo The object that defines the name and symbol of the token to deploy.\n             * @param {Contract.SendOptions|String} sendOptions The address of the account to deploy the KIP-17 token contract or a {@link Contract.SendOptions|SendOptions object} holding parameters that are required for sending a transaction.\n             * @param {IWallet} [wallet] The wallet instance to sign and send a transaction.\n             * @return {Promise<*>}\n             */\n            static deploy(tokenInfo, sendOptions, wallet) {\n                validateDeployParameterForKIP17(tokenInfo)\n\n                const { name, symbol } = tokenInfo\n                const kip17 = new KIP17()\n                if (wallet !== undefined) kip17.setWallet(wallet)\n\n                // If sendOptions is string type, sendOptions means deployer's address\n                if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 6600000, value: 0 }\n                sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000\n\n                return kip17\n                    .deploy({\n                        data: kip17ByteCode,\n                        arguments: [name, symbol],\n                    })\n                    .send(sendOptions)\n            }\n\n            /**\n             * Wrapping class of the KIP17.\n             * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\n             *\n             * @constructor\n             * @param {string} tokenAddress - The KIP-17 token contract address.\n             * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n             */\n            constructor(tokenAddress, abi) {\n                super(tokenAddress, abi)\n                core.packageInit(this, [_this])\n                this.setWallet(args[0].wallet)\n            }\n        }\n        /** @type {typeof KIP17} */\n        this.kip17 = KIP17\n\n        /** @type {typeof KIP37} */\n        this.kip37 = KIP37\n        this.kip37.wallet = args[0].wallet\n        this.kip37._requestManager = this._requestManager\n        this.kip37.currentProvider = this._requestManager.provider\n\n        /** @type {typeof KIP13} */\n        this.kip13 = KIP13\n        this.kip13._requestManager = this._requestManager\n        this.kip13.currentProvider = this._requestManager.provider\n    }\n}\n\nmodule.exports = KCT\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}