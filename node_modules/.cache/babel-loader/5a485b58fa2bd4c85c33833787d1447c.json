{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BooleanBinaryCodec = void 0;\n\nconst errors = __importStar(require(\"../../errors\"));\n\nconst typesystem_1 = require(\"../typesystem\");\n/**\n * Encodes and decodes \"BooleanValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\n\n\nclass BooleanBinaryCodec {\n  decodeNested(buffer) {\n    // We don't check the size of the buffer, we just read the first byte.\n    let byte = buffer.readUInt8();\n    return [new typesystem_1.BooleanValue(byte == BooleanBinaryCodec.TRUE), 1];\n  }\n\n  decodeTopLevel(buffer) {\n    if (buffer.length > 1) {\n      throw new errors.ErrInvalidArgument(\"buffer\", buffer, \"should be a buffer of size <= 1\");\n    }\n\n    let firstByte = buffer[0];\n    return new typesystem_1.BooleanValue(firstByte == BooleanBinaryCodec.TRUE);\n  }\n\n  encodeNested(primitive) {\n    if (primitive.isTrue()) {\n      return Buffer.from([BooleanBinaryCodec.TRUE]);\n    }\n\n    return Buffer.from([BooleanBinaryCodec.FALSE]);\n  }\n\n  encodeTopLevel(primitive) {\n    if (primitive.isTrue()) {\n      return Buffer.from([BooleanBinaryCodec.TRUE]);\n    }\n\n    return Buffer.from([]);\n  }\n\n}\n\nexports.BooleanBinaryCodec = BooleanBinaryCodec;\nBooleanBinaryCodec.TRUE = 0x01;\nBooleanBinaryCodec.FALSE = 0x00;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAEA;;;;;;AAIA,MAAaA,kBAAb,CAA+B;EAI3BC,YAAY,CAACC,MAAD,EAAe;IACvB;IAEA,IAAIC,IAAI,GAAGD,MAAM,CAACE,SAAP,EAAX;IACA,OAAO,CAAC,IAAIC,yBAAJ,CAAiBF,IAAI,IAAIH,kBAAkB,CAACM,IAA5C,CAAD,EAAoD,CAApD,CAAP;EACH;;EAEDC,cAAc,CAACL,MAAD,EAAe;IACzB,IAAIA,MAAM,CAACM,MAAP,GAAgB,CAApB,EAAuB;MACnB,MAAM,IAAIC,MAAM,CAACC,kBAAX,CAA8B,QAA9B,EAAwCR,MAAxC,EAAgD,iCAAhD,CAAN;IACH;;IAED,IAAIS,SAAS,GAAGT,MAAM,CAAC,CAAD,CAAtB;IACA,OAAO,IAAIG,yBAAJ,CAAiBM,SAAS,IAAIX,kBAAkB,CAACM,IAAjD,CAAP;EACH;;EAEDM,YAAY,CAACC,SAAD,EAAwB;IAChC,IAAIA,SAAS,CAACC,MAAV,EAAJ,EAAwB;MACpB,OAAOC,MAAM,CAACC,IAAP,CAAY,CAAChB,kBAAkB,CAACM,IAApB,CAAZ,CAAP;IACH;;IAED,OAAOS,MAAM,CAACC,IAAP,CAAY,CAAChB,kBAAkB,CAACiB,KAApB,CAAZ,CAAP;EACH;;EAEDC,cAAc,CAACL,SAAD,EAAwB;IAClC,IAAIA,SAAS,CAACC,MAAV,EAAJ,EAAwB;MACpB,OAAOC,MAAM,CAACC,IAAP,CAAY,CAAChB,kBAAkB,CAACM,IAApB,CAAZ,CAAP;IACH;;IAED,OAAOS,MAAM,CAACC,IAAP,CAAY,EAAZ,CAAP;EACH;;AAlC0B;;AAA/BG;AAC4BnB,0BAAe,IAAf;AACAA,2BAAgB,IAAhB","names":["BooleanBinaryCodec","decodeNested","buffer","byte","readUInt8","typesystem_1","TRUE","decodeTopLevel","length","errors","ErrInvalidArgument","firstByte","encodeNested","primitive","isTrue","Buffer","from","FALSE","encodeTopLevel","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/boolean.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}