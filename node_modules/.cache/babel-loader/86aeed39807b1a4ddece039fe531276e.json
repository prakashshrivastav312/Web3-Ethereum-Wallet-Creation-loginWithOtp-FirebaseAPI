{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = includeIoMixin;\n\nvar _extend = require('lodash/extend');\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _isFunction = require('lodash/isFunction');\n\nvar _isFunction2 = _interopRequireDefault(_isFunction);\n\nvar _cursor = require('./cursor');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // TODO: build a system to grow a buffer as we write to it\n\n\nvar BUFFER_SIZE = Math.pow(2, 16);\nvar staticMethods = {\n  toXDR: function toXDR(val) {\n    var cursor = new _cursor.Cursor(BUFFER_SIZE);\n    this.write(val, cursor);\n    var bytesWritten = cursor.tell();\n    cursor.rewind();\n    return cursor.slice(bytesWritten).buffer();\n  },\n  fromXDR: function fromXDR(input) {\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'raw';\n    var buffer = void 0;\n\n    switch (format) {\n      case 'raw':\n        buffer = input;\n        break;\n\n      case 'hex':\n        buffer = Buffer.from(input, 'hex');\n        break;\n\n      case 'base64':\n        buffer = Buffer.from(input, 'base64');\n        break;\n\n      default:\n        throw new Error('Invalid format ' + format + ', must be \"raw\", \"hex\", \"base64\"');\n    }\n\n    var cursor = new _cursor.Cursor(buffer);\n    var result = this.read(cursor); // TODO: error out if the entire buffer isn't consumed\n\n    return result;\n  },\n  validateXDR: function validateXDR(input) {\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'raw';\n\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n};\nvar instanceMethods = {\n  toXDR: function toXDR() {\n    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'raw';\n    var buffer = this.constructor.toXDR(this);\n\n    switch (format) {\n      case 'raw':\n        return buffer;\n\n      case 'hex':\n        return buffer.toString('hex');\n\n      case 'base64':\n        return buffer.toString('base64');\n\n      default:\n        throw new Error('Invalid format ' + format + ', must be \"raw\", \"hex\", \"base64\"');\n    }\n  }\n};\n\nfunction includeIoMixin(obj) {\n  (0, _extend2.default)(obj, staticMethods);\n\n  if ((0, _isFunction2.default)(obj)) {\n    (0, _extend2.default)(obj.prototype, instanceMethods);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","includeIoMixin","_extend","require","_extend2","_interopRequireDefault","_isFunction","_isFunction2","_cursor","obj","__esModule","BUFFER_SIZE","Math","pow","staticMethods","toXDR","val","cursor","Cursor","write","bytesWritten","tell","rewind","slice","buffer","fromXDR","input","format","arguments","length","undefined","Buffer","from","Error","result","read","validateXDR","e","instanceMethods","constructor","toString","prototype"],"sources":["C:/Users/acer/node_modules/js-xdr/lib/io-mixin.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = includeIoMixin;\n\nvar _extend = require('lodash/extend');\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _isFunction = require('lodash/isFunction');\n\nvar _isFunction2 = _interopRequireDefault(_isFunction);\n\nvar _cursor = require('./cursor');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO: build a system to grow a buffer as we write to it\nvar BUFFER_SIZE = Math.pow(2, 16);\n\nvar staticMethods = {\n  toXDR: function toXDR(val) {\n    var cursor = new _cursor.Cursor(BUFFER_SIZE);\n    this.write(val, cursor);\n    var bytesWritten = cursor.tell();\n    cursor.rewind();\n\n    return cursor.slice(bytesWritten).buffer();\n  },\n  fromXDR: function fromXDR(input) {\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'raw';\n\n    var buffer = void 0;\n    switch (format) {\n      case 'raw':\n        buffer = input;\n        break;\n      case 'hex':\n        buffer = Buffer.from(input, 'hex');\n        break;\n      case 'base64':\n        buffer = Buffer.from(input, 'base64');\n        break;\n      default:\n        throw new Error('Invalid format ' + format + ', must be \"raw\", \"hex\", \"base64\"');\n    }\n\n    var cursor = new _cursor.Cursor(buffer);\n    var result = this.read(cursor);\n\n    // TODO: error out if the entire buffer isn't consumed\n\n    return result;\n  },\n  validateXDR: function validateXDR(input) {\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'raw';\n\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n};\n\nvar instanceMethods = {\n  toXDR: function toXDR() {\n    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'raw';\n\n    var buffer = this.constructor.toXDR(this);\n    switch (format) {\n      case 'raw':\n        return buffer;\n      case 'hex':\n        return buffer.toString('hex');\n      case 'base64':\n        return buffer.toString('base64');\n      default:\n        throw new Error('Invalid format ' + format + ', must be \"raw\", \"hex\", \"base64\"');\n    }\n  }\n};\n\nfunction includeIoMixin(obj) {\n  (0, _extend2.default)(obj, staticMethods);\n\n  if ((0, _isFunction2.default)(obj)) {\n    (0, _extend2.default)(obj.prototype, instanceMethods);\n  }\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,cAAlB;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIC,QAAQ,GAAGC,sBAAsB,CAACH,OAAD,CAArC;;AAEA,IAAII,WAAW,GAAGH,OAAO,CAAC,mBAAD,CAAzB;;AAEA,IAAII,YAAY,GAAGF,sBAAsB,CAACC,WAAD,CAAzC;;AAEA,IAAIE,OAAO,GAAGL,OAAO,CAAC,UAAD,CAArB;;AAEA,SAASE,sBAAT,CAAgCI,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAET,OAAO,EAAES;EAAX,CAArC;AAAwD,C,CAE/F;;;AACA,IAAIE,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAlB;AAEA,IAAIC,aAAa,GAAG;EAClBC,KAAK,EAAE,SAASA,KAAT,CAAeC,GAAf,EAAoB;IACzB,IAAIC,MAAM,GAAG,IAAIT,OAAO,CAACU,MAAZ,CAAmBP,WAAnB,CAAb;IACA,KAAKQ,KAAL,CAAWH,GAAX,EAAgBC,MAAhB;IACA,IAAIG,YAAY,GAAGH,MAAM,CAACI,IAAP,EAAnB;IACAJ,MAAM,CAACK,MAAP;IAEA,OAAOL,MAAM,CAACM,KAAP,CAAaH,YAAb,EAA2BI,MAA3B,EAAP;EACD,CARiB;EASlBC,OAAO,EAAE,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;IAC/B,IAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAjF;IAEA,IAAIJ,MAAM,GAAG,KAAK,CAAlB;;IACA,QAAQG,MAAR;MACE,KAAK,KAAL;QACEH,MAAM,GAAGE,KAAT;QACA;;MACF,KAAK,KAAL;QACEF,MAAM,GAAGO,MAAM,CAACC,IAAP,CAAYN,KAAZ,EAAmB,KAAnB,CAAT;QACA;;MACF,KAAK,QAAL;QACEF,MAAM,GAAGO,MAAM,CAACC,IAAP,CAAYN,KAAZ,EAAmB,QAAnB,CAAT;QACA;;MACF;QACE,MAAM,IAAIO,KAAJ,CAAU,oBAAoBN,MAApB,GAA6B,kCAAvC,CAAN;IAXJ;;IAcA,IAAIV,MAAM,GAAG,IAAIT,OAAO,CAACU,MAAZ,CAAmBM,MAAnB,CAAb;IACA,IAAIU,MAAM,GAAG,KAAKC,IAAL,CAAUlB,MAAV,CAAb,CAnB+B,CAqB/B;;IAEA,OAAOiB,MAAP;EACD,CAjCiB;EAkClBE,WAAW,EAAE,SAASA,WAAT,CAAqBV,KAArB,EAA4B;IACvC,IAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAjF;;IAEA,IAAI;MACF,KAAKH,OAAL,CAAaC,KAAb,EAAoBC,MAApB;MACA,OAAO,IAAP;IACD,CAHD,CAGE,OAAOU,CAAP,EAAU;MACV,OAAO,KAAP;IACD;EACF;AA3CiB,CAApB;AA8CA,IAAIC,eAAe,GAAG;EACpBvB,KAAK,EAAE,SAASA,KAAT,GAAiB;IACtB,IAAIY,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAjF;IAEA,IAAIJ,MAAM,GAAG,KAAKe,WAAL,CAAiBxB,KAAjB,CAAuB,IAAvB,CAAb;;IACA,QAAQY,MAAR;MACE,KAAK,KAAL;QACE,OAAOH,MAAP;;MACF,KAAK,KAAL;QACE,OAAOA,MAAM,CAACgB,QAAP,CAAgB,KAAhB,CAAP;;MACF,KAAK,QAAL;QACE,OAAOhB,MAAM,CAACgB,QAAP,CAAgB,QAAhB,CAAP;;MACF;QACE,MAAM,IAAIP,KAAJ,CAAU,oBAAoBN,MAApB,GAA6B,kCAAvC,CAAN;IARJ;EAUD;AAfmB,CAAtB;;AAkBA,SAAS1B,cAAT,CAAwBQ,GAAxB,EAA6B;EAC3B,CAAC,GAAGL,QAAQ,CAACJ,OAAb,EAAsBS,GAAtB,EAA2BK,aAA3B;;EAEA,IAAI,CAAC,GAAGP,YAAY,CAACP,OAAjB,EAA0BS,GAA1B,CAAJ,EAAoC;IAClC,CAAC,GAAGL,QAAQ,CAACJ,OAAb,EAAsBS,GAAG,CAACgC,SAA1B,EAAqCH,eAArC;EACD;AACF"},"metadata":{},"sourceType":"script"}