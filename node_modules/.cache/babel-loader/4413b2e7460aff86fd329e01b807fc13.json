{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateAddressAPI = void 0;\n\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\n\nconst ripple_keypairs_1 = __importDefault(require(\"ripple-keypairs\"));\n\nconst common_1 = require(\"../common\");\n\nfunction generateAddressAPI() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  common_1.validate.generateAddress({\n    options\n  });\n\n  try {\n    const generateSeedOptions = {\n      algorithm: options.algorithm\n    };\n\n    if (options.entropy) {\n      generateSeedOptions.entropy = Uint8Array.from(options.entropy);\n    }\n\n    const secret = ripple_keypairs_1.default.generateSeed(generateSeedOptions);\n    const keypair = ripple_keypairs_1.default.deriveKeypair(secret);\n    const classicAddress = ripple_keypairs_1.default.deriveAddress(keypair.publicKey);\n    const returnValue = {\n      xAddress: ripple_address_codec_1.classicAddressToXAddress(classicAddress, false, options && options.test),\n      secret\n    };\n\n    if (options.includeClassicAddress) {\n      returnValue.classicAddress = classicAddress;\n      returnValue.address = classicAddress;\n    }\n\n    return returnValue;\n  } catch (error) {\n    throw new common_1.errors.UnexpectedError(error.message);\n  }\n}\n\nexports.generateAddressAPI = generateAddressAPI;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAyBA,SAASA,kBAAT,GAAgE;EAAA,IAApCC,OAAoC,uEAAF,EAAE;EAC9DC,kBAASC,eAAT,CAAyB;IAACF;EAAD,CAAzB;;EACA,IAAI;IACF,MAAMG,mBAAmB,GAGrB;MACFC,SAAS,EAAEJ,OAAO,CAACI;IADjB,CAHJ;;IAMA,IAAIJ,OAAO,CAACK,OAAZ,EAAqB;MACnBF,mBAAmB,CAACE,OAApB,GAA8BC,UAAU,CAACC,IAAX,CAAgBP,OAAO,CAACK,OAAxB,CAA9B;IACD;;IACD,MAAMG,MAAM,GAAGC,0BAASC,YAAT,CAAsBP,mBAAtB,CAAf;IACA,MAAMQ,OAAO,GAAGF,0BAASG,aAAT,CAAuBJ,MAAvB,CAAhB;IACA,MAAMK,cAAc,GAAGJ,0BAASK,aAAT,CAAuBH,OAAO,CAACI,SAA/B,CAAvB;IACA,MAAMC,WAAW,GAAQ;MACvBC,QAAQ,EAAEC,gDACRL,cADQ,EAER,KAFQ,EAGRb,OAAO,IAAIA,OAAO,CAACmB,IAHX,CADa;MAMvBX;IANuB,CAAzB;;IAQA,IAAIR,OAAO,CAACoB,qBAAZ,EAAmC;MACjCJ,WAAW,CAACH,cAAZ,GAA6BA,cAA7B;MACAG,WAAW,CAACK,OAAZ,GAAsBR,cAAtB;IACD;;IACD,OAAOG,WAAP;EACD,CA1BD,CA0BE,OAAOM,KAAP,EAAc;IACd,MAAM,IAAIrB,gBAAOsB,eAAX,CAA2BD,KAAK,CAACE,OAAjC,CAAN;EACD;AACF;;AAEOC","names":["generateAddressAPI","options","common_1","generateAddress","generateSeedOptions","algorithm","entropy","Uint8Array","from","secret","ripple_keypairs_1","generateSeed","keypair","deriveKeypair","classicAddress","deriveAddress","publicKey","returnValue","xAddress","ripple_address_codec_1","test","includeClassicAddress","address","error","UnexpectedError","message","exports"],"sourceRoot":"","sources":["../../../src/offline/generate-address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}