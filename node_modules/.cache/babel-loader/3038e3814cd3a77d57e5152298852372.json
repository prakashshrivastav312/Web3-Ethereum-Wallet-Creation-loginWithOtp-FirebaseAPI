{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.changeTrust = changeTrust;\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _jsXdr = require('js-xdr');\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _asset = require('../asset');\n\nvar _liquidity_pool_asset = require('../liquidity_pool_asset');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MAX_INT64 = '9223372036854775807';\n/**\n * Returns an XDR ChangeTrustOp. A \"change trust\" operation adds, removes, or updates a\n * trust line for a given asset from the source account to another.\n * @function\n * @alias Operation.changeTrust\n * @param {object} opts Options object\n * @param {Asset | LiquidityPoolAsset} opts.asset - The asset for the trust line.\n * @param {string} [opts.limit] - The limit for the asset, defaults to max int64.\n *                                If the limit is set to \"0\" it deletes the trustline.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @returns {xdr.ChangeTrustOp} Change Trust operation\n */\n\nfunction changeTrust(opts) {\n  var attributes = {};\n\n  if (opts.asset instanceof _asset.Asset) {\n    attributes.line = opts.asset.toChangeTrustXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_asset.LiquidityPoolAsset) {\n    attributes.line = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be Asset or LiquidityPoolAsset');\n  }\n\n  if (!(0, _isUndefined2.default)(opts.limit) && !this.isValidAmount(opts.limit, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('limit'));\n  }\n\n  if (opts.limit) {\n    attributes.limit = this._toXDRAmount(opts.limit);\n  } else {\n    attributes.limit = _jsXdr.Hyper.fromString(new _bignumber2.default(MAX_INT64).toString());\n  }\n\n  if (opts.source) {\n    attributes.source = opts.source.masterKeypair;\n  }\n\n  var changeTrustOP = new _stellarXdr_generated2.default.ChangeTrustOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.changeTrust(changeTrustOP);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","changeTrust","_isUndefined","require","_isUndefined2","_interopRequireDefault","_jsXdr","_bignumber","_bignumber2","_stellarXdr_generated","_stellarXdr_generated2","_asset","_liquidity_pool_asset","obj","__esModule","default","MAX_INT64","opts","attributes","asset","Asset","line","toChangeTrustXDRObject","LiquidityPoolAsset","toXDRObject","TypeError","limit","isValidAmount","constructAmountRequirementsError","_toXDRAmount","Hyper","fromString","toString","source","masterKeypair","changeTrustOP","ChangeTrustOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operations/change_trust.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.changeTrust = changeTrust;\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _jsXdr = require('js-xdr');\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _asset = require('../asset');\n\nvar _liquidity_pool_asset = require('../liquidity_pool_asset');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * Returns an XDR ChangeTrustOp. A \"change trust\" operation adds, removes, or updates a\n * trust line for a given asset from the source account to another.\n * @function\n * @alias Operation.changeTrust\n * @param {object} opts Options object\n * @param {Asset | LiquidityPoolAsset} opts.asset - The asset for the trust line.\n * @param {string} [opts.limit] - The limit for the asset, defaults to max int64.\n *                                If the limit is set to \"0\" it deletes the trustline.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n * @returns {xdr.ChangeTrustOp} Change Trust operation\n */\nfunction changeTrust(opts) {\n  var attributes = {};\n\n  if (opts.asset instanceof _asset.Asset) {\n    attributes.line = opts.asset.toChangeTrustXDRObject();\n  } else if (opts.asset instanceof _liquidity_pool_asset.LiquidityPoolAsset) {\n    attributes.line = opts.asset.toXDRObject();\n  } else {\n    throw new TypeError('asset must be Asset or LiquidityPoolAsset');\n  }\n\n  if (!(0, _isUndefined2.default)(opts.limit) && !this.isValidAmount(opts.limit, true)) {\n    throw new TypeError(this.constructAmountRequirementsError('limit'));\n  }\n\n  if (opts.limit) {\n    attributes.limit = this._toXDRAmount(opts.limit);\n  } else {\n    attributes.limit = _jsXdr.Hyper.fromString(new _bignumber2.default(MAX_INT64).toString());\n  }\n\n  if (opts.source) {\n    attributes.source = opts.source.masterKeypair;\n  }\n  var changeTrustOP = new _stellarXdr_generated2.default.ChangeTrustOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.changeTrust(changeTrustOP);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}