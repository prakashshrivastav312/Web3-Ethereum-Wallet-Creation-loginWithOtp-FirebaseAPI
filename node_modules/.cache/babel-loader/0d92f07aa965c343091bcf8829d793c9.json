{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareXlmSignedTransaction = exports.signXlmKMSTransaction = exports.sendXlmTransaction = void 0;\n\nconst stellar_sdk_1 = require(\"stellar-sdk\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n/**\n * Send Stellar transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\n\nconst sendXlmTransaction = async (testnet, body) => {\n  return blockchain_1.xlmBroadcast(await exports.prepareXlmSignedTransaction(testnet, body));\n};\n\nexports.sendXlmTransaction = sendXlmTransaction;\n/**\n * Sign Stellar pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param secret secret key to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signXlmKMSTransaction = async (tx, secret, testnet) => {\n  if (tx.chain !== model_1.Currency.XLM) {\n    throw Error('Unsupported chain.');\n  }\n\n  const transaction = stellar_sdk_1.TransactionBuilder.fromXDR(tx.serializedTransaction, testnet ? stellar_sdk_1.Networks.TESTNET : stellar_sdk_1.Networks.PUBLIC);\n  transaction.sign(stellar_sdk_1.Keypair.fromSecret(secret));\n  return transaction.toEnvelope().toXDR().toString('base64');\n};\n\nexports.signXlmKMSTransaction = signXlmKMSTransaction;\n/**\n * Sign Stellar transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareXlmSignedTransaction = async (testnet, body) => {\n  await tatum_1.validateBody(body, model_1.TransferXlm);\n  const {\n    fromSecret,\n    to,\n    amount,\n    message,\n    initialize\n  } = body;\n  const memo = message ? message.length > 28 ? stellar_sdk_1.Memo.hash(message) : stellar_sdk_1.Memo.text(message) : undefined;\n  const fromAccount = stellar_sdk_1.Keypair.fromSecret(fromSecret).publicKey();\n  const account = await blockchain_1.xlmGetAccountInfo(fromAccount);\n  const builder = new stellar_sdk_1.TransactionBuilder(new stellar_sdk_1.Account(fromAccount, account.sequence), {\n    fee: '100',\n    networkPassphrase: testnet ? stellar_sdk_1.Networks.TESTNET : stellar_sdk_1.Networks.PUBLIC,\n    memo\n  }).setTimeout(300);\n  const tx = initialize ? builder.addOperation(stellar_sdk_1.Operation.createAccount({\n    destination: to.trim(),\n    startingBalance: amount\n  })).build() : builder.addOperation(stellar_sdk_1.Operation.payment({\n    destination: to.trim(),\n    asset: stellar_sdk_1.Asset.native(),\n    amount\n  })).build();\n  tx.sign(stellar_sdk_1.Keypair.fromSecret(fromSecret));\n  return tx.toEnvelope().toXDR().toString('base64');\n};\n\nexports.prepareXlmSignedTransaction = prepareXlmSignedTransaction; // TODO: add support for TrustLine","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;AAEA;;;;;;;;;AAOO,MAAMA,kBAAkB,GAAG,OAAOC,OAAP,EAAyBC,IAAzB,KAA8C;EAC5E,OAAOC,0BAAa,MAAMC,oCAA4BH,OAA5B,EAAqCC,IAArC,CAAnB,CAAP;AACH,CAFM;;AAAME,6BAAkBJ,kBAAlB;AAIb;;;;;;;;AAOO,MAAMK,qBAAqB,GAAG,OAAOC,EAAP,EAA2BC,MAA3B,EAA2CN,OAA3C,KAA+D;EAChG,IAAIK,EAAE,CAACE,KAAH,KAAaC,iBAASC,GAA1B,EAA+B;IAC3B,MAAMC,KAAK,CAAC,oBAAD,CAAX;EACH;;EACD,MAAMC,WAAW,GAAGC,iCAAmBC,OAAnB,CAA2BR,EAAE,CAACS,qBAA9B,EAAqDd,OAAO,GAAGY,uBAASG,OAAZ,GAAsBH,uBAASI,MAA3F,CAApB;EACAL,WAAW,CAACM,IAAZ,CAAiBL,sBAAQM,UAAR,CAAmBZ,MAAnB,CAAjB;EACA,OAAOK,WAAW,CAACQ,UAAZ,GAAyBC,KAAzB,GAAiCC,QAAjC,CAA0C,QAA1C,CAAP;AACH,CAPM;;AAAMlB,gCAAqBC,qBAArB;AASb;;;;;;;AAMO,MAAMkB,2BAA2B,GAAG,OAAOtB,OAAP,EAAyBC,IAAzB,KAA8C;EACrF,MAAMsB,qBAAatB,IAAb,EAAmBO,mBAAnB,CAAN;EACA,MAAM;IACFU,UADE;IAEFM,EAFE;IAGFC,MAHE;IAIFC,OAJE;IAKFC;EALE,IAMF1B,IANJ;EAQA,MAAM2B,IAAI,GAAGF,OAAO,GAAGA,OAAO,CAACG,MAAR,GAAiB,EAAjB,GAAsBjB,mBAAKkB,IAAL,CAAUJ,OAAV,CAAtB,GAA2Cd,mBAAKmB,IAAL,CAAUL,OAAV,CAA9C,GAAmEM,SAAvF;EACA,MAAMC,WAAW,GAAGrB,sBAAQM,UAAR,CAAmBA,UAAnB,EAA+BgB,SAA/B,EAApB;EACA,MAAMC,OAAO,GAAG,MAAMjC,+BAAkB+B,WAAlB,CAAtB;EACA,MAAMG,OAAO,GAAG,IAAIxB,gCAAJ,CAAuB,IAAIA,qBAAJ,CAAYqB,WAAZ,EAAyBE,OAAO,CAACE,QAAjC,CAAvB,EAAmE;IAC/EC,GAAG,EAAE,KAD0E;IAE/EC,iBAAiB,EAAEvC,OAAO,GAAGY,uBAASG,OAAZ,GAAsBH,uBAASI,MAFsB;IAG/EY;EAH+E,CAAnE,EAIbY,UAJa,CAIF,GAJE,CAAhB;EAKA,MAAMnC,EAAE,GAAGsB,UAAU,GACfS,OAAO,CAACK,YAAR,CAAqB7B,wBAAU8B,aAAV,CAAwB;IAC3CC,WAAW,EAAEnB,EAAE,CAACoB,IAAH,EAD8B;IAE3CC,eAAe,EAAEpB;EAF0B,CAAxB,CAArB,EAGEqB,KAHF,EADe,GAKfV,OAAO,CAACK,YAAR,CAAqB7B,wBAAUmC,OAAV,CAAkB;IACrCJ,WAAW,EAAEnB,EAAE,CAACoB,IAAH,EADwB;IAErCI,KAAK,EAAEpC,oBAAMqC,MAAN,EAF8B;IAGrCxB;EAHqC,CAAlB,CAArB,EAKGqB,KALH,EALN;EAWAzC,EAAE,CAACY,IAAH,CAAQL,sBAAQM,UAAR,CAAmBA,UAAnB,CAAR;EACA,OAAOb,EAAE,CAACc,UAAH,GAAgBC,KAAhB,GAAwBC,QAAxB,CAAiC,QAAjC,CAAP;AACH,CA/BM;;AAAMlB,sCAA2BmB,2BAA3B,C,CAiCb","names":["sendXlmTransaction","testnet","body","blockchain_1","exports","signXlmKMSTransaction","tx","secret","chain","model_1","XLM","Error","transaction","stellar_sdk_1","fromXDR","serializedTransaction","TESTNET","PUBLIC","sign","fromSecret","toEnvelope","toXDR","toString","prepareXlmSignedTransaction","tatum_1","to","amount","message","initialize","memo","length","hash","text","undefined","fromAccount","publicKey","account","builder","sequence","fee","networkPassphrase","setTimeout","addOperation","createAccount","destination","trim","startingBalance","build","payment","asset","native"],"sourceRoot":"","sources":["../../../src/transaction/xlm.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}