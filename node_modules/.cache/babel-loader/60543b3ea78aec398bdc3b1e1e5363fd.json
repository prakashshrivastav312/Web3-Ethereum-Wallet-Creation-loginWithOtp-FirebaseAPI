{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\n\nvar JSUtil = require('./util/js');\n\nvar networks = [];\nvar networkMaps = {};\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each litecoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\n\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\n\n\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n\n  for (var key in networkMaps) {\n    if (networkMaps[key] === network) {\n      delete networkMaps[key];\n    }\n  }\n}\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\n\n\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n\n    var containsArg = function (key) {\n      return networks[index][key] === arg;\n    };\n\n    for (var index in networks) {\n      if (_.some(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n\n    return undefined;\n  }\n\n  if (networkMaps[arg] && networkMaps[arg].length >= 1) {\n    return networkMaps[arg][0];\n  } else {\n    return networkMaps[arg];\n  }\n}\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n//  * @param {string} data.bech32prefix - The native segwit prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\n\n\nfunction addNetwork(data) {\n  var network = new Network();\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    // bech32prefix: data.bech32prefix,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n\n  _.each(network, function (value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      if (!networkMaps[value]) {\n        networkMaps[value] = [];\n      }\n\n      networkMaps[value].push(network);\n    }\n  });\n\n  networks.push(network);\n  return network;\n}\n\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x1e,\n  privatekey: 0x9e,\n  scripthash: 0x16,\n  // bech32prefix: 'bc',\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xc0c0c0c0,\n  port: 22556,\n  dnsSeeds: ['seed.multidoge.org', 'seed2.multidoge.org', 'veryseed.denarius.pro', 'muchseed.denarius.pro', 'suchseed.denarius.pro', 'seed.dogecoin.com', 'seed.dogechain.info', 'seed.mophides.com', 'seed.dglibrary.org']\n});\n/**\n * @instance\n * @member Networks#livenet\n */\n\nvar livenet = get('livenet');\naddNetwork({\n  name: 'testnet',\n  alias: 'test',\n  pubkeyhash: 0x71,\n  privatekey: 0xf1,\n  scripthash: 0xc4,\n  // bech32prefix: 'tb',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394\n});\n/**\n * @instance\n * @member Networks#testnet\n */\n\nvar testnet = get('testnet');\naddNetwork({\n  name: 'regtest',\n  alias: 'dev',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  // bech32prefix: 'bcrt',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394\n});\nvar regtest = get('regtest'); // Add configurable values for testnet/regtest\n\nvar TESTNET = {\n  PORT: 44556,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfcc1b7dc),\n  DNS_SEEDS: ['testseed.jrn.me.uk']\n};\n\nfor (var key in TESTNET) {\n  if (!_.isObject(TESTNET[key])) {\n    networkMaps[TESTNET[key]] = testnet;\n  }\n}\n\nvar REGTEST = {\n  PORT: 18444,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfabfb5da),\n  DNS_SEEDS: []\n};\n\nfor (var key in REGTEST) {\n  if (!_.isObject(REGTEST[key])) {\n    networkMaps[REGTEST[key]] = testnet;\n  }\n}\n\nObject.defineProperty(testnet, 'port', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    if (this.regtestEnabled) {\n      return REGTEST.PORT;\n    } else {\n      return TESTNET.PORT;\n    }\n  }\n});\nObject.defineProperty(testnet, 'networkMagic', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    if (this.regtestEnabled) {\n      return REGTEST.NETWORK_MAGIC;\n    } else {\n      return TESTNET.NETWORK_MAGIC;\n    }\n  }\n});\nObject.defineProperty(testnet, 'dnsSeeds', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    if (this.regtestEnabled) {\n      return REGTEST.DNS_SEEDS;\n    } else {\n      return TESTNET.DNS_SEEDS;\n    }\n  }\n});\nObject.defineProperty(regtest, 'networkMagic', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    return REGTEST.NETWORK_MAGIC;\n  }\n});\nObject.defineProperty(regtest, 'dnsSeeds', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    return REGTEST.DNS_SEEDS;\n  }\n});\nObject.defineProperty(regtest, 'port', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    return REGTEST.PORT;\n  }\n});\n/**\n * @function\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\n\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n/**\n * @function\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\n\n\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n/**\n * @namespace Networks\n */\n\n\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  regtest: regtest,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};","map":{"version":3,"names":["_","require","BufferUtil","JSUtil","networks","networkMaps","Network","prototype","toString","name","removeNetwork","network","i","length","splice","key","get","arg","keys","indexOf","isArray","containsArg","index","some","undefined","addNetwork","data","defineImmutable","alias","pubkeyhash","privatekey","scripthash","xpubkey","xprivkey","networkMagic","integerAsBuffer","port","dnsSeeds","each","value","isUndefined","isObject","push","livenet","testnet","regtest","TESTNET","PORT","NETWORK_MAGIC","DNS_SEEDS","REGTEST","Object","defineProperty","enumerable","configurable","regtestEnabled","enableRegtest","disableRegtest","module","exports","add","remove","defaultNetwork","mainnet"],"sources":["C:/Users/acer/node_modules/bitcore-lib-doge/lib/networks.js"],"sourcesContent":["'use strict';\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\nvar JSUtil = require('./util/js');\nvar networks = [];\nvar networkMaps = {};\n\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each litecoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n  for (var key in networkMaps) {\n    if (networkMaps[key] === network) {\n      delete networkMaps[key];\n    }\n  }\n}\n\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n    var containsArg = function(key) {\n      return networks[index][key] === arg;\n    };\n    for (var index in networks) {\n      if (_.some(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n    return undefined;\n  }\n  if(networkMaps[arg] && networkMaps[arg].length >= 1) {\n    return networkMaps[arg][0];\n  } else {\n    return networkMaps[arg];\n  }\n}\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n//  * @param {string} data.bech32prefix - The native segwit prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\nfunction addNetwork(data) {\n  var network = new Network();\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    // bech32prefix: data.bech32prefix,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n  _.each(network, function(value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      if(!networkMaps[value]) {\n        networkMaps[value] = [];\n      }\n      networkMaps[value].push(network);\n    }\n  });\n  networks.push(network);\n  return network;\n}\n\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x1e,\n  privatekey: 0x9e,\n  scripthash: 0x16,\n  // bech32prefix: 'bc',\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xc0c0c0c0,\n  port: 22556,\n  dnsSeeds: [\n    'seed.multidoge.org',\n    'seed2.multidoge.org',\n    'veryseed.denarius.pro',\n    'muchseed.denarius.pro',\n    'suchseed.denarius.pro',\n    'seed.dogecoin.com',\n    'seed.dogechain.info',\n    'seed.mophides.com',\n    'seed.dglibrary.org'\n  ]\n});\n\n/**\n * @instance\n * @member Networks#livenet\n */\nvar livenet = get('livenet');\n\naddNetwork({\n  name: 'testnet',\n  alias: 'test',\n  pubkeyhash: 0x71,\n  privatekey: 0xf1,\n  scripthash: 0xc4,\n  // bech32prefix: 'tb',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394\n});\n\n/**\n * @instance\n * @member Networks#testnet\n */\nvar testnet = get('testnet');\n\n\naddNetwork({\n  name: 'regtest',\n  alias: 'dev',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  // bech32prefix: 'bcrt',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n});\n\nvar regtest = get('regtest');\n\n\n// Add configurable values for testnet/regtest\n\nvar TESTNET = {\n  PORT: 44556,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfcc1b7dc),\n  DNS_SEEDS: [\n    'testseed.jrn.me.uk'\n  ]\n};\n\nfor (var key in TESTNET) {\n  if (!_.isObject(TESTNET[key])) {\n    networkMaps[TESTNET[key]] = testnet;\n  }\n}\n\nvar REGTEST = {\n  PORT: 18444,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfabfb5da),\n  DNS_SEEDS: []\n};\n\nfor (var key in REGTEST) {\n  if (!_.isObject(REGTEST[key])) {\n    networkMaps[REGTEST[key]] = testnet;\n  }\n}\n\nObject.defineProperty(testnet, 'port', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.PORT;\n    } else {\n      return TESTNET.PORT;\n    }\n  }\n});\n\nObject.defineProperty(testnet, 'networkMagic', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.NETWORK_MAGIC;\n    } else {\n      return TESTNET.NETWORK_MAGIC;\n    }\n  }\n});\n\nObject.defineProperty(testnet, 'dnsSeeds', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.DNS_SEEDS;\n    } else {\n      return TESTNET.DNS_SEEDS;\n    }\n  }\n});\n\nObject.defineProperty(regtest, 'networkMagic', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    return REGTEST.NETWORK_MAGIC;\n  }\n});\nObject.defineProperty(regtest, 'dnsSeeds', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    return REGTEST.DNS_SEEDS;\n  }\n});\nObject.defineProperty(regtest, 'port', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    return REGTEST.PORT;\n  }\n});\n\n/**\n * @function\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n\n/**\n * @function\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n\n/**\n * @namespace Networks\n */\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  regtest: regtest,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}