{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = __importStar(require(\"lodash\"));\n\nconst ripple_binary_codec_1 = __importDefault(require(\"ripple-binary-codec\"));\n\nconst hashes_1 = require(\"../common/hashes\");\n\nconst utils = __importStar(require(\"./utils\"));\n\nconst transaction_1 = __importDefault(require(\"./parse/transaction\"));\n\nconst transaction_2 = __importDefault(require(\"./transaction\"));\n\nconst common_1 = require(\"../common\");\n\nfunction parseBinaryTransaction(transaction) {\n  const tx = ripple_binary_codec_1.default.decode(transaction.tx_blob);\n  tx.hash = hashes_1.computeTransactionHash(tx);\n  tx.ledger_index = transaction.ledger_index;\n  return {\n    tx: tx,\n    meta: ripple_binary_codec_1.default.decode(transaction.meta),\n    validated: transaction.validated\n  };\n}\n\nfunction parseAccountTxTransaction(tx, includeRawTransaction) {\n  const _tx = tx.tx_blob ? parseBinaryTransaction(tx) : tx;\n\n  return transaction_1.default(Object.assign({}, _tx.tx, {\n    meta: _tx.meta,\n    validated: _tx.validated\n  }), includeRawTransaction);\n}\n\nfunction counterpartyFilter(filters, tx) {\n  if (tx.address === filters.counterparty) {\n    return true;\n  }\n\n  const specification = tx.specification;\n\n  if (specification && (specification.destination && specification.destination.address === filters.counterparty || specification.counterparty === filters.counterparty)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction transactionFilter(address, filters, tx) {\n  if (filters.excludeFailures && tx.outcome.result !== 'tesSUCCESS') {\n    return false;\n  }\n\n  if (filters.types && !filters.types.includes(tx.type)) {\n    return false;\n  }\n\n  if (filters.initiated === true && tx.address !== address) {\n    return false;\n  }\n\n  if (filters.initiated === false && tx.address === address) {\n    return false;\n  }\n\n  if (filters.counterparty && !counterpartyFilter(filters, tx)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction orderFilter(options, tx) {\n  return !options.startTx || (options.earliestFirst ? utils.compareTransactions(tx, options.startTx) > 0 : utils.compareTransactions(tx, options.startTx) < 0);\n}\n\nfunction formatPartialResponse(address, options, data) {\n  const parse = tx => parseAccountTxTransaction(tx, options.includeRawTransactions);\n\n  return {\n    marker: data.marker,\n    results: data.transactions.filter(tx => tx.validated).map(parse).filter(_.partial(transactionFilter, address, options)).filter(_.partial(orderFilter, options))\n  };\n}\n\nfunction getAccountTx(connection, address, options, marker, limit) {\n  const request = {\n    command: 'account_tx',\n    account: address,\n    ledger_index_min: options.minLedgerVersion || -1,\n    ledger_index_max: options.maxLedgerVersion || -1,\n    forward: options.earliestFirst,\n    binary: options.binary,\n    limit: utils.clamp(limit, 10, 400),\n    marker: marker\n  };\n  return connection.request(request).then(response => formatPartialResponse(address, options, response));\n}\n\nfunction checkForLedgerGaps(connection, options, transactions) {\n  let {\n    minLedgerVersion,\n    maxLedgerVersion\n  } = options;\n\n  if (options.limit && transactions.length === options.limit) {\n    if (options.earliestFirst) {\n      maxLedgerVersion = transactions[transactions.length - 1].outcome.ledgerVersion;\n    } else {\n      minLedgerVersion = transactions[transactions.length - 1].outcome.ledgerVersion;\n    }\n  }\n\n  return utils.hasCompleteLedgerRange(connection, minLedgerVersion, maxLedgerVersion).then(hasCompleteLedgerRange => {\n    if (!hasCompleteLedgerRange) {\n      throw new common_1.errors.MissingLedgerHistoryError();\n    }\n  });\n}\n\nfunction formatResponse(connection, options, transactions) {\n  const sortedTransactions = options.earliestFirst ? transactions.sort(utils.compareTransactions) : transactions.sort(utils.compareTransactions).reverse();\n  return checkForLedgerGaps(connection, options, sortedTransactions).then(() => sortedTransactions);\n}\n\nfunction getTransactionsInternal(connection, address, options) {\n  const getter = _.partial(getAccountTx, connection, address, options);\n\n  const format = _.partial(formatResponse, connection, options);\n\n  return utils.getRecursive(getter, options.limit).then(format);\n}\n\nfunction getTransactions(address) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  common_1.validate.getTransactions({\n    address,\n    options\n  });\n  address = common_1.ensureClassicAddress(address);\n  const defaults = {\n    maxLedgerVersion: -1\n  };\n\n  if (options.start) {\n    return transaction_2.default.call(this, options.start).then(tx => {\n      const ledgerVersion = tx.outcome.ledgerVersion;\n      const bound = options.earliestFirst ? {\n        minLedgerVersion: ledgerVersion\n      } : {\n        maxLedgerVersion: ledgerVersion\n      };\n      const startOptions = Object.assign({}, defaults, options, {\n        startTx: tx\n      }, bound);\n      return getTransactionsInternal(this.connection, address, startOptions);\n    });\n  }\n\n  const newOptions = Object.assign({}, defaults, options);\n  return getTransactionsInternal(this.connection, address, newOptions);\n}\n\nexports.default = getTransactions;","map":{"version":3,"mappings":"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","names":["parseBinaryTransaction","transaction","tx","ripple_binary_codec_1","decode","tx_blob","hash","hashes_1","ledger_index","meta","validated","parseAccountTxTransaction","includeRawTransaction","_tx","transaction_1","Object","assign","counterpartyFilter","filters","address","counterparty","specification","destination","transactionFilter","excludeFailures","outcome","result","types","includes","type","initiated","orderFilter","options","startTx","earliestFirst","utils","compareTransactions","formatPartialResponse","data","parse","includeRawTransactions","marker","results","transactions","filter","map","_","partial","getAccountTx","connection","limit","request","command","account","ledger_index_min","minLedgerVersion","ledger_index_max","maxLedgerVersion","forward","binary","clamp","then","response","checkForLedgerGaps","length","ledgerVersion","hasCompleteLedgerRange","common_1","MissingLedgerHistoryError","formatResponse","sortedTransactions","sort","reverse","getTransactionsInternal","getter","format","getRecursive","getTransactions","defaults","start","transaction_2","call","bound","startOptions","newOptions","exports"],"sourceRoot":"","sources":["../../../src/ledger/transactions.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}