{"ast":null,"code":"'use strict';\n\nvar Address = require('../address');\n\nvar BufferReader = require('../encoding/bufferreader');\n\nvar BufferWriter = require('../encoding/bufferwriter');\n\nvar Hash = require('../crypto/hash');\n\nvar Opcode = require('../opcode');\n\nvar PublicKey = require('../publickey');\n\nvar Signature = require('../crypto/signature');\n\nvar Networks = require('../networks');\n\nvar $ = require('../util/preconditions');\n\nvar _ = require('lodash');\n\nvar errors = require('../errors');\n\nvar buffer = require('buffer');\n\nvar BufferUtil = require('../util/buffer');\n\nvar JSUtil = require('../util/js');\n/**\n * A bitcoin transaction script. Each transaction's inputs and outputs\n * has a script that is evaluated to validate it's spending.\n *\n * See https://en.bitcoin.it/wiki/Script\n *\n * @constructor\n * @param {Object|string|Buffer=} from optional data to populate script\n */\n\n\nvar Script = function Script(from) {\n  if (!(this instanceof Script)) {\n    return new Script(from);\n  }\n\n  this.chunks = [];\n\n  if (BufferUtil.isBuffer(from)) {\n    return Script.fromBuffer(from);\n  } else if (from instanceof Address) {\n    return Script.fromAddress(from);\n  } else if (from instanceof Script) {\n    return Script.fromBuffer(from.toBuffer());\n  } else if (_.isString(from)) {\n    return Script.fromString(from);\n  } else if (_.isObject(from) && _.isArray(from.chunks)) {\n    this.set(from);\n  }\n};\n\nScript.prototype.set = function (obj) {\n  $.checkArgument(_.isObject(obj));\n  $.checkArgument(_.isArray(obj.chunks));\n  this.chunks = obj.chunks;\n  return this;\n};\n\nScript.fromBuffer = function (buffer) {\n  var script = new Script();\n  script.chunks = [];\n  var br = new BufferReader(buffer);\n\n  while (!br.finished()) {\n    try {\n      var opcodenum = br.readUInt8();\n      var len, buf;\n\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        len = opcodenum;\n        script.chunks.push({\n          buf: br.read(len),\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        len = br.readUInt8();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        len = br.readUInt16LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        len = br.readUInt32LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else {\n        script.chunks.push({\n          opcodenum: opcodenum\n        });\n      }\n    } catch (e) {\n      if (e instanceof RangeError) {\n        throw new errors.Script.InvalidBuffer(buffer.toString('hex'));\n      }\n\n      throw e;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype.toBuffer = function () {\n  var bw = new BufferWriter();\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    var opcodenum = chunk.opcodenum;\n    bw.writeUInt8(chunk.opcodenum);\n\n    if (chunk.buf) {\n      if (opcodenum < Opcode.OP_PUSHDATA1) {\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        bw.writeUInt8(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        bw.writeUInt16LE(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        bw.writeUInt32LE(chunk.len);\n        bw.write(chunk.buf);\n      }\n    }\n  }\n\n  return bw.concat();\n};\n\nScript.fromASM = function (str) {\n  var script = new Script();\n  script.chunks = [];\n  var tokens = str.split(' ');\n  var i = 0;\n\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      var buf = Buffer.from(tokens[i], 'hex');\n      script.chunks.push({\n        buf: buf,\n        len: buf.length,\n        opcodenum: buf.length\n      });\n      i = i + 1;\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {\n      script.chunks.push({\n        buf: Buffer.from(tokens[i + 2], 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n\n  return script;\n};\n\nScript.fromHex = function (str) {\n  return new Script(Buffer.from(str, 'hex'));\n};\n\nScript.fromString = function (str) {\n  if (JSUtil.isHexa(str) || str.length === 0) {\n    return new Script(Buffer.from(str, 'hex'));\n  }\n\n  var script = new Script();\n  script.chunks = [];\n  var tokens = str.split(' ');\n  var i = 0;\n\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      opcodenum = parseInt(token);\n\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        script.chunks.push({\n          buf: Buffer.from(tokens[i + 1].slice(2), 'hex'),\n          len: opcodenum,\n          opcodenum: opcodenum\n        });\n        i = i + 2;\n      } else {\n        throw new Error('Invalid script: ' + JSON.stringify(str));\n      }\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {\n      if (tokens[i + 2].slice(0, 2) !== '0x') {\n        throw new Error('Pushdata data must start with 0x');\n      }\n\n      script.chunks.push({\n        buf: Buffer.from(tokens[i + 2].slice(2), 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype._chunkToString = function (chunk, type) {\n  var opcodenum = chunk.opcodenum;\n  var asm = type === 'asm';\n  var str = '';\n\n  if (!chunk.buf) {\n    // no data chunk\n    if (typeof Opcode.reverseMap[opcodenum] !== 'undefined') {\n      if (asm) {\n        // A few cases where the opcode name differs from reverseMap\n        // aside from 1 to 16 data pushes.\n        if (opcodenum === 0) {\n          // OP_0 -> 0\n          str = str + ' 0';\n        } else if (opcodenum === 79) {\n          // OP_1NEGATE -> 1\n          str = str + ' -1';\n        } else {\n          str = str + ' ' + Opcode(opcodenum).toString();\n        }\n      } else {\n        str = str + ' ' + Opcode(opcodenum).toString();\n      }\n    } else {\n      var numstr = opcodenum.toString(16);\n\n      if (numstr.length % 2 !== 0) {\n        numstr = '0' + numstr;\n      }\n\n      if (asm) {\n        str = str + ' ' + numstr;\n      } else {\n        str = str + ' ' + '0x' + numstr;\n      }\n    }\n  } else {\n    // data chunk\n    if (!asm && opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    }\n\n    if (chunk.len > 0) {\n      if (asm) {\n        str = str + ' ' + chunk.buf.toString('hex');\n      } else {\n        str = str + ' ' + chunk.len + ' ' + '0x' + chunk.buf.toString('hex');\n      }\n    }\n  }\n\n  return str;\n};\n\nScript.prototype.toASM = function () {\n  var str = '';\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk, 'asm');\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toString = function () {\n  var str = '';\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk);\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toHex = function () {\n  return this.toBuffer().toString('hex');\n};\n\nScript.prototype.inspect = function () {\n  return '<Script: ' + this.toString() + '>';\n}; // script classification methods\n\n/**\n * @returns {boolean} if this is a pay to pubkey hash output script\n */\n\n\nScript.prototype.isPublicKeyHashOut = function () {\n  return !!(this.chunks.length === 5 && this.chunks[0].opcodenum === Opcode.OP_DUP && this.chunks[1].opcodenum === Opcode.OP_HASH160 && this.chunks[2].buf && this.chunks[2].buf.length === 20 && this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY && this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);\n};\n/**\n * @returns {boolean} if this is a pay to public key hash input script\n */\n\n\nScript.prototype.isPublicKeyHashIn = function () {\n  if (this.chunks.length === 2) {\n    var signatureBuf = this.chunks[0].buf;\n    var pubkeyBuf = this.chunks[1].buf;\n\n    if (signatureBuf && signatureBuf.length && signatureBuf[0] === 0x30 && pubkeyBuf && pubkeyBuf.length) {\n      var version = pubkeyBuf[0];\n\n      if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) {\n        return true;\n      } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nScript.prototype.getPublicKey = function () {\n  $.checkState(this.isPublicKeyOut(), 'Can\\'t retrieve PublicKey from a non-PK output');\n  return this.chunks[0].buf;\n};\n\nScript.prototype.getPublicKeyHash = function () {\n  if (this.isPublicKeyHashOut()) {\n    return this.chunks[2].buf;\n  } else {\n    throw new Error('Can\\'t retrieve PublicKeyHash from a non-PKH output');\n  }\n};\n/**\n * @returns {boolean} if this is a public key output script\n */\n\n\nScript.prototype.isPublicKeyOut = function () {\n  if (this.chunks.length === 2 && this.chunks[0].buf && this.chunks[0].buf.length && this.chunks[1].opcodenum === Opcode.OP_CHECKSIG) {\n    var pubkeyBuf = this.chunks[0].buf;\n    var version = pubkeyBuf[0];\n    var isVersion = false;\n\n    if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) {\n      isVersion = true;\n    } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n      isVersion = true;\n    }\n\n    if (isVersion) {\n      return PublicKey.isValid(pubkeyBuf);\n    }\n  }\n\n  return false;\n};\n/**\n * @returns {boolean} if this is a pay to public key input script\n */\n\n\nScript.prototype.isPublicKeyIn = function () {\n  if (this.chunks.length === 1) {\n    var signatureBuf = this.chunks[0].buf;\n\n    if (signatureBuf && signatureBuf.length && signatureBuf[0] === 0x30) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * @returns {boolean} if this is a p2sh output script\n */\n\n\nScript.prototype.isScriptHashOut = function () {\n  var buf = this.toBuffer();\n  return buf.length === 23 && buf[0] === Opcode.OP_HASH160 && buf[1] === 0x14 && buf[buf.length - 1] === Opcode.OP_EQUAL;\n};\n/**\n * @param {Object=} values - The return values\n * @param {Number} values.version - Set with the witness version\n * @param {Buffer} values.program - Set with the witness program\n * @returns {boolean} if this is a p2wpkh output script\n */\n\n\nScript.prototype.isWitnessProgram = function (values) {\n  if (!values) {\n    values = {};\n  }\n\n  var buf = this.toBuffer();\n\n  if (buf.length < 4 || buf.length > 42) {\n    return false;\n  }\n\n  if (buf[0] !== Opcode.OP_0 && !(buf[0] >= Opcode.OP_1 && buf[0] <= Opcode.OP_16)) {\n    return false;\n  }\n\n  if (buf.length === buf[1] + 2) {\n    values.version = buf[0];\n    values.program = buf.slice(2, buf.length);\n    return true;\n  }\n\n  return false;\n};\n/**\n * @returns {boolean} if this is a p2sh input script\n * Note that these are frequently indistinguishable from pubkeyhashin\n */\n\n\nScript.prototype.isScriptHashIn = function () {\n  if (this.chunks.length <= 1) {\n    return false;\n  }\n\n  var redeemChunk = this.chunks[this.chunks.length - 1];\n  var redeemBuf = redeemChunk.buf;\n\n  if (!redeemBuf) {\n    return false;\n  }\n\n  var redeemScript;\n\n  try {\n    redeemScript = Script.fromBuffer(redeemBuf);\n  } catch (e) {\n    if (e instanceof errors.Script.InvalidBuffer) {\n      return false;\n    }\n\n    throw e;\n  }\n\n  var type = redeemScript.classify();\n  return type !== Script.types.UNKNOWN;\n};\n/**\n * @returns {boolean} if this is a mutlsig output script\n */\n\n\nScript.prototype.isMultisigOut = function () {\n  return this.chunks.length > 3 && Opcode.isSmallIntOp(this.chunks[0].opcodenum) && this.chunks.slice(1, this.chunks.length - 2).every(function (obj) {\n    return obj.buf && BufferUtil.isBuffer(obj.buf);\n  }) && Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) && this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG;\n};\n/**\n * @returns {boolean} if this is a multisig input script\n */\n\n\nScript.prototype.isMultisigIn = function () {\n  return this.chunks.length >= 2 && this.chunks[0].opcodenum === 0 && this.chunks.slice(1, this.chunks.length).every(function (obj) {\n    return obj.buf && BufferUtil.isBuffer(obj.buf) && Signature.isTxDER(obj.buf);\n  });\n};\n/**\n * @returns {boolean} true if this is a valid standard OP_RETURN output\n */\n\n\nScript.prototype.isDataOut = function () {\n  return this.chunks.length >= 1 && this.chunks[0].opcodenum === Opcode.OP_RETURN && (this.chunks.length === 1 || this.chunks.length === 2 && this.chunks[1].buf && this.chunks[1].buf.length <= Script.OP_RETURN_STANDARD_SIZE && this.chunks[1].length === this.chunks.len);\n};\n/**\n * Retrieve the associated data for this script.\n * In the case of a pay to public key hash, P2SH, P2WSH, or P2WPKH, return the hash.\n * In the case of a standard OP_RETURN, return the data\n * @returns {Buffer}\n */\n\n\nScript.prototype.getData = function () {\n  if (this.isDataOut() || this.isScriptHashOut()) {\n    if (_.isUndefined(this.chunks[1])) {\n      return Buffer.alloc(0);\n    } else {\n      return Buffer.from(this.chunks[1].buf);\n    }\n  }\n\n  if (this.isPublicKeyHashOut()) {\n    return Buffer.from(this.chunks[2].buf);\n  }\n\n  throw new Error('Unrecognized script type to get data from');\n};\n/**\n * @returns {boolean} if the script is only composed of data pushing\n * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)\n */\n\n\nScript.prototype.isPushOnly = function () {\n  return _.every(this.chunks, function (chunk) {\n    return chunk.opcodenum <= Opcode.OP_16;\n  });\n};\n\nScript.types = {};\nScript.types.UNKNOWN = 'Unknown';\nScript.types.PUBKEY_OUT = 'Pay to public key';\nScript.types.PUBKEY_IN = 'Spend from public key';\nScript.types.PUBKEYHASH_OUT = 'Pay to public key hash';\nScript.types.PUBKEYHASH_IN = 'Spend from public key hash';\nScript.types.SCRIPTHASH_OUT = 'Pay to script hash';\nScript.types.SCRIPTHASH_IN = 'Spend from script hash';\nScript.types.MULTISIG_OUT = 'Pay to multisig';\nScript.types.MULTISIG_IN = 'Spend from multisig';\nScript.types.DATA_OUT = 'Data push';\nScript.OP_RETURN_STANDARD_SIZE = 80;\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\n\nScript.prototype.classify = function () {\n  if (this._isInput) {\n    return this.classifyInput();\n  } else if (this._isOutput) {\n    return this.classifyOutput();\n  } else {\n    var outputType = this.classifyOutput();\n    return outputType != Script.types.UNKNOWN ? outputType : this.classifyInput();\n  }\n};\n\nScript.outputIdentifiers = {};\nScript.outputIdentifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;\nScript.outputIdentifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;\nScript.outputIdentifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;\nScript.outputIdentifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;\nScript.outputIdentifiers.DATA_OUT = Script.prototype.isDataOut;\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\n\nScript.prototype.classifyOutput = function () {\n  for (var type in Script.outputIdentifiers) {\n    if (Script.outputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n\n  return Script.types.UNKNOWN;\n};\n\nScript.inputIdentifiers = {};\nScript.inputIdentifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;\nScript.inputIdentifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;\nScript.inputIdentifiers.MULTISIG_IN = Script.prototype.isMultisigIn;\nScript.inputIdentifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\n\nScript.prototype.classifyInput = function () {\n  for (var type in Script.inputIdentifiers) {\n    if (Script.inputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n\n  return Script.types.UNKNOWN;\n};\n/**\n * @returns {boolean} if script is one of the known types\n */\n\n\nScript.prototype.isStandard = function () {\n  // TODO: Add BIP62 compliance\n  return this.classify() !== Script.types.UNKNOWN;\n}; // Script construction methods\n\n/**\n * Adds a script element at the start of the script.\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n */\n\n\nScript.prototype.prepend = function (obj) {\n  this._addByType(obj, true);\n\n  return this;\n};\n/**\n * Compares a script with another script\n */\n\n\nScript.prototype.equals = function (script) {\n  $.checkState(script instanceof Script, 'Must provide another script');\n\n  if (this.chunks.length !== script.chunks.length) {\n    return false;\n  }\n\n  var i;\n\n  for (i = 0; i < this.chunks.length; i++) {\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.isBuffer(script.chunks[i].buf)) {\n      return false;\n    }\n\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.equals(this.chunks[i].buf, script.chunks[i].buf)) {\n      return false;\n    } else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Adds a script element to the end of the script.\n *\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n *\n */\n\n\nScript.prototype.add = function (obj) {\n  this._addByType(obj, false);\n\n  return this;\n};\n\nScript.prototype._addByType = function (obj, prepend) {\n  if (typeof obj === 'string') {\n    this._addOpcode(obj, prepend);\n  } else if (typeof obj === 'number') {\n    this._addOpcode(obj, prepend);\n  } else if (obj instanceof Opcode) {\n    this._addOpcode(obj, prepend);\n  } else if (BufferUtil.isBuffer(obj)) {\n    this._addBuffer(obj, prepend);\n  } else if (obj instanceof Script) {\n    this.chunks = this.chunks.concat(obj.chunks);\n  } else if (typeof obj === 'object') {\n    this._insertAtPosition(obj, prepend);\n  } else {\n    throw new Error('Invalid script chunk');\n  }\n};\n\nScript.prototype._insertAtPosition = function (op, prepend) {\n  if (prepend) {\n    this.chunks.unshift(op);\n  } else {\n    this.chunks.push(op);\n  }\n};\n\nScript.prototype._addOpcode = function (opcode, prepend) {\n  var op;\n\n  if (typeof opcode === 'number') {\n    op = opcode;\n  } else if (opcode instanceof Opcode) {\n    op = opcode.toNumber();\n  } else {\n    op = Opcode(opcode).toNumber();\n  }\n\n  this._insertAtPosition({\n    opcodenum: op\n  }, prepend);\n\n  return this;\n};\n\nScript.prototype._addBuffer = function (buf, prepend) {\n  var opcodenum;\n  var len = buf.length;\n\n  if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n    opcodenum = len;\n  } else if (len < Math.pow(2, 8)) {\n    opcodenum = Opcode.OP_PUSHDATA1;\n  } else if (len < Math.pow(2, 16)) {\n    opcodenum = Opcode.OP_PUSHDATA2;\n  } else if (len < Math.pow(2, 32)) {\n    opcodenum = Opcode.OP_PUSHDATA4;\n  } else {\n    throw new Error('You can\\'t push that much data');\n  }\n\n  this._insertAtPosition({\n    buf: buf,\n    len: len,\n    opcodenum: opcodenum\n  }, prepend);\n\n  return this;\n};\n\nScript.prototype.hasCodeseparators = function () {\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum === Opcode.OP_CODESEPARATOR) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nScript.prototype.removeCodeseparators = function () {\n  var chunks = [];\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) {\n      chunks.push(this.chunks[i]);\n    }\n  }\n\n  this.chunks = chunks;\n  return this;\n}; // high level script builder methods\n\n/**\n * @returns {Script} a new Multisig output script for given public keys,\n * requiring m of those public keys to spend\n * @param {PublicKey[]} publicKeys - list of all public keys controlling the output\n * @param {number} threshold - amount of required signatures to spend the output\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true, don't sort the given\n *                      public keys before creating the script\n */\n\n\nScript.buildMultisigOut = function (publicKeys, threshold, opts) {\n  $.checkArgument(threshold <= publicKeys.length, 'Number of required signatures must be less than or equal to the number of public keys');\n  opts = opts || {};\n  var script = new Script();\n  script.add(Opcode.smallInt(threshold));\n  publicKeys = _.map(publicKeys, PublicKey);\n  var sorted = publicKeys;\n\n  if (!opts.noSorting) {\n    sorted = _.sortBy(publicKeys, function (publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n\n  for (var i = 0; i < sorted.length; i++) {\n    var publicKey = sorted[i];\n    script.add(publicKey.toBuffer());\n  }\n\n  script.add(Opcode.smallInt(publicKeys.length));\n  script.add(Opcode.OP_CHECKMULTISIG);\n  return script;\n};\n\nScript.buildWitnessMultisigOutFromScript = function (script) {\n  if (script instanceof Script) {\n    var s = new Script();\n    s.add(Opcode.OP_0);\n    s.add(Hash.sha256(script.toBuffer()));\n    return s;\n  } else {\n    throw new TypeError('First argument is expected to be a p2sh script');\n  }\n};\n/**\n * A new Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\n\n\nScript.buildMultisigIn = function (pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n\n  _.each(signatures, function (signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers'); // TODO: allow signatures to be an array of Signature objects\n\n    s.add(signature);\n  });\n\n  return s;\n};\n/**\n * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\n\n\nScript.buildP2SHMultisigIn = function (pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n\n  _.each(signatures, function (signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers'); // TODO: allow signatures to be an array of Signature objects\n\n    s.add(signature);\n  });\n\n  s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());\n  return s;\n};\n/**\n * @returns {Script} a new pay to public key hash output for the given\n * address or public key\n * @param {(Address|PublicKey)} to - destination address or public key\n */\n\n\nScript.buildPublicKeyHashOut = function (to) {\n  $.checkArgument(!_.isUndefined(to));\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));\n\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (_.isString(to)) {\n    to = new Address(to);\n  }\n\n  var s = new Script();\n  s.add(Opcode.OP_DUP).add(Opcode.OP_HASH160).add(to.hashBuffer).add(Opcode.OP_EQUALVERIFY).add(Opcode.OP_CHECKSIG);\n  s._network = to.network;\n  return s;\n};\n/**\n * @returns {Script} a new pay to witness v0 output for the given\n * address\n * @param {(Address|PublicKey)} to - destination address\n */\n\n\nScript.buildWitnessV0Out = function (to) {\n  $.checkArgument(!_.isUndefined(to));\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));\n\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (_.isString(to)) {\n    to = new Address(to);\n  }\n\n  var s = new Script();\n  s.add(Opcode.OP_0).add(to.hashBuffer);\n  s._network = to.network;\n  return s;\n};\n/**\n * @returns {Script} a new pay to public key output for the given\n *  public key\n */\n\n\nScript.buildPublicKeyOut = function (pubkey) {\n  $.checkArgument(pubkey instanceof PublicKey);\n  var s = new Script();\n  s.add(pubkey.toBuffer()).add(Opcode.OP_CHECKSIG);\n  return s;\n};\n/**\n * @returns {Script} a new OP_RETURN script with data\n * @param {(string|Buffer)} data - the data to embed in the output\n * @param {(string)} encoding - the type of encoding of the string\n */\n\n\nScript.buildDataOut = function (data, encoding) {\n  $.checkArgument(_.isUndefined(data) || _.isString(data) || BufferUtil.isBuffer(data));\n\n  if (_.isString(data)) {\n    data = Buffer.from(data, encoding);\n  }\n\n  var s = new Script();\n  s.add(Opcode.OP_RETURN);\n\n  if (!_.isUndefined(data)) {\n    s.add(data);\n  }\n\n  return s;\n};\n/**\n * @param {Script|Address} script - the redeemScript for the new p2sh output.\n *    It can also be a p2sh address\n * @returns {Script} new pay to script hash script for given script\n */\n\n\nScript.buildScriptHashOut = function (script) {\n  $.checkArgument(script instanceof Script || script instanceof Address && script.isPayToScriptHash());\n  var s = new Script();\n  s.add(Opcode.OP_HASH160).add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer())).add(Opcode.OP_EQUAL);\n  s._network = script._network || script.network;\n  return s;\n};\n/**\n * Builds a scriptSig (a script for an input) that signs a public key output script.\n *\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\n\n\nScript.buildPublicKeyIn = function (signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n\n  var script = new Script();\n  script.add(BufferUtil.concat([signature, BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)]));\n  return script;\n};\n/**\n * Builds a scriptSig (a script for an input) that signs a public key hash\n * output script.\n *\n * @param {Buffer|string|PublicKey} publicKey\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\n\n\nScript.buildPublicKeyHashIn = function (publicKey, signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n\n  var script = new Script().add(BufferUtil.concat([signature, BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)])).add(new PublicKey(publicKey).toBuffer());\n  return script;\n};\n/**\n * @returns {Script} an empty script\n */\n\n\nScript.empty = function () {\n  return new Script();\n};\n/**\n * @returns {Script} a new pay to script hash script that pays to this script\n */\n\n\nScript.prototype.toScriptHashOut = function () {\n  return Script.buildScriptHashOut(this);\n};\n/**\n * @return {Script} an output script built from the address\n */\n\n\nScript.fromAddress = function (address) {\n  address = Address(address);\n\n  if (address.isPayToScriptHash()) {\n    return Script.buildScriptHashOut(address);\n  } else if (address.isPayToPublicKeyHash()) {\n    return Script.buildPublicKeyHashOut(address);\n  }\n\n  throw new errors.Script.UnrecognizedAddress(address);\n};\n/**\n * Will return the associated address information object\n * @return {Address|boolean}\n */\n\n\nScript.prototype.getAddressInfo = function (opts) {\n  if (this._isInput) {\n    return this._getInputAddressInfo();\n  } else if (this._isOutput) {\n    return this._getOutputAddressInfo();\n  } else {\n    var info = this._getOutputAddressInfo();\n\n    if (!info) {\n      return this._getInputAddressInfo();\n    }\n\n    return info;\n  }\n};\n/**\n * Will return the associated output scriptPubKey address information object\n * @return {Address|boolean}\n * @private\n */\n\n\nScript.prototype._getOutputAddressInfo = function () {\n  var info = {};\n\n  if (this.isScriptHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToScriptHash;\n  } else if (this.isPublicKeyHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToPublicKeyHash;\n  } else {\n    return false;\n  }\n\n  return info;\n};\n/**\n * Will return the associated input scriptSig address information object\n * @return {Address|boolean}\n * @private\n */\n\n\nScript.prototype._getInputAddressInfo = function () {\n  var info = {};\n\n  if (this.isPublicKeyHashIn()) {\n    // hash the publickey found in the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[1].buf);\n    info.type = Address.PayToPublicKeyHash;\n  } else if (this.isScriptHashIn()) {\n    // hash the redeemscript found at the end of the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[this.chunks.length - 1].buf);\n    info.type = Address.PayToScriptHash;\n  } else {\n    return false;\n  }\n\n  return info;\n};\n/**\n * @param {Network=} network\n * @return {Address|boolean} the associated address for this script if possible, or false\n */\n\n\nScript.prototype.toAddress = function (network) {\n  var info = this.getAddressInfo();\n\n  if (!info) {\n    return false;\n  }\n\n  info.network = Networks.get(network) || this._network || Networks.defaultNetwork;\n  return new Address(info);\n};\n/**\n * Analogous to bitcoind's FindAndDelete. Find and delete equivalent chunks,\n * typically used with push data chunks.  Note that this will find and delete\n * not just the same data, but the same data with the same push data op as\n * produced by default. i.e., if a pushdata in a tx does not use the minimal\n * pushdata op, then when you try to remove the data it is pushing, it will not\n * be removed, because they do not use the same pushdata op.\n */\n\n\nScript.prototype.findAndDelete = function (script) {\n  var buf = script.toBuffer();\n  var hex = buf.toString('hex');\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var script2 = Script({\n      chunks: [this.chunks[i]]\n    });\n    var buf2 = script2.toBuffer();\n    var hex2 = buf2.toString('hex');\n\n    if (hex === hex2) {\n      this.chunks.splice(i, 1);\n    }\n  }\n\n  return this;\n};\n/**\n * Comes from bitcoind's script interpreter CheckMinimalPush function\n * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.\n */\n\n\nScript.prototype.checkMinimalPush = function (i) {\n  var chunk = this.chunks[i];\n  var buf = chunk.buf;\n  var opcodenum = chunk.opcodenum;\n\n  if (!buf) {\n    return true;\n  }\n\n  if (buf.length === 0) {\n    // Could have used OP_0.\n    return opcodenum === Opcode.OP_0;\n  } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {\n    // Could have used OP_1 .. OP_16.\n    return opcodenum === Opcode.OP_1 + (buf[0] - 1);\n  } else if (buf.length === 1 && buf[0] === 0x81) {\n    // Could have used OP_1NEGATE\n    return opcodenum === Opcode.OP_1NEGATE;\n  } else if (buf.length <= 75) {\n    // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n    return opcodenum === buf.length;\n  } else if (buf.length <= 255) {\n    // Could have used OP_PUSHDATA.\n    return opcodenum === Opcode.OP_PUSHDATA1;\n  } else if (buf.length <= 65535) {\n    // Could have used OP_PUSHDATA2.\n    return opcodenum === Opcode.OP_PUSHDATA2;\n  }\n\n  return true;\n};\n/**\n * Comes from bitcoind's script DecodeOP_N function\n * @param {number} opcode\n * @returns {number} numeric value in range of 0 to 16\n */\n\n\nScript.prototype._decodeOP_N = function (opcode) {\n  if (opcode === Opcode.OP_0) {\n    return 0;\n  } else if (opcode >= Opcode.OP_1 && opcode <= Opcode.OP_16) {\n    return opcode - (Opcode.OP_1 - 1);\n  } else {\n    throw new Error('Invalid opcode: ' + JSON.stringify(opcode));\n  }\n};\n/**\n * Comes from bitcoind's script GetSigOpCount(boolean) function\n * @param {boolean} use current (true) or pre-version-0.6 (false) logic\n * @returns {number} number of signature operations required by this script\n */\n\n\nScript.prototype.getSignatureOperationsCount = function (accurate) {\n  accurate = _.isUndefined(accurate) ? true : accurate;\n  var self = this;\n  var n = 0;\n  var lastOpcode = Opcode.OP_INVALIDOPCODE;\n\n  _.each(self.chunks, function getChunk(chunk) {\n    var opcode = chunk.opcodenum;\n\n    if (opcode == Opcode.OP_CHECKSIG || opcode == Opcode.OP_CHECKSIGVERIFY) {\n      n++;\n    } else if (opcode == Opcode.OP_CHECKMULTISIG || opcode == Opcode.OP_CHECKMULTISIGVERIFY) {\n      if (accurate && lastOpcode >= Opcode.OP_1 && lastOpcode <= Opcode.OP_16) {\n        n += self._decodeOP_N(lastOpcode);\n      } else {\n        n += 20;\n      }\n    }\n\n    lastOpcode = opcode;\n  });\n\n  return n;\n};\n\nmodule.exports = Script;","map":{"version":3,"names":["Address","require","BufferReader","BufferWriter","Hash","Opcode","PublicKey","Signature","Networks","$","_","errors","buffer","BufferUtil","JSUtil","Script","from","chunks","isBuffer","fromBuffer","fromAddress","toBuffer","isString","fromString","isObject","isArray","set","prototype","obj","checkArgument","script","br","finished","opcodenum","readUInt8","len","buf","OP_PUSHDATA1","push","read","OP_PUSHDATA2","readUInt16LE","OP_PUSHDATA4","readUInt32LE","e","RangeError","InvalidBuffer","toString","bw","i","length","chunk","writeUInt8","write","writeUInt16LE","writeUInt32LE","concat","fromASM","str","tokens","split","token","opcode","toNumber","isUndefined","Buffer","parseInt","fromHex","isHexa","slice","Error","JSON","stringify","_chunkToString","type","asm","reverseMap","numstr","toASM","substr","toHex","inspect","isPublicKeyHashOut","OP_DUP","OP_HASH160","OP_EQUALVERIFY","OP_CHECKSIG","isPublicKeyHashIn","signatureBuf","pubkeyBuf","version","getPublicKey","checkState","isPublicKeyOut","getPublicKeyHash","isVersion","isValid","isPublicKeyIn","isScriptHashOut","OP_EQUAL","isWitnessProgram","values","OP_0","OP_1","OP_16","program","isScriptHashIn","redeemChunk","redeemBuf","redeemScript","classify","types","UNKNOWN","isMultisigOut","isSmallIntOp","every","OP_CHECKMULTISIG","isMultisigIn","isTxDER","isDataOut","OP_RETURN","OP_RETURN_STANDARD_SIZE","getData","alloc","isPushOnly","PUBKEY_OUT","PUBKEY_IN","PUBKEYHASH_OUT","PUBKEYHASH_IN","SCRIPTHASH_OUT","SCRIPTHASH_IN","MULTISIG_OUT","MULTISIG_IN","DATA_OUT","_isInput","classifyInput","_isOutput","classifyOutput","outputType","outputIdentifiers","bind","inputIdentifiers","isStandard","prepend","_addByType","equals","add","_addOpcode","_addBuffer","_insertAtPosition","op","unshift","Math","pow","hasCodeseparators","OP_CODESEPARATOR","removeCodeseparators","buildMultisigOut","publicKeys","threshold","opts","smallInt","map","sorted","noSorting","sortBy","publicKey","buildWitnessMultisigOutFromScript","s","sha256","TypeError","buildMultisigIn","pubkeys","signatures","isNumber","each","signature","buildP2SHMultisigIn","cachedMultisig","buildPublicKeyHashOut","to","toAddress","hashBuffer","_network","network","buildWitnessV0Out","buildPublicKeyOut","pubkey","buildDataOut","data","encoding","buildScriptHashOut","isPayToScriptHash","sha256ripemd160","buildPublicKeyIn","sigtype","integerAsSingleByteBuffer","SIGHASH_ALL","buildPublicKeyHashIn","empty","toScriptHashOut","address","isPayToPublicKeyHash","UnrecognizedAddress","getAddressInfo","_getInputAddressInfo","_getOutputAddressInfo","info","PayToScriptHash","PayToPublicKeyHash","get","defaultNetwork","findAndDelete","hex","script2","buf2","hex2","splice","checkMinimalPush","OP_1NEGATE","_decodeOP_N","getSignatureOperationsCount","accurate","self","n","lastOpcode","OP_INVALIDOPCODE","getChunk","OP_CHECKSIGVERIFY","OP_CHECKMULTISIGVERIFY","module","exports"],"sources":["C:/Users/acer/node_modules/bitcore-lib-doge/lib/script/script.js"],"sourcesContent":["'use strict';\n\nvar Address = require('../address');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Opcode = require('../opcode');\nvar PublicKey = require('../publickey');\nvar Signature = require('../crypto/signature');\nvar Networks = require('../networks');\nvar $ = require('../util/preconditions');\nvar _ = require('lodash');\nvar errors = require('../errors');\nvar buffer = require('buffer');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\n\n/**\n * A bitcoin transaction script. Each transaction's inputs and outputs\n * has a script that is evaluated to validate it's spending.\n *\n * See https://en.bitcoin.it/wiki/Script\n *\n * @constructor\n * @param {Object|string|Buffer=} from optional data to populate script\n */\nvar Script = function Script(from) {\n  if (!(this instanceof Script)) {\n    return new Script(from);\n  }\n  this.chunks = [];\n\n  if (BufferUtil.isBuffer(from)) {\n    return Script.fromBuffer(from);\n  } else if (from instanceof Address) {\n    return Script.fromAddress(from);\n  } else if (from instanceof Script) {\n    return Script.fromBuffer(from.toBuffer());\n  } else if (_.isString(from)) {\n    return Script.fromString(from);\n  } else if (_.isObject(from) && _.isArray(from.chunks)) {\n    this.set(from);\n  }\n};\n\nScript.prototype.set = function(obj) {\n  $.checkArgument(_.isObject(obj));\n  $.checkArgument(_.isArray(obj.chunks));\n  this.chunks = obj.chunks;\n  return this;\n};\n\nScript.fromBuffer = function(buffer) {\n  var script = new Script();\n  script.chunks = [];\n\n  var br = new BufferReader(buffer);\n  while (!br.finished()) {\n    try {\n      var opcodenum = br.readUInt8();\n\n      var len, buf;\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        len = opcodenum;\n        script.chunks.push({\n          buf: br.read(len),\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        len = br.readUInt8();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        len = br.readUInt16LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        len = br.readUInt32LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else {\n        script.chunks.push({\n          opcodenum: opcodenum\n        });\n      }\n    } catch (e) {\n      if (e instanceof RangeError) {\n        throw new errors.Script.InvalidBuffer(buffer.toString('hex'));\n      }\n      throw e;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype.toBuffer = function() {\n  var bw = new BufferWriter();\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    var opcodenum = chunk.opcodenum;\n    bw.writeUInt8(chunk.opcodenum);\n    if (chunk.buf) {\n      if (opcodenum < Opcode.OP_PUSHDATA1) {\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        bw.writeUInt8(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        bw.writeUInt16LE(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        bw.writeUInt32LE(chunk.len);\n        bw.write(chunk.buf);\n      }\n    }\n  }\n\n  return bw.concat();\n};\n\nScript.fromASM = function(str) {\n  var script = new Script();\n  script.chunks = [];\n\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      var buf = Buffer.from(tokens[i], 'hex');\n      script.chunks.push({\n        buf: buf,\n        len: buf.length,\n        opcodenum: buf.length\n      });\n      i = i + 1;\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      script.chunks.push({\n        buf: Buffer.from(tokens[i + 2], 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\n\nScript.fromHex = function(str) {\n  return new Script(Buffer.from(str, 'hex'));\n};\n\nScript.fromString = function(str) {\n  if (JSUtil.isHexa(str) || str.length === 0) {\n    return new Script(Buffer.from(str, 'hex'));\n  }\n  var script = new Script();\n  script.chunks = [];\n\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      opcodenum = parseInt(token);\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        script.chunks.push({\n          buf: Buffer.from(tokens[i + 1].slice(2), 'hex'),\n          len: opcodenum,\n          opcodenum: opcodenum\n        });\n        i = i + 2;\n      } else {\n        throw new Error('Invalid script: ' + JSON.stringify(str));\n      }\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      if (tokens[i + 2].slice(0, 2) !== '0x') {\n        throw new Error('Pushdata data must start with 0x');\n      }\n      script.chunks.push({\n        buf: Buffer.from(tokens[i + 2].slice(2), 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\n\nScript.prototype._chunkToString = function(chunk, type) {\n  var opcodenum = chunk.opcodenum;\n  var asm = (type === 'asm');\n  var str = '';\n  if (!chunk.buf) {\n    // no data chunk\n    if (typeof Opcode.reverseMap[opcodenum] !== 'undefined') {\n      if (asm) {\n        // A few cases where the opcode name differs from reverseMap\n        // aside from 1 to 16 data pushes.\n        if (opcodenum === 0) {\n          // OP_0 -> 0\n          str = str + ' 0';\n        } else if(opcodenum === 79) {\n          // OP_1NEGATE -> 1\n          str = str + ' -1';\n        } else {\n          str = str + ' ' + Opcode(opcodenum).toString();\n        }\n      } else {\n        str = str + ' ' + Opcode(opcodenum).toString();\n      }\n    } else {\n      var numstr = opcodenum.toString(16);\n      if (numstr.length % 2 !== 0) {\n        numstr = '0' + numstr;\n      }\n      if (asm) {\n        str = str + ' ' + numstr;\n      } else {\n        str = str + ' ' + '0x' + numstr;\n      }\n    }\n  } else {\n    // data chunk\n    if (!asm && opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    }\n    if (chunk.len > 0) {\n      if (asm) {\n        str = str + ' ' + chunk.buf.toString('hex');\n      } else {\n        str = str + ' ' + chunk.len + ' ' + '0x' + chunk.buf.toString('hex');\n      }\n    }\n  }\n  return str;\n};\n\nScript.prototype.toASM = function() {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk, 'asm');\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toString = function() {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk);\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toHex = function() {\n  return this.toBuffer().toString('hex');\n};\n\nScript.prototype.inspect = function() {\n  return '<Script: ' + this.toString() + '>';\n};\n\n// script classification methods\n\n/**\n * @returns {boolean} if this is a pay to pubkey hash output script\n */\nScript.prototype.isPublicKeyHashOut = function() {\n  return !!(this.chunks.length === 5 &&\n    this.chunks[0].opcodenum === Opcode.OP_DUP &&\n    this.chunks[1].opcodenum === Opcode.OP_HASH160 &&\n    this.chunks[2].buf &&\n    this.chunks[2].buf.length === 20 &&\n    this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY &&\n    this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);\n};\n\n/**\n * @returns {boolean} if this is a pay to public key hash input script\n */\nScript.prototype.isPublicKeyHashIn = function() {\n  if (this.chunks.length === 2) {\n    var signatureBuf = this.chunks[0].buf;\n    var pubkeyBuf = this.chunks[1].buf;\n    if (signatureBuf &&\n        signatureBuf.length &&\n        signatureBuf[0] === 0x30 &&\n        pubkeyBuf &&\n        pubkeyBuf.length\n       ) {\n      var version = pubkeyBuf[0];\n      if ((version === 0x04 ||\n           version === 0x06 ||\n           version === 0x07) && pubkeyBuf.length === 65) {\n        return true;\n      } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nScript.prototype.getPublicKey = function() {\n  $.checkState(this.isPublicKeyOut(), 'Can\\'t retrieve PublicKey from a non-PK output');\n  return this.chunks[0].buf;\n};\n\nScript.prototype.getPublicKeyHash = function() {\n  if (this.isPublicKeyHashOut()) {\n    return this.chunks[2].buf;\n  } else {\n    throw new Error('Can\\'t retrieve PublicKeyHash from a non-PKH output');\n  }\n};\n\n/**\n * @returns {boolean} if this is a public key output script\n */\nScript.prototype.isPublicKeyOut = function() {\n  if (this.chunks.length === 2 &&\n      this.chunks[0].buf &&\n      this.chunks[0].buf.length &&\n      this.chunks[1].opcodenum === Opcode.OP_CHECKSIG) {\n    var pubkeyBuf = this.chunks[0].buf;\n    var version = pubkeyBuf[0];\n    var isVersion = false;\n    if ((version === 0x04 ||\n         version === 0x06 ||\n         version === 0x07) && pubkeyBuf.length === 65) {\n      isVersion = true;\n    } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n      isVersion = true;\n    }\n    if (isVersion) {\n      return PublicKey.isValid(pubkeyBuf);\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a pay to public key input script\n */\nScript.prototype.isPublicKeyIn = function() {\n  if (this.chunks.length === 1) {\n    var signatureBuf = this.chunks[0].buf;\n    if (signatureBuf &&\n        signatureBuf.length &&\n        signatureBuf[0] === 0x30) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a p2sh output script\n */\nScript.prototype.isScriptHashOut = function() {\n  var buf = this.toBuffer();\n  return (buf.length === 23 &&\n    buf[0] === Opcode.OP_HASH160 &&\n    buf[1] === 0x14 &&\n    buf[buf.length - 1] === Opcode.OP_EQUAL);\n};\n\n\n/**\n * @param {Object=} values - The return values\n * @param {Number} values.version - Set with the witness version\n * @param {Buffer} values.program - Set with the witness program\n * @returns {boolean} if this is a p2wpkh output script\n */\nScript.prototype.isWitnessProgram = function(values) {\n  if (!values) {\n    values = {};\n  }\n  var buf = this.toBuffer();\n  if (buf.length < 4 || buf.length > 42) {\n    return false;\n  }\n  if (buf[0] !== Opcode.OP_0 && !(buf[0] >= Opcode.OP_1 && buf[0] <= Opcode.OP_16)) {\n    return false;\n  }\n\n  if (buf.length === buf[1] + 2) {\n    values.version = buf[0];\n    values.program = buf.slice(2, buf.length);\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a p2sh input script\n * Note that these are frequently indistinguishable from pubkeyhashin\n */\nScript.prototype.isScriptHashIn = function() {\n  if (this.chunks.length <= 1) {\n    return false;\n  }\n  var redeemChunk = this.chunks[this.chunks.length - 1];\n  var redeemBuf = redeemChunk.buf;\n  if (!redeemBuf) {\n    return false;\n  }\n\n  var redeemScript;\n  try {\n    redeemScript = Script.fromBuffer(redeemBuf);\n  } catch (e) {\n    if (e instanceof errors.Script.InvalidBuffer) {\n      return false;\n    }\n    throw e;\n  }\n  var type = redeemScript.classify();\n  return type !== Script.types.UNKNOWN;\n};\n\n/**\n * @returns {boolean} if this is a mutlsig output script\n */\nScript.prototype.isMultisigOut = function() {\n  return (this.chunks.length > 3 &&\n    Opcode.isSmallIntOp(this.chunks[0].opcodenum) &&\n    this.chunks.slice(1, this.chunks.length - 2).every(function(obj) {\n      return obj.buf && BufferUtil.isBuffer(obj.buf);\n    }) &&\n    Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) &&\n    this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG);\n};\n\n\n/**\n * @returns {boolean} if this is a multisig input script\n */\nScript.prototype.isMultisigIn = function() {\n  return this.chunks.length >= 2 &&\n    this.chunks[0].opcodenum === 0 &&\n    this.chunks.slice(1, this.chunks.length).every(function(obj) {\n      return obj.buf &&\n        BufferUtil.isBuffer(obj.buf) &&\n        Signature.isTxDER(obj.buf);\n    });\n};\n\n/**\n * @returns {boolean} true if this is a valid standard OP_RETURN output\n */\nScript.prototype.isDataOut = function() {\n  return this.chunks.length >= 1 &&\n    this.chunks[0].opcodenum === Opcode.OP_RETURN &&\n    (this.chunks.length === 1 ||\n      (this.chunks.length === 2 &&\n        this.chunks[1].buf &&\n        this.chunks[1].buf.length <= Script.OP_RETURN_STANDARD_SIZE &&\n        this.chunks[1].length === this.chunks.len));\n};\n\n/**\n * Retrieve the associated data for this script.\n * In the case of a pay to public key hash, P2SH, P2WSH, or P2WPKH, return the hash.\n * In the case of a standard OP_RETURN, return the data\n * @returns {Buffer}\n */\nScript.prototype.getData = function() {\n  if (this.isDataOut() || this.isScriptHashOut()) {\n    if (_.isUndefined(this.chunks[1])) {\n      return Buffer.alloc(0);\n    } else {\n      return Buffer.from(this.chunks[1].buf);\n    }\n  }\n  if (this.isPublicKeyHashOut()) {\n    return Buffer.from(this.chunks[2].buf);\n  }\n  throw new Error('Unrecognized script type to get data from');\n};\n\n/**\n * @returns {boolean} if the script is only composed of data pushing\n * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)\n */\nScript.prototype.isPushOnly = function() {\n  return _.every(this.chunks, function(chunk) {\n    return chunk.opcodenum <= Opcode.OP_16;\n  });\n};\n\n\nScript.types = {};\nScript.types.UNKNOWN = 'Unknown';\nScript.types.PUBKEY_OUT = 'Pay to public key';\nScript.types.PUBKEY_IN = 'Spend from public key';\nScript.types.PUBKEYHASH_OUT = 'Pay to public key hash';\nScript.types.PUBKEYHASH_IN = 'Spend from public key hash';\nScript.types.SCRIPTHASH_OUT = 'Pay to script hash';\nScript.types.SCRIPTHASH_IN = 'Spend from script hash';\nScript.types.MULTISIG_OUT = 'Pay to multisig';\nScript.types.MULTISIG_IN = 'Spend from multisig';\nScript.types.DATA_OUT = 'Data push';\n\nScript.OP_RETURN_STANDARD_SIZE = 80;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classify = function() {\n  if (this._isInput) {\n    return this.classifyInput();\n  } else if (this._isOutput) {\n    return this.classifyOutput();\n  } else {\n    var outputType = this.classifyOutput();\n    return outputType != Script.types.UNKNOWN ? outputType : this.classifyInput();\n  }\n};\n\nScript.outputIdentifiers = {};\nScript.outputIdentifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;\nScript.outputIdentifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;\nScript.outputIdentifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;\nScript.outputIdentifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;\nScript.outputIdentifiers.DATA_OUT = Script.prototype.isDataOut;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classifyOutput = function() {\n  for (var type in Script.outputIdentifiers) {\n    if (Script.outputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\n\nScript.inputIdentifiers = {};\nScript.inputIdentifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;\nScript.inputIdentifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;\nScript.inputIdentifiers.MULTISIG_IN = Script.prototype.isMultisigIn;\nScript.inputIdentifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classifyInput = function() {\n  for (var type in Script.inputIdentifiers) {\n    if (Script.inputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\n\n\n/**\n * @returns {boolean} if script is one of the known types\n */\nScript.prototype.isStandard = function() {\n  // TODO: Add BIP62 compliance\n  return this.classify() !== Script.types.UNKNOWN;\n};\n\n\n// Script construction methods\n\n/**\n * Adds a script element at the start of the script.\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n */\nScript.prototype.prepend = function(obj) {\n  this._addByType(obj, true);\n  return this;\n};\n\n/**\n * Compares a script with another script\n */\nScript.prototype.equals = function(script) {\n  $.checkState(script instanceof Script, 'Must provide another script');\n  if (this.chunks.length !== script.chunks.length) {\n    return false;\n  }\n  var i;\n  for (i = 0; i < this.chunks.length; i++) {\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.isBuffer(script.chunks[i].buf)) {\n      return false;\n    }\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.equals(this.chunks[i].buf, script.chunks[i].buf)) {\n      return false;\n    } else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Adds a script element to the end of the script.\n *\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n *\n */\nScript.prototype.add = function(obj) {\n  this._addByType(obj, false);\n  return this;\n};\n\nScript.prototype._addByType = function(obj, prepend) {\n  if (typeof obj === 'string') {\n    this._addOpcode(obj, prepend);\n  } else if (typeof obj === 'number') {\n    this._addOpcode(obj, prepend);\n  } else if (obj instanceof Opcode) {\n    this._addOpcode(obj, prepend);\n  } else if (BufferUtil.isBuffer(obj)) {\n    this._addBuffer(obj, prepend);\n  } else if (obj instanceof Script) {\n    this.chunks = this.chunks.concat(obj.chunks);\n  } else if (typeof obj === 'object') {\n    this._insertAtPosition(obj, prepend);\n  } else {\n    throw new Error('Invalid script chunk');\n  }\n};\n\nScript.prototype._insertAtPosition = function(op, prepend) {\n  if (prepend) {\n    this.chunks.unshift(op);\n  } else {\n    this.chunks.push(op);\n  }\n};\n\nScript.prototype._addOpcode = function(opcode, prepend) {\n  var op;\n  if (typeof opcode === 'number') {\n    op = opcode;\n  } else if (opcode instanceof Opcode) {\n    op = opcode.toNumber();\n  } else {\n    op = Opcode(opcode).toNumber();\n  }\n  this._insertAtPosition({\n    opcodenum: op\n  }, prepend);\n  return this;\n};\n\nScript.prototype._addBuffer = function(buf, prepend) {\n  var opcodenum;\n  var len = buf.length;\n  if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n    opcodenum = len;\n  } else if (len < Math.pow(2, 8)) {\n    opcodenum = Opcode.OP_PUSHDATA1;\n  } else if (len < Math.pow(2, 16)) {\n    opcodenum = Opcode.OP_PUSHDATA2;\n  } else if (len < Math.pow(2, 32)) {\n    opcodenum = Opcode.OP_PUSHDATA4;\n  } else {\n    throw new Error('You can\\'t push that much data');\n  }\n  this._insertAtPosition({\n    buf: buf,\n    len: len,\n    opcodenum: opcodenum\n  }, prepend);\n  return this;\n};\n\nScript.prototype.hasCodeseparators = function() {\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum === Opcode.OP_CODESEPARATOR) {\n      return true;\n    }\n  }\n  return false;\n};\n\nScript.prototype.removeCodeseparators = function() {\n  var chunks = [];\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) {\n      chunks.push(this.chunks[i]);\n    }\n  }\n  this.chunks = chunks;\n  return this;\n};\n\n// high level script builder methods\n\n/**\n * @returns {Script} a new Multisig output script for given public keys,\n * requiring m of those public keys to spend\n * @param {PublicKey[]} publicKeys - list of all public keys controlling the output\n * @param {number} threshold - amount of required signatures to spend the output\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true, don't sort the given\n *                      public keys before creating the script\n */\nScript.buildMultisigOut = function(publicKeys, threshold, opts) {\n  $.checkArgument(threshold <= publicKeys.length,\n    'Number of required signatures must be less than or equal to the number of public keys');\n  opts = opts || {};\n  var script = new Script();\n  script.add(Opcode.smallInt(threshold));\n  publicKeys = _.map(publicKeys, PublicKey);\n  var sorted = publicKeys;\n  if (!opts.noSorting) {\n    sorted = _.sortBy(publicKeys, function(publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n  for (var i = 0; i < sorted.length; i++) {\n    var publicKey = sorted[i];\n    script.add(publicKey.toBuffer());\n  }\n  script.add(Opcode.smallInt(publicKeys.length));\n  script.add(Opcode.OP_CHECKMULTISIG);\n  return script;\n};\n\nScript.buildWitnessMultisigOutFromScript = function(script) {\n  if (script instanceof Script) {\n    var s = new Script();\n    s.add(Opcode.OP_0);\n    s.add(Hash.sha256(script.toBuffer()));\n    return s;\n  } else {\n    throw new TypeError('First argument is expected to be a p2sh script');\n  }\n};\n\n/**\n * A new Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildMultisigIn = function(pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n  _.each(signatures, function(signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  });\n  return s;\n};\n\n/**\n * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildP2SHMultisigIn = function(pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n  _.each(signatures, function(signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  });\n  s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key hash output for the given\n * address or public key\n * @param {(Address|PublicKey)} to - destination address or public key\n */\nScript.buildPublicKeyHashOut = function(to) {\n  $.checkArgument(!_.isUndefined(to));\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (_.isString(to)) {\n    to = new Address(to);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_DUP)\n    .add(Opcode.OP_HASH160)\n    .add(to.hashBuffer)\n    .add(Opcode.OP_EQUALVERIFY)\n    .add(Opcode.OP_CHECKSIG);\n  s._network = to.network;\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to witness v0 output for the given\n * address\n * @param {(Address|PublicKey)} to - destination address\n */\nScript.buildWitnessV0Out = function(to) {\n  $.checkArgument(!_.isUndefined(to));\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (_.isString(to)) {\n    to = new Address(to);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_0)\n    .add(to.hashBuffer);\n  s._network = to.network;\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key output for the given\n *  public key\n */\nScript.buildPublicKeyOut = function(pubkey) {\n  $.checkArgument(pubkey instanceof PublicKey);\n  var s = new Script();\n  s.add(pubkey.toBuffer())\n    .add(Opcode.OP_CHECKSIG);\n  return s;\n};\n\n/**\n * @returns {Script} a new OP_RETURN script with data\n * @param {(string|Buffer)} data - the data to embed in the output\n * @param {(string)} encoding - the type of encoding of the string\n */\nScript.buildDataOut = function(data, encoding) {\n  $.checkArgument(_.isUndefined(data) || _.isString(data) || BufferUtil.isBuffer(data));\n  if (_.isString(data)) {\n    data = Buffer.from(data, encoding);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_RETURN);\n  if (!_.isUndefined(data)) {\n    s.add(data);\n  }\n  return s;\n};\n\n/**\n * @param {Script|Address} script - the redeemScript for the new p2sh output.\n *    It can also be a p2sh address\n * @returns {Script} new pay to script hash script for given script\n */\nScript.buildScriptHashOut = function(script) {\n  $.checkArgument(script instanceof Script ||\n    (script instanceof Address && script.isPayToScriptHash()));\n  var s = new Script();\n  s.add(Opcode.OP_HASH160)\n    .add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer()))\n    .add(Opcode.OP_EQUAL);\n\n  s._network = script._network || script.network;\n  return s;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key output script.\n *\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyIn = function(signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script();\n  script.add(BufferUtil.concat([\n    signature,\n    BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)\n  ]));\n  return script;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key hash\n * output script.\n *\n * @param {Buffer|string|PublicKey} publicKey\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyHashIn = function(publicKey, signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script()\n    .add(BufferUtil.concat([\n      signature,\n      BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)\n    ]))\n    .add(new PublicKey(publicKey).toBuffer());\n  return script;\n};\n\n/**\n * @returns {Script} an empty script\n */\nScript.empty = function() {\n  return new Script();\n};\n\n/**\n * @returns {Script} a new pay to script hash script that pays to this script\n */\nScript.prototype.toScriptHashOut = function() {\n  return Script.buildScriptHashOut(this);\n};\n\n/**\n * @return {Script} an output script built from the address\n */\nScript.fromAddress = function(address) {\n  address = Address(address);\n  if (address.isPayToScriptHash()) {\n    return Script.buildScriptHashOut(address);\n  } else if (address.isPayToPublicKeyHash()) {\n    return Script.buildPublicKeyHashOut(address);\n  }\n  throw new errors.Script.UnrecognizedAddress(address);\n};\n\n/**\n * Will return the associated address information object\n * @return {Address|boolean}\n */\nScript.prototype.getAddressInfo = function(opts) {\n  if (this._isInput) {\n    return this._getInputAddressInfo();\n  } else if (this._isOutput) {\n    return this._getOutputAddressInfo();\n  } else {\n    var info = this._getOutputAddressInfo();\n    if (!info) {\n      return this._getInputAddressInfo();\n    }\n    return info;\n  }\n};\n\n/**\n * Will return the associated output scriptPubKey address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getOutputAddressInfo = function() {\n  var info = {};\n  if (this.isScriptHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToScriptHash;\n  } else if (this.isPublicKeyHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToPublicKeyHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * Will return the associated input scriptSig address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getInputAddressInfo = function() {\n  var info = {};\n  if (this.isPublicKeyHashIn()) {\n    // hash the publickey found in the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[1].buf);\n    info.type = Address.PayToPublicKeyHash;\n  } else if (this.isScriptHashIn()) {\n    // hash the redeemscript found at the end of the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[this.chunks.length - 1].buf);\n    info.type = Address.PayToScriptHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * @param {Network=} network\n * @return {Address|boolean} the associated address for this script if possible, or false\n */\nScript.prototype.toAddress = function(network) {\n  var info = this.getAddressInfo();\n  if (!info) {\n    return false;\n  }\n  info.network = Networks.get(network) || this._network || Networks.defaultNetwork;\n  return new Address(info);\n};\n\n/**\n * Analogous to bitcoind's FindAndDelete. Find and delete equivalent chunks,\n * typically used with push data chunks.  Note that this will find and delete\n * not just the same data, but the same data with the same push data op as\n * produced by default. i.e., if a pushdata in a tx does not use the minimal\n * pushdata op, then when you try to remove the data it is pushing, it will not\n * be removed, because they do not use the same pushdata op.\n */\nScript.prototype.findAndDelete = function(script) {\n  var buf = script.toBuffer();\n  var hex = buf.toString('hex');\n  for (var i = 0; i < this.chunks.length; i++) {\n    var script2 = Script({\n      chunks: [this.chunks[i]]\n    });\n    var buf2 = script2.toBuffer();\n    var hex2 = buf2.toString('hex');\n    if (hex === hex2) {\n      this.chunks.splice(i, 1);\n    }\n  }\n  return this;\n};\n\n/**\n * Comes from bitcoind's script interpreter CheckMinimalPush function\n * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.\n */\nScript.prototype.checkMinimalPush = function(i) {\n  var chunk = this.chunks[i];\n  var buf = chunk.buf;\n  var opcodenum = chunk.opcodenum;\n  if (!buf) {\n    return true;\n  }\n  if (buf.length === 0) {\n    // Could have used OP_0.\n    return opcodenum === Opcode.OP_0;\n  } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {\n    // Could have used OP_1 .. OP_16.\n    return opcodenum === Opcode.OP_1 + (buf[0] - 1);\n  } else if (buf.length === 1 && buf[0] === 0x81) {\n    // Could have used OP_1NEGATE\n    return opcodenum === Opcode.OP_1NEGATE;\n  } else if (buf.length <= 75) {\n    // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n    return opcodenum === buf.length;\n  } else if (buf.length <= 255) {\n    // Could have used OP_PUSHDATA.\n    return opcodenum === Opcode.OP_PUSHDATA1;\n  } else if (buf.length <= 65535) {\n    // Could have used OP_PUSHDATA2.\n    return opcodenum === Opcode.OP_PUSHDATA2;\n  }\n  return true;\n};\n\n/**\n * Comes from bitcoind's script DecodeOP_N function\n * @param {number} opcode\n * @returns {number} numeric value in range of 0 to 16\n */\nScript.prototype._decodeOP_N = function(opcode) {\n  if (opcode === Opcode.OP_0) {\n    return 0;\n  } else if (opcode >= Opcode.OP_1 && opcode <= Opcode.OP_16) {\n    return opcode - (Opcode.OP_1 - 1);\n  } else {\n    throw new Error('Invalid opcode: ' + JSON.stringify(opcode));\n  }\n};\n\n/**\n * Comes from bitcoind's script GetSigOpCount(boolean) function\n * @param {boolean} use current (true) or pre-version-0.6 (false) logic\n * @returns {number} number of signature operations required by this script\n */\nScript.prototype.getSignatureOperationsCount = function(accurate) {\n  accurate = (_.isUndefined(accurate) ? true : accurate);\n  var self = this;\n  var n = 0;\n  var lastOpcode = Opcode.OP_INVALIDOPCODE;\n  _.each(self.chunks, function getChunk(chunk) {\n    var opcode = chunk.opcodenum;\n    if (opcode == Opcode.OP_CHECKSIG || opcode == Opcode.OP_CHECKSIGVERIFY) {\n      n++;\n    } else if (opcode == Opcode.OP_CHECKMULTISIG || opcode == Opcode.OP_CHECKMULTISIGVERIFY) {\n      if (accurate && lastOpcode >= Opcode.OP_1 && lastOpcode <= Opcode.OP_16) {\n        n += self._decodeOP_N(lastOpcode);\n      } else {\n        n += 20;\n      }\n    }\n    lastOpcode = opcode;\n  });\n  return n;\n};\n\nmodule.exports = Script;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}