{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst utils = require('../../../caver-utils');\n\nconst {\n  ACCOUNT_KEY_TAG\n} = require('./accountKeyHelper');\n/**\n * Representing an AccountKeyFail.\n * @class\n * @hideconstructor\n */\n\n\nclass AccountKeyFail {\n  /**\n   * Decodes an RLP-encoded AccountKeyFail string.\n   *\n   * @example\n   * const accountKey = caver.account.accountKey.accountKeyFail.decode('0x{encoded account key}')\n   *\n   * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyFail string.\n   * @return {AccountKeyFail}\n   */\n  static decode(rlpEncodedKey) {\n    rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n    if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) throw new Error(`Cannot decode to AccountKeyFail. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG}: ${rlpEncodedKey}`);\n    return new AccountKeyFail();\n  }\n  /**\n   * Returns an RLP-encoded AccountKeyFail string.\n   *\n   * @example\n   * const encoding = accountKeyFail.getRLPEncoding()\n   *\n   * @return {string}\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  getRLPEncoding() {\n    return ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG;\n  }\n\n}\n\nmodule.exports = AccountKeyFail;","map":{"version":3,"names":["utils","require","ACCOUNT_KEY_TAG","AccountKeyFail","decode","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_FAIL_TAG","Error","getRLPEncoding","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyFail.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst utils = require('../../../caver-utils')\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\n\n/**\n * Representing an AccountKeyFail.\n * @class\n * @hideconstructor\n */\nclass AccountKeyFail {\n    /**\n     * Decodes an RLP-encoded AccountKeyFail string.\n     *\n     * @example\n     * const accountKey = caver.account.accountKey.accountKeyFail.decode('0x{encoded account key}')\n     *\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyFail string.\n     * @return {AccountKeyFail}\n     */\n    static decode(rlpEncodedKey) {\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG))\n            throw new Error(`Cannot decode to AccountKeyFail. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG}: ${rlpEncodedKey}`)\n\n        return new AccountKeyFail()\n    }\n\n    /**\n     * Returns an RLP-encoded AccountKeyFail string.\n     *\n     * @example\n     * const encoding = accountKeyFail.getRLPEncoding()\n     *\n     * @return {string}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    getRLPEncoding() {\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG\n    }\n}\n\nmodule.exports = AccountKeyFail\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,MAAM;EAAEC;AAAF,IAAsBD,OAAO,CAAC,oBAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,cAAN,CAAqB;EACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACiB,OAANC,MAAM,CAACC,aAAD,EAAgB;IACzBA,aAAa,GAAGL,KAAK,CAACM,YAAN,CAAmBD,aAAnB,CAAhB;IACA,IAAI,CAACA,aAAa,CAACE,UAAd,CAAyBL,eAAe,CAACM,oBAAzC,CAAL,EACI,MAAM,IAAIC,KAAJ,CAAW,uDAAsDP,eAAe,CAACM,oBAAqB,KAAIH,aAAc,EAAxH,CAAN;IAEJ,OAAO,IAAIF,cAAJ,EAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;;;EACAO,cAAc,GAAG;IACb,OAAOR,eAAe,CAACM,oBAAvB;EACH;;AA7BgB;;AAgCrBG,MAAM,CAACC,OAAP,GAAiBT,cAAjB"},"metadata":{},"sourceType":"script"}