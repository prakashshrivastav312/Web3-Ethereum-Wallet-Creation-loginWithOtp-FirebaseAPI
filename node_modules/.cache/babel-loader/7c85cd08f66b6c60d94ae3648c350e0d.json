{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ValidationExecutor } from './ValidationExecutor';\n/**\n * Validator performs validation of the given object based on its metadata.\n */\n\nvar Validator =\n/** @class */\nfunction () {\n  function Validator() {}\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n\n\n  Validator.prototype.validate = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n  };\n  /**\n   * Performs validation of the given object based on decorators or validation schema and reject on error.\n   */\n\n\n  Validator.prototype.validateOrReject = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errors;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions)];\n\n          case 1:\n            errors = _a.sent();\n            if (errors.length) return [2\n            /*return*/\n            , Promise.reject(errors)];\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n\n\n  Validator.prototype.validateSync = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    var object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n    var options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n    var schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n    var executor = new ValidationExecutor(this, options);\n    executor.ignoreAsyncValidations = true;\n    var validationErrors = [];\n    executor.execute(object, schema, validationErrors);\n    return executor.stripEmptyErrors(validationErrors);\n  }; // -------------------------------------------------------------------------\n  // Private Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   * Common method for `validateOrReject` and `validate` methods.\n   */\n\n\n  Validator.prototype.coreValidate = function (objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions) {\n    var object = typeof objectOrSchemaName === 'string' ? objectOrValidationOptions : objectOrSchemaName;\n    var options = typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : objectOrValidationOptions;\n    var schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n    var executor = new ValidationExecutor(this, options);\n    var validationErrors = [];\n    executor.execute(object, schema, validationErrors);\n    return Promise.all(executor.awaitingPromises).then(function () {\n      return executor.stripEmptyErrors(validationErrors);\n    });\n  };\n\n  return Validator;\n}();\n\nexport { Validator };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,kBAAT,QAAmC,sBAAnC;AAGA;;;;AAGA;AAAA;AAAA;EAAA,sBAwGC;EAzFC;;;;;EAGAC,yCACEC,kBADF,EAEEC,yBAFF,EAGEC,qBAHF,EAG0C;IAExC,OAAO,KAAKC,YAAL,CAAkBH,kBAAlB,EAAsCC,yBAAtC,EAAiEC,qBAAjE,CAAP;EACD,CAND;EAkBA;;;;;EAGMH,uCAAN,UACEC,kBADF,EAEEC,yBAFF,EAGEC,qBAHF,EAG0C;;;;;;YAEzB;YAAA;YAAA,EAAM,KAAKC,YAAL,CAAkBH,kBAAlB,EAAsCC,yBAAtC,EAAiEC,qBAAjE,CAAN;;;YAATE,MAAM,GAAGC,SAAT;YACN,IAAID,MAAM,CAACE,MAAX,EAAmB;YAAA;YAAA,EAAOC,OAAO,CAACC,MAAR,CAAeJ,MAAf,CAAP;;;;;;;EACpB,CAPK;EAoBN;;;;;EAGAL,6CACEC,kBADF,EAEEC,yBAFF,EAGEC,qBAHF,EAG0C;IAExC,IAAMO,MAAM,GAAG,OAAOT,kBAAP,KAA8B,QAA9B,GAA0CC,yBAA1C,GAAiFD,kBAAhG;IACA,IAAMU,OAAO,GACX,OAAOV,kBAAP,KAA8B,QAA9B,GAAyCE,qBAAzC,GAAkED,yBADpE;IAEA,IAAMU,MAAM,GAAG,OAAOX,kBAAP,KAA8B,QAA9B,GAAyCA,kBAAzC,GAA8DY,SAA7E;IAEA,IAAMC,QAAQ,GAAG,IAAIf,kBAAJ,CAAuB,IAAvB,EAA6BY,OAA7B,CAAjB;IACAG,QAAQ,CAACC,sBAAT,GAAkC,IAAlC;IACA,IAAMC,gBAAgB,GAAsB,EAA5C;IACAF,QAAQ,CAACG,OAAT,CAAiBP,MAAjB,EAAyBE,MAAzB,EAAiCI,gBAAjC;IACA,OAAOF,QAAQ,CAACI,gBAAT,CAA0BF,gBAA1B,CAAP;EACD,CAfD,CA9DF,CA+EE;EACA;EACA;;EACA;;;;;;EAIQhB,mCAAR,UACEC,kBADF,EAEEC,yBAFF,EAGEC,qBAHF,EAG0C;IAExC,IAAMO,MAAM,GAAG,OAAOT,kBAAP,KAA8B,QAA9B,GAA0CC,yBAA1C,GAAiFD,kBAAhG;IACA,IAAMU,OAAO,GACX,OAAOV,kBAAP,KAA8B,QAA9B,GAAyCE,qBAAzC,GAAkED,yBADpE;IAEA,IAAMU,MAAM,GAAG,OAAOX,kBAAP,KAA8B,QAA9B,GAAyCA,kBAAzC,GAA8DY,SAA7E;IAEA,IAAMC,QAAQ,GAAG,IAAIf,kBAAJ,CAAuB,IAAvB,EAA6BY,OAA7B,CAAjB;IACA,IAAMK,gBAAgB,GAAsB,EAA5C;IACAF,QAAQ,CAACG,OAAT,CAAiBP,MAAjB,EAAyBE,MAAzB,EAAiCI,gBAAjC;IAEA,OAAOR,OAAO,CAACW,GAAR,CAAYL,QAAQ,CAACM,gBAArB,EAAuCC,IAAvC,CAA4C;MACjD,OAAOP,QAAQ,CAACI,gBAAT,CAA0BF,gBAA1B,CAAP;IACD,CAFM,CAAP;EAGD,CAjBO;;EAkBV;AAAC,CAxGD","names":["ValidationExecutor","Validator","objectOrSchemaName","objectOrValidationOptions","maybeValidatorOptions","coreValidate","errors","_a","length","Promise","reject","object","options","schema","undefined","executor","ignoreAsyncValidations","validationErrors","execute","stripEmptyErrors","all","awaitingPromises","then"],"sourceRoot":"","sources":["../../../src/validation/Validator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}