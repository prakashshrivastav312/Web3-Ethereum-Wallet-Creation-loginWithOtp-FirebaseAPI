{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendLitecoinTransaction = exports.prepareLitecoinSignedTransaction = exports.signLitecoinKMSTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\")); // @ts-ignore\n\n\nconst bitcore_lib_ltc_1 = require(\"bitcore-lib-ltc\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n/**\n * Prepare a signed Ltc transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\n\nconst prepareSignedTransaction = async body => {\n  var _a, _b;\n\n  await tatum_1.validateBody(body, model_1.TransferBtcBasedBlockchain);\n  const {\n    fromUTXO,\n    fromAddress,\n    to\n  } = body;\n  const tx = new bitcore_lib_ltc_1.Transaction();\n  const privateKeysToSign = [];\n\n  if (fromAddress) {\n    for (const item of fromAddress) {\n      const txs = await blockchain_1.ltcGetTxForAccount(item.address);\n\n      for (const t of txs) {\n        for (const [i, o] of t.outputs.entries()) {\n          if (o.address !== item.address) {\n            continue;\n          }\n\n          try {\n            await blockchain_1.ltcGetUTXO(t.hash, i);\n            tx.from({\n              txId: t.hash,\n              outputIndex: i,\n              script: bitcore_lib_ltc_1.Script.fromAddress(item.address).toString(),\n              satoshis: Number(new bignumber_js_1.default(o.value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR))\n            });\n            privateKeysToSign.push(item.signatureId || item.privateKey);\n          } catch (e) {\n            console.error(e.toString());\n          }\n        }\n      }\n    }\n  } else if (fromUTXO) {\n    for (const item of fromUTXO) {\n      const t = await blockchain_1.ltcGetTransaction(item.txHash);\n      const address = t.outputs ? t.outputs[item.index].address : (_a = t.vout) === null || _a === void 0 ? void 0 : _a[item.index].scriptPubKey.addresses[0];\n      const value = t.outputs ? t.outputs[item.index].value : ((_b = t.vout) === null || _b === void 0 ? void 0 : _b[item.index].value) || 0;\n      tx.from({\n        txId: item.txHash,\n        outputIndex: item.index,\n        script: bitcore_lib_ltc_1.Script.fromAddress(address).toString(),\n        satoshis: Number(new bignumber_js_1.default(value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR))\n      });\n      privateKeysToSign.push(item.signatureId || item.privateKey);\n    }\n  }\n\n  for (const item of to) {\n    tx.to(item.address, Number(new bignumber_js_1.default(item.value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)));\n  }\n\n  if (fromAddress && fromAddress[0].signatureId || fromUTXO && fromUTXO[0].signatureId) {\n    return JSON.stringify({\n      txData: JSON.stringify(tx),\n      privateKeysToSign\n    });\n  }\n\n  for (const item of privateKeysToSign) {\n    tx.sign(bitcore_lib_ltc_1.PrivateKey.fromWIF(item));\n  }\n\n  return tx.serialize(true);\n};\n/**\n * Sign Litecoin pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param privateKeys private keys to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst signLitecoinKMSTransaction = async (tx, privateKeys, testnet) => {\n  if (tx.chain !== model_1.Currency.LTC) {\n    throw Error('Unsupported chain.');\n  }\n\n  const builder = new bitcore_lib_ltc_1.Transaction(JSON.parse(tx.serializedTransaction));\n\n  for (const privateKey of privateKeys) {\n    builder.sign(bitcore_lib_ltc_1.PrivateKey.fromWIF(privateKey));\n  }\n\n  return builder.serialize(true);\n};\n\nexports.signLitecoinKMSTransaction = signLitecoinKMSTransaction;\n/**\n * Sign Litcoin transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareLitecoinSignedTransaction = async (testnet, body) => {\n  return prepareSignedTransaction(body);\n};\n\nexports.prepareLitecoinSignedTransaction = prepareLitecoinSignedTransaction;\n/**\n * Send Litecoin transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendLitecoinTransaction = async (testnet, body) => {\n  return blockchain_1.ltcBroadcast(await exports.prepareLitecoinSignedTransaction(testnet, body));\n};\n\nexports.sendLitecoinTransaction = sendLitecoinTransaction;","map":{"version":3,"mappings":"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","names":["prepareSignedTransaction","body","tatum_1","model_1","fromUTXO","fromAddress","to","tx","bitcore_lib_ltc_1","privateKeysToSign","item","txs","blockchain_1","address","t","i","o","outputs","entries","hash","from","txId","outputIndex","script","toString","satoshis","Number","bignumber_js_1","value","multipliedBy","toFixed","ROUND_FLOOR","push","signatureId","privateKey","e","console","error","txHash","index","vout","_a","scriptPubKey","addresses","_b","JSON","stringify","txData","sign","fromWIF","serialize","signLitecoinKMSTransaction","privateKeys","testnet","chain","LTC","Error","builder","parse","serializedTransaction","exports","prepareLitecoinSignedTransaction","sendLitecoinTransaction"],"sourceRoot":"","sources":["../../../src/transaction/litecoin.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}