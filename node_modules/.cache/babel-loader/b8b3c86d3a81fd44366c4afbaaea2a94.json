{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst _ = require('lodash');\n\nconst AbstractFeeDelegatedWithRatioTransaction = require('../abstractFeeDelegatedWithRatioTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  isNot\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nconst Account = require('../../../../caver-account');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdateWithRatio)) throw new Error(`Cannot decode to FeeDelegatedAccountUpdateWithRatio. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdateWithRatio}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from,\n    rlpEncodedKey,\n    feeRatio: utils.trimLeadingZero(feeRatio),\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated account update with ratio transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedaccountupdatewithratio|FeeDelegatedAccountUpdateWithRatio} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractFeeDelegatedWithRatioTransaction\n */\n\n\nclass FeeDelegatedAccountUpdateWithRatio extends AbstractFeeDelegatedWithRatioTransaction {\n  /**\n   * Creates a fee delegated account update with ratio transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdateWithRatio transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `feeRatio`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {FeeDelegatedAccountUpdateWithRatio}\n   */\n  static create(createTxObj, klaytnCall) {\n    return new FeeDelegatedAccountUpdateWithRatio(createTxObj, klaytnCall);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a FeeDelegatedAccountUpdateWithRatio transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded fee delegated account update with ratio transaction.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {FeeDelegatedAccountUpdateWithRatio}\n   */\n\n\n  static decode(rlpEncoded, klaytnCall) {\n    const decoded = _decode(rlpEncoded);\n\n    decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey);\n    return new FeeDelegatedAccountUpdateWithRatio(decoded, klaytnCall);\n  }\n  /**\n   * Creates a fee delegated account update with ratio transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdateWithRatio transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `feeRatio`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   */\n\n\n  constructor(createTxObj, klaytnCall) {\n    if (_.isString(createTxObj)) {\n      createTxObj = _decode(createTxObj);\n      createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey);\n    }\n\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio, createTxObj, klaytnCall);\n    this.account = createTxObj.account;\n    if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get gasPrice() {\n    return this._gasPrice;\n  }\n\n  set gasPrice(g) {\n    this._gasPrice = utils.numberToHex(g);\n  }\n  /**\n   * @type {Account}\n   */\n\n\n  get account() {\n    return this._account;\n  }\n\n  set account(acct) {\n    if (!(acct instanceof Account)) throw new Error(`Invalid account. 'account' should be instance of 'Account'.`);\n    if (this.from.toLowerCase() !== acct.address.toLowerCase()) throw new Error(`Transaction from address(${this.from.toLowerCase()}) and account address(${acct.address}) do not match.`);\n    this._account = acct;\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   *\n   * @example\n   * const result = tx.getRLPEncoding()\n   *\n   * @return {string} An RLP-encoded transaction string.\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdateWithRatio + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey(), Bytes.fromNat(this.feeRatio), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * This method has to be overrided in classes which extends AbstractTransaction.\n   * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n   *\n   * @example\n   * const result = tx.getCommonRLPEncodingForSignature()\n   *\n   * @return {string} An RLP-encoded transaction string without signature.\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdateWithRatio, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey(), Bytes.fromNat(this.feeRatio)]);\n  }\n  /**\n   * Fills in the optional variables in transaction.\n   *\n   * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n   * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n   *\n   * @example\n   * await tx.fillTransaction()\n   */\n\n\n  async fillTransaction() {\n    const [chainId, gasPrice, nonce] = await Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce]);\n    this.chainId = chainId;\n    this.gasPrice = gasPrice;\n    this.nonce = nonce;\n  }\n  /**\n   * Checks that member variables that can be defined by the user are defined.\n   * If there is an undefined variable, an error occurs.\n   *\n   * @ignore\n   */\n\n\n  validateOptionalValues() {\n    super.validateOptionalValues();\n    if (this.gasPrice === undefined) throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`);\n  }\n\n}\n\nmodule.exports = FeeDelegatedAccountUpdateWithRatio;","map":{"version":3,"names":["RLP","require","Bytes","_","AbstractFeeDelegatedWithRatioTransaction","TX_TYPE_STRING","TX_TYPE_TAG","isNot","utils","Account","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedAccountUpdateWithRatio","Error","typeDettached","slice","nonce","gasPrice","gas","from","rlpEncodedKey","feeRatio","signatures","feePayer","feePayerSignatures","decode","trimLeadingZero","FeeDelegatedAccountUpdateWithRatio","create","createTxObj","klaytnCall","decoded","account","createFromRLPEncoding","constructor","isString","undefined","_gasPrice","g","numberToHex","_account","acct","toLowerCase","address","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","getRLPEncodingAccountKey","getCommonRLPEncodingForSignature","fillTransaction","chainId","Promise","all","getChainId","getGasPrice","getNonce","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/accountUpdate/feeDelegatedAccountUpdateWithRatio.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst _ = require('lodash')\nconst AbstractFeeDelegatedWithRatioTransaction = require('../abstractFeeDelegatedWithRatioTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG, isNot } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\nconst Account = require('../../../../caver-account')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdateWithRatio))\n        throw new Error(\n            `Cannot decode to FeeDelegatedAccountUpdateWithRatio. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdateWithRatio}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        rlpEncodedKey,\n        feeRatio: utils.trimLeadingZero(feeRatio),\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated account update with ratio transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedaccountupdatewithratio|FeeDelegatedAccountUpdateWithRatio} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractFeeDelegatedWithRatioTransaction\n */\nclass FeeDelegatedAccountUpdateWithRatio extends AbstractFeeDelegatedWithRatioTransaction {\n    /**\n     * Creates a fee delegated account update with ratio transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdateWithRatio transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `feeRatio`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {FeeDelegatedAccountUpdateWithRatio}\n     */\n    static create(createTxObj, klaytnCall) {\n        return new FeeDelegatedAccountUpdateWithRatio(createTxObj, klaytnCall)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedAccountUpdateWithRatio transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated account update with ratio transaction.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {FeeDelegatedAccountUpdateWithRatio}\n     */\n    static decode(rlpEncoded, klaytnCall) {\n        const decoded = _decode(rlpEncoded)\n        decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey)\n        return new FeeDelegatedAccountUpdateWithRatio(decoded, klaytnCall)\n    }\n\n    /**\n     * Creates a fee delegated account update with ratio transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdateWithRatio transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `feeRatio`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     */\n    constructor(createTxObj, klaytnCall) {\n        if (_.isString(createTxObj)) {\n            createTxObj = _decode(createTxObj)\n            createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey)\n        }\n\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio, createTxObj, klaytnCall)\n        this.account = createTxObj.account\n        if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice\n    }\n\n    /**\n     * @type {string}\n     */\n    get gasPrice() {\n        return this._gasPrice\n    }\n\n    set gasPrice(g) {\n        this._gasPrice = utils.numberToHex(g)\n    }\n\n    /**\n     * @type {Account}\n     */\n    get account() {\n        return this._account\n    }\n\n    set account(acct) {\n        if (!(acct instanceof Account)) throw new Error(`Invalid account. 'account' should be instance of 'Account'.`)\n        if (this.from.toLowerCase() !== acct.address.toLowerCase())\n            throw new Error(`Transaction from address(${this.from.toLowerCase()}) and account address(${acct.address}) do not match.`)\n\n        this._account = acct\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     *\n     * @example\n     * const result = tx.getRLPEncoding()\n     *\n     * @return {string} An RLP-encoded transaction string.\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdateWithRatio +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                this.account.getRLPEncodingAccountKey(),\n                Bytes.fromNat(this.feeRatio),\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * This method has to be overrided in classes which extends AbstractTransaction.\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n     *\n     * @example\n     * const result = tx.getCommonRLPEncodingForSignature()\n     *\n     * @return {string} An RLP-encoded transaction string without signature.\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdateWithRatio,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n            this.account.getRLPEncodingAccountKey(),\n            Bytes.fromNat(this.feeRatio),\n        ])\n    }\n\n    /**\n     * Fills in the optional variables in transaction.\n     *\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n     *\n     * @example\n     * await tx.fillTransaction()\n     */\n    async fillTransaction() {\n        const [chainId, gasPrice, nonce] = await Promise.all([\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\n            isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice,\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\n        ])\n\n        this.chainId = chainId\n        this.gasPrice = gasPrice\n        this.nonce = nonce\n    }\n\n    /**\n     * Checks that member variables that can be defined by the user are defined.\n     * If there is an undefined variable, an error occurs.\n     *\n     * @ignore\n     */\n    validateOptionalValues() {\n        super.validateOptionalValues()\n        if (this.gasPrice === undefined)\n            throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`)\n    }\n}\n\nmodule.exports = FeeDelegatedAccountUpdateWithRatio\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}