{"ast":null,"code":"import { keccak256 } from './keccak';\n/**\n * derive Address from public key\n * @param pubKey the public key\n */\n\nexport function publicKeyToAddress(pubKey) {\n  return keccak256(pubKey.slice(1)).slice(12);\n}\n/**\n * to check if a value presents an address\n * @param v the value to be checked\n */\n\nexport function isAddress(v) {\n  return typeof v === 'string' && /^0x[0-9a-f]{40}$/i.test(v);\n}\n/**\n * encode the address to checksum address that is compatible with eip-55\n * @param address input address\n */\n\nexport function toChecksumAddress(address) {\n  if (!isAddress(address)) {\n    throw new Error('invalid address');\n  }\n\n  address = address.slice(2).toLowerCase();\n  const hash = keccak256(address);\n  let checksumAddress = '0x';\n\n  for (let i = 0; i < address.length; i++) {\n    // tslint:disable-next-line:no-bitwise\n    let byte = hash[i >> 1];\n\n    if (i % 2 === 0) {\n      // tslint:disable-next-line:no-bitwise\n      byte >>= 4;\n    }\n\n    if (byte % 16 >= 8) {\n      checksumAddress += address[i].toUpperCase();\n    } else {\n      checksumAddress += address[i];\n    }\n  }\n\n  return checksumAddress;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AACA;;;;;AAIA,OAAM,SAAUC,kBAAV,CAA6BC,MAA7B,EAA2C;EAC7C,OAAOF,SAAS,CAACE,MAAM,CAACC,KAAP,CAAa,CAAb,CAAD,CAAT,CAA2BA,KAA3B,CAAiC,EAAjC,CAAP;AACH;AAED;;;;;AAIA,OAAM,SAAUC,SAAV,CAAoBC,CAApB,EAA0B;EAC5B,OAAO,OAAOA,CAAP,KAAa,QAAb,IAAyB,oBAAoBC,IAApB,CAAyBD,CAAzB,CAAhC;AACH;AAED;;;;;AAIA,OAAM,SAAUE,iBAAV,CAA4BC,OAA5B,EAA2C;EAC7C,IAAI,CAACJ,SAAS,CAACI,OAAD,CAAd,EAAyB;IACrB,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;EACH;;EACDD,OAAO,GAAGA,OAAO,CAACL,KAAR,CAAc,CAAd,EAAiBO,WAAjB,EAAV;EACA,MAAMC,IAAI,GAAGX,SAAS,CAACQ,OAAD,CAAtB;EAEA,IAAII,eAAe,GAAG,IAAtB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACM,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;IACrC;IACA,IAAIE,IAAI,GAAGJ,IAAI,CAACE,CAAC,IAAI,CAAN,CAAf;;IACA,IAAIA,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;MACb;MACAE,IAAI,KAAK,CAAT;IACH;;IAED,IAAIA,IAAI,GAAG,EAAP,IAAa,CAAjB,EAAoB;MAChBH,eAAe,IAAIJ,OAAO,CAACK,CAAD,CAAP,CAAWG,WAAX,EAAnB;IACH,CAFD,MAEO;MACHJ,eAAe,IAAIJ,OAAO,CAACK,CAAD,CAA1B;IACH;EACJ;;EACD,OAAOD,eAAP;AACH","names":["keccak256","publicKeyToAddress","pubKey","slice","isAddress","v","test","toChecksumAddress","address","Error","toLowerCase","hash","checksumAddress","i","length","byte","toUpperCase"],"sourceRoot":"","sources":["../../src/cry/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}