{"ast":null,"code":"import { ValidationSchemaToMetadataTransformer } from '../validation-schema/ValidationSchemaToMetadataTransformer';\nimport { getGlobal } from '../utils';\n/**\n * Storage all metadatas.\n */\n\nvar MetadataStorage =\n/** @class */\nfunction () {\n  function MetadataStorage() {\n    // -------------------------------------------------------------------------\n    // Private properties\n    // -------------------------------------------------------------------------\n    this.validationMetadatas = [];\n    this.constraintMetadatas = [];\n  }\n\n  Object.defineProperty(MetadataStorage.prototype, \"hasValidationMetaData\", {\n    get: function () {\n      return !!this.validationMetadatas.length;\n    },\n    enumerable: false,\n    configurable: true\n  }); // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Adds a new validation metadata.\n   */\n\n  MetadataStorage.prototype.addValidationSchema = function (schema) {\n    var _this = this;\n\n    var validationMetadatas = new ValidationSchemaToMetadataTransformer().transform(schema);\n    validationMetadatas.forEach(function (validationMetadata) {\n      return _this.addValidationMetadata(validationMetadata);\n    });\n  };\n  /**\n   * Adds a new validation metadata.\n   */\n\n\n  MetadataStorage.prototype.addValidationMetadata = function (metadata) {\n    this.validationMetadatas.push(metadata);\n  };\n  /**\n   * Adds a new constraint metadata.\n   */\n\n\n  MetadataStorage.prototype.addConstraintMetadata = function (metadata) {\n    this.constraintMetadatas.push(metadata);\n  };\n  /**\n   * Groups metadata by their property names.\n   */\n\n\n  MetadataStorage.prototype.groupByPropertyName = function (metadata) {\n    var grouped = {};\n    metadata.forEach(function (metadata) {\n      if (!grouped[metadata.propertyName]) grouped[metadata.propertyName] = [];\n      grouped[metadata.propertyName].push(metadata);\n    });\n    return grouped;\n  };\n  /**\n   * Gets all validation metadatas for the given object with the given groups.\n   */\n\n\n  MetadataStorage.prototype.getTargetValidationMetadatas = function (targetConstructor, targetSchema, always, strictGroups, groups) {\n    var includeMetadataBecauseOfAlwaysOption = function (metadata) {\n      // `metadata.always` overrides global default.\n      if (typeof metadata.always !== 'undefined') return metadata.always; // `metadata.groups` overrides global default.\n\n      if (metadata.groups && metadata.groups.length) return false; // Use global default.\n\n      return always;\n    };\n\n    var excludeMetadataBecauseOfStrictGroupsOption = function (metadata) {\n      if (strictGroups) {\n        // Validation is not using groups.\n        if (!groups || !groups.length) {\n          // `metadata.groups` has at least one group.\n          if (metadata.groups && metadata.groups.length) return true;\n        }\n      }\n\n      return false;\n    }; // get directly related to a target metadatas\n\n\n    var originalMetadatas = this.validationMetadatas.filter(function (metadata) {\n      if (metadata.target !== targetConstructor && metadata.target !== targetSchema) return false;\n      if (includeMetadataBecauseOfAlwaysOption(metadata)) return true;\n      if (excludeMetadataBecauseOfStrictGroupsOption(metadata)) return false;\n      if (groups && groups.length > 0) return metadata.groups && !!metadata.groups.find(function (group) {\n        return groups.indexOf(group) !== -1;\n      });\n      return true;\n    }); // get metadatas for inherited classes\n\n    var inheritedMetadatas = this.validationMetadatas.filter(function (metadata) {\n      // if target is a string it's means we validate against a schema, and there is no inheritance support for schemas\n      if (typeof metadata.target === 'string') return false;\n      if (metadata.target === targetConstructor) return false;\n      if (metadata.target instanceof Function && !(targetConstructor.prototype instanceof metadata.target)) return false;\n      if (includeMetadataBecauseOfAlwaysOption(metadata)) return true;\n      if (excludeMetadataBecauseOfStrictGroupsOption(metadata)) return false;\n      if (groups && groups.length > 0) return metadata.groups && !!metadata.groups.find(function (group) {\n        return groups.indexOf(group) !== -1;\n      });\n      return true;\n    }); // filter out duplicate metadatas, prefer original metadatas instead of inherited metadatas\n\n    var uniqueInheritedMetadatas = inheritedMetadatas.filter(function (inheritedMetadata) {\n      return !originalMetadatas.find(function (originalMetadata) {\n        return originalMetadata.propertyName === inheritedMetadata.propertyName && originalMetadata.type === inheritedMetadata.type;\n      });\n    });\n    return originalMetadatas.concat(uniqueInheritedMetadatas);\n  };\n  /**\n   * Gets all validator constraints for the given object.\n   */\n\n\n  MetadataStorage.prototype.getTargetValidatorConstraints = function (target) {\n    return this.constraintMetadatas.filter(function (metadata) {\n      return metadata.target === target;\n    });\n  };\n\n  return MetadataStorage;\n}();\n\nexport { MetadataStorage };\n/**\n * Gets metadata storage.\n * Metadata storage follows the best practices and stores metadata in a global variable.\n */\n\nexport function getMetadataStorage() {\n  var global = getGlobal();\n\n  if (!global.classValidatorMetadataStorage) {\n    global.classValidatorMetadataStorage = new MetadataStorage();\n  }\n\n  return global.classValidatorMetadataStorage;\n}","map":{"version":3,"mappings":"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","names":["ValidationSchemaToMetadataTransformer","getGlobal","Object","MetadataStorage","validationMetadatas","length","schema","transform","forEach","addValidationMetadata","validationMetadata","metadata","push","constraintMetadatas","grouped","propertyName","targetConstructor","targetSchema","always","strictGroups","groups","includeMetadataBecauseOfAlwaysOption","excludeMetadataBecauseOfStrictGroupsOption","originalMetadatas","filter","target","find","indexOf","group","inheritedMetadatas","Function","prototype","uniqueInheritedMetadatas","originalMetadata","inheritedMetadata","type","concat","getMetadataStorage","global","classValidatorMetadataStorage"],"sourceRoot":"","sources":["../../../src/metadata/MetadataStorage.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}