{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.allowTrust = allowTrust;\n\nvar _padEnd = require('lodash/padEnd');\n\nvar _padEnd2 = _interopRequireDefault(_padEnd);\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @deprecated since v5.0\n *\n * Returns an XDR AllowTrustOp. An \"allow trust\" operation authorizes another\n * account to hold your account's credit for a given asset.\n *\n * @function\n * @alias Operation.allowTrust\n *\n * @param {object} opts Options object\n * @param {string} opts.trustor - The trusting account (the one being authorized)\n * @param {string} opts.assetCode - The asset code being authorized.\n * @param {(0|1|2)} opts.authorize - `1` to authorize, `2` to authorize to maintain liabilities, and `0` to deauthorize.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.AllowTrustOp} Allow Trust operation\n */\n\n\nfunction allowTrust(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.trustor)) {\n    throw new Error('trustor is invalid');\n  }\n\n  var attributes = {};\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n\n  if (opts.assetCode.length <= 4) {\n    var code = (0, _padEnd2.default)(opts.assetCode, 4, '\\0');\n    attributes.asset = _stellarXdr_generated2.default.AssetCode.assetTypeCreditAlphanum4(code);\n  } else if (opts.assetCode.length <= 12) {\n    var _code = (0, _padEnd2.default)(opts.assetCode, 12, '\\0');\n\n    attributes.asset = _stellarXdr_generated2.default.AssetCode.assetTypeCreditAlphanum12(_code);\n  } else {\n    throw new Error('Asset code must be 12 characters at max.');\n  }\n\n  if (typeof opts.authorize === 'boolean') {\n    if (opts.authorize) {\n      attributes.authorize = _stellarXdr_generated2.default.TrustLineFlags.authorizedFlag().value;\n    } else {\n      attributes.authorize = 0;\n    }\n  } else {\n    attributes.authorize = opts.authorize;\n  }\n\n  var allowTrustOp = new _stellarXdr_generated2.default.AllowTrustOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.allowTrust(allowTrustOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","allowTrust","_padEnd","require","_padEnd2","_interopRequireDefault","_stellarXdr_generated","_stellarXdr_generated2","_keypair","_strkey","obj","__esModule","default","opts","StrKey","isValidEd25519PublicKey","trustor","Error","attributes","Keypair","fromPublicKey","xdrAccountId","assetCode","length","code","asset","AssetCode","assetTypeCreditAlphanum4","_code","assetTypeCreditAlphanum12","authorize","TrustLineFlags","authorizedFlag","allowTrustOp","AllowTrustOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operations/allow_trust.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.allowTrust = allowTrust;\n\nvar _padEnd = require('lodash/padEnd');\n\nvar _padEnd2 = _interopRequireDefault(_padEnd);\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @deprecated since v5.0\n *\n * Returns an XDR AllowTrustOp. An \"allow trust\" operation authorizes another\n * account to hold your account's credit for a given asset.\n *\n * @function\n * @alias Operation.allowTrust\n *\n * @param {object} opts Options object\n * @param {string} opts.trustor - The trusting account (the one being authorized)\n * @param {string} opts.assetCode - The asset code being authorized.\n * @param {(0|1|2)} opts.authorize - `1` to authorize, `2` to authorize to maintain liabilities, and `0` to deauthorize.\n * @param {string} [opts.source] - The source account (defaults to transaction source).\n *\n * @returns {xdr.AllowTrustOp} Allow Trust operation\n */\nfunction allowTrust(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.trustor)) {\n    throw new Error('trustor is invalid');\n  }\n  var attributes = {};\n  attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();\n  if (opts.assetCode.length <= 4) {\n    var code = (0, _padEnd2.default)(opts.assetCode, 4, '\\0');\n    attributes.asset = _stellarXdr_generated2.default.AssetCode.assetTypeCreditAlphanum4(code);\n  } else if (opts.assetCode.length <= 12) {\n    var _code = (0, _padEnd2.default)(opts.assetCode, 12, '\\0');\n    attributes.asset = _stellarXdr_generated2.default.AssetCode.assetTypeCreditAlphanum12(_code);\n  } else {\n    throw new Error('Asset code must be 12 characters at max.');\n  }\n\n  if (typeof opts.authorize === 'boolean') {\n    if (opts.authorize) {\n      attributes.authorize = _stellarXdr_generated2.default.TrustLineFlags.authorizedFlag().value;\n    } else {\n      attributes.authorize = 0;\n    }\n  } else {\n    attributes.authorize = opts.authorize;\n  }\n\n  var allowTrustOp = new _stellarXdr_generated2.default.AllowTrustOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.allowTrust(allowTrustOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}