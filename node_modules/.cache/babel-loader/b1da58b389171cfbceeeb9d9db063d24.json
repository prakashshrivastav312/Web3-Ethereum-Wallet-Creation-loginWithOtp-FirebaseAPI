{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bitswap/wantlist-for-peer')>}\n   */\n  async function wantlistForPeer(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // @ts-ignore - CID|string seems to confuse typedef\n    peerId = typeof peerId === 'string' ? peerId : new CID(peerId).toString();\n    const res = await (await api.post('bitswap/wantlist', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        peer: peerId\n      }),\n      headers: options.headers\n    })).json();\n    return (res.Keys || []).map(k => new CID(k['/']));\n  }\n\n  return wantlistForPeer;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","wantlistForPeer","peerId","options","toString","res","post","timeout","signal","searchParams","peer","headers","json","Keys","map","k"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/bitswap/wantlist-for-peer')>}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    // @ts-ignore - CID|string seems to confuse typedef\n    peerId = typeof peerId === 'string' ? peerId : new CID(peerId).toString()\n\n    const res = await (await api.post('bitswap/wantlist', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map(k => new CID(k['/']))\n  }\n  return wantlistForPeer\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,eAAf,CAAgCC,MAAhC,EAAsD;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACpD;IACAD,MAAM,GAAG,OAAOA,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,IAAIR,GAAJ,CAAQQ,MAAR,EAAgBE,QAAhB,EAA/C;IAEA,MAAMC,GAAG,GAAG,MAAM,CAAC,MAAML,GAAG,CAACM,IAAJ,CAAS,kBAAT,EAA6B;MACpDC,OAAO,EAAEJ,OAAO,CAACI,OADmC;MAEpDC,MAAM,EAAEL,OAAO,CAACK,MAFoC;MAGpDC,YAAY,EAAEZ,iBAAiB,CAAC,EAC9B,GAAGM,OAD2B;QAE9BO,IAAI,EAAER;MAFwB,CAAD,CAHqB;MAOpDS,OAAO,EAAER,OAAO,CAACQ;IAPmC,CAA7B,CAAP,EAQdC,IARc,EAAlB;IAUA,OAAO,CAACP,GAAG,CAACQ,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqBC,CAAC,IAAI,IAAIrB,GAAJ,CAAQqB,CAAC,CAAC,GAAD,CAAT,CAA1B,CAAP;EACD;;EACD,OAAOd,eAAP;AACD,CArByB,CAA1B"},"metadata":{},"sourceType":"script"}