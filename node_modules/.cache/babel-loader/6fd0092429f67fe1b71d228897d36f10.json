{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = __importStar(require(\"lodash\"));\n\nconst ripple_binary_codec_1 = __importDefault(require(\"ripple-binary-codec\"));\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst errors_1 = require(\"../common/errors\");\n\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\n\nconst common_1 = require(\"../common\");\n\nconst hashes_1 = require(\"../common/hashes\");\n\nfunction validateTransactionEquivalence(transactions) {\n  const exampleTransaction = JSON.stringify(Object.assign(Object.assign({}, transactions[0]), {\n    Signers: null\n  }));\n\n  if (transactions.slice(1).some(tx => JSON.stringify(Object.assign(Object.assign({}, tx), {\n    Signers: null\n  })) !== exampleTransaction)) {\n    throw new errors_1.ValidationError('txJSON is not the same for all signedTransactions');\n  }\n}\n\nfunction addressToBigNumber(address) {\n  const hex = Buffer.from(ripple_address_codec_1.decodeAccountID(address)).toString('hex');\n  return new bignumber_js_1.default(hex, 16);\n}\n\nfunction compareSigners(a, b) {\n  return addressToBigNumber(a.Signer.Account).comparedTo(addressToBigNumber(b.Signer.Account));\n}\n\nfunction getTransactionWithAllSigners(transactions) {\n  const sortedSigners = _.flatMap(transactions, tx => tx.Signers).filter(signer => signer).sort(compareSigners);\n\n  return Object.assign(Object.assign({}, transactions[0]), {\n    Signers: sortedSigners\n  });\n}\n\nfunction combine(signedTransactions) {\n  common_1.validate.combine({\n    signedTransactions\n  });\n  const transactions = signedTransactions.map(ripple_binary_codec_1.default.decode);\n  validateTransactionEquivalence(transactions);\n  const signedTransaction = ripple_binary_codec_1.default.encode(getTransactionWithAllSigners(transactions));\n  return {\n    signedTransaction: signedTransaction,\n    id: hashes_1.computeBinaryTransactionHash(signedTransaction)\n  };\n}\n\nexports.default = combine;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAMC,SAASA,8BAAT,CAAwCC,YAAxC,EAAuE;EACtE,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CAAcC,gCAAKJ,YAAY,CAAC,CAAD,CAAjB,GAAoB;IAAEK,OAAO,EAAE;EAAX,CAApB,CAAd,CAA3B;;EACA,IAAIL,YAAY,CAACM,KAAb,CAAmB,CAAnB,EAAsBC,IAAtB,CAA2BC,EAAE,IAAIN,IAAI,CAACC,SAAL,CAAcC,gCAAKI,EAAL,GAAO;IAAEH,OAAO,EAAE;EAAX,CAAP,CAAd,MAA2CJ,kBAA5E,CAAJ,EAAqG;IACnG,MAAM,IAAIQ,wBAAJ,CAAoB,mDAApB,CAAN;EACD;AACF;;AAED,SAASC,kBAAT,CAA4BC,OAA5B,EAAmC;EACjC,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYC,uCAAgBJ,OAAhB,CAAZ,EAAsCK,QAAtC,CAA+C,KAA/C,CAAZ;EACA,OAAO,IAAIC,sBAAJ,CAAcL,GAAd,EAAmB,EAAnB,CAAP;AACD;;AAQD,SAASM,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA4B;EAC1B,OAAOV,kBAAkB,CAACS,CAAC,CAACE,MAAF,CAASC,OAAV,CAAlB,CAAqCC,UAArC,CACLb,kBAAkB,CAACU,CAAC,CAACC,MAAF,CAASC,OAAV,CADb,CAAP;AAGD;;AAED,SAASE,4BAAT,CAAsCxB,YAAtC,EAAqE;EAEnE,MAAMyB,aAAa,GAAGC,CAAC,CAACC,OAAF,CAAU3B,YAAV,EAAwBQ,EAAE,IAAIA,EAAE,CAACH,OAAjC,EACnBuB,MADmB,CACZC,MAAM,IAAIA,MADE,EAEnBC,IAFmB,CAEdZ,cAFc,CAAtB;;EAIA,uCAAWlB,YAAY,CAAC,CAAD,CAAvB,GAA0B;IAAEK,OAAO,EAAEoB;EAAX,CAA1B;AACD;;AASD,SAASM,OAAT,CAAiBC,kBAAjB,EAAkD;EAChDC,kBAASF,OAAT,CAAiB;IAACC;EAAD,CAAjB;EAEA,MAAMhC,YAAY,GAAiBgC,kBAAkB,CAACE,GAAnB,CAAuBC,8BAAOC,MAA9B,CAAnC;EACArC,8BAA8B,CAACC,YAAD,CAA9B;EAEA,MAAMqC,iBAAiB,GAAGF,8BAAOG,MAAP,CAAcd,4BAA4B,CAACxB,YAAD,CAA1C,CAA1B;EACA,OAAO;IACLqC,iBAAiB,EAAEA,iBADd;IAELE,EAAE,EAAEC,sCAA6BH,iBAA7B;EAFC,CAAP;AAID;;AAEDI,kBAAeV,OAAf","names":["validateTransactionEquivalence","transactions","exampleTransaction","JSON","stringify","Object","Signers","slice","some","tx","errors_1","addressToBigNumber","address","hex","Buffer","from","ripple_address_codec_1","toString","bignumber_js_1","compareSigners","a","b","Signer","Account","comparedTo","getTransactionWithAllSigners","sortedSigners","_","flatMap","filter","signer","sort","combine","signedTransactions","common_1","map","ripple_binary_codec_1","decode","signedTransaction","encode","id","hashes_1","exports"],"sourceRoot":"","sources":["../../../src/transaction/combine.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}