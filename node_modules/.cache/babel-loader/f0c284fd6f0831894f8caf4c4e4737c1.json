{"ast":null,"code":"// <scriptSig> {serialized scriptPubKey script}\nvar bscript = require('../../script');\n\nvar types = require('../../types');\n\nvar typeforce = require('typeforce');\n\nvar p2ms = require('../multisig/');\n\nvar p2pk = require('../pubkey/');\n\nvar p2pkh = require('../pubkeyhash/');\n\nfunction check(chunks, allowIncomplete) {\n  typeforce(types.Array, chunks);\n  if (chunks.length < 1) return false;\n  var witnessScript = chunks[chunks.length - 1];\n  if (!Buffer.isBuffer(witnessScript)) return false;\n  var witnessScriptChunks = bscript.decompile(witnessScript); // is witnessScript a valid script?\n\n  if (witnessScriptChunks.length === 0) return false;\n  var witnessRawScriptSig = bscript.compile(chunks.slice(0, -1)); // match types\n\n  if (p2pkh.input.check(witnessRawScriptSig) && p2pkh.output.check(witnessScriptChunks)) return true;\n  if (p2ms.input.check(witnessRawScriptSig, allowIncomplete) && p2ms.output.check(witnessScriptChunks)) return true;\n  if (p2pk.input.check(witnessRawScriptSig) && p2pk.output.check(witnessScriptChunks)) return true;\n  return false;\n}\n\ncheck.toJSON = function () {\n  return 'witnessScriptHash input';\n};\n\nfunction encodeStack(witnessData, witnessScript) {\n  typeforce({\n    witnessData: [types.Buffer],\n    witnessScript: types.Buffer\n  }, {\n    witnessData: witnessData,\n    witnessScript: witnessScript\n  });\n  return [].concat(witnessData, witnessScript);\n}\n\nfunction decodeStack(stack) {\n  typeforce(typeforce.Array, stack);\n  typeforce(check, stack);\n  return {\n    witnessData: stack.slice(0, -1),\n    witnessScript: stack[stack.length - 1]\n  };\n}\n\nmodule.exports = {\n  check: check,\n  decodeStack: decodeStack,\n  encodeStack: encodeStack\n};","map":{"version":3,"names":["bscript","require","types","typeforce","p2ms","p2pk","p2pkh","check","chunks","allowIncomplete","Array","length","witnessScript","Buffer","isBuffer","witnessScriptChunks","decompile","witnessRawScriptSig","compile","slice","input","output","toJSON","encodeStack","witnessData","concat","decodeStack","stack","module","exports"],"sources":["C:/Users/acer/node_modules/@tatumio/bitcoincashjs2-lib/src/templates/witnessscripthash/input.js"],"sourcesContent":["// <scriptSig> {serialized scriptPubKey script}\n\nvar bscript = require('../../script')\nvar types = require('../../types')\nvar typeforce = require('typeforce')\n\nvar p2ms = require('../multisig/')\nvar p2pk = require('../pubkey/')\nvar p2pkh = require('../pubkeyhash/')\n\nfunction check (chunks, allowIncomplete) {\n  typeforce(types.Array, chunks)\n  if (chunks.length < 1) return false\n\n  var witnessScript = chunks[chunks.length - 1]\n  if (!Buffer.isBuffer(witnessScript)) return false\n\n  var witnessScriptChunks = bscript.decompile(witnessScript)\n\n  // is witnessScript a valid script?\n  if (witnessScriptChunks.length === 0) return false\n\n  var witnessRawScriptSig = bscript.compile(chunks.slice(0, -1))\n\n  // match types\n  if (p2pkh.input.check(witnessRawScriptSig) &&\n    p2pkh.output.check(witnessScriptChunks)) return true\n\n  if (p2ms.input.check(witnessRawScriptSig, allowIncomplete) &&\n    p2ms.output.check(witnessScriptChunks)) return true\n\n  if (p2pk.input.check(witnessRawScriptSig) &&\n    p2pk.output.check(witnessScriptChunks)) return true\n\n  return false\n}\ncheck.toJSON = function () { return 'witnessScriptHash input' }\n\nfunction encodeStack (witnessData, witnessScript) {\n  typeforce({\n    witnessData: [types.Buffer],\n    witnessScript: types.Buffer\n  }, {\n    witnessData: witnessData,\n    witnessScript: witnessScript\n  })\n\n  return [].concat(witnessData, witnessScript)\n}\n\nfunction decodeStack (stack) {\n  typeforce(typeforce.Array, stack)\n  typeforce(check, stack)\n  return {\n    witnessData: stack.slice(0, -1),\n    witnessScript: stack[stack.length - 1]\n  }\n}\n\nmodule.exports = {\n  check: check,\n  decodeStack: decodeStack,\n  encodeStack: encodeStack\n}\n"],"mappings":"AAAA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAAnB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIG,IAAI,GAAGH,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,gBAAD,CAAnB;;AAEA,SAASM,KAAT,CAAgBC,MAAhB,EAAwBC,eAAxB,EAAyC;EACvCN,SAAS,CAACD,KAAK,CAACQ,KAAP,EAAcF,MAAd,CAAT;EACA,IAAIA,MAAM,CAACG,MAAP,GAAgB,CAApB,EAAuB,OAAO,KAAP;EAEvB,IAAIC,aAAa,GAAGJ,MAAM,CAACA,MAAM,CAACG,MAAP,GAAgB,CAAjB,CAA1B;EACA,IAAI,CAACE,MAAM,CAACC,QAAP,CAAgBF,aAAhB,CAAL,EAAqC,OAAO,KAAP;EAErC,IAAIG,mBAAmB,GAAGf,OAAO,CAACgB,SAAR,CAAkBJ,aAAlB,CAA1B,CAPuC,CASvC;;EACA,IAAIG,mBAAmB,CAACJ,MAApB,KAA+B,CAAnC,EAAsC,OAAO,KAAP;EAEtC,IAAIM,mBAAmB,GAAGjB,OAAO,CAACkB,OAAR,CAAgBV,MAAM,CAACW,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAhB,CAA1B,CAZuC,CAcvC;;EACA,IAAIb,KAAK,CAACc,KAAN,CAAYb,KAAZ,CAAkBU,mBAAlB,KACFX,KAAK,CAACe,MAAN,CAAad,KAAb,CAAmBQ,mBAAnB,CADF,EAC2C,OAAO,IAAP;EAE3C,IAAIX,IAAI,CAACgB,KAAL,CAAWb,KAAX,CAAiBU,mBAAjB,EAAsCR,eAAtC,KACFL,IAAI,CAACiB,MAAL,CAAYd,KAAZ,CAAkBQ,mBAAlB,CADF,EAC0C,OAAO,IAAP;EAE1C,IAAIV,IAAI,CAACe,KAAL,CAAWb,KAAX,CAAiBU,mBAAjB,KACFZ,IAAI,CAACgB,MAAL,CAAYd,KAAZ,CAAkBQ,mBAAlB,CADF,EAC0C,OAAO,IAAP;EAE1C,OAAO,KAAP;AACD;;AACDR,KAAK,CAACe,MAAN,GAAe,YAAY;EAAE,OAAO,yBAAP;AAAkC,CAA/D;;AAEA,SAASC,WAAT,CAAsBC,WAAtB,EAAmCZ,aAAnC,EAAkD;EAChDT,SAAS,CAAC;IACRqB,WAAW,EAAE,CAACtB,KAAK,CAACW,MAAP,CADL;IAERD,aAAa,EAAEV,KAAK,CAACW;EAFb,CAAD,EAGN;IACDW,WAAW,EAAEA,WADZ;IAEDZ,aAAa,EAAEA;EAFd,CAHM,CAAT;EAQA,OAAO,GAAGa,MAAH,CAAUD,WAAV,EAAuBZ,aAAvB,CAAP;AACD;;AAED,SAASc,WAAT,CAAsBC,KAAtB,EAA6B;EAC3BxB,SAAS,CAACA,SAAS,CAACO,KAAX,EAAkBiB,KAAlB,CAAT;EACAxB,SAAS,CAACI,KAAD,EAAQoB,KAAR,CAAT;EACA,OAAO;IACLH,WAAW,EAAEG,KAAK,CAACR,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CADR;IAELP,aAAa,EAAEe,KAAK,CAACA,KAAK,CAAChB,MAAN,GAAe,CAAhB;EAFf,CAAP;AAID;;AAEDiB,MAAM,CAACC,OAAP,GAAiB;EACftB,KAAK,EAAEA,KADQ;EAEfmB,WAAW,EAAEA,WAFE;EAGfH,WAAW,EAAEA;AAHE,CAAjB"},"metadata":{},"sourceType":"script"}