{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar index_1 = __importDefault(require(\"./index\"));\n\nvar hdkey_1 = require(\"ethereum-cryptography/hdkey\");\n\nvar EthereumHDKey =\n/** @class */\nfunction () {\n  function EthereumHDKey(_hdkey) {\n    this._hdkey = _hdkey;\n  }\n  /**\n   * Creates an instance based on a seed.\n   *\n   * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\n   * create one from a BIP39 mnemonic.\n   */\n\n\n  EthereumHDKey.fromMasterSeed = function (seedBuffer) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\n  };\n  /**\n   * Create an instance based on a BIP32 extended private or public key.\n   */\n\n\n  EthereumHDKey.fromExtendedKey = function (base58Key) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\n  };\n  /**\n   * Returns a BIP32 extended private key (xprv)\n   */\n\n\n  EthereumHDKey.prototype.privateExtendedKey = function () {\n    if (!this._hdkey.privateExtendedKey) {\n      throw new Error('This is a public key only wallet');\n    }\n\n    return this._hdkey.privateExtendedKey;\n  };\n  /**\n   * Return a BIP32 extended public key (xpub)\n   */\n\n\n  EthereumHDKey.prototype.publicExtendedKey = function () {\n    return this._hdkey.publicExtendedKey;\n  };\n  /**\n   * Derives a node based on a path (e.g. m/44'/0'/0/1)\n   */\n\n\n  EthereumHDKey.prototype.derivePath = function (path) {\n    return new EthereumHDKey(this._hdkey.derive(path));\n  };\n  /**\n   * Derive a node based on a child index\n   */\n\n\n  EthereumHDKey.prototype.deriveChild = function (index) {\n    return new EthereumHDKey(this._hdkey.deriveChild(index));\n  };\n  /**\n   * Return a `Wallet` instance as seen above\n   */\n\n\n  EthereumHDKey.prototype.getWallet = function () {\n    if (this._hdkey._privateKey) {\n      return index_1.default.fromPrivateKey(this._hdkey._privateKey);\n    }\n\n    return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\n  };\n\n  return EthereumHDKey;\n}();\n\nexports.default = EthereumHDKey;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AAEA;;AAEA;AAAA;AAAA;EAkBE,uBAA6BA,MAA7B,EAAyC;IAAZ;EAAgB;EAjB7C;;;;;;;;EAMcC,+BAAd,UAA6BC,UAA7B,EAA+C;IAC7C,OAAO,IAAID,aAAJ,CAAkBE,cAAMC,cAAN,CAAqBF,UAArB,CAAlB,CAAP;EACD,CAFa;EAId;;;;;EAGcD,gCAAd,UAA8BI,SAA9B,EAA+C;IAC7C,OAAO,IAAIJ,aAAJ,CAAkBE,cAAMG,eAAN,CAAsBD,SAAtB,CAAlB,CAAP;EACD,CAFa;EAMd;;;;;EAGOJ,6CAAP;IACE,IAAI,CAAC,KAAKD,MAAL,CAAYO,kBAAjB,EAAqC;MACnC,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;IACD;;IACD,OAAO,KAAKR,MAAL,CAAYO,kBAAnB;EACD,CALM;EAOP;;;;;EAGON,4CAAP;IACE,OAAO,KAAKD,MAAL,CAAYS,iBAAnB;EACD,CAFM;EAIP;;;;;EAGOR,qCAAP,UAAkBS,IAAlB,EAA8B;IAC5B,OAAO,IAAIT,aAAJ,CAAkB,KAAKD,MAAL,CAAYW,MAAZ,CAAmBD,IAAnB,CAAlB,CAAP;EACD,CAFM;EAIP;;;;;EAGOT,sCAAP,UAAmBW,KAAnB,EAAgC;IAC9B,OAAO,IAAIX,aAAJ,CAAkB,KAAKD,MAAL,CAAYa,WAAZ,CAAwBD,KAAxB,CAAlB,CAAP;EACD,CAFM;EAIP;;;;;EAGOX,oCAAP;IACE,IAAI,KAAKD,MAAL,CAAYc,WAAhB,EAA6B;MAC3B,OAAOC,gBAAOC,cAAP,CAAsB,KAAKhB,MAAL,CAAYc,WAAlC,CAAP;IACD;;IACD,OAAOC,gBAAOE,aAAP,CAAqB,KAAKjB,MAAL,CAAYkB,UAAjC,EAA6C,IAA7C,CAAP;EACD,CALM;;EAMT;AAAC,CA5DD","names":["_hdkey","EthereumHDKey","seedBuffer","hdkey_1","fromMasterSeed","base58Key","fromExtendedKey","privateExtendedKey","Error","publicExtendedKey","path","derive","index","deriveChild","_privateKey","index_1","fromPrivateKey","fromPublicKey","_publicKey"],"sourceRoot":"","sources":["../src/hdkey.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}