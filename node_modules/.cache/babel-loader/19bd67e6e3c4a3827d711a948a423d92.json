{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignableMessage = exports.MESSAGE_PREFIX = void 0;\n\nconst signature_1 = require(\"./signature\");\n\nconst address_1 = require(\"./address\");\n\nconst createKeccakHash = require(\"keccak\");\n\nexports.MESSAGE_PREFIX = \"\\x17Elrond Signed Message:\\n\";\n\nclass SignableMessage {\n  constructor(init) {\n    this.message = Buffer.from([]);\n    this.signature = new signature_1.Signature();\n    this.version = 1;\n    this.signer = \"ErdJS\";\n    this.address = new address_1.Address();\n    Object.assign(this, init);\n  }\n\n  serializeForSigning() {\n    const messageSize = Buffer.from(this.message.length.toString());\n    const signableMessage = Buffer.concat([messageSize, this.message]);\n    let bytesToHash = Buffer.concat([Buffer.from(exports.MESSAGE_PREFIX), signableMessage]);\n    return createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n  }\n\n  serializeForSigningRaw() {\n    return Buffer.concat([this.getMessageSize(), this.message]);\n  }\n\n  getSignature() {\n    return this.signature;\n  }\n\n  applySignature(signature) {\n    this.signature = signature;\n  }\n\n  getMessageSize() {\n    const messageSize = Buffer.alloc(4);\n    messageSize.writeUInt32BE(this.message.length, 0);\n    return messageSize;\n  }\n\n  toJSON() {\n    return {\n      address: this.address.bech32(),\n      message: \"0x\" + this.message.toString('hex'),\n      signature: \"0x\" + this.signature.hex(),\n      version: this.version,\n      signer: this.signer\n    };\n  }\n\n}\n\nexports.SignableMessage = SignableMessage;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,QAAD,CAAhC;;AAEaC,yBAAiB,8BAAjB;;AAEb,MAAaC,eAAb,CAA4B;EA0B1BC,YAAmBC,IAAnB,EAAkD;IAChD,KAAKC,OAAL,GAAeC,MAAM,CAACC,IAAP,CAAY,EAAZ,CAAf;IACA,KAAKC,SAAL,GAAiB,IAAIC,qBAAJ,EAAjB;IACA,KAAKC,OAAL,GAAe,CAAf;IACA,KAAKC,MAAL,GAAc,OAAd;IACA,KAAKC,OAAL,GAAe,IAAIC,iBAAJ,EAAf;IAEAC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBX,IAApB;EACD;;EAEDY,mBAAmB;IACjB,MAAMC,WAAW,GAAGX,MAAM,CAACC,IAAP,CAAY,KAAKF,OAAL,CAAaa,MAAb,CAAoBC,QAApB,EAAZ,CAApB;IACA,MAAMC,eAAe,GAAGd,MAAM,CAACe,MAAP,CAAc,CAACJ,WAAD,EAAc,KAAKZ,OAAnB,CAAd,CAAxB;IACA,IAAIiB,WAAW,GAAGhB,MAAM,CAACe,MAAP,CAAc,CAACf,MAAM,CAACC,IAAP,CAAYN,sBAAZ,CAAD,EAA8BmB,eAA9B,CAAd,CAAlB;IAEA,OAAOrB,gBAAgB,CAAC,WAAD,CAAhB,CAA8BwB,MAA9B,CAAqCD,WAArC,EAAkDE,MAAlD,EAAP;EACD;;EAEDC,sBAAsB;IACpB,OAAOnB,MAAM,CAACe,MAAP,CAAc,CAAC,KAAKK,cAAL,EAAD,EAAwB,KAAKrB,OAA7B,CAAd,CAAP;EACD;;EAEDsB,YAAY;IACV,OAAO,KAAKnB,SAAZ;EACD;;EAEDoB,cAAc,CAACpB,SAAD,EAAqB;IACjC,KAAKA,SAAL,GAAiBA,SAAjB;EACD;;EAEDkB,cAAc;IACZ,MAAMT,WAAW,GAAGX,MAAM,CAACuB,KAAP,CAAa,CAAb,CAApB;IACAZ,WAAW,CAACa,aAAZ,CAA0B,KAAKzB,OAAL,CAAaa,MAAvC,EAA+C,CAA/C;IAEA,OAAOD,WAAP;EACD;;EAEDc,MAAM;IACJ,OAAO;MACLnB,OAAO,EAAE,KAAKA,OAAL,CAAaoB,MAAb,EADJ;MAEL3B,OAAO,EAAE,OAAO,KAAKA,OAAL,CAAac,QAAb,CAAsB,KAAtB,CAFX;MAGLX,SAAS,EAAE,OAAO,KAAKA,SAAL,CAAeyB,GAAf,EAHb;MAILvB,OAAO,EAAE,KAAKA,OAJT;MAKLC,MAAM,EAAE,KAAKA;IALR,CAAP;EAOD;;AAvEyB;;AAA5BV","names":["createKeccakHash","require","exports","SignableMessage","constructor","init","message","Buffer","from","signature","signature_1","version","signer","address","address_1","Object","assign","serializeForSigning","messageSize","length","toString","signableMessage","concat","bytesToHash","update","digest","serializeForSigningRaw","getMessageSize","getSignature","applySignature","alloc","writeUInt32BE","toJSON","bech32","hex"],"sourceRoot":"","sources":["../src/signableMessage.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}