{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractFeeDelegatedWithRatioTransaction = require('../abstractFeeDelegatedWithRatioTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  isNot\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoringWithRatio)) throw new Error(`Cannot decode to FeeDelegatedChainDataAnchoringWithRatio. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoringWithRatio}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, from, input, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from,\n    input,\n    feeRatio: utils.trimLeadingZero(feeRatio),\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated chain data anchoring with ratio transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedchaindataanchoringwithratio|FeeDelegatedChainDataAnchoringWithRatio} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractFeeDelegatedWithRatioTransaction\n */\n\n\nclass FeeDelegatedChainDataAnchoringWithRatio extends AbstractFeeDelegatedWithRatioTransaction {\n  /**\n   * Creates a fee delegated chain data anchoring with ratio transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoringWithRatio transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `feeRatio`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {FeeDelegatedChainDataAnchoringWithRatio}\n   */\n  static create(createTxObj, klaytnCall) {\n    return new FeeDelegatedChainDataAnchoringWithRatio(createTxObj, klaytnCall);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a FeeDelegatedChainDataAnchoringWithRatio transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded fee delegated chain data anchoring with ratio transaction.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {FeeDelegatedChainDataAnchoringWithRatio}\n   */\n\n\n  static decode(rlpEncoded, klaytnCall) {\n    return new FeeDelegatedChainDataAnchoringWithRatio(_decode(rlpEncoded), klaytnCall);\n  }\n  /**\n   * Creates a fee delegated chain data anchoring with ratio transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoringWithRatio transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `feeRatio`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   */\n\n\n  constructor(createTxObj, klaytnCall) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio, createTxObj, klaytnCall);\n    if (createTxObj.input && createTxObj.data) throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`);\n    this.input = createTxObj.input || createTxObj.data;\n    if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get gasPrice() {\n    return this._gasPrice;\n  }\n\n  set gasPrice(g) {\n    this._gasPrice = utils.numberToHex(g);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`);\n    this._input = utils.addHexPrefix(input);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   *\n   * @example\n   * const result = tx.getRLPEncoding()\n   *\n   * @return {string} An RLP-encoded transaction string.\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoringWithRatio + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input, Bytes.fromNat(this.feeRatio), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * This method has to be overrided in classes which extends AbstractTransaction.\n   * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n   *\n   * @example\n   * const result = tx.getCommonRLPEncodingForSignature()\n   *\n   * @return {string} An RLP-encoded transaction string without signature.\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoringWithRatio, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input, Bytes.fromNat(this.feeRatio)]);\n  }\n  /**\n   * Fills in the optional variables in transaction.\n   *\n   * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n   * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n   *\n   * @example\n   * await tx.fillTransaction()\n   */\n\n\n  async fillTransaction() {\n    const [chainId, gasPrice, nonce] = await Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce]);\n    this.chainId = chainId;\n    this.gasPrice = gasPrice;\n    this.nonce = nonce;\n  }\n  /**\n   * Checks that member variables that can be defined by the user are defined.\n   * If there is an undefined variable, an error occurs.\n   *\n   * @ignore\n   */\n\n\n  validateOptionalValues() {\n    super.validateOptionalValues();\n    if (this.gasPrice === undefined) throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`);\n  }\n\n}\n\nmodule.exports = FeeDelegatedChainDataAnchoringWithRatio;","map":{"version":3,"names":["_","require","RLP","Bytes","AbstractFeeDelegatedWithRatioTransaction","TX_TYPE_STRING","TX_TYPE_TAG","isNot","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedChainDataAnchoringWithRatio","Error","typeDettached","slice","nonce","gasPrice","gas","from","input","feeRatio","signatures","feePayer","feePayerSignatures","decode","trimLeadingZero","FeeDelegatedChainDataAnchoringWithRatio","create","createTxObj","klaytnCall","constructor","isString","data","undefined","_gasPrice","g","numberToHex","_input","isHex","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","getCommonRLPEncodingForSignature","fillTransaction","chainId","Promise","all","getChainId","getGasPrice","getNonce","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoringWithRatio.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractFeeDelegatedWithRatioTransaction = require('../abstractFeeDelegatedWithRatioTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG, isNot } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoringWithRatio))\n        throw new Error(\n            `Cannot decode to FeeDelegatedChainDataAnchoringWithRatio. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoringWithRatio}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, input, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        input,\n        feeRatio: utils.trimLeadingZero(feeRatio),\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated chain data anchoring with ratio transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedchaindataanchoringwithratio|FeeDelegatedChainDataAnchoringWithRatio} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractFeeDelegatedWithRatioTransaction\n */\nclass FeeDelegatedChainDataAnchoringWithRatio extends AbstractFeeDelegatedWithRatioTransaction {\n    /**\n     * Creates a fee delegated chain data anchoring with ratio transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoringWithRatio transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `feeRatio`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {FeeDelegatedChainDataAnchoringWithRatio}\n     */\n    static create(createTxObj, klaytnCall) {\n        return new FeeDelegatedChainDataAnchoringWithRatio(createTxObj, klaytnCall)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedChainDataAnchoringWithRatio transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated chain data anchoring with ratio transaction.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {FeeDelegatedChainDataAnchoringWithRatio}\n     */\n    static decode(rlpEncoded, klaytnCall) {\n        return new FeeDelegatedChainDataAnchoringWithRatio(_decode(rlpEncoded), klaytnCall)\n    }\n\n    /**\n     * Creates a fee delegated chain data anchoring with ratio transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoringWithRatio transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `feeRatio`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     */\n    constructor(createTxObj, klaytnCall) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio, createTxObj, klaytnCall)\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n\n        this.input = createTxObj.input || createTxObj.data\n        if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice\n    }\n\n    /**\n     * @type {string}\n     */\n    get gasPrice() {\n        return this._gasPrice\n    }\n\n    set gasPrice(g) {\n        this._gasPrice = utils.numberToHex(g)\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.addHexPrefix(input)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     *\n     * @example\n     * const result = tx.getRLPEncoding()\n     *\n     * @return {string} An RLP-encoded transaction string.\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoringWithRatio +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                this.input,\n                Bytes.fromNat(this.feeRatio),\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * This method has to be overrided in classes which extends AbstractTransaction.\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n     *\n     * @example\n     * const result = tx.getCommonRLPEncodingForSignature()\n     *\n     * @return {string} An RLP-encoded transaction string without signature.\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoringWithRatio,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n            this.input,\n            Bytes.fromNat(this.feeRatio),\n        ])\n    }\n\n    /**\n     * Fills in the optional variables in transaction.\n     *\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n     *\n     * @example\n     * await tx.fillTransaction()\n     */\n    async fillTransaction() {\n        const [chainId, gasPrice, nonce] = await Promise.all([\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\n            isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice,\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\n        ])\n\n        this.chainId = chainId\n        this.gasPrice = gasPrice\n        this.nonce = nonce\n    }\n\n    /**\n     * Checks that member variables that can be defined by the user are defined.\n     * If there is an undefined variable, an error occurs.\n     *\n     * @ignore\n     */\n    validateOptionalValues() {\n        super.validateOptionalValues()\n        if (this.gasPrice === undefined)\n            throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`)\n    }\n}\n\nmodule.exports = FeeDelegatedChainDataAnchoringWithRatio\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}