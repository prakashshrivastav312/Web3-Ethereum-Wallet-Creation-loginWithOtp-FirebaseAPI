{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProxyProvider = void 0;\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst transaction_1 = require(\"./transaction\");\n\nconst networkConfig_1 = require(\"./networkConfig\");\n\nconst errors = __importStar(require(\"./errors\"));\n\nconst account_1 = require(\"./account\");\n\nconst queryResponse_1 = require(\"./smartcontracts/queryResponse\");\n\nconst logger_1 = require(\"./logger\");\n\nconst networkStatus_1 = require(\"./networkStatus\");\n\nconst transactionOnNetwork_1 = require(\"./transactionOnNetwork\");\n\nconst JSONbig = require(\"json-bigint\");\n/**\n * This will be deprecated once all the endpoints move to ApiProvider\n */\n\n\nclass ProxyProvider {\n  /**\n   * Creates a new ProxyProvider.\n   * @param url the URL of the Elrond Proxy\n   * @param config axios request config options\n   */\n  constructor(url, config) {\n    this.url = url;\n    this.config = Object.assign({}, config, {\n      timeout: 1000,\n      // See: https://github.com/axios/axios/issues/983 regarding transformResponse\n      transformResponse: [function (data) {\n        return JSONbig.parse(data);\n      }]\n    });\n  }\n  /**\n   * Fetches the state of an {@link Account}.\n   */\n\n\n  getAccount(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(`address/${address.bech32()}`, response => account_1.AccountOnNetwork.fromHttpResponse(response.account));\n    });\n  }\n\n  getAddressEsdtList(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(`address/${address.bech32()}/esdt`, response => response.esdts);\n    });\n  }\n\n  getAddressEsdt(address, tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(`address/${address.bech32()}/esdt/${tokenIdentifier}`, response => response.tokenData);\n    });\n  }\n\n  getAddressNft(address, tokenIdentifier, nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(`address/${address.bech32()}/nft/${tokenIdentifier}/nonce/${nonce}`, response => response.tokenData);\n    });\n  }\n  /**\n   * Queries a Smart Contract - runs a pure function defined by the contract and returns its results.\n   */\n\n\n  queryContract(query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let data = query.toHttpRequest();\n        return this.doPostGeneric(\"vm-values/query\", data, response => queryResponse_1.QueryResponse.fromHttpResponse(response.data || response.vmOutput));\n      } catch (err) {\n        throw errors.ErrContractQuery.increaseSpecificity(err);\n      }\n    });\n  }\n  /**\n   * Broadcasts an already-signed {@link Transaction}.\n   */\n\n\n  sendTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doPostGeneric(\"transaction/send\", tx.toSendable(), response => new transaction_1.TransactionHash(response.txHash));\n    });\n  }\n  /**\n   * Simulates the processing of an already-signed {@link Transaction}.\n   */\n\n\n  simulateTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doPostGeneric(\"transaction/simulate\", tx.toSendable(), response => response);\n    });\n  }\n  /**\n   * Fetches the state of a {@link Transaction}.\n   */\n\n\n  getTransaction(txHash, hintSender, withResults) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = this.buildUrlWithQueryParameters(`transaction/${txHash.toString()}`, {\n        withSender: hintSender ? hintSender.bech32() : \"\",\n        withResults: withResults ? \"true\" : \"\"\n      });\n      return this.doGetGeneric(url, response => transactionOnNetwork_1.TransactionOnNetwork.fromHttpResponse(response.transaction));\n    });\n  }\n  /**\n   * Queries the status of a {@link Transaction}.\n   */\n\n\n  getTransactionStatus(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(`transaction/${txHash.toString()}/status`, response => new transaction_1.TransactionStatus(response.status));\n    });\n  }\n  /**\n   * Fetches the Network configuration.\n   */\n\n\n  getNetworkConfig() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(\"network/config\", response => networkConfig_1.NetworkConfig.fromHttpResponse(response.config));\n    });\n  }\n  /**\n   * Fetches the network status configuration.\n   */\n\n\n  getNetworkStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.doGetGeneric(\"network/status/4294967295\", response => networkStatus_1.NetworkStatus.fromHttpResponse(response.status));\n    });\n  }\n  /**\n   * Get method that receives the resource url and on callback the method used to map the response.\n   */\n\n\n  doGetGeneric(resourceUrl, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGet(resourceUrl);\n      return callback(response);\n    });\n  }\n  /**\n   * Post method that receives the resource url, the post payload and on callback the method used to map the response.\n   */\n\n\n  doPostGeneric(resourceUrl, payload, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPost(resourceUrl, payload);\n      return callback(response);\n    });\n  }\n\n  doGet(resourceUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let url = `${this.url}/${resourceUrl}`;\n        let response = yield axios_1.default.get(url, this.config);\n        let payload = response.data.data;\n        return payload;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  doPost(resourceUrl, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let url = `${this.url}/${resourceUrl}`;\n        let response = yield axios_1.default.post(url, payload, Object.assign(Object.assign({}, this.config), {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }));\n        let responsePayload = response.data.data;\n        return responsePayload;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  buildUrlWithQueryParameters(endpoint, params) {\n    let searchParams = new URLSearchParams();\n\n    for (let [key, value] of Object.entries(params)) {\n      if (value) {\n        searchParams.append(key, value);\n      }\n    }\n\n    return `${endpoint}?${searchParams.toString()}`;\n  }\n\n  handleApiError(error, resourceUrl) {\n    if (!error.response) {\n      logger_1.Logger.warn(error);\n      throw new errors.ErrApiProviderGet(resourceUrl, error.toString(), error);\n    }\n\n    let errorData = error.response.data;\n    let originalErrorMessage = errorData.error || errorData.message || JSON.stringify(errorData);\n    throw new errors.ErrApiProviderGet(resourceUrl, originalErrorMessage, error);\n  }\n\n}\n\nexports.ProxyProvider = ProxyProvider;","map":{"version":3,"mappings":"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","names":["JSONbig","require","ProxyProvider","constructor","url","config","Object","assign","timeout","transformResponse","data","parse","getAccount","address","doGetGeneric","bech32","response","account_1","fromHttpResponse","account","getAddressEsdtList","esdts","getAddressEsdt","tokenIdentifier","tokenData","getAddressNft","nonce","queryContract","query","toHttpRequest","doPostGeneric","queryResponse_1","vmOutput","err","errors","ErrContractQuery","increaseSpecificity","sendTransaction","tx","toSendable","transaction_1","txHash","simulateTransaction","getTransaction","hintSender","withResults","buildUrlWithQueryParameters","toString","withSender","transactionOnNetwork_1","transaction","getTransactionStatus","status","getNetworkConfig","networkConfig_1","getNetworkStatus","networkStatus_1","resourceUrl","callback","doGet","payload","doPost","axios_1","get","error","handleApiError","post","headers","responsePayload","endpoint","params","searchParams","URLSearchParams","key","value","entries","append","logger_1","warn","ErrApiProviderGet","errorData","originalErrorMessage","message","JSON","stringify","exports"],"sourceRoot":"","sources":["../src/proxyProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}