{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractTransaction = require('../abstractTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  isNot\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeCancel)) throw new Error(`Cannot decode to Cancel. The prefix must be ${TX_TYPE_TAG.TxTypeCancel}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, from, signatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from,\n    signatures\n  };\n}\n/**\n * Represents a cancel transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/basic#txtypecancel|Cancel} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractTransaction\n */\n\n\nclass Cancel extends AbstractTransaction {\n  /**\n   * Creates a cancel transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a Cancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {Cancel}\n   */\n  static create(createTxObj, klaytnCall) {\n    return new Cancel(createTxObj, klaytnCall);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a Cancel transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded cancel transaction.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {Cancel}\n   */\n\n\n  static decode(rlpEncoded, klaytnCall) {\n    return new Cancel(_decode(rlpEncoded), klaytnCall);\n  }\n  /**\n   * Creates a cancel transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a Cancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   */\n\n\n  constructor(createTxObj, klaytnCall) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeCancel, createTxObj, klaytnCall);\n    if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get gasPrice() {\n    return this._gasPrice;\n  }\n\n  set gasPrice(g) {\n    this._gasPrice = utils.numberToHex(g);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   *\n   * @example\n   * const result = tx.getRLPEncoding()\n   *\n   * @return {string} An RLP-encoded transaction string.\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeCancel + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), signatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * This method has to be overrided in classes which extends AbstractTransaction.\n   * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n   *\n   * @example\n   * const result = tx.getCommonRLPEncodingForSignature()\n   *\n   * @return {string} An RLP-encoded transaction string without signature.\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeCancel, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase()]);\n  }\n  /**\n   * Fills in the optional variables in transaction.\n   *\n   * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n   * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n   *\n   * @example\n   * await tx.fillTransaction()\n   */\n\n\n  async fillTransaction() {\n    const [chainId, gasPrice, nonce] = await Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce]);\n    this.chainId = chainId;\n    this.gasPrice = gasPrice;\n    this.nonce = nonce;\n  }\n  /**\n   * Checks that member variables that can be defined by the user are defined.\n   * If there is an undefined variable, an error occurs.\n   *\n   * @ignore\n   */\n\n\n  validateOptionalValues() {\n    super.validateOptionalValues();\n    if (this.gasPrice === undefined) throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`);\n  }\n\n}\n\nmodule.exports = Cancel;","map":{"version":3,"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","isNot","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeCancel","Error","typeDettached","slice","nonce","gasPrice","gas","from","signatures","decode","trimLeadingZero","Cancel","create","createTxObj","klaytnCall","constructor","isString","undefined","_gasPrice","g","numberToHex","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","getCommonRLPEncodingForSignature","fillTransaction","chainId","Promise","all","getChainId","getGasPrice","getNonce","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/cancel/cancel.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractTransaction = require('../abstractTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG, isNot } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeCancel))\n        throw new Error(`Cannot decode to Cancel. The prefix must be ${TX_TYPE_TAG.TxTypeCancel}: ${rlpEncoded}`)\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, signatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        signatures,\n    }\n}\n\n/**\n * Represents a cancel transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/basic#txtypecancel|Cancel} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractTransaction\n */\nclass Cancel extends AbstractTransaction {\n    /**\n     * Creates a cancel transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a Cancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {Cancel}\n     */\n    static create(createTxObj, klaytnCall) {\n        return new Cancel(createTxObj, klaytnCall)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a Cancel transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded cancel transaction.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {Cancel}\n     */\n    static decode(rlpEncoded, klaytnCall) {\n        return new Cancel(_decode(rlpEncoded), klaytnCall)\n    }\n\n    /**\n     * Creates a cancel transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a Cancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     */\n    constructor(createTxObj, klaytnCall) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeCancel, createTxObj, klaytnCall)\n        if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice\n    }\n\n    /**\n     * @type {string}\n     */\n    get gasPrice() {\n        return this._gasPrice\n    }\n\n    set gasPrice(g) {\n        this._gasPrice = utils.numberToHex(g)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     *\n     * @example\n     * const result = tx.getRLPEncoding()\n     *\n     * @return {string} An RLP-encoded transaction string.\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeCancel +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                signatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * This method has to be overrided in classes which extends AbstractTransaction.\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n     *\n     * @example\n     * const result = tx.getCommonRLPEncodingForSignature()\n     *\n     * @return {string} An RLP-encoded transaction string without signature.\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeCancel,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n        ])\n    }\n\n    /**\n     * Fills in the optional variables in transaction.\n     *\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n     *\n     * @example\n     * await tx.fillTransaction()\n     */\n    async fillTransaction() {\n        const [chainId, gasPrice, nonce] = await Promise.all([\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\n            isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice,\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\n        ])\n\n        this.chainId = chainId\n        this.gasPrice = gasPrice\n        this.nonce = nonce\n    }\n\n    /**\n     * Checks that member variables that can be defined by the user are defined.\n     * If there is an undefined variable, an error occurs.\n     *\n     * @ignore\n     */\n    validateOptionalValues() {\n        super.validateOptionalValues()\n        if (this.gasPrice === undefined)\n            throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`)\n    }\n}\n\nmodule.exports = Cancel\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}