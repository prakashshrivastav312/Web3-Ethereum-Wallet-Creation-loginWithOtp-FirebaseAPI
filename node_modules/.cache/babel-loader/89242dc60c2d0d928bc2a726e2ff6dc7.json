{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nexport var IS_NUMBER = 'isNumber';\n/**\n * Checks if a given value is a number.\n */\n\nexport function isNumber(value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof value !== 'number') {\n    return false;\n  }\n\n  if (value === Infinity || value === -Infinity) {\n    return options.allowInfinity;\n  }\n\n  if (Number.isNaN(value)) {\n    return options.allowNaN;\n  }\n\n  if (options.maxDecimalPlaces !== undefined) {\n    var decimalPlaces = 0;\n\n    if (value % 1 !== 0) {\n      decimalPlaces = value.toString().split('.')[1].length;\n    }\n\n    if (decimalPlaces > options.maxDecimalPlaces) {\n      return false;\n    }\n  }\n\n  return Number.isFinite(value);\n}\n/**\n * Checks if a value is a number.\n */\n\nexport function IsNumber(options, validationOptions) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return ValidateBy({\n    name: IS_NUMBER,\n    constraints: [options],\n    validator: {\n      validate: function (value, args) {\n        return isNumber(value, args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must be a number conforming to the specified constraints';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAT,EAAuBC,UAAvB,QAAyC,sBAAzC;AAEA,OAAO,IAAMC,SAAS,GAAG,UAAlB;AAWP;;;;AAGA,OAAM,SAAUC,QAAV,CAAmBC,KAAnB,EAAmCC,OAAnC,EAAgE;EAA7B;IAAAA;EAA6B;;EACpE,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAO,KAAP;EACD;;EAED,IAAIA,KAAK,KAAKE,QAAV,IAAsBF,KAAK,KAAK,CAACE,QAArC,EAA+C;IAC7C,OAAOD,OAAO,CAACE,aAAf;EACD;;EAED,IAAIC,MAAM,CAACC,KAAP,CAAaL,KAAb,CAAJ,EAAyB;IACvB,OAAOC,OAAO,CAACK,QAAf;EACD;;EAED,IAAIL,OAAO,CAACM,gBAAR,KAA6BC,SAAjC,EAA4C;IAC1C,IAAIC,aAAa,GAAG,CAApB;;IACA,IAAIT,KAAK,GAAG,CAAR,KAAc,CAAlB,EAAqB;MACnBS,aAAa,GAAGT,KAAK,CAACU,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,EAA+BC,MAA/C;IACD;;IACD,IAAIH,aAAa,GAAGR,OAAO,CAACM,gBAA5B,EAA8C;MAC5C,OAAO,KAAP;IACD;EACF;;EAED,OAAOH,MAAM,CAACS,QAAP,CAAgBb,KAAhB,CAAP;AACD;AAED;;;;AAGA,OAAM,SAAUc,QAAV,CAAmBb,OAAnB,EAAkDc,iBAAlD,EAAuF;EAApE;IAAAd;EAA6B;;EACpD,OAAOJ,UAAU,CACf;IACEmB,IAAI,EAAElB,SADR;IAEEmB,WAAW,EAAE,CAAChB,OAAD,CAFf;IAGEiB,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACnB,KAAD,EAAQoB,IAAR,EAAY;QAAc,eAAQ,CAACpB,KAAD,EAAQoB,IAAI,CAACH,WAAL,CAAiB,CAAjB,CAAR,CAAR;MAAoC,CAD/D;MAETI,cAAc,EAAEzB,YAAY,CAC1B,sBAAU;QAAI,iBAAU,GAAG,oEAAb;MAAiF,CADrE,EAE1BmB,iBAF0B;IAFnB;EAHb,CADe,EAYfA,iBAZe,CAAjB;AAcD","names":["buildMessage","ValidateBy","IS_NUMBER","isNumber","value","options","Infinity","allowInfinity","Number","isNaN","allowNaN","maxDecimalPlaces","undefined","decimalPlaces","toString","split","length","isFinite","IsNumber","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/typechecker/IsNumber.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}