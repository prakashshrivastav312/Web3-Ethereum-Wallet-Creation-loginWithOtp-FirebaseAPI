{"ast":null,"code":"/*!\n * Fast \"async\" scrypt implementation in JavaScript.\n * Copyright (c) 2013-2016 Dmitry Chestnykh | BSD License\n * https://github.com/dchest/scrypt-async-js\n * Copyright (c) 2013-2016 Dmitry Chestnykh. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n */\n\n/**\n * scrypt(password, salt, options, callback)\n *\n * where\n *\n * password and salt are strings or arrays of bytes (Array of Uint8Array)\n * options is\n *\n * {\n *    N:      // CPU/memory cost parameter, must be power of two\n *            // (alternatively, you can specify logN)\n *    r:      // block size\n *    p:      // parallelization parameter\n *    dkLen:  // length of derived key, default = 32\n *    encoding: // optional encoding:\n *                    \"base64\" - standard Base64 encoding\n *                    \"hex\" — hex encoding,\n *                    \"binary\" — Uint8Array,\n *                    undefined/null - Array of bytes\n *    interruptStep: // optional, steps to split calculations (default is 0)\n * }\n *\n * Derives a key from password and salt and calls callback\n * with derived key as the only argument.\n *\n * Calculations are interrupted with setImmediate (or zero setTimeout) at the\n * given interruptSteps to avoid freezing the browser. If it's undefined or zero,\n * the callback is called immediately after the calculation, avoiding setImmediate.\n *\n * Legacy way (only supports p = 1) to call this function is:\n *\n * scrypt(password, salt, logN, r, dkLen, [interruptStep], callback, [encoding])\n *\n * In legacy API, if interruptStep is not given, it defaults to 1000.\n * Pass 0 to have callback called immediately.\n *\n */\nfunction scrypt(password, salt, logN, r, dkLen, interruptStep, callback, encoding) {\n  'use strict';\n\n  function SHA256(m) {\n    /** @const */\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    var h0 = 0x6a09e667,\n        h1 = 0xbb67ae85,\n        h2 = 0x3c6ef372,\n        h3 = 0xa54ff53a,\n        h4 = 0x510e527f,\n        h5 = 0x9b05688c,\n        h6 = 0x1f83d9ab,\n        h7 = 0x5be0cd19,\n        w = new Array(64);\n\n    function blocks(p) {\n      var off = 0,\n          len = p.length;\n\n      while (len >= 64) {\n        var a = h0,\n            b = h1,\n            c = h2,\n            d = h3,\n            e = h4,\n            f = h5,\n            g = h6,\n            h = h7,\n            u,\n            i,\n            j,\n            t1,\n            t2;\n\n        for (i = 0; i < 16; i++) {\n          j = off + i * 4;\n          w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;\n        }\n\n        for (i = 16; i < 64; i++) {\n          u = w[i - 2];\n          t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n          u = w[i - 15];\n          t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n          w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0) | 0;\n        }\n\n        for (i = 0; i < 64; i++) {\n          t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n          t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 | 0;\n        }\n\n        h0 = h0 + a | 0;\n        h1 = h1 + b | 0;\n        h2 = h2 + c | 0;\n        h3 = h3 + d | 0;\n        h4 = h4 + e | 0;\n        h5 = h5 + f | 0;\n        h6 = h6 + g | 0;\n        h7 = h7 + h | 0;\n        off += 64;\n        len -= 64;\n      }\n    }\n\n    blocks(m);\n    var i,\n        bytesLeft = m.length % 64,\n        bitLenHi = m.length / 0x20000000 | 0,\n        bitLenLo = m.length << 3,\n        numZeros = bytesLeft < 56 ? 56 : 120,\n        p = m.slice(m.length - bytesLeft, m.length);\n    p.push(0x80);\n\n    for (i = bytesLeft + 1; i < numZeros; i++) p.push(0);\n\n    p.push(bitLenHi >>> 24 & 0xff);\n    p.push(bitLenHi >>> 16 & 0xff);\n    p.push(bitLenHi >>> 8 & 0xff);\n    p.push(bitLenHi >>> 0 & 0xff);\n    p.push(bitLenLo >>> 24 & 0xff);\n    p.push(bitLenLo >>> 16 & 0xff);\n    p.push(bitLenLo >>> 8 & 0xff);\n    p.push(bitLenLo >>> 0 & 0xff);\n    blocks(p);\n    return [h0 >>> 24 & 0xff, h0 >>> 16 & 0xff, h0 >>> 8 & 0xff, h0 >>> 0 & 0xff, h1 >>> 24 & 0xff, h1 >>> 16 & 0xff, h1 >>> 8 & 0xff, h1 >>> 0 & 0xff, h2 >>> 24 & 0xff, h2 >>> 16 & 0xff, h2 >>> 8 & 0xff, h2 >>> 0 & 0xff, h3 >>> 24 & 0xff, h3 >>> 16 & 0xff, h3 >>> 8 & 0xff, h3 >>> 0 & 0xff, h4 >>> 24 & 0xff, h4 >>> 16 & 0xff, h4 >>> 8 & 0xff, h4 >>> 0 & 0xff, h5 >>> 24 & 0xff, h5 >>> 16 & 0xff, h5 >>> 8 & 0xff, h5 >>> 0 & 0xff, h6 >>> 24 & 0xff, h6 >>> 16 & 0xff, h6 >>> 8 & 0xff, h6 >>> 0 & 0xff, h7 >>> 24 & 0xff, h7 >>> 16 & 0xff, h7 >>> 8 & 0xff, h7 >>> 0 & 0xff];\n  }\n\n  function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n    // compress password if it's longer than hash block length\n    password = password.length <= 64 ? password : SHA256(password);\n    var i,\n        innerLen = 64 + salt.length + 4,\n        inner = new Array(innerLen),\n        outerKey = new Array(64),\n        dk = []; // inner = (password ^ ipad) || salt || counter\n\n    for (i = 0; i < 64; i++) inner[i] = 0x36;\n\n    for (i = 0; i < password.length; i++) inner[i] ^= password[i];\n\n    for (i = 0; i < salt.length; i++) inner[64 + i] = salt[i];\n\n    for (i = innerLen - 4; i < innerLen; i++) inner[i] = 0; // outerKey = password ^ opad\n\n\n    for (i = 0; i < 64; i++) outerKey[i] = 0x5c;\n\n    for (i = 0; i < password.length; i++) outerKey[i] ^= password[i]; // increments counter inside inner\n\n\n    function incrementCounter() {\n      for (var i = innerLen - 1; i >= innerLen - 4; i--) {\n        inner[i]++;\n        if (inner[i] <= 0xff) return;\n        inner[i] = 0;\n      }\n    } // output blocks = SHA256(outerKey || SHA256(inner)) ...\n\n\n    while (dkLen >= 32) {\n      incrementCounter();\n      dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n      dkLen -= 32;\n    }\n\n    if (dkLen > 0) {\n      incrementCounter();\n      dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n    }\n\n    return dk;\n  }\n\n  function salsaXOR(tmp, B, bin, bout) {\n    var j0 = tmp[0] ^ B[bin++],\n        j1 = tmp[1] ^ B[bin++],\n        j2 = tmp[2] ^ B[bin++],\n        j3 = tmp[3] ^ B[bin++],\n        j4 = tmp[4] ^ B[bin++],\n        j5 = tmp[5] ^ B[bin++],\n        j6 = tmp[6] ^ B[bin++],\n        j7 = tmp[7] ^ B[bin++],\n        j8 = tmp[8] ^ B[bin++],\n        j9 = tmp[9] ^ B[bin++],\n        j10 = tmp[10] ^ B[bin++],\n        j11 = tmp[11] ^ B[bin++],\n        j12 = tmp[12] ^ B[bin++],\n        j13 = tmp[13] ^ B[bin++],\n        j14 = tmp[14] ^ B[bin++],\n        j15 = tmp[15] ^ B[bin++],\n        u,\n        i;\n    var x0 = j0,\n        x1 = j1,\n        x2 = j2,\n        x3 = j3,\n        x4 = j4,\n        x5 = j5,\n        x6 = j6,\n        x7 = j7,\n        x8 = j8,\n        x9 = j9,\n        x10 = j10,\n        x11 = j11,\n        x12 = j12,\n        x13 = j13,\n        x14 = j14,\n        x15 = j15;\n\n    for (i = 0; i < 8; i += 2) {\n      u = x0 + x12;\n      x4 ^= u << 7 | u >>> 32 - 7;\n      u = x4 + x0;\n      x8 ^= u << 9 | u >>> 32 - 9;\n      u = x8 + x4;\n      x12 ^= u << 13 | u >>> 32 - 13;\n      u = x12 + x8;\n      x0 ^= u << 18 | u >>> 32 - 18;\n      u = x5 + x1;\n      x9 ^= u << 7 | u >>> 32 - 7;\n      u = x9 + x5;\n      x13 ^= u << 9 | u >>> 32 - 9;\n      u = x13 + x9;\n      x1 ^= u << 13 | u >>> 32 - 13;\n      u = x1 + x13;\n      x5 ^= u << 18 | u >>> 32 - 18;\n      u = x10 + x6;\n      x14 ^= u << 7 | u >>> 32 - 7;\n      u = x14 + x10;\n      x2 ^= u << 9 | u >>> 32 - 9;\n      u = x2 + x14;\n      x6 ^= u << 13 | u >>> 32 - 13;\n      u = x6 + x2;\n      x10 ^= u << 18 | u >>> 32 - 18;\n      u = x15 + x11;\n      x3 ^= u << 7 | u >>> 32 - 7;\n      u = x3 + x15;\n      x7 ^= u << 9 | u >>> 32 - 9;\n      u = x7 + x3;\n      x11 ^= u << 13 | u >>> 32 - 13;\n      u = x11 + x7;\n      x15 ^= u << 18 | u >>> 32 - 18;\n      u = x0 + x3;\n      x1 ^= u << 7 | u >>> 32 - 7;\n      u = x1 + x0;\n      x2 ^= u << 9 | u >>> 32 - 9;\n      u = x2 + x1;\n      x3 ^= u << 13 | u >>> 32 - 13;\n      u = x3 + x2;\n      x0 ^= u << 18 | u >>> 32 - 18;\n      u = x5 + x4;\n      x6 ^= u << 7 | u >>> 32 - 7;\n      u = x6 + x5;\n      x7 ^= u << 9 | u >>> 32 - 9;\n      u = x7 + x6;\n      x4 ^= u << 13 | u >>> 32 - 13;\n      u = x4 + x7;\n      x5 ^= u << 18 | u >>> 32 - 18;\n      u = x10 + x9;\n      x11 ^= u << 7 | u >>> 32 - 7;\n      u = x11 + x10;\n      x8 ^= u << 9 | u >>> 32 - 9;\n      u = x8 + x11;\n      x9 ^= u << 13 | u >>> 32 - 13;\n      u = x9 + x8;\n      x10 ^= u << 18 | u >>> 32 - 18;\n      u = x15 + x14;\n      x12 ^= u << 7 | u >>> 32 - 7;\n      u = x12 + x15;\n      x13 ^= u << 9 | u >>> 32 - 9;\n      u = x13 + x12;\n      x14 ^= u << 13 | u >>> 32 - 13;\n      u = x14 + x13;\n      x15 ^= u << 18 | u >>> 32 - 18;\n    }\n\n    B[bout++] = tmp[0] = x0 + j0 | 0;\n    B[bout++] = tmp[1] = x1 + j1 | 0;\n    B[bout++] = tmp[2] = x2 + j2 | 0;\n    B[bout++] = tmp[3] = x3 + j3 | 0;\n    B[bout++] = tmp[4] = x4 + j4 | 0;\n    B[bout++] = tmp[5] = x5 + j5 | 0;\n    B[bout++] = tmp[6] = x6 + j6 | 0;\n    B[bout++] = tmp[7] = x7 + j7 | 0;\n    B[bout++] = tmp[8] = x8 + j8 | 0;\n    B[bout++] = tmp[9] = x9 + j9 | 0;\n    B[bout++] = tmp[10] = x10 + j10 | 0;\n    B[bout++] = tmp[11] = x11 + j11 | 0;\n    B[bout++] = tmp[12] = x12 + j12 | 0;\n    B[bout++] = tmp[13] = x13 + j13 | 0;\n    B[bout++] = tmp[14] = x14 + j14 | 0;\n    B[bout++] = tmp[15] = x15 + j15 | 0;\n  }\n\n  function blockCopy(dst, di, src, si, len) {\n    while (len--) dst[di++] = src[si++];\n  }\n\n  function blockXOR(dst, di, src, si, len) {\n    while (len--) dst[di++] ^= src[si++];\n  }\n\n  function blockMix(tmp, B, bin, bout, r) {\n    blockCopy(tmp, 0, B, bin + (2 * r - 1) * 16, 16);\n\n    for (var i = 0; i < 2 * r; i += 2) {\n      salsaXOR(tmp, B, bin + i * 16, bout + i * 8);\n      salsaXOR(tmp, B, bin + i * 16 + 16, bout + i * 8 + r * 16);\n    }\n  }\n\n  function integerify(B, bi, r) {\n    return B[bi + (2 * r - 1) * 16];\n  }\n\n  function stringToUTF8Bytes(s) {\n    var arr = [];\n\n    for (var i = 0; i < s.length; i++) {\n      var c = s.charCodeAt(i);\n\n      if (c < 0x80) {\n        arr.push(c);\n      } else if (c < 0x800) {\n        arr.push(0xc0 | c >> 6);\n        arr.push(0x80 | c & 0x3f);\n      } else if (c < 0xd800) {\n        arr.push(0xe0 | c >> 12);\n        arr.push(0x80 | c >> 6 & 0x3f);\n        arr.push(0x80 | c & 0x3f);\n      } else {\n        if (i >= s.length - 1) {\n          throw new Error('invalid string');\n        }\n\n        i++; // get one more character\n\n        c = (c & 0x3ff) << 10;\n        c |= s.charCodeAt(i) & 0x3ff;\n        c += 0x10000;\n        arr.push(0xf0 | c >> 18);\n        arr.push(0x80 | c >> 12 & 0x3f);\n        arr.push(0x80 | c >> 6 & 0x3f);\n        arr.push(0x80 | c & 0x3f);\n      }\n    }\n\n    return arr;\n  }\n\n  function bytesToHex(p) {\n    /** @const */\n    var enc = '0123456789abcdef'.split('');\n    var len = p.length,\n        arr = [],\n        i = 0;\n\n    for (; i < len; i++) {\n      arr.push(enc[p[i] >>> 4 & 15]);\n      arr.push(enc[p[i] >>> 0 & 15]);\n    }\n\n    return arr.join('');\n  }\n\n  function bytesToBase64(p) {\n    /** @const */\n    var enc = ('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' + '0123456789+/').split('');\n    var len = p.length,\n        arr = [],\n        i = 0,\n        a,\n        b,\n        c,\n        t;\n\n    while (i < len) {\n      a = i < len ? p[i++] : 0;\n      b = i < len ? p[i++] : 0;\n      c = i < len ? p[i++] : 0;\n      t = (a << 16) + (b << 8) + c;\n      arr.push(enc[t >>> 3 * 6 & 63]);\n      arr.push(enc[t >>> 2 * 6 & 63]);\n      arr.push(enc[t >>> 1 * 6 & 63]);\n      arr.push(enc[t >>> 0 * 6 & 63]);\n    }\n\n    if (len % 3 > 0) {\n      arr[arr.length - 1] = '=';\n      if (len % 3 === 1) arr[arr.length - 2] = '=';\n    }\n\n    return arr.join('');\n  } // Generate key.\n\n\n  var MAX_UINT = -1 >>> 0,\n      p = 1;\n\n  if (typeof logN === \"object\") {\n    // Called as: scrypt(password, salt, opts, callback)\n    if (arguments.length > 4) {\n      throw new Error('scrypt: incorrect number of arguments');\n    }\n\n    var opts = logN;\n    callback = r;\n    logN = opts.logN;\n\n    if (typeof logN === 'undefined') {\n      if (typeof opts.N !== 'undefined') {\n        if (opts.N < 2 || opts.N > MAX_UINT) throw new Error('scrypt: N is out of range');\n        if ((opts.N & opts.N - 1) !== 0) throw new Error('scrypt: N is not a power of 2');\n        logN = Math.log(opts.N) / Math.LN2;\n      } else {\n        throw new Error('scrypt: missing N parameter');\n      }\n    }\n\n    p = opts.p || 1;\n    r = opts.r;\n    dkLen = opts.dkLen || 32;\n    interruptStep = opts.interruptStep || 0;\n    encoding = opts.encoding;\n  }\n\n  if (p < 1) throw new Error('scrypt: invalid p');\n  if (r <= 0) throw new Error('scrypt: invalid r');\n  if (logN < 1 || logN > 31) throw new Error('scrypt: logN must be between 1 and 31');\n  var N = 1 << logN >>> 0,\n      XY,\n      V,\n      B,\n      tmp;\n  if (r * p >= 1 << 30 || r > MAX_UINT / 128 / p || r > MAX_UINT / 256 || N > MAX_UINT / 128 / r) throw new Error('scrypt: parameters are too large'); // Decode strings.\n\n  if (typeof password === 'string') password = stringToUTF8Bytes(password);\n  if (typeof salt === 'string') salt = stringToUTF8Bytes(salt);\n\n  if (typeof Int32Array !== 'undefined') {\n    //XXX We can use Uint32Array, but Int32Array is faster in Safari.\n    XY = new Int32Array(64 * r);\n    V = new Int32Array(32 * N * r);\n    tmp = new Int32Array(16);\n  } else {\n    XY = [];\n    V = [];\n    tmp = new Array(16);\n  }\n\n  B = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n  var xi = 0,\n      yi = 32 * r;\n\n  function smixStart(pos) {\n    for (var i = 0; i < 32 * r; i++) {\n      var j = pos + i * 4;\n      XY[xi + i] = (B[j + 3] & 0xff) << 24 | (B[j + 2] & 0xff) << 16 | (B[j + 1] & 0xff) << 8 | (B[j + 0] & 0xff) << 0;\n    }\n  }\n\n  function smixStep1(start, end) {\n    for (var i = start; i < end; i += 2) {\n      blockCopy(V, i * (32 * r), XY, xi, 32 * r);\n      blockMix(tmp, XY, xi, yi, r);\n      blockCopy(V, (i + 1) * (32 * r), XY, yi, 32 * r);\n      blockMix(tmp, XY, yi, xi, r);\n    }\n  }\n\n  function smixStep2(start, end) {\n    for (var i = start; i < end; i += 2) {\n      var j = integerify(XY, xi, r) & N - 1;\n      blockXOR(XY, xi, V, j * (32 * r), 32 * r);\n      blockMix(tmp, XY, xi, yi, r);\n      j = integerify(XY, yi, r) & N - 1;\n      blockXOR(XY, yi, V, j * (32 * r), 32 * r);\n      blockMix(tmp, XY, yi, xi, r);\n    }\n  }\n\n  function smixFinish(pos) {\n    for (var i = 0; i < 32 * r; i++) {\n      var j = XY[xi + i];\n      B[pos + i * 4 + 0] = j >>> 0 & 0xff;\n      B[pos + i * 4 + 1] = j >>> 8 & 0xff;\n      B[pos + i * 4 + 2] = j >>> 16 & 0xff;\n      B[pos + i * 4 + 3] = j >>> 24 & 0xff;\n    }\n  }\n\n  var nextTick = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout;\n\n  function interruptedFor(start, end, step, fn, donefn) {\n    (function performStep() {\n      nextTick(function () {\n        fn(start, start + step < end ? start + step : end);\n        start += step;\n        if (start < end) performStep();else donefn();\n      });\n    })();\n  }\n\n  function getResult(enc) {\n    var result = PBKDF2_HMAC_SHA256_OneIter(password, B, dkLen);\n    if (enc === 'base64') return bytesToBase64(result);else if (enc === 'hex') return bytesToHex(result);else if (enc === 'binary') return new Uint8Array(result);else return result;\n  } // Blocking variant.\n\n\n  function calculateSync() {\n    for (var i = 0; i < p; i++) {\n      smixStart(i * 128 * r);\n      smixStep1(0, N);\n      smixStep2(0, N);\n      smixFinish(i * 128 * r);\n    }\n\n    callback(getResult(encoding));\n  } // Async variant.\n\n\n  function calculateAsync(i) {\n    smixStart(i * 128 * r);\n    interruptedFor(0, N, interruptStep * 2, smixStep1, function () {\n      interruptedFor(0, N, interruptStep * 2, smixStep2, function () {\n        smixFinish(i * 128 * r);\n\n        if (i + 1 < p) {\n          nextTick(function () {\n            calculateAsync(i + 1);\n          });\n        } else {\n          callback(getResult(encoding));\n        }\n      });\n    });\n  }\n\n  if (typeof interruptStep === 'function') {\n    // Called as: scrypt(...,      callback, [encoding])\n    //  shifting: scrypt(..., interruptStep,  callback, [encoding])\n    encoding = callback;\n    callback = interruptStep;\n    interruptStep = 1000;\n  }\n\n  if (interruptStep <= 0) {\n    calculateSync();\n  } else {\n    calculateAsync(0);\n  }\n}\n\nif (typeof module !== 'undefined') module.exports = scrypt;","map":{"version":3,"names":["scrypt","password","salt","logN","r","dkLen","interruptStep","callback","encoding","SHA256","m","K","h0","h1","h2","h3","h4","h5","h6","h7","w","Array","blocks","p","off","len","length","a","b","c","d","e","f","g","h","u","i","j","t1","t2","bytesLeft","bitLenHi","bitLenLo","numZeros","slice","push","PBKDF2_HMAC_SHA256_OneIter","innerLen","inner","outerKey","dk","incrementCounter","concat","salsaXOR","tmp","B","bin","bout","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","blockCopy","dst","di","src","si","blockXOR","blockMix","integerify","bi","stringToUTF8Bytes","s","arr","charCodeAt","Error","bytesToHex","enc","split","join","bytesToBase64","t","MAX_UINT","arguments","opts","N","Math","log","LN2","XY","V","Int32Array","xi","yi","smixStart","pos","smixStep1","start","end","smixStep2","smixFinish","nextTick","setImmediate","setTimeout","interruptedFor","step","fn","donefn","performStep","getResult","result","Uint8Array","calculateSync","calculateAsync","module","exports"],"sources":["C:/Users/acer/node_modules/cardano-crypto.js/utils/scrypt-async.js"],"sourcesContent":["/*!\n * Fast \"async\" scrypt implementation in JavaScript.\n * Copyright (c) 2013-2016 Dmitry Chestnykh | BSD License\n * https://github.com/dchest/scrypt-async-js\n * Copyright (c) 2013-2016 Dmitry Chestnykh. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n */\n\n/**\n * scrypt(password, salt, options, callback)\n *\n * where\n *\n * password and salt are strings or arrays of bytes (Array of Uint8Array)\n * options is\n *\n * {\n *    N:      // CPU/memory cost parameter, must be power of two\n *            // (alternatively, you can specify logN)\n *    r:      // block size\n *    p:      // parallelization parameter\n *    dkLen:  // length of derived key, default = 32\n *    encoding: // optional encoding:\n *                    \"base64\" - standard Base64 encoding\n *                    \"hex\" — hex encoding,\n *                    \"binary\" — Uint8Array,\n *                    undefined/null - Array of bytes\n *    interruptStep: // optional, steps to split calculations (default is 0)\n * }\n *\n * Derives a key from password and salt and calls callback\n * with derived key as the only argument.\n *\n * Calculations are interrupted with setImmediate (or zero setTimeout) at the\n * given interruptSteps to avoid freezing the browser. If it's undefined or zero,\n * the callback is called immediately after the calculation, avoiding setImmediate.\n *\n * Legacy way (only supports p = 1) to call this function is:\n *\n * scrypt(password, salt, logN, r, dkLen, [interruptStep], callback, [encoding])\n *\n * In legacy API, if interruptStep is not given, it defaults to 1000.\n * Pass 0 to have callback called immediately.\n *\n */\nfunction scrypt(password, salt, logN, r, dkLen, interruptStep, callback, encoding) {\n  'use strict';\n\n  function SHA256(m) {\n    /** @const */ var K = [\n      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n      0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n      0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n      0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n      0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n      0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n      0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n      0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n      0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n      0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n    ];\n\n    var h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a,\n        h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19,\n        w = new Array(64);\n\n    function blocks(p) {\n      var off = 0, len = p.length;\n      while (len >= 64) {\n        var a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7,\n            u, i, j, t1, t2;\n\n        for (i = 0; i < 16; i++) {\n          j = off + i*4;\n          w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |\n                 ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);\n        }\n\n        for (i = 16; i < 64; i++) {\n          u = w[i-2];\n          t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);\n\n          u = w[i-15];\n          t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);\n\n          w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;\n        }\n\n        for (i = 0; i < 64; i++) {\n          t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^\n               ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +\n               ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n\n          t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^\n               ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n\n          h = g;\n          g = f;\n          f = e;\n          e = (d + t1) | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = (t1 + t2) | 0;\n        }\n\n        h0 = (h0 + a) | 0;\n        h1 = (h1 + b) | 0;\n        h2 = (h2 + c) | 0;\n        h3 = (h3 + d) | 0;\n        h4 = (h4 + e) | 0;\n        h5 = (h5 + f) | 0;\n        h6 = (h6 + g) | 0;\n        h7 = (h7 + h) | 0;\n\n        off += 64;\n        len -= 64;\n      }\n    }\n\n    blocks(m);\n\n    var i, bytesLeft = m.length % 64,\n        bitLenHi = (m.length / 0x20000000) | 0,\n        bitLenLo = m.length << 3,\n        numZeros = (bytesLeft < 56) ? 56 : 120,\n        p = m.slice(m.length - bytesLeft, m.length);\n\n    p.push(0x80);\n    for (i = bytesLeft + 1; i < numZeros; i++) p.push(0);\n    p.push((bitLenHi>>>24) & 0xff);\n    p.push((bitLenHi>>>16) & 0xff);\n    p.push((bitLenHi>>>8)  & 0xff);\n    p.push((bitLenHi>>>0)  & 0xff);\n    p.push((bitLenLo>>>24) & 0xff);\n    p.push((bitLenLo>>>16) & 0xff);\n    p.push((bitLenLo>>>8)  & 0xff);\n    p.push((bitLenLo>>>0)  & 0xff);\n\n    blocks(p);\n\n    return [\n      (h0>>>24) & 0xff, (h0>>>16) & 0xff, (h0>>>8) & 0xff, (h0>>>0) & 0xff,\n      (h1>>>24) & 0xff, (h1>>>16) & 0xff, (h1>>>8) & 0xff, (h1>>>0) & 0xff,\n      (h2>>>24) & 0xff, (h2>>>16) & 0xff, (h2>>>8) & 0xff, (h2>>>0) & 0xff,\n      (h3>>>24) & 0xff, (h3>>>16) & 0xff, (h3>>>8) & 0xff, (h3>>>0) & 0xff,\n      (h4>>>24) & 0xff, (h4>>>16) & 0xff, (h4>>>8) & 0xff, (h4>>>0) & 0xff,\n      (h5>>>24) & 0xff, (h5>>>16) & 0xff, (h5>>>8) & 0xff, (h5>>>0) & 0xff,\n      (h6>>>24) & 0xff, (h6>>>16) & 0xff, (h6>>>8) & 0xff, (h6>>>0) & 0xff,\n      (h7>>>24) & 0xff, (h7>>>16) & 0xff, (h7>>>8) & 0xff, (h7>>>0) & 0xff\n    ];\n  }\n\n  function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n    // compress password if it's longer than hash block length\n    password = password.length <= 64 ? password : SHA256(password);\n\n    var i, innerLen = 64 + salt.length + 4,\n        inner = new Array(innerLen),\n        outerKey = new Array(64),\n        dk = [];\n\n    // inner = (password ^ ipad) || salt || counter\n    for (i = 0; i < 64; i++) inner[i] = 0x36;\n    for (i = 0; i < password.length; i++) inner[i] ^= password[i];\n    for (i = 0; i < salt.length; i++) inner[64+i] = salt[i];\n    for (i = innerLen - 4; i < innerLen; i++) inner[i] = 0;\n\n    // outerKey = password ^ opad\n    for (i = 0; i < 64; i++) outerKey[i] = 0x5c;\n    for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];\n\n    // increments counter inside inner\n    function incrementCounter() {\n      for (var i = innerLen-1; i >= innerLen-4; i--) {\n        inner[i]++;\n        if (inner[i] <= 0xff) return;\n        inner[i] = 0;\n      }\n    }\n\n    // output blocks = SHA256(outerKey || SHA256(inner)) ...\n    while (dkLen >= 32) {\n      incrementCounter();\n      dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n      dkLen -= 32;\n    }\n    if (dkLen > 0) {\n      incrementCounter();\n      dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n    }\n    return dk;\n  }\n\n  function salsaXOR(tmp, B, bin, bout) {\n    var j0  = tmp[0]  ^ B[bin++],\n        j1  = tmp[1]  ^ B[bin++],\n        j2  = tmp[2]  ^ B[bin++],\n        j3  = tmp[3]  ^ B[bin++],\n        j4  = tmp[4]  ^ B[bin++],\n        j5  = tmp[5]  ^ B[bin++],\n        j6  = tmp[6]  ^ B[bin++],\n        j7  = tmp[7]  ^ B[bin++],\n        j8  = tmp[8]  ^ B[bin++],\n        j9  = tmp[9]  ^ B[bin++],\n        j10 = tmp[10] ^ B[bin++],\n        j11 = tmp[11] ^ B[bin++],\n        j12 = tmp[12] ^ B[bin++],\n        j13 = tmp[13] ^ B[bin++],\n        j14 = tmp[14] ^ B[bin++],\n        j15 = tmp[15] ^ B[bin++],\n        u, i;\n\n    var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n        x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n        x15 = j15;\n\n    for (i = 0; i < 8; i += 2) {\n      u =  x0 + x12;   x4 ^= u<<7  | u>>>(32-7);\n      u =  x4 +  x0;   x8 ^= u<<9  | u>>>(32-9);\n      u =  x8 +  x4;  x12 ^= u<<13 | u>>>(32-13);\n      u = x12 +  x8;   x0 ^= u<<18 | u>>>(32-18);\n\n      u =  x5 +  x1;   x9 ^= u<<7  | u>>>(32-7);\n      u =  x9 +  x5;  x13 ^= u<<9  | u>>>(32-9);\n      u = x13 +  x9;   x1 ^= u<<13 | u>>>(32-13);\n      u =  x1 + x13;   x5 ^= u<<18 | u>>>(32-18);\n\n      u = x10 +  x6;  x14 ^= u<<7  | u>>>(32-7);\n      u = x14 + x10;   x2 ^= u<<9  | u>>>(32-9);\n      u =  x2 + x14;   x6 ^= u<<13 | u>>>(32-13);\n      u =  x6 +  x2;  x10 ^= u<<18 | u>>>(32-18);\n\n      u = x15 + x11;   x3 ^= u<<7  | u>>>(32-7);\n      u =  x3 + x15;   x7 ^= u<<9  | u>>>(32-9);\n      u =  x7 +  x3;  x11 ^= u<<13 | u>>>(32-13);\n      u = x11 +  x7;  x15 ^= u<<18 | u>>>(32-18);\n\n      u =  x0 +  x3;   x1 ^= u<<7  | u>>>(32-7);\n      u =  x1 +  x0;   x2 ^= u<<9  | u>>>(32-9);\n      u =  x2 +  x1;   x3 ^= u<<13 | u>>>(32-13);\n      u =  x3 +  x2;   x0 ^= u<<18 | u>>>(32-18);\n\n      u =  x5 +  x4;   x6 ^= u<<7  | u>>>(32-7);\n      u =  x6 +  x5;   x7 ^= u<<9  | u>>>(32-9);\n      u =  x7 +  x6;   x4 ^= u<<13 | u>>>(32-13);\n      u =  x4 +  x7;   x5 ^= u<<18 | u>>>(32-18);\n\n      u = x10 +  x9;  x11 ^= u<<7  | u>>>(32-7);\n      u = x11 + x10;   x8 ^= u<<9  | u>>>(32-9);\n      u =  x8 + x11;   x9 ^= u<<13 | u>>>(32-13);\n      u =  x9 +  x8;  x10 ^= u<<18 | u>>>(32-18);\n\n      u = x15 + x14;  x12 ^= u<<7  | u>>>(32-7);\n      u = x12 + x15;  x13 ^= u<<9  | u>>>(32-9);\n      u = x13 + x12;  x14 ^= u<<13 | u>>>(32-13);\n      u = x14 + x13;  x15 ^= u<<18 | u>>>(32-18);\n    }\n\n    B[bout++] = tmp[0]  = (x0  + j0)  | 0;\n    B[bout++] = tmp[1]  = (x1  + j1)  | 0;\n    B[bout++] = tmp[2]  = (x2  + j2)  | 0;\n    B[bout++] = tmp[3]  = (x3  + j3)  | 0;\n    B[bout++] = tmp[4]  = (x4  + j4)  | 0;\n    B[bout++] = tmp[5]  = (x5  + j5)  | 0;\n    B[bout++] = tmp[6]  = (x6  + j6)  | 0;\n    B[bout++] = tmp[7]  = (x7  + j7)  | 0;\n    B[bout++] = tmp[8]  = (x8  + j8)  | 0;\n    B[bout++] = tmp[9]  = (x9  + j9)  | 0;\n    B[bout++] = tmp[10] = (x10 + j10) | 0;\n    B[bout++] = tmp[11] = (x11 + j11) | 0;\n    B[bout++] = tmp[12] = (x12 + j12) | 0;\n    B[bout++] = tmp[13] = (x13 + j13) | 0;\n    B[bout++] = tmp[14] = (x14 + j14) | 0;\n    B[bout++] = tmp[15] = (x15 + j15) | 0;\n  }\n\n  function blockCopy(dst, di, src, si, len) {\n    while (len--) dst[di++] = src[si++];\n  }\n\n  function blockXOR(dst, di, src, si, len) {\n    while (len--) dst[di++] ^= src[si++];\n  }\n\n  function blockMix(tmp, B, bin, bout, r) {\n    blockCopy(tmp, 0, B, bin + (2*r-1)*16, 16);\n    for (var i = 0; i < 2*r; i += 2) {\n      salsaXOR(tmp, B, bin + i*16,      bout + i*8);\n      salsaXOR(tmp, B, bin + i*16 + 16, bout + i*8 + r*16);\n    }\n  }\n\n  function integerify(B, bi, r) {\n    return B[bi+(2*r-1)*16];\n  }\n\n  function stringToUTF8Bytes(s) {\n    var arr = [];\n    for (var i = 0; i < s.length; i++) {\n      var c = s.charCodeAt(i);\n      if (c < 0x80) {\n        arr.push(c);\n      } else if (c < 0x800) {\n        arr.push(0xc0 | c >> 6);\n        arr.push(0x80 | c & 0x3f);\n      } else if (c < 0xd800) {\n        arr.push(0xe0 | c >> 12);\n        arr.push(0x80 | (c >> 6) & 0x3f);\n        arr.push(0x80 | c & 0x3f);\n      } else {\n        if (i >= s.length - 1) {\n          throw new Error('invalid string');\n        }\n        i++; // get one more character\n        c = (c & 0x3ff) << 10;\n        c |= s.charCodeAt(i) & 0x3ff;\n        c += 0x10000;\n\n        arr.push(0xf0 | c >> 18);\n        arr.push(0x80 | (c >> 12) & 0x3f);\n        arr.push(0x80 | (c >> 6) & 0x3f);\n        arr.push(0x80 | c & 0x3f);\n      }\n    }\n    return arr;\n  }\n\n  function bytesToHex(p) {\n    /** @const */\n    var enc = '0123456789abcdef'.split('');\n\n    var len = p.length,\n        arr = [],\n        i = 0;\n\n    for (; i < len; i++) {\n        arr.push(enc[(p[i]>>>4) & 15]);\n        arr.push(enc[(p[i]>>>0) & 15]);\n    }\n    return arr.join('');\n  }\n\n  function bytesToBase64(p) {\n    /** @const */\n    var enc = ('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' +\n              '0123456789+/').split('');\n\n    var len = p.length,\n        arr = [],\n        i = 0,\n        a, b, c, t;\n\n    while (i < len) {\n      a = i < len ? p[i++] : 0;\n      b = i < len ? p[i++] : 0;\n      c = i < len ? p[i++] : 0;\n      t = (a << 16) + (b << 8) + c;\n      arr.push(enc[(t >>> 3 * 6) & 63]);\n      arr.push(enc[(t >>> 2 * 6) & 63]);\n      arr.push(enc[(t >>> 1 * 6) & 63]);\n      arr.push(enc[(t >>> 0 * 6) & 63]);\n    }\n    if (len % 3 > 0) {\n      arr[arr.length-1] = '=';\n      if (len % 3 === 1) arr[arr.length-2] = '=';\n    }\n    return arr.join('');\n  }\n\n\n  // Generate key.\n\n  var MAX_UINT = (-1)>>>0,\n      p = 1;\n\n  if (typeof logN === \"object\") {\n    // Called as: scrypt(password, salt, opts, callback)\n    if (arguments.length > 4) {\n      throw new Error('scrypt: incorrect number of arguments');\n    }\n\n    var opts = logN;\n\n    callback = r;\n    logN = opts.logN;\n    if (typeof logN === 'undefined') {\n      if (typeof opts.N !== 'undefined') {\n        if (opts.N < 2 || opts.N > MAX_UINT)\n          throw new Error('scrypt: N is out of range');\n\n        if ((opts.N & (opts.N - 1)) !== 0)\n          throw new Error('scrypt: N is not a power of 2');\n\n        logN = Math.log(opts.N) / Math.LN2;\n      } else {\n        throw new Error('scrypt: missing N parameter');\n      }\n    }\n    p = opts.p || 1;\n    r = opts.r;\n    dkLen = opts.dkLen || 32;\n    interruptStep = opts.interruptStep || 0;\n    encoding = opts.encoding;\n  }\n\n  if (p < 1)\n    throw new Error('scrypt: invalid p');\n\n  if (r <= 0)\n    throw new Error('scrypt: invalid r');\n\n  if (logN < 1 || logN > 31)\n    throw new Error('scrypt: logN must be between 1 and 31');\n\n\n  var N = (1<<logN)>>>0,\n      XY, V, B, tmp;\n\n  if (r*p >= 1<<30 || r > MAX_UINT/128/p || r > MAX_UINT/256 || N > MAX_UINT/128/r)\n    throw new Error('scrypt: parameters are too large');\n\n  // Decode strings.\n  if (typeof password === 'string')\n    password = stringToUTF8Bytes(password);\n  if (typeof salt === 'string')\n    salt = stringToUTF8Bytes(salt);\n\n  if (typeof Int32Array !== 'undefined') {\n    //XXX We can use Uint32Array, but Int32Array is faster in Safari.\n    XY = new Int32Array(64*r);\n    V = new Int32Array(32*N*r);\n    tmp = new Int32Array(16);\n  } else {\n    XY = [];\n    V = [];\n    tmp = new Array(16);\n  }\n  B = PBKDF2_HMAC_SHA256_OneIter(password, salt, p*128*r);\n\n  var xi = 0, yi = 32 * r;\n\n  function smixStart(pos) {\n    for (var i = 0; i < 32*r; i++) {\n      var j = pos + i*4;\n      XY[xi+i] = ((B[j+3] & 0xff)<<24) | ((B[j+2] & 0xff)<<16) |\n                 ((B[j+1] & 0xff)<<8)  | ((B[j+0] & 0xff)<<0);\n    }\n  }\n\n  function smixStep1(start, end) {\n    for (var i = start; i < end; i += 2) {\n      blockCopy(V, i*(32*r), XY, xi, 32*r);\n      blockMix(tmp, XY, xi, yi, r);\n\n      blockCopy(V, (i+1)*(32*r), XY, yi, 32*r);\n      blockMix(tmp, XY, yi, xi, r);\n    }\n  }\n\n  function smixStep2(start, end) {\n    for (var i = start; i < end; i += 2) {\n      var j = integerify(XY, xi, r) & (N-1);\n      blockXOR(XY, xi, V, j*(32*r), 32*r);\n      blockMix(tmp, XY, xi, yi, r);\n\n      j = integerify(XY, yi, r) & (N-1);\n      blockXOR(XY, yi, V, j*(32*r), 32*r);\n      blockMix(tmp, XY, yi, xi, r);\n    }\n  }\n\n  function smixFinish(pos) {\n    for (var i = 0; i < 32*r; i++) {\n      var j = XY[xi+i];\n      B[pos + i*4 + 0] = (j>>>0)  & 0xff;\n      B[pos + i*4 + 1] = (j>>>8)  & 0xff;\n      B[pos + i*4 + 2] = (j>>>16) & 0xff;\n      B[pos + i*4 + 3] = (j>>>24) & 0xff;\n    }\n  }\n\n  var nextTick = (typeof setImmediate !== 'undefined') ? setImmediate : setTimeout;\n\n  function interruptedFor(start, end, step, fn, donefn) {\n    (function performStep() {\n      nextTick(function() {\n        fn(start, start + step < end ? start + step : end);\n        start += step;\n        if (start < end)\n          performStep();\n        else\n          donefn();\n        });\n    })();\n  }\n\n  function getResult(enc) {\n      var result = PBKDF2_HMAC_SHA256_OneIter(password, B, dkLen);\n      if (enc === 'base64')\n        return bytesToBase64(result);\n      else if (enc === 'hex')\n        return bytesToHex(result);\n      else if (enc === 'binary')\n        return new Uint8Array(result);\n      else\n        return result;\n  }\n\n  // Blocking variant.\n  function calculateSync() {\n    for (var i = 0; i < p; i++) {\n      smixStart(i*128*r);\n      smixStep1(0, N);\n      smixStep2(0, N);\n      smixFinish(i*128*r);\n    }\n    callback(getResult(encoding));\n  }\n\n  // Async variant.\n  function calculateAsync(i) {\n      smixStart(i*128*r);\n      interruptedFor(0, N, interruptStep*2, smixStep1, function() {\n        interruptedFor(0, N, interruptStep*2, smixStep2, function () {\n          smixFinish(i*128*r);\n          if (i + 1 < p) {\n            nextTick(function() { calculateAsync(i + 1); });\n          } else {\n            callback(getResult(encoding));\n          }\n        });\n      });\n  }\n\n  if (typeof interruptStep === 'function') {\n    // Called as: scrypt(...,      callback, [encoding])\n    //  shifting: scrypt(..., interruptStep,  callback, [encoding])\n    encoding = callback;\n    callback = interruptStep;\n    interruptStep = 1000;\n  }\n\n  if (interruptStep <= 0) {\n    calculateSync();\n  } else {\n    calculateAsync(0);\n  }\n}\n\nif (typeof module !== 'undefined') module.exports = scrypt;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,CAAgBC,QAAhB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,CAAtC,EAAyCC,KAAzC,EAAgDC,aAAhD,EAA+DC,QAA/D,EAAyEC,QAAzE,EAAmF;EACjF;;EAEA,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;IACjB;IAAc,IAAIC,CAAC,GAAG,CACpB,UADoB,EACR,UADQ,EACI,UADJ,EACgB,UADhB,EAC4B,UAD5B,EAEpB,UAFoB,EAER,UAFQ,EAEI,UAFJ,EAEgB,UAFhB,EAE4B,UAF5B,EAGpB,UAHoB,EAGR,UAHQ,EAGI,UAHJ,EAGgB,UAHhB,EAG4B,UAH5B,EAIpB,UAJoB,EAIR,UAJQ,EAII,UAJJ,EAIgB,UAJhB,EAI4B,UAJ5B,EAKpB,UALoB,EAKR,UALQ,EAKI,UALJ,EAKgB,UALhB,EAK4B,UAL5B,EAMpB,UANoB,EAMR,UANQ,EAMI,UANJ,EAMgB,UANhB,EAM4B,UAN5B,EAOpB,UAPoB,EAOR,UAPQ,EAOI,UAPJ,EAOgB,UAPhB,EAO4B,UAP5B,EAQpB,UARoB,EAQR,UARQ,EAQI,UARJ,EAQgB,UARhB,EAQ4B,UAR5B,EASpB,UAToB,EASR,UATQ,EASI,UATJ,EASgB,UAThB,EAS4B,UAT5B,EAUpB,UAVoB,EAUR,UAVQ,EAUI,UAVJ,EAUgB,UAVhB,EAU4B,UAV5B,EAWpB,UAXoB,EAWR,UAXQ,EAWI,UAXJ,EAWgB,UAXhB,EAW4B,UAX5B,EAYpB,UAZoB,EAYR,UAZQ,EAYI,UAZJ,EAYgB,UAZhB,EAY4B,UAZ5B,EAapB,UAboB,EAaR,UAbQ,EAaI,UAbJ,EAagB,UAbhB,CAAR;IAgBd,IAAIC,EAAE,GAAG,UAAT;IAAA,IAAqBC,EAAE,GAAG,UAA1B;IAAA,IAAsCC,EAAE,GAAG,UAA3C;IAAA,IAAuDC,EAAE,GAAG,UAA5D;IAAA,IACIC,EAAE,GAAG,UADT;IAAA,IACqBC,EAAE,GAAG,UAD1B;IAAA,IACsCC,EAAE,GAAG,UAD3C;IAAA,IACuDC,EAAE,GAAG,UAD5D;IAAA,IAEIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,EAAV,CAFR;;IAIA,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;MACjB,IAAIC,GAAG,GAAG,CAAV;MAAA,IAAaC,GAAG,GAAGF,CAAC,CAACG,MAArB;;MACA,OAAOD,GAAG,IAAI,EAAd,EAAkB;QAChB,IAAIE,CAAC,GAAGf,EAAR;QAAA,IAAYgB,CAAC,GAAGf,EAAhB;QAAA,IAAoBgB,CAAC,GAAGf,EAAxB;QAAA,IAA4BgB,CAAC,GAAGf,EAAhC;QAAA,IAAoCgB,CAAC,GAAGf,EAAxC;QAAA,IAA4CgB,CAAC,GAAGf,EAAhD;QAAA,IAAoDgB,CAAC,GAAGf,EAAxD;QAAA,IAA4DgB,CAAC,GAAGf,EAAhE;QAAA,IACIgB,CADJ;QAAA,IACOC,CADP;QAAA,IACUC,CADV;QAAA,IACaC,EADb;QAAA,IACiBC,EADjB;;QAGA,KAAKH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;UACvBC,CAAC,GAAGb,GAAG,GAAGY,CAAC,GAAC,CAAZ;UACAhB,CAAC,CAACgB,CAAD,CAAD,GAAQ,CAACb,CAAC,CAACc,CAAD,CAAD,GAAO,IAAR,KAAe,EAAhB,GAAuB,CAACd,CAAC,CAACc,CAAC,GAAC,CAAH,CAAD,GAAS,IAAV,KAAiB,EAAxC,GACC,CAACd,CAAC,CAACc,CAAC,GAAC,CAAH,CAAD,GAAS,IAAV,KAAiB,CADlB,GACwBd,CAAC,CAACc,CAAC,GAAC,CAAH,CAAD,GAAS,IADxC;QAED;;QAED,KAAKD,CAAC,GAAG,EAAT,EAAaA,CAAC,GAAG,EAAjB,EAAqBA,CAAC,EAAtB,EAA0B;UACxBD,CAAC,GAAGf,CAAC,CAACgB,CAAC,GAAC,CAAH,CAAL;UACAE,EAAE,GAAG,CAAEH,CAAC,KAAG,EAAL,GAAYA,CAAC,IAAG,KAAG,EAApB,KAA8BA,CAAC,KAAG,EAAL,GAAYA,CAAC,IAAG,KAAG,EAAhD,IAAyDA,CAAC,KAAG,EAAlE;UAEAA,CAAC,GAAGf,CAAC,CAACgB,CAAC,GAAC,EAAH,CAAL;UACAG,EAAE,GAAG,CAAEJ,CAAC,KAAG,CAAL,GAAWA,CAAC,IAAG,KAAG,CAAnB,KAA4BA,CAAC,KAAG,EAAL,GAAYA,CAAC,IAAG,KAAG,EAA9C,IAAuDA,CAAC,KAAG,CAAhE;UAEAf,CAAC,CAACgB,CAAD,CAAD,GAAQ,CAAEE,EAAE,GAAGlB,CAAC,CAACgB,CAAC,GAAC,CAAH,CAAP,GAAgB,CAAjB,KAAwBG,EAAE,GAAGnB,CAAC,CAACgB,CAAC,GAAC,EAAH,CAAP,GAAiB,CAAxC,CAAD,GAA+C,CAAtD;QACD;;QAED,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;UACvBE,EAAE,GAAI,CAAE,CAAC,CAAEP,CAAC,KAAG,CAAL,GAAWA,CAAC,IAAG,KAAG,CAAnB,KAA4BA,CAAC,KAAG,EAAL,GAAYA,CAAC,IAAG,KAAG,EAA9C,KACFA,CAAC,KAAG,EAAL,GAAYA,CAAC,IAAG,KAAG,EADhB,CAAD,KAC4BA,CAAC,GAAGC,CAAL,GAAW,CAACD,CAAD,GAAKE,CAD3C,CAAD,GACmD,CADpD,KAECC,CAAC,IAAKvB,CAAC,CAACyB,CAAD,CAAD,GAAOhB,CAAC,CAACgB,CAAD,CAAT,GAAgB,CAApB,CAAF,GAA4B,CAF5B,CAAD,GAEmC,CAFxC;UAIAG,EAAE,GAAI,CAAC,CAAEZ,CAAC,KAAG,CAAL,GAAWA,CAAC,IAAG,KAAG,CAAnB,KAA4BA,CAAC,KAAG,EAAL,GAAYA,CAAC,IAAG,KAAG,EAA9C,KACAA,CAAC,KAAG,EAAL,GAAYA,CAAC,IAAG,KAAG,EADlB,CAAD,KAC8BA,CAAC,GAAGC,CAAL,GAAWD,CAAC,GAAGE,CAAf,GAAqBD,CAAC,GAAGC,CADtD,CAAD,GAC8D,CADnE;UAGAK,CAAC,GAAGD,CAAJ;UACAA,CAAC,GAAGD,CAAJ;UACAA,CAAC,GAAGD,CAAJ;UACAA,CAAC,GAAID,CAAC,GAAGQ,EAAL,GAAW,CAAf;UACAR,CAAC,GAAGD,CAAJ;UACAA,CAAC,GAAGD,CAAJ;UACAA,CAAC,GAAGD,CAAJ;UACAA,CAAC,GAAIW,EAAE,GAAGC,EAAN,GAAY,CAAhB;QACD;;QAED3B,EAAE,GAAIA,EAAE,GAAGe,CAAN,GAAW,CAAhB;QACAd,EAAE,GAAIA,EAAE,GAAGe,CAAN,GAAW,CAAhB;QACAd,EAAE,GAAIA,EAAE,GAAGe,CAAN,GAAW,CAAhB;QACAd,EAAE,GAAIA,EAAE,GAAGe,CAAN,GAAW,CAAhB;QACAd,EAAE,GAAIA,EAAE,GAAGe,CAAN,GAAW,CAAhB;QACAd,EAAE,GAAIA,EAAE,GAAGe,CAAN,GAAW,CAAhB;QACAd,EAAE,GAAIA,EAAE,GAAGe,CAAN,GAAW,CAAhB;QACAd,EAAE,GAAIA,EAAE,GAAGe,CAAN,GAAW,CAAhB;QAEAV,GAAG,IAAI,EAAP;QACAC,GAAG,IAAI,EAAP;MACD;IACF;;IAEDH,MAAM,CAACZ,CAAD,CAAN;IAEA,IAAI0B,CAAJ;IAAA,IAAOI,SAAS,GAAG9B,CAAC,CAACgB,MAAF,GAAW,EAA9B;IAAA,IACIe,QAAQ,GAAI/B,CAAC,CAACgB,MAAF,GAAW,UAAZ,GAA0B,CADzC;IAAA,IAEIgB,QAAQ,GAAGhC,CAAC,CAACgB,MAAF,IAAY,CAF3B;IAAA,IAGIiB,QAAQ,GAAIH,SAAS,GAAG,EAAb,GAAmB,EAAnB,GAAwB,GAHvC;IAAA,IAIIjB,CAAC,GAAGb,CAAC,CAACkC,KAAF,CAAQlC,CAAC,CAACgB,MAAF,GAAWc,SAAnB,EAA8B9B,CAAC,CAACgB,MAAhC,CAJR;IAMAH,CAAC,CAACsB,IAAF,CAAO,IAAP;;IACA,KAAKT,CAAC,GAAGI,SAAS,GAAG,CAArB,EAAwBJ,CAAC,GAAGO,QAA5B,EAAsCP,CAAC,EAAvC,EAA2Cb,CAAC,CAACsB,IAAF,CAAO,CAAP;;IAC3CtB,CAAC,CAACsB,IAAF,CAAQJ,QAAQ,KAAG,EAAZ,GAAkB,IAAzB;IACAlB,CAAC,CAACsB,IAAF,CAAQJ,QAAQ,KAAG,EAAZ,GAAkB,IAAzB;IACAlB,CAAC,CAACsB,IAAF,CAAQJ,QAAQ,KAAG,CAAZ,GAAkB,IAAzB;IACAlB,CAAC,CAACsB,IAAF,CAAQJ,QAAQ,KAAG,CAAZ,GAAkB,IAAzB;IACAlB,CAAC,CAACsB,IAAF,CAAQH,QAAQ,KAAG,EAAZ,GAAkB,IAAzB;IACAnB,CAAC,CAACsB,IAAF,CAAQH,QAAQ,KAAG,EAAZ,GAAkB,IAAzB;IACAnB,CAAC,CAACsB,IAAF,CAAQH,QAAQ,KAAG,CAAZ,GAAkB,IAAzB;IACAnB,CAAC,CAACsB,IAAF,CAAQH,QAAQ,KAAG,CAAZ,GAAkB,IAAzB;IAEApB,MAAM,CAACC,CAAD,CAAN;IAEA,OAAO,CACJX,EAAE,KAAG,EAAN,GAAY,IADP,EACcA,EAAE,KAAG,EAAN,GAAY,IADzB,EACgCA,EAAE,KAAG,CAAN,GAAW,IAD1C,EACiDA,EAAE,KAAG,CAAN,GAAW,IAD3D,EAEJC,EAAE,KAAG,EAAN,GAAY,IAFP,EAEcA,EAAE,KAAG,EAAN,GAAY,IAFzB,EAEgCA,EAAE,KAAG,CAAN,GAAW,IAF1C,EAEiDA,EAAE,KAAG,CAAN,GAAW,IAF3D,EAGJC,EAAE,KAAG,EAAN,GAAY,IAHP,EAGcA,EAAE,KAAG,EAAN,GAAY,IAHzB,EAGgCA,EAAE,KAAG,CAAN,GAAW,IAH1C,EAGiDA,EAAE,KAAG,CAAN,GAAW,IAH3D,EAIJC,EAAE,KAAG,EAAN,GAAY,IAJP,EAIcA,EAAE,KAAG,EAAN,GAAY,IAJzB,EAIgCA,EAAE,KAAG,CAAN,GAAW,IAJ1C,EAIiDA,EAAE,KAAG,CAAN,GAAW,IAJ3D,EAKJC,EAAE,KAAG,EAAN,GAAY,IALP,EAKcA,EAAE,KAAG,EAAN,GAAY,IALzB,EAKgCA,EAAE,KAAG,CAAN,GAAW,IAL1C,EAKiDA,EAAE,KAAG,CAAN,GAAW,IAL3D,EAMJC,EAAE,KAAG,EAAN,GAAY,IANP,EAMcA,EAAE,KAAG,EAAN,GAAY,IANzB,EAMgCA,EAAE,KAAG,CAAN,GAAW,IAN1C,EAMiDA,EAAE,KAAG,CAAN,GAAW,IAN3D,EAOJC,EAAE,KAAG,EAAN,GAAY,IAPP,EAOcA,EAAE,KAAG,EAAN,GAAY,IAPzB,EAOgCA,EAAE,KAAG,CAAN,GAAW,IAP1C,EAOiDA,EAAE,KAAG,CAAN,GAAW,IAP3D,EAQJC,EAAE,KAAG,EAAN,GAAY,IARP,EAQcA,EAAE,KAAG,EAAN,GAAY,IARzB,EAQgCA,EAAE,KAAG,CAAN,GAAW,IAR1C,EAQiDA,EAAE,KAAG,CAAN,GAAW,IAR3D,CAAP;EAUD;;EAED,SAAS2B,0BAAT,CAAoC7C,QAApC,EAA8CC,IAA9C,EAAoDG,KAApD,EAA2D;IACzD;IACAJ,QAAQ,GAAGA,QAAQ,CAACyB,MAAT,IAAmB,EAAnB,GAAwBzB,QAAxB,GAAmCQ,MAAM,CAACR,QAAD,CAApD;IAEA,IAAImC,CAAJ;IAAA,IAAOW,QAAQ,GAAG,KAAK7C,IAAI,CAACwB,MAAV,GAAmB,CAArC;IAAA,IACIsB,KAAK,GAAG,IAAI3B,KAAJ,CAAU0B,QAAV,CADZ;IAAA,IAEIE,QAAQ,GAAG,IAAI5B,KAAJ,CAAU,EAAV,CAFf;IAAA,IAGI6B,EAAE,GAAG,EAHT,CAJyD,CASzD;;IACA,KAAKd,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyBY,KAAK,CAACZ,CAAD,CAAL,GAAW,IAAX;;IACzB,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGnC,QAAQ,CAACyB,MAAzB,EAAiCU,CAAC,EAAlC,EAAsCY,KAAK,CAACZ,CAAD,CAAL,IAAYnC,QAAQ,CAACmC,CAAD,CAApB;;IACtC,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGlC,IAAI,CAACwB,MAArB,EAA6BU,CAAC,EAA9B,EAAkCY,KAAK,CAAC,KAAGZ,CAAJ,CAAL,GAAclC,IAAI,CAACkC,CAAD,CAAlB;;IAClC,KAAKA,CAAC,GAAGW,QAAQ,GAAG,CAApB,EAAuBX,CAAC,GAAGW,QAA3B,EAAqCX,CAAC,EAAtC,EAA0CY,KAAK,CAACZ,CAAD,CAAL,GAAW,CAAX,CAbe,CAezD;;;IACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyBa,QAAQ,CAACb,CAAD,CAAR,GAAc,IAAd;;IACzB,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGnC,QAAQ,CAACyB,MAAzB,EAAiCU,CAAC,EAAlC,EAAsCa,QAAQ,CAACb,CAAD,CAAR,IAAenC,QAAQ,CAACmC,CAAD,CAAvB,CAjBmB,CAmBzD;;;IACA,SAASe,gBAAT,GAA4B;MAC1B,KAAK,IAAIf,CAAC,GAAGW,QAAQ,GAAC,CAAtB,EAAyBX,CAAC,IAAIW,QAAQ,GAAC,CAAvC,EAA0CX,CAAC,EAA3C,EAA+C;QAC7CY,KAAK,CAACZ,CAAD,CAAL;QACA,IAAIY,KAAK,CAACZ,CAAD,CAAL,IAAY,IAAhB,EAAsB;QACtBY,KAAK,CAACZ,CAAD,CAAL,GAAW,CAAX;MACD;IACF,CA1BwD,CA4BzD;;;IACA,OAAO/B,KAAK,IAAI,EAAhB,EAAoB;MAClB8C,gBAAgB;MAChBD,EAAE,GAAGA,EAAE,CAACE,MAAH,CAAU3C,MAAM,CAACwC,QAAQ,CAACG,MAAT,CAAgB3C,MAAM,CAACuC,KAAD,CAAtB,CAAD,CAAhB,CAAL;MACA3C,KAAK,IAAI,EAAT;IACD;;IACD,IAAIA,KAAK,GAAG,CAAZ,EAAe;MACb8C,gBAAgB;MAChBD,EAAE,GAAGA,EAAE,CAACE,MAAH,CAAU3C,MAAM,CAACwC,QAAQ,CAACG,MAAT,CAAgB3C,MAAM,CAACuC,KAAD,CAAtB,CAAD,CAAN,CAAuCJ,KAAvC,CAA6C,CAA7C,EAAgDvC,KAAhD,CAAV,CAAL;IACD;;IACD,OAAO6C,EAAP;EACD;;EAED,SAASG,QAAT,CAAkBC,GAAlB,EAAuBC,CAAvB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;IACnC,IAAIC,EAAE,GAAIJ,GAAG,CAAC,CAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAArB;IAAA,IACIG,EAAE,GAAIL,GAAG,CAAC,CAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CADrB;IAAA,IAEII,EAAE,GAAIN,GAAG,CAAC,CAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAFrB;IAAA,IAGIK,EAAE,GAAIP,GAAG,CAAC,CAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAHrB;IAAA,IAIIM,EAAE,GAAIR,GAAG,CAAC,CAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAJrB;IAAA,IAKIO,EAAE,GAAIT,GAAG,CAAC,CAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CALrB;IAAA,IAMIQ,EAAE,GAAIV,GAAG,CAAC,CAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CANrB;IAAA,IAOIS,EAAE,GAAIX,GAAG,CAAC,CAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAPrB;IAAA,IAQIU,EAAE,GAAIZ,GAAG,CAAC,CAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CARrB;IAAA,IASIW,EAAE,GAAIb,GAAG,CAAC,CAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CATrB;IAAA,IAUIY,GAAG,GAAGd,GAAG,CAAC,EAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAVrB;IAAA,IAWIa,GAAG,GAAGf,GAAG,CAAC,EAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAXrB;IAAA,IAYIc,GAAG,GAAGhB,GAAG,CAAC,EAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAZrB;IAAA,IAaIe,GAAG,GAAGjB,GAAG,CAAC,EAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAbrB;IAAA,IAcIgB,GAAG,GAAGlB,GAAG,CAAC,EAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAdrB;IAAA,IAeIiB,GAAG,GAAGnB,GAAG,CAAC,EAAD,CAAH,GAAUC,CAAC,CAACC,GAAG,EAAJ,CAfrB;IAAA,IAgBIrB,CAhBJ;IAAA,IAgBOC,CAhBP;IAkBA,IAAIsC,EAAE,GAAGhB,EAAT;IAAA,IAAaiB,EAAE,GAAGhB,EAAlB;IAAA,IAAsBiB,EAAE,GAAGhB,EAA3B;IAAA,IAA+BiB,EAAE,GAAGhB,EAApC;IAAA,IAAwCiB,EAAE,GAAGhB,EAA7C;IAAA,IAAiDiB,EAAE,GAAGhB,EAAtD;IAAA,IAA0DiB,EAAE,GAAGhB,EAA/D;IAAA,IAAmEiB,EAAE,GAAGhB,EAAxE;IAAA,IACIiB,EAAE,GAAGhB,EADT;IAAA,IACaiB,EAAE,GAAGhB,EADlB;IAAA,IACsBiB,GAAG,GAAGhB,GAD5B;IAAA,IACiCiB,GAAG,GAAGhB,GADvC;IAAA,IAC4CiB,GAAG,GAAGhB,GADlD;IAAA,IACuDiB,GAAG,GAAGhB,GAD7D;IAAA,IACkEiB,GAAG,GAAGhB,GADxE;IAAA,IAEIiB,GAAG,GAAGhB,GAFV;;IAIA,KAAKrC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,IAAI,CAAxB,EAA2B;MACzBD,CAAC,GAAIuC,EAAE,GAAGY,GAAV;MAAiBR,EAAE,IAAI3C,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAI2C,EAAE,GAAIJ,EAAX;MAAiBQ,EAAE,IAAI/C,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAI+C,EAAE,GAAIJ,EAAX;MAAgBQ,GAAG,IAAInD,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAvB;MAChBA,CAAC,GAAGmD,GAAG,GAAIJ,EAAX;MAAiBR,EAAE,IAAIvC,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAtB;MAEjBA,CAAC,GAAI4C,EAAE,GAAIJ,EAAX;MAAiBQ,EAAE,IAAIhD,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAIgD,EAAE,GAAIJ,EAAX;MAAgBQ,GAAG,IAAIpD,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAvB;MAChBA,CAAC,GAAGoD,GAAG,GAAIJ,EAAX;MAAiBR,EAAE,IAAIxC,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAtB;MACjBA,CAAC,GAAIwC,EAAE,GAAGY,GAAV;MAAiBR,EAAE,IAAI5C,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAtB;MAEjBA,CAAC,GAAGiD,GAAG,GAAIJ,EAAX;MAAgBQ,GAAG,IAAIrD,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAvB;MAChBA,CAAC,GAAGqD,GAAG,GAAGJ,GAAV;MAAiBR,EAAE,IAAIzC,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAIyC,EAAE,GAAGY,GAAV;MAAiBR,EAAE,IAAI7C,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAtB;MACjBA,CAAC,GAAI6C,EAAE,GAAIJ,EAAX;MAAgBQ,GAAG,IAAIjD,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAvB;MAEhBA,CAAC,GAAGsD,GAAG,GAAGJ,GAAV;MAAiBR,EAAE,IAAI1C,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAI0C,EAAE,GAAGY,GAAV;MAAiBR,EAAE,IAAI9C,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAI8C,EAAE,GAAIJ,EAAX;MAAgBQ,GAAG,IAAIlD,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAvB;MAChBA,CAAC,GAAGkD,GAAG,GAAIJ,EAAX;MAAgBQ,GAAG,IAAItD,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAvB;MAEhBA,CAAC,GAAIuC,EAAE,GAAIG,EAAX;MAAiBF,EAAE,IAAIxC,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAIwC,EAAE,GAAID,EAAX;MAAiBE,EAAE,IAAIzC,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAIyC,EAAE,GAAID,EAAX;MAAiBE,EAAE,IAAI1C,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAtB;MACjBA,CAAC,GAAI0C,EAAE,GAAID,EAAX;MAAiBF,EAAE,IAAIvC,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAtB;MAEjBA,CAAC,GAAI4C,EAAE,GAAID,EAAX;MAAiBE,EAAE,IAAI7C,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAI6C,EAAE,GAAID,EAAX;MAAiBE,EAAE,IAAI9C,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAI8C,EAAE,GAAID,EAAX;MAAiBF,EAAE,IAAI3C,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAtB;MACjBA,CAAC,GAAI2C,EAAE,GAAIG,EAAX;MAAiBF,EAAE,IAAI5C,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAtB;MAEjBA,CAAC,GAAGiD,GAAG,GAAID,EAAX;MAAgBE,GAAG,IAAIlD,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAvB;MAChBA,CAAC,GAAGkD,GAAG,GAAGD,GAAV;MAAiBF,EAAE,IAAI/C,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAtB;MACjBA,CAAC,GAAI+C,EAAE,GAAGG,GAAV;MAAiBF,EAAE,IAAIhD,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAtB;MACjBA,CAAC,GAAIgD,EAAE,GAAID,EAAX;MAAgBE,GAAG,IAAIjD,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAvB;MAEhBA,CAAC,GAAGsD,GAAG,GAAGD,GAAV;MAAgBF,GAAG,IAAInD,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAvB;MAChBA,CAAC,GAAGmD,GAAG,GAAGG,GAAV;MAAgBF,GAAG,IAAIpD,CAAC,IAAE,CAAH,GAAQA,CAAC,KAAI,KAAG,CAAvB;MAChBA,CAAC,GAAGoD,GAAG,GAAGD,GAAV;MAAgBE,GAAG,IAAIrD,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAvB;MAChBA,CAAC,GAAGqD,GAAG,GAAGD,GAAV;MAAgBE,GAAG,IAAItD,CAAC,IAAE,EAAH,GAAQA,CAAC,KAAI,KAAG,EAAvB;IACjB;;IAEDoB,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,CAAD,CAAH,GAAWoB,EAAE,GAAIhB,EAAP,GAAc,CAApC;IACAH,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,CAAD,CAAH,GAAWqB,EAAE,GAAIhB,EAAP,GAAc,CAApC;IACAJ,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,CAAD,CAAH,GAAWsB,EAAE,GAAIhB,EAAP,GAAc,CAApC;IACAL,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,CAAD,CAAH,GAAWuB,EAAE,GAAIhB,EAAP,GAAc,CAApC;IACAN,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,CAAD,CAAH,GAAWwB,EAAE,GAAIhB,EAAP,GAAc,CAApC;IACAP,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,CAAD,CAAH,GAAWyB,EAAE,GAAIhB,EAAP,GAAc,CAApC;IACAR,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,CAAD,CAAH,GAAW0B,EAAE,GAAIhB,EAAP,GAAc,CAApC;IACAT,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,CAAD,CAAH,GAAW2B,EAAE,GAAIhB,EAAP,GAAc,CAApC;IACAV,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,CAAD,CAAH,GAAW4B,EAAE,GAAIhB,EAAP,GAAc,CAApC;IACAX,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,CAAD,CAAH,GAAW6B,EAAE,GAAIhB,EAAP,GAAc,CAApC;IACAZ,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,EAAD,CAAH,GAAW8B,GAAG,GAAGhB,GAAP,GAAc,CAApC;IACAb,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,EAAD,CAAH,GAAW+B,GAAG,GAAGhB,GAAP,GAAc,CAApC;IACAd,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,EAAD,CAAH,GAAWgC,GAAG,GAAGhB,GAAP,GAAc,CAApC;IACAf,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,EAAD,CAAH,GAAWiC,GAAG,GAAGhB,GAAP,GAAc,CAApC;IACAhB,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,EAAD,CAAH,GAAWkC,GAAG,GAAGhB,GAAP,GAAc,CAApC;IACAjB,CAAC,CAACE,IAAI,EAAL,CAAD,GAAYH,GAAG,CAAC,EAAD,CAAH,GAAWmC,GAAG,GAAGhB,GAAP,GAAc,CAApC;EACD;;EAED,SAASiB,SAAT,CAAmBC,GAAnB,EAAwBC,EAAxB,EAA4BC,GAA5B,EAAiCC,EAAjC,EAAqCrE,GAArC,EAA0C;IACxC,OAAOA,GAAG,EAAV,EAAckE,GAAG,CAACC,EAAE,EAAH,CAAH,GAAYC,GAAG,CAACC,EAAE,EAAH,CAAf;EACf;;EAED,SAASC,QAAT,CAAkBJ,GAAlB,EAAuBC,EAAvB,EAA2BC,GAA3B,EAAgCC,EAAhC,EAAoCrE,GAApC,EAAyC;IACvC,OAAOA,GAAG,EAAV,EAAckE,GAAG,CAACC,EAAE,EAAH,CAAH,IAAaC,GAAG,CAACC,EAAE,EAAH,CAAhB;EACf;;EAED,SAASE,QAAT,CAAkB1C,GAAlB,EAAuBC,CAAvB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCrD,CAArC,EAAwC;IACtCsF,SAAS,CAACpC,GAAD,EAAM,CAAN,EAASC,CAAT,EAAYC,GAAG,GAAG,CAAC,IAAEpD,CAAF,GAAI,CAAL,IAAQ,EAA1B,EAA8B,EAA9B,CAAT;;IACA,KAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAAEhC,CAAtB,EAAyBgC,CAAC,IAAI,CAA9B,EAAiC;MAC/BiB,QAAQ,CAACC,GAAD,EAAMC,CAAN,EAASC,GAAG,GAAGpB,CAAC,GAAC,EAAjB,EAA0BqB,IAAI,GAAGrB,CAAC,GAAC,CAAnC,CAAR;MACAiB,QAAQ,CAACC,GAAD,EAAMC,CAAN,EAASC,GAAG,GAAGpB,CAAC,GAAC,EAAR,GAAa,EAAtB,EAA0BqB,IAAI,GAAGrB,CAAC,GAAC,CAAT,GAAahC,CAAC,GAAC,EAAzC,CAAR;IACD;EACF;;EAED,SAAS6F,UAAT,CAAoB1C,CAApB,EAAuB2C,EAAvB,EAA2B9F,CAA3B,EAA8B;IAC5B,OAAOmD,CAAC,CAAC2C,EAAE,GAAC,CAAC,IAAE9F,CAAF,GAAI,CAAL,IAAQ,EAAZ,CAAR;EACD;;EAED,SAAS+F,iBAAT,CAA2BC,CAA3B,EAA8B;IAC5B,IAAIC,GAAG,GAAG,EAAV;;IACA,KAAK,IAAIjE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgE,CAAC,CAAC1E,MAAtB,EAA8BU,CAAC,EAA/B,EAAmC;MACjC,IAAIP,CAAC,GAAGuE,CAAC,CAACE,UAAF,CAAalE,CAAb,CAAR;;MACA,IAAIP,CAAC,GAAG,IAAR,EAAc;QACZwE,GAAG,CAACxD,IAAJ,CAAShB,CAAT;MACD,CAFD,MAEO,IAAIA,CAAC,GAAG,KAAR,EAAe;QACpBwE,GAAG,CAACxD,IAAJ,CAAS,OAAOhB,CAAC,IAAI,CAArB;QACAwE,GAAG,CAACxD,IAAJ,CAAS,OAAOhB,CAAC,GAAG,IAApB;MACD,CAHM,MAGA,IAAIA,CAAC,GAAG,MAAR,EAAgB;QACrBwE,GAAG,CAACxD,IAAJ,CAAS,OAAOhB,CAAC,IAAI,EAArB;QACAwE,GAAG,CAACxD,IAAJ,CAAS,OAAQhB,CAAC,IAAI,CAAN,GAAW,IAA3B;QACAwE,GAAG,CAACxD,IAAJ,CAAS,OAAOhB,CAAC,GAAG,IAApB;MACD,CAJM,MAIA;QACL,IAAIO,CAAC,IAAIgE,CAAC,CAAC1E,MAAF,GAAW,CAApB,EAAuB;UACrB,MAAM,IAAI6E,KAAJ,CAAU,gBAAV,CAAN;QACD;;QACDnE,CAAC,GAJI,CAIA;;QACLP,CAAC,GAAG,CAACA,CAAC,GAAG,KAAL,KAAe,EAAnB;QACAA,CAAC,IAAIuE,CAAC,CAACE,UAAF,CAAalE,CAAb,IAAkB,KAAvB;QACAP,CAAC,IAAI,OAAL;QAEAwE,GAAG,CAACxD,IAAJ,CAAS,OAAOhB,CAAC,IAAI,EAArB;QACAwE,GAAG,CAACxD,IAAJ,CAAS,OAAQhB,CAAC,IAAI,EAAN,GAAY,IAA5B;QACAwE,GAAG,CAACxD,IAAJ,CAAS,OAAQhB,CAAC,IAAI,CAAN,GAAW,IAA3B;QACAwE,GAAG,CAACxD,IAAJ,CAAS,OAAOhB,CAAC,GAAG,IAApB;MACD;IACF;;IACD,OAAOwE,GAAP;EACD;;EAED,SAASG,UAAT,CAAoBjF,CAApB,EAAuB;IACrB;IACA,IAAIkF,GAAG,GAAG,mBAAmBC,KAAnB,CAAyB,EAAzB,CAAV;IAEA,IAAIjF,GAAG,GAAGF,CAAC,CAACG,MAAZ;IAAA,IACI2E,GAAG,GAAG,EADV;IAAA,IAEIjE,CAAC,GAAG,CAFR;;IAIA,OAAOA,CAAC,GAAGX,GAAX,EAAgBW,CAAC,EAAjB,EAAqB;MACjBiE,GAAG,CAACxD,IAAJ,CAAS4D,GAAG,CAAElF,CAAC,CAACa,CAAD,CAAD,KAAO,CAAR,GAAa,EAAd,CAAZ;MACAiE,GAAG,CAACxD,IAAJ,CAAS4D,GAAG,CAAElF,CAAC,CAACa,CAAD,CAAD,KAAO,CAAR,GAAa,EAAd,CAAZ;IACH;;IACD,OAAOiE,GAAG,CAACM,IAAJ,CAAS,EAAT,CAAP;EACD;;EAED,SAASC,aAAT,CAAuBrF,CAAvB,EAA0B;IACxB;IACA,IAAIkF,GAAG,GAAG,CAAC,yDACD,cADA,EACgBC,KADhB,CACsB,EADtB,CAAV;IAGA,IAAIjF,GAAG,GAAGF,CAAC,CAACG,MAAZ;IAAA,IACI2E,GAAG,GAAG,EADV;IAAA,IAEIjE,CAAC,GAAG,CAFR;IAAA,IAGIT,CAHJ;IAAA,IAGOC,CAHP;IAAA,IAGUC,CAHV;IAAA,IAGagF,CAHb;;IAKA,OAAOzE,CAAC,GAAGX,GAAX,EAAgB;MACdE,CAAC,GAAGS,CAAC,GAAGX,GAAJ,GAAUF,CAAC,CAACa,CAAC,EAAF,CAAX,GAAmB,CAAvB;MACAR,CAAC,GAAGQ,CAAC,GAAGX,GAAJ,GAAUF,CAAC,CAACa,CAAC,EAAF,CAAX,GAAmB,CAAvB;MACAP,CAAC,GAAGO,CAAC,GAAGX,GAAJ,GAAUF,CAAC,CAACa,CAAC,EAAF,CAAX,GAAmB,CAAvB;MACAyE,CAAC,GAAG,CAAClF,CAAC,IAAI,EAAN,KAAaC,CAAC,IAAI,CAAlB,IAAuBC,CAA3B;MACAwE,GAAG,CAACxD,IAAJ,CAAS4D,GAAG,CAAEI,CAAC,KAAK,IAAI,CAAX,GAAgB,EAAjB,CAAZ;MACAR,GAAG,CAACxD,IAAJ,CAAS4D,GAAG,CAAEI,CAAC,KAAK,IAAI,CAAX,GAAgB,EAAjB,CAAZ;MACAR,GAAG,CAACxD,IAAJ,CAAS4D,GAAG,CAAEI,CAAC,KAAK,IAAI,CAAX,GAAgB,EAAjB,CAAZ;MACAR,GAAG,CAACxD,IAAJ,CAAS4D,GAAG,CAAEI,CAAC,KAAK,IAAI,CAAX,GAAgB,EAAjB,CAAZ;IACD;;IACD,IAAIpF,GAAG,GAAG,CAAN,GAAU,CAAd,EAAiB;MACf4E,GAAG,CAACA,GAAG,CAAC3E,MAAJ,GAAW,CAAZ,CAAH,GAAoB,GAApB;MACA,IAAID,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB4E,GAAG,CAACA,GAAG,CAAC3E,MAAJ,GAAW,CAAZ,CAAH,GAAoB,GAApB;IACpB;;IACD,OAAO2E,GAAG,CAACM,IAAJ,CAAS,EAAT,CAAP;EACD,CAtUgF,CAyUjF;;;EAEA,IAAIG,QAAQ,GAAI,CAAC,CAAF,KAAO,CAAtB;EAAA,IACIvF,CAAC,GAAG,CADR;;EAGA,IAAI,OAAOpB,IAAP,KAAgB,QAApB,EAA8B;IAC5B;IACA,IAAI4G,SAAS,CAACrF,MAAV,GAAmB,CAAvB,EAA0B;MACxB,MAAM,IAAI6E,KAAJ,CAAU,uCAAV,CAAN;IACD;;IAED,IAAIS,IAAI,GAAG7G,IAAX;IAEAI,QAAQ,GAAGH,CAAX;IACAD,IAAI,GAAG6G,IAAI,CAAC7G,IAAZ;;IACA,IAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;MAC/B,IAAI,OAAO6G,IAAI,CAACC,CAAZ,KAAkB,WAAtB,EAAmC;QACjC,IAAID,IAAI,CAACC,CAAL,GAAS,CAAT,IAAcD,IAAI,CAACC,CAAL,GAASH,QAA3B,EACE,MAAM,IAAIP,KAAJ,CAAU,2BAAV,CAAN;QAEF,IAAI,CAACS,IAAI,CAACC,CAAL,GAAUD,IAAI,CAACC,CAAL,GAAS,CAApB,MAA4B,CAAhC,EACE,MAAM,IAAIV,KAAJ,CAAU,+BAAV,CAAN;QAEFpG,IAAI,GAAG+G,IAAI,CAACC,GAAL,CAASH,IAAI,CAACC,CAAd,IAAmBC,IAAI,CAACE,GAA/B;MACD,CARD,MAQO;QACL,MAAM,IAAIb,KAAJ,CAAU,6BAAV,CAAN;MACD;IACF;;IACDhF,CAAC,GAAGyF,IAAI,CAACzF,CAAL,IAAU,CAAd;IACAnB,CAAC,GAAG4G,IAAI,CAAC5G,CAAT;IACAC,KAAK,GAAG2G,IAAI,CAAC3G,KAAL,IAAc,EAAtB;IACAC,aAAa,GAAG0G,IAAI,CAAC1G,aAAL,IAAsB,CAAtC;IACAE,QAAQ,GAAGwG,IAAI,CAACxG,QAAhB;EACD;;EAED,IAAIe,CAAC,GAAG,CAAR,EACE,MAAM,IAAIgF,KAAJ,CAAU,mBAAV,CAAN;EAEF,IAAInG,CAAC,IAAI,CAAT,EACE,MAAM,IAAImG,KAAJ,CAAU,mBAAV,CAAN;EAEF,IAAIpG,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,EAAvB,EACE,MAAM,IAAIoG,KAAJ,CAAU,uCAAV,CAAN;EAGF,IAAIU,CAAC,GAAI,KAAG9G,IAAJ,KAAY,CAApB;EAAA,IACIkH,EADJ;EAAA,IACQC,CADR;EAAA,IACW/D,CADX;EAAA,IACcD,GADd;EAGA,IAAIlD,CAAC,GAACmB,CAAF,IAAO,KAAG,EAAV,IAAgBnB,CAAC,GAAG0G,QAAQ,GAAC,GAAT,GAAavF,CAAjC,IAAsCnB,CAAC,GAAG0G,QAAQ,GAAC,GAAnD,IAA0DG,CAAC,GAAGH,QAAQ,GAAC,GAAT,GAAa1G,CAA/E,EACE,MAAM,IAAImG,KAAJ,CAAU,kCAAV,CAAN,CA1X+E,CA4XjF;;EACA,IAAI,OAAOtG,QAAP,KAAoB,QAAxB,EACEA,QAAQ,GAAGkG,iBAAiB,CAAClG,QAAD,CAA5B;EACF,IAAI,OAAOC,IAAP,KAAgB,QAApB,EACEA,IAAI,GAAGiG,iBAAiB,CAACjG,IAAD,CAAxB;;EAEF,IAAI,OAAOqH,UAAP,KAAsB,WAA1B,EAAuC;IACrC;IACAF,EAAE,GAAG,IAAIE,UAAJ,CAAe,KAAGnH,CAAlB,CAAL;IACAkH,CAAC,GAAG,IAAIC,UAAJ,CAAe,KAAGN,CAAH,GAAK7G,CAApB,CAAJ;IACAkD,GAAG,GAAG,IAAIiE,UAAJ,CAAe,EAAf,CAAN;EACD,CALD,MAKO;IACLF,EAAE,GAAG,EAAL;IACAC,CAAC,GAAG,EAAJ;IACAhE,GAAG,GAAG,IAAIjC,KAAJ,CAAU,EAAV,CAAN;EACD;;EACDkC,CAAC,GAAGT,0BAA0B,CAAC7C,QAAD,EAAWC,IAAX,EAAiBqB,CAAC,GAAC,GAAF,GAAMnB,CAAvB,CAA9B;EAEA,IAAIoH,EAAE,GAAG,CAAT;EAAA,IAAYC,EAAE,GAAG,KAAKrH,CAAtB;;EAEA,SAASsH,SAAT,CAAmBC,GAAnB,EAAwB;IACtB,KAAK,IAAIvF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAGhC,CAAvB,EAA0BgC,CAAC,EAA3B,EAA+B;MAC7B,IAAIC,CAAC,GAAGsF,GAAG,GAAGvF,CAAC,GAAC,CAAhB;MACAiF,EAAE,CAACG,EAAE,GAACpF,CAAJ,CAAF,GAAY,CAACmB,CAAC,CAAClB,CAAC,GAAC,CAAH,CAAD,GAAS,IAAV,KAAiB,EAAlB,GAAyB,CAACkB,CAAC,CAAClB,CAAC,GAAC,CAAH,CAAD,GAAS,IAAV,KAAiB,EAA1C,GACC,CAACkB,CAAC,CAAClB,CAAC,GAAC,CAAH,CAAD,GAAS,IAAV,KAAiB,CADlB,GACyB,CAACkB,CAAC,CAAClB,CAAC,GAAC,CAAH,CAAD,GAAS,IAAV,KAAiB,CADrD;IAED;EACF;;EAED,SAASuF,SAAT,CAAmBC,KAAnB,EAA0BC,GAA1B,EAA+B;IAC7B,KAAK,IAAI1F,CAAC,GAAGyF,KAAb,EAAoBzF,CAAC,GAAG0F,GAAxB,EAA6B1F,CAAC,IAAI,CAAlC,EAAqC;MACnCsD,SAAS,CAAC4B,CAAD,EAAIlF,CAAC,IAAE,KAAGhC,CAAL,CAAL,EAAciH,EAAd,EAAkBG,EAAlB,EAAsB,KAAGpH,CAAzB,CAAT;MACA4F,QAAQ,CAAC1C,GAAD,EAAM+D,EAAN,EAAUG,EAAV,EAAcC,EAAd,EAAkBrH,CAAlB,CAAR;MAEAsF,SAAS,CAAC4B,CAAD,EAAI,CAAClF,CAAC,GAAC,CAAH,KAAO,KAAGhC,CAAV,CAAJ,EAAkBiH,EAAlB,EAAsBI,EAAtB,EAA0B,KAAGrH,CAA7B,CAAT;MACA4F,QAAQ,CAAC1C,GAAD,EAAM+D,EAAN,EAAUI,EAAV,EAAcD,EAAd,EAAkBpH,CAAlB,CAAR;IACD;EACF;;EAED,SAAS2H,SAAT,CAAmBF,KAAnB,EAA0BC,GAA1B,EAA+B;IAC7B,KAAK,IAAI1F,CAAC,GAAGyF,KAAb,EAAoBzF,CAAC,GAAG0F,GAAxB,EAA6B1F,CAAC,IAAI,CAAlC,EAAqC;MACnC,IAAIC,CAAC,GAAG4D,UAAU,CAACoB,EAAD,EAAKG,EAAL,EAASpH,CAAT,CAAV,GAAyB6G,CAAC,GAAC,CAAnC;MACAlB,QAAQ,CAACsB,EAAD,EAAKG,EAAL,EAASF,CAAT,EAAYjF,CAAC,IAAE,KAAGjC,CAAL,CAAb,EAAsB,KAAGA,CAAzB,CAAR;MACA4F,QAAQ,CAAC1C,GAAD,EAAM+D,EAAN,EAAUG,EAAV,EAAcC,EAAd,EAAkBrH,CAAlB,CAAR;MAEAiC,CAAC,GAAG4D,UAAU,CAACoB,EAAD,EAAKI,EAAL,EAASrH,CAAT,CAAV,GAAyB6G,CAAC,GAAC,CAA/B;MACAlB,QAAQ,CAACsB,EAAD,EAAKI,EAAL,EAASH,CAAT,EAAYjF,CAAC,IAAE,KAAGjC,CAAL,CAAb,EAAsB,KAAGA,CAAzB,CAAR;MACA4F,QAAQ,CAAC1C,GAAD,EAAM+D,EAAN,EAAUI,EAAV,EAAcD,EAAd,EAAkBpH,CAAlB,CAAR;IACD;EACF;;EAED,SAAS4H,UAAT,CAAoBL,GAApB,EAAyB;IACvB,KAAK,IAAIvF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAGhC,CAAvB,EAA0BgC,CAAC,EAA3B,EAA+B;MAC7B,IAAIC,CAAC,GAAGgF,EAAE,CAACG,EAAE,GAACpF,CAAJ,CAAV;MACAmB,CAAC,CAACoE,GAAG,GAAGvF,CAAC,GAAC,CAAR,GAAY,CAAb,CAAD,GAAoBC,CAAC,KAAG,CAAL,GAAW,IAA9B;MACAkB,CAAC,CAACoE,GAAG,GAAGvF,CAAC,GAAC,CAAR,GAAY,CAAb,CAAD,GAAoBC,CAAC,KAAG,CAAL,GAAW,IAA9B;MACAkB,CAAC,CAACoE,GAAG,GAAGvF,CAAC,GAAC,CAAR,GAAY,CAAb,CAAD,GAAoBC,CAAC,KAAG,EAAL,GAAW,IAA9B;MACAkB,CAAC,CAACoE,GAAG,GAAGvF,CAAC,GAAC,CAAR,GAAY,CAAb,CAAD,GAAoBC,CAAC,KAAG,EAAL,GAAW,IAA9B;IACD;EACF;;EAED,IAAI4F,QAAQ,GAAI,OAAOC,YAAP,KAAwB,WAAzB,GAAwCA,YAAxC,GAAuDC,UAAtE;;EAEA,SAASC,cAAT,CAAwBP,KAAxB,EAA+BC,GAA/B,EAAoCO,IAApC,EAA0CC,EAA1C,EAA8CC,MAA9C,EAAsD;IACpD,CAAC,SAASC,WAAT,GAAuB;MACtBP,QAAQ,CAAC,YAAW;QAClBK,EAAE,CAACT,KAAD,EAAQA,KAAK,GAAGQ,IAAR,GAAeP,GAAf,GAAqBD,KAAK,GAAGQ,IAA7B,GAAoCP,GAA5C,CAAF;QACAD,KAAK,IAAIQ,IAAT;QACA,IAAIR,KAAK,GAAGC,GAAZ,EACEU,WAAW,GADb,KAGED,MAAM;MACP,CAPK,CAAR;IAQD,CATD;EAUD;;EAED,SAASE,SAAT,CAAmBhC,GAAnB,EAAwB;IACpB,IAAIiC,MAAM,GAAG5F,0BAA0B,CAAC7C,QAAD,EAAWsD,CAAX,EAAclD,KAAd,CAAvC;IACA,IAAIoG,GAAG,KAAK,QAAZ,EACE,OAAOG,aAAa,CAAC8B,MAAD,CAApB,CADF,KAEK,IAAIjC,GAAG,KAAK,KAAZ,EACH,OAAOD,UAAU,CAACkC,MAAD,CAAjB,CADG,KAEA,IAAIjC,GAAG,KAAK,QAAZ,EACH,OAAO,IAAIkC,UAAJ,CAAeD,MAAf,CAAP,CADG,KAGH,OAAOA,MAAP;EACL,CAjdgF,CAmdjF;;;EACA,SAASE,aAAT,GAAyB;IACvB,KAAK,IAAIxG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,CAApB,EAAuBa,CAAC,EAAxB,EAA4B;MAC1BsF,SAAS,CAACtF,CAAC,GAAC,GAAF,GAAMhC,CAAP,CAAT;MACAwH,SAAS,CAAC,CAAD,EAAIX,CAAJ,CAAT;MACAc,SAAS,CAAC,CAAD,EAAId,CAAJ,CAAT;MACAe,UAAU,CAAC5F,CAAC,GAAC,GAAF,GAAMhC,CAAP,CAAV;IACD;;IACDG,QAAQ,CAACkI,SAAS,CAACjI,QAAD,CAAV,CAAR;EACD,CA5dgF,CA8djF;;;EACA,SAASqI,cAAT,CAAwBzG,CAAxB,EAA2B;IACvBsF,SAAS,CAACtF,CAAC,GAAC,GAAF,GAAMhC,CAAP,CAAT;IACAgI,cAAc,CAAC,CAAD,EAAInB,CAAJ,EAAO3G,aAAa,GAAC,CAArB,EAAwBsH,SAAxB,EAAmC,YAAW;MAC1DQ,cAAc,CAAC,CAAD,EAAInB,CAAJ,EAAO3G,aAAa,GAAC,CAArB,EAAwByH,SAAxB,EAAmC,YAAY;QAC3DC,UAAU,CAAC5F,CAAC,GAAC,GAAF,GAAMhC,CAAP,CAAV;;QACA,IAAIgC,CAAC,GAAG,CAAJ,GAAQb,CAAZ,EAAe;UACb0G,QAAQ,CAAC,YAAW;YAAEY,cAAc,CAACzG,CAAC,GAAG,CAAL,CAAd;UAAwB,CAAtC,CAAR;QACD,CAFD,MAEO;UACL7B,QAAQ,CAACkI,SAAS,CAACjI,QAAD,CAAV,CAAR;QACD;MACF,CAPa,CAAd;IAQD,CATa,CAAd;EAUH;;EAED,IAAI,OAAOF,aAAP,KAAyB,UAA7B,EAAyC;IACvC;IACA;IACAE,QAAQ,GAAGD,QAAX;IACAA,QAAQ,GAAGD,aAAX;IACAA,aAAa,GAAG,IAAhB;EACD;;EAED,IAAIA,aAAa,IAAI,CAArB,EAAwB;IACtBsI,aAAa;EACd,CAFD,MAEO;IACLC,cAAc,CAAC,CAAD,CAAd;EACD;AACF;;AAED,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmCA,MAAM,CAACC,OAAP,GAAiB/I,MAAjB"},"metadata":{},"sourceType":"script"}