{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractCallPayloadBuilder = exports.ContractUpgradePayloadBuilder = exports.ContractDeployPayloadBuilder = exports.ArwenVirtualMachine = void 0;\n\nconst transactionPayload_1 = require(\"../transactionPayload\");\n\nconst utils_1 = require(\"../utils\");\n\nconst codeMetadata_1 = require(\"./codeMetadata\");\n\nconst argSerializer_1 = require(\"./argSerializer\");\n\nexports.ArwenVirtualMachine = \"0500\";\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract deployment transactions.\n */\n\nclass ContractDeployPayloadBuilder {\n  constructor() {\n    this.code = null;\n    this.codeMetadata = new codeMetadata_1.CodeMetadata();\n    this.arguments = [];\n  }\n  /**\n   * Sets the code of the Smart Contract.\n   */\n\n\n  setCode(code) {\n    this.code = code;\n    return this;\n  }\n  /**\n   * Sets the code metadata of the Smart Contract.\n   */\n\n\n  setCodeMetadata(codeMetadata) {\n    this.codeMetadata = codeMetadata;\n    return this;\n  }\n  /**\n   * Adds constructor (`init`) arguments.\n   */\n\n\n  addInitArg(arg) {\n    this.arguments.push(arg);\n    return this;\n  }\n  /**\n   * Sets constructor (`init`) arguments.\n   */\n\n\n  setInitArgs(args) {\n    this.arguments = args;\n    return this;\n  }\n  /**\n   * Builds the {@link TransactionPayload}.\n   */\n\n\n  build() {\n    utils_1.guardValueIsSet(\"code\", this.code);\n    let code = this.code.toString();\n    let codeMetadata = this.codeMetadata.toString();\n    let data = `${code}@${exports.ArwenVirtualMachine}@${codeMetadata}`;\n    data = appendArgumentsToString(data, this.arguments);\n    return new transactionPayload_1.TransactionPayload(data);\n  }\n\n}\n\nexports.ContractDeployPayloadBuilder = ContractDeployPayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract upgrade transactions.\n */\n\nclass ContractUpgradePayloadBuilder {\n  constructor() {\n    this.code = null;\n    this.codeMetadata = new codeMetadata_1.CodeMetadata();\n    this.arguments = [];\n  }\n  /**\n   * Sets the code of the Smart Contract.\n   */\n\n\n  setCode(code) {\n    this.code = code;\n    return this;\n  }\n  /**\n   * Sets the code metadata of the Smart Contract.\n   */\n\n\n  setCodeMetadata(codeMetadata) {\n    this.codeMetadata = codeMetadata;\n    return this;\n  }\n  /**\n   * Adds upgrade (`init`) arguments.\n   */\n\n\n  addInitArg(arg) {\n    this.arguments.push(arg);\n    return this;\n  }\n  /**\n   * Sets upgrade (`init`) arguments.\n   */\n\n\n  setInitArgs(args) {\n    this.arguments = args;\n    return this;\n  }\n  /**\n   * Builds the {@link TransactionPayload}.\n   */\n\n\n  build() {\n    utils_1.guardValueIsSet(\"code\", this.code);\n    let code = this.code.toString();\n    let codeMetadata = this.codeMetadata.toString();\n    let data = `upgradeContract@${code}@${codeMetadata}`;\n    data = appendArgumentsToString(data, this.arguments);\n    return new transactionPayload_1.TransactionPayload(data);\n  }\n\n}\n\nexports.ContractUpgradePayloadBuilder = ContractUpgradePayloadBuilder;\n/**\n * A builder for {@link TransactionPayload} objects, to be used for Smart Contract execution transactions.\n */\n\nclass ContractCallPayloadBuilder {\n  constructor() {\n    this.contractFunction = null;\n    this.arguments = [];\n  }\n  /**\n   * Sets the function to be called (executed).\n   */\n\n\n  setFunction(contractFunction) {\n    this.contractFunction = contractFunction;\n    return this;\n  }\n  /**\n   * Adds a function argument.\n   */\n\n\n  addArg(arg) {\n    this.arguments.push(arg);\n    return this;\n  }\n  /**\n   * Sets the function arguments.\n   */\n\n\n  setArgs(args) {\n    this.arguments = args;\n    return this;\n  }\n  /**\n   * Builds the {@link TransactionPayload}.\n   */\n\n\n  build() {\n    utils_1.guardValueIsSet(\"calledFunction\", this.contractFunction);\n    let data = this.contractFunction.name;\n    data = appendArgumentsToString(data, this.arguments);\n    return new transactionPayload_1.TransactionPayload(data);\n  }\n\n}\n\nexports.ContractCallPayloadBuilder = ContractCallPayloadBuilder;\n\nfunction appendArgumentsToString(to, values) {\n  if (values.length == 0) {\n    return to;\n  }\n\n  let argumentsString = new argSerializer_1.ArgSerializer().valuesToString(values);\n  return `${to}@${argumentsString}`;\n}","map":{"version":3,"mappings":"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","names":["exports","ContractDeployPayloadBuilder","constructor","codeMetadata_1","setCode","code","setCodeMetadata","codeMetadata","addInitArg","arg","arguments","push","setInitArgs","args","build","utils_1","toString","data","appendArgumentsToString","transactionPayload_1","ContractUpgradePayloadBuilder","ContractCallPayloadBuilder","setFunction","contractFunction","addArg","setArgs","name","to","values","length","argumentsString","argSerializer_1","valuesToString"],"sourceRoot":"","sources":["../../src/smartcontracts/transactionPayloadBuilders.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}