{"ast":null,"code":"!function (globals) {\n  'use strict'; //*** UMD BEGIN\n\n  if (typeof define !== 'undefined' && define.amd) {\n    //require.js / AMD\n    define([], function () {\n      return secureRandom;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    //CommonJS\n    module.exports = secureRandom;\n  } else {\n    //script / browser\n    globals.secureRandom = secureRandom;\n  } //*** UMD END\n  //options.type is the only valid option\n\n\n  function secureRandom(count, options) {\n    options = options || {\n      type: 'Array'\n    }; //we check for process.pid to prevent browserify from tricking us\n\n    if (typeof process != 'undefined' && typeof process.pid == 'number' && process.versions && process.versions.node) {\n      return nodeRandom(count, options);\n    } else {\n      var crypto = window.crypto || window.msCrypto;\n      if (!crypto) throw new Error(\"Your browser does not support window.crypto.\");\n      return browserRandom(count, options);\n    }\n  }\n\n  function nodeRandom(count, options) {\n    var crypto = require('crypto');\n\n    var buf = crypto.randomBytes(count);\n\n    switch (options.type) {\n      case 'Array':\n        return [].slice.call(buf);\n\n      case 'Buffer':\n        return buf;\n\n      case 'Uint8Array':\n        var arr = new Uint8Array(count);\n\n        for (var i = 0; i < count; ++i) {\n          arr[i] = buf.readUInt8(i);\n        }\n\n        return arr;\n\n      default:\n        throw new Error(options.type + \" is unsupported.\");\n    }\n  }\n\n  function browserRandom(count, options) {\n    var nativeArr = new Uint8Array(count);\n    var crypto = window.crypto || window.msCrypto;\n    crypto.getRandomValues(nativeArr);\n\n    switch (options.type) {\n      case 'Array':\n        return [].slice.call(nativeArr);\n\n      case 'Buffer':\n        try {\n          var b = new Buffer(1);\n        } catch (e) {\n          throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.');\n        }\n\n        return new Buffer(nativeArr);\n\n      case 'Uint8Array':\n        return nativeArr;\n\n      default:\n        throw new Error(options.type + \" is unsupported.\");\n    }\n  }\n\n  secureRandom.randomArray = function (byteCount) {\n    return secureRandom(byteCount, {\n      type: 'Array'\n    });\n  };\n\n  secureRandom.randomUint8Array = function (byteCount) {\n    return secureRandom(byteCount, {\n      type: 'Uint8Array'\n    });\n  };\n\n  secureRandom.randomBuffer = function (byteCount) {\n    return secureRandom(byteCount, {\n      type: 'Buffer'\n    });\n  };\n}(this);","map":{"version":3,"names":["globals","define","amd","secureRandom","module","exports","count","options","type","process","pid","versions","node","nodeRandom","crypto","window","msCrypto","Error","browserRandom","require","buf","randomBytes","slice","call","arr","Uint8Array","i","readUInt8","nativeArr","getRandomValues","b","Buffer","e","randomArray","byteCount","randomUint8Array","randomBuffer"],"sources":["C:/Users/acer/node_modules/secure-random/lib/secure-random.js"],"sourcesContent":["!function(globals){\n'use strict'\n\n//*** UMD BEGIN\nif (typeof define !== 'undefined' && define.amd) { //require.js / AMD\n  define([], function() {\n    return secureRandom\n  })\n} else if (typeof module !== 'undefined' && module.exports) { //CommonJS\n  module.exports = secureRandom\n} else { //script / browser\n  globals.secureRandom = secureRandom\n}\n//*** UMD END\n\n//options.type is the only valid option\nfunction secureRandom(count, options) {\n  options = options || {type: 'Array'}\n  //we check for process.pid to prevent browserify from tricking us\n  if (\n    typeof process != 'undefined'\n    && typeof process.pid == 'number'\n    && process.versions\n    && process.versions.node\n  ) {\n    return nodeRandom(count, options)\n  } else {\n    var crypto = window.crypto || window.msCrypto\n    if (!crypto) throw new Error(\"Your browser does not support window.crypto.\")\n    return browserRandom(count, options)\n  }\n}\n\nfunction nodeRandom(count, options) {\n  var crypto = require('crypto')\n  var buf = crypto.randomBytes(count)\n\n  switch (options.type) {\n    case 'Array':\n      return [].slice.call(buf)\n    case 'Buffer':\n      return buf\n    case 'Uint8Array':\n      var arr = new Uint8Array(count)\n      for (var i = 0; i < count; ++i) { arr[i] = buf.readUInt8(i) }\n      return arr\n    default:\n      throw new Error(options.type + \" is unsupported.\")\n  }\n}\n\nfunction browserRandom(count, options) {\n  var nativeArr = new Uint8Array(count)\n  var crypto = window.crypto || window.msCrypto\n  crypto.getRandomValues(nativeArr)\n\n  switch (options.type) {\n    case 'Array':\n      return [].slice.call(nativeArr)\n    case 'Buffer':\n      try { var b = new Buffer(1) } catch(e) { throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.')}\n      return new Buffer(nativeArr)\n    case 'Uint8Array':\n      return nativeArr\n    default:\n      throw new Error(options.type + \" is unsupported.\")\n  }\n}\n\nsecureRandom.randomArray = function(byteCount) {\n  return secureRandom(byteCount, {type: 'Array'})\n}\n\nsecureRandom.randomUint8Array = function(byteCount) {\n  return secureRandom(byteCount, {type: 'Uint8Array'})\n}\n\nsecureRandom.randomBuffer = function(byteCount) {\n  return secureRandom(byteCount, {type: 'Buffer'})\n}\n\n\n}(this);\n"],"mappings":"AAAA,CAAC,UAASA,OAAT,EAAiB;EAClB,aADkB,CAGlB;;EACA,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,GAA5C,EAAiD;IAAE;IACjDD,MAAM,CAAC,EAAD,EAAK,YAAW;MACpB,OAAOE,YAAP;IACD,CAFK,CAAN;EAGD,CAJD,MAIO,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,OAA5C,EAAqD;IAAE;IAC5DD,MAAM,CAACC,OAAP,GAAiBF,YAAjB;EACD,CAFM,MAEA;IAAE;IACPH,OAAO,CAACG,YAAR,GAAuBA,YAAvB;EACD,CAZiB,CAalB;EAEA;;;EACA,SAASA,YAAT,CAAsBG,KAAtB,EAA6BC,OAA7B,EAAsC;IACpCA,OAAO,GAAGA,OAAO,IAAI;MAACC,IAAI,EAAE;IAAP,CAArB,CADoC,CAEpC;;IACA,IACE,OAAOC,OAAP,IAAkB,WAAlB,IACG,OAAOA,OAAO,CAACC,GAAf,IAAsB,QADzB,IAEGD,OAAO,CAACE,QAFX,IAGGF,OAAO,CAACE,QAAR,CAAiBC,IAJtB,EAKE;MACA,OAAOC,UAAU,CAACP,KAAD,EAAQC,OAAR,CAAjB;IACD,CAPD,MAOO;MACL,IAAIO,MAAM,GAAGC,MAAM,CAACD,MAAP,IAAiBC,MAAM,CAACC,QAArC;MACA,IAAI,CAACF,MAAL,EAAa,MAAM,IAAIG,KAAJ,CAAU,8CAAV,CAAN;MACb,OAAOC,aAAa,CAACZ,KAAD,EAAQC,OAAR,CAApB;IACD;EACF;;EAED,SAASM,UAAT,CAAoBP,KAApB,EAA2BC,OAA3B,EAAoC;IAClC,IAAIO,MAAM,GAAGK,OAAO,CAAC,QAAD,CAApB;;IACA,IAAIC,GAAG,GAAGN,MAAM,CAACO,WAAP,CAAmBf,KAAnB,CAAV;;IAEA,QAAQC,OAAO,CAACC,IAAhB;MACE,KAAK,OAAL;QACE,OAAO,GAAGc,KAAH,CAASC,IAAT,CAAcH,GAAd,CAAP;;MACF,KAAK,QAAL;QACE,OAAOA,GAAP;;MACF,KAAK,YAAL;QACE,IAAII,GAAG,GAAG,IAAIC,UAAJ,CAAenB,KAAf,CAAV;;QACA,KAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,KAApB,EAA2B,EAAEoB,CAA7B,EAAgC;UAAEF,GAAG,CAACE,CAAD,CAAH,GAASN,GAAG,CAACO,SAAJ,CAAcD,CAAd,CAAT;QAA2B;;QAC7D,OAAOF,GAAP;;MACF;QACE,MAAM,IAAIP,KAAJ,CAAUV,OAAO,CAACC,IAAR,GAAe,kBAAzB,CAAN;IAVJ;EAYD;;EAED,SAASU,aAAT,CAAuBZ,KAAvB,EAA8BC,OAA9B,EAAuC;IACrC,IAAIqB,SAAS,GAAG,IAAIH,UAAJ,CAAenB,KAAf,CAAhB;IACA,IAAIQ,MAAM,GAAGC,MAAM,CAACD,MAAP,IAAiBC,MAAM,CAACC,QAArC;IACAF,MAAM,CAACe,eAAP,CAAuBD,SAAvB;;IAEA,QAAQrB,OAAO,CAACC,IAAhB;MACE,KAAK,OAAL;QACE,OAAO,GAAGc,KAAH,CAASC,IAAT,CAAcK,SAAd,CAAP;;MACF,KAAK,QAAL;QACE,IAAI;UAAE,IAAIE,CAAC,GAAG,IAAIC,MAAJ,CAAW,CAAX,CAAR;QAAuB,CAA7B,CAA8B,OAAMC,CAAN,EAAS;UAAE,MAAM,IAAIf,KAAJ,CAAU,0FAAV,CAAN;QAA4G;;QACrJ,OAAO,IAAIc,MAAJ,CAAWH,SAAX,CAAP;;MACF,KAAK,YAAL;QACE,OAAOA,SAAP;;MACF;QACE,MAAM,IAAIX,KAAJ,CAAUV,OAAO,CAACC,IAAR,GAAe,kBAAzB,CAAN;IATJ;EAWD;;EAEDL,YAAY,CAAC8B,WAAb,GAA2B,UAASC,SAAT,EAAoB;IAC7C,OAAO/B,YAAY,CAAC+B,SAAD,EAAY;MAAC1B,IAAI,EAAE;IAAP,CAAZ,CAAnB;EACD,CAFD;;EAIAL,YAAY,CAACgC,gBAAb,GAAgC,UAASD,SAAT,EAAoB;IAClD,OAAO/B,YAAY,CAAC+B,SAAD,EAAY;MAAC1B,IAAI,EAAE;IAAP,CAAZ,CAAnB;EACD,CAFD;;EAIAL,YAAY,CAACiC,YAAb,GAA4B,UAASF,SAAT,EAAoB;IAC9C,OAAO/B,YAAY,CAAC+B,SAAD,EAAY;MAAC1B,IAAI,EAAE;IAAP,CAAZ,CAAnB;EACD,CAFD;AAKC,CAlFA,CAkFC,IAlFD,CAAD"},"metadata":{},"sourceType":"script"}