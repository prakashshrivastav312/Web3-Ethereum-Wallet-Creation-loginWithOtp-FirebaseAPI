{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PathSet = void 0;\n\nvar account_id_1 = require(\"./account-id\");\n\nvar currency_1 = require(\"./currency\");\n\nvar binary_parser_1 = require(\"../serdes/binary-parser\");\n\nvar serialized_type_1 = require(\"./serialized-type\");\n\nvar buffer_1 = require(\"buffer/\");\n/**\n * Constants for separating Paths in a PathSet\n */\n\n\nvar PATHSET_END_BYTE = 0x00;\nvar PATH_SEPARATOR_BYTE = 0xff;\n/**\n * Constant for masking types of a Hop\n */\n\nvar TYPE_ACCOUNT = 0x01;\nvar TYPE_CURRENCY = 0x10;\nvar TYPE_ISSUER = 0x20;\n/**\n * TypeGuard for HopObject\n */\n\nfunction isHopObject(arg) {\n  return arg.issuer !== undefined || arg.account !== undefined || arg.currency !== undefined;\n}\n/**\n * TypeGuard for PathSet\n */\n\n\nfunction isPathSet(arg) {\n  return Array.isArray(arg) && arg.length === 0 || Array.isArray(arg) && Array.isArray(arg[0]) && arg[0].length === 0 || Array.isArray(arg) && Array.isArray(arg[0]) && isHopObject(arg[0][0]);\n}\n/**\n * Serialize and Deserialize a Hop\n */\n\n\nvar Hop =\n/** @class */\nfunction (_super) {\n  __extends(Hop, _super);\n\n  function Hop() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Create a Hop from a HopObject\n   *\n   * @param value Either a hop or HopObject to create a hop with\n   * @returns a Hop\n   */\n\n\n  Hop.from = function (value) {\n    if (value instanceof Hop) {\n      return value;\n    }\n\n    var bytes = [buffer_1.Buffer.from([0])];\n\n    if (value.account) {\n      bytes.push(account_id_1.AccountID.from(value.account).toBytes());\n      bytes[0][0] |= TYPE_ACCOUNT;\n    }\n\n    if (value.currency) {\n      bytes.push(currency_1.Currency.from(value.currency).toBytes());\n      bytes[0][0] |= TYPE_CURRENCY;\n    }\n\n    if (value.issuer) {\n      bytes.push(account_id_1.AccountID.from(value.issuer).toBytes());\n      bytes[0][0] |= TYPE_ISSUER;\n    }\n\n    return new Hop(buffer_1.Buffer.concat(bytes));\n  };\n  /**\n   * Construct a Hop from a BinaryParser\n   *\n   * @param parser BinaryParser to read the Hop from\n   * @returns a Hop\n   */\n\n\n  Hop.fromParser = function (parser) {\n    var type = parser.readUInt8();\n    var bytes = [buffer_1.Buffer.from([type])];\n\n    if (type & TYPE_ACCOUNT) {\n      bytes.push(parser.read(account_id_1.AccountID.width));\n    }\n\n    if (type & TYPE_CURRENCY) {\n      bytes.push(parser.read(currency_1.Currency.width));\n    }\n\n    if (type & TYPE_ISSUER) {\n      bytes.push(parser.read(account_id_1.AccountID.width));\n    }\n\n    return new Hop(buffer_1.Buffer.concat(bytes));\n  };\n  /**\n   * Get the JSON interpretation of this hop\n   *\n   * @returns a HopObject, an JS object with optional account, issuer, and currency\n   */\n\n\n  Hop.prototype.toJSON = function () {\n    var hopParser = new binary_parser_1.BinaryParser(this.bytes.toString('hex'));\n    var type = hopParser.readUInt8();\n    var account, currency, issuer;\n\n    if (type & TYPE_ACCOUNT) {\n      account = account_id_1.AccountID.fromParser(hopParser).toJSON();\n    }\n\n    if (type & TYPE_CURRENCY) {\n      currency = currency_1.Currency.fromParser(hopParser).toJSON();\n    }\n\n    if (type & TYPE_ISSUER) {\n      issuer = account_id_1.AccountID.fromParser(hopParser).toJSON();\n    }\n\n    var result = {};\n\n    if (account) {\n      result.account = account;\n    }\n\n    if (issuer) {\n      result.issuer = issuer;\n    }\n\n    if (currency) {\n      result.currency = currency;\n    }\n\n    return result;\n  };\n  /**\n   * get a number representing the type of this hop\n   *\n   * @returns a number to be bitwise and-ed with TYPE_ constants to describe the types in the hop\n   */\n\n\n  Hop.prototype.type = function () {\n    return this.bytes[0];\n  };\n\n  return Hop;\n}(serialized_type_1.SerializedType);\n/**\n * Class for serializing/deserializing Paths\n */\n\n\nvar Path =\n/** @class */\nfunction (_super) {\n  __extends(Path, _super);\n\n  function Path() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * construct a Path from an array of Hops\n   *\n   * @param value Path or array of HopObjects to construct a Path\n   * @returns the Path\n   */\n\n\n  Path.from = function (value) {\n    if (value instanceof Path) {\n      return value;\n    }\n\n    var bytes = [];\n    value.forEach(function (hop) {\n      bytes.push(Hop.from(hop).toBytes());\n    });\n    return new Path(buffer_1.Buffer.concat(bytes));\n  };\n  /**\n   * Read a Path from a BinaryParser\n   *\n   * @param parser BinaryParser to read Path from\n   * @returns the Path represented by the bytes read from the BinaryParser\n   */\n\n\n  Path.fromParser = function (parser) {\n    var bytes = [];\n\n    while (!parser.end()) {\n      bytes.push(Hop.fromParser(parser).toBytes());\n\n      if (parser.peek() === PATHSET_END_BYTE || parser.peek() === PATH_SEPARATOR_BYTE) {\n        break;\n      }\n    }\n\n    return new Path(buffer_1.Buffer.concat(bytes));\n  };\n  /**\n   * Get the JSON representation of this Path\n   *\n   * @returns an Array of HopObject constructed from this.bytes\n   */\n\n\n  Path.prototype.toJSON = function () {\n    var json = [];\n    var pathParser = new binary_parser_1.BinaryParser(this.toString());\n\n    while (!pathParser.end()) {\n      json.push(Hop.fromParser(pathParser).toJSON());\n    }\n\n    return json;\n  };\n\n  return Path;\n}(serialized_type_1.SerializedType);\n/**\n * Deserialize and Serialize the PathSet type\n */\n\n\nvar PathSet =\n/** @class */\nfunction (_super) {\n  __extends(PathSet, _super);\n\n  function PathSet() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Construct a PathSet from an Array of Arrays representing paths\n   *\n   * @param value A PathSet or Array of Array of HopObjects\n   * @returns the PathSet constructed from value\n   */\n\n\n  PathSet.from = function (value) {\n    if (value instanceof PathSet) {\n      return value;\n    }\n\n    if (isPathSet(value)) {\n      var bytes_1 = [];\n      value.forEach(function (path) {\n        bytes_1.push(Path.from(path).toBytes());\n        bytes_1.push(buffer_1.Buffer.from([PATH_SEPARATOR_BYTE]));\n      });\n      bytes_1[bytes_1.length - 1] = buffer_1.Buffer.from([PATHSET_END_BYTE]);\n      return new PathSet(buffer_1.Buffer.concat(bytes_1));\n    }\n\n    throw new Error('Cannot construct PathSet from given value');\n  };\n  /**\n   * Construct a PathSet from a BinaryParser\n   *\n   * @param parser A BinaryParser to read PathSet from\n   * @returns the PathSet read from parser\n   */\n\n\n  PathSet.fromParser = function (parser) {\n    var bytes = [];\n\n    while (!parser.end()) {\n      bytes.push(Path.fromParser(parser).toBytes());\n      bytes.push(parser.read(1));\n\n      if (bytes[bytes.length - 1][0] == PATHSET_END_BYTE) {\n        break;\n      }\n    }\n\n    return new PathSet(buffer_1.Buffer.concat(bytes));\n  };\n  /**\n   * Get the JSON representation of this PathSet\n   *\n   * @returns an Array of Array of HopObjects, representing this PathSet\n   */\n\n\n  PathSet.prototype.toJSON = function () {\n    var json = [];\n    var pathParser = new binary_parser_1.BinaryParser(this.toString());\n\n    while (!pathParser.end()) {\n      json.push(Path.fromParser(pathParser).toJSON());\n      pathParser.skip(1);\n    }\n\n    return json;\n  };\n\n  return PathSet;\n}(serialized_type_1.SerializedType);\n\nexports.PathSet = PathSet;","map":{"version":3,"mappings":"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","names":["PATHSET_END_BYTE","PATH_SEPARATOR_BYTE","TYPE_ACCOUNT","TYPE_CURRENCY","TYPE_ISSUER","isHopObject","arg","issuer","undefined","account","currency","isPathSet","Array","isArray","length","__extends","Hop","value","bytes","buffer_1","from","push","account_id_1","toBytes","currency_1","concat","parser","type","readUInt8","read","width","hopParser","binary_parser_1","toString","fromParser","toJSON","result","serialized_type_1","Path","forEach","hop","end","peek","json","pathParser","PathSet","bytes_1","path","Error","skip","exports"],"sourceRoot":"","sources":["../../src/types/path-set.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}