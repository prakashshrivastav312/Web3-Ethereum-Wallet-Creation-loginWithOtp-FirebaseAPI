{"ast":null,"code":"import { blake2b256 } from './cry/blake2b';\n/**\n * 2048 bits Bloom filter\n */\n\nexport class Bloom {\n  /**\n   * new bloom filter instance\n   * @param k number of hash functions\n   * @param bits leave it out to construct an empty one\n   */\n  constructor(k, bits) {\n    if (bits) {\n      this.bits = bits;\n    } else {\n      this.bits = Buffer.alloc(Bloom.BITS_LENGTH / 8);\n    }\n\n    this.k = k;\n  }\n  /** estimate k(number of hash functions) according to item count */\n\n\n  static estimateK(itemCount) {\n    const k = Math.round(this.BITS_LENGTH / itemCount * Math.LN2);\n    return Math.max(Math.min(k, this.MAX_K), 1);\n  }\n  /**\n   * add item\n   * @param item\n   */\n\n\n  add(item) {\n    this.distribute(item, (index, bit) => {\n      // tslint:disable-next-line:no-bitwise\n      this.bits[index] |= bit;\n      return true;\n    });\n  }\n  /**\n   * test if an item contained. (false positive)\n   * @param item\n   */\n\n\n  test(item) {\n    return this.distribute(item, (index, bit) => {\n      // tslint:disable-next-line:no-bitwise\n      return (this.bits[index] & bit) === bit;\n    });\n  }\n\n  distribute(item, cb) {\n    const hash = blake2b256(item);\n\n    for (let i = 0; i < this.k; i++) {\n      // tslint:disable-next-line:no-bitwise\n      const d = (hash[i * 2 + 1] + (hash[i * 2] << 8)) % Bloom.BITS_LENGTH; // tslint:disable-next-line:no-bitwise\n\n      const bit = 1 << d % 8;\n\n      if (!cb(Math.floor(d / 8), bit)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n/** number of hash functions */\n\nBloom.MAX_K = 16;\n/** bit length */\n\nBloom.BITS_LENGTH = 2048;","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AAEA;;;;AAGA,OAAM,MAAOC,KAAP,CAAY;EAed;;;;;EAKAC,YAAYC,CAAZ,EAAuBC,IAAvB,EAAoC;IAChC,IAAIA,IAAJ,EAAU;MACN,KAAKA,IAAL,GAAYA,IAAZ;IACH,CAFD,MAEO;MACH,KAAKA,IAAL,GAAYC,MAAM,CAACC,KAAP,CAAaL,KAAK,CAACM,WAAN,GAAoB,CAAjC,CAAZ;IACH;;IACD,KAAKJ,CAAL,GAASA,CAAT;EACH;EArBD;;;EACuB,OAATK,SAAS,CAACC,SAAD,EAAkB;IACrC,MAAMN,CAAC,GAAGO,IAAI,CAACC,KAAL,CAAW,KAAKJ,WAAL,GAAmBE,SAAnB,GAA+BC,IAAI,CAACE,GAA/C,CAAV;IACA,OAAOF,IAAI,CAACG,GAAL,CAASH,IAAI,CAACI,GAAL,CAASX,CAAT,EAAY,KAAKY,KAAjB,CAAT,EAAkC,CAAlC,CAAP;EACH;EAmBD;;;;;;EAIOC,GAAG,CAACC,IAAD,EAAa;IACnB,KAAKC,UAAL,CAAgBD,IAAhB,EAAsB,CAACE,KAAD,EAAQC,GAAR,KAAe;MACjC;MACA,KAAKhB,IAAL,CAAUe,KAAV,KAAoBC,GAApB;MACA,OAAO,IAAP;IACH,CAJD;EAKH;EAED;;;;;;EAIOC,IAAI,CAACJ,IAAD,EAAa;IACpB,OAAO,KAAKC,UAAL,CAAgBD,IAAhB,EAAsB,CAACE,KAAD,EAAQC,GAAR,KAAe;MACxC;MACA,OAAO,CAAC,KAAKhB,IAAL,CAAUe,KAAV,IAAmBC,GAApB,MAA6BA,GAApC;IACH,CAHM,CAAP;EAIH;;EAEOF,UAAU,CAACD,IAAD,EAAeK,EAAf,EAA0D;IACxE,MAAMC,IAAI,GAAGvB,UAAU,CAACiB,IAAD,CAAvB;;IACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKrB,CAAzB,EAA4BqB,CAAC,EAA7B,EAAiC;MAC7B;MACA,MAAMC,CAAC,GAAG,CAACF,IAAI,CAACC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAJ,IAAmBD,IAAI,CAACC,CAAC,GAAG,CAAL,CAAJ,IAAe,CAAlC,CAAD,IAAyCvB,KAAK,CAACM,WAAzD,CAF6B,CAG7B;;MACA,MAAMa,GAAG,GAAG,KAAMK,CAAC,GAAG,CAAtB;;MACA,IAAI,CAACH,EAAE,CAACZ,IAAI,CAACgB,KAAL,CAAWD,CAAC,GAAG,CAAf,CAAD,EAAoBL,GAApB,CAAP,EAAiC;QAC7B,OAAO,KAAP;MACH;IACJ;;IACD,OAAO,IAAP;EACH;;AAhEa;AACd;;AACuBnB,cAAQ,EAAR;AACvB;;AACuBA,oBAAc,IAAd","names":["blake2b256","Bloom","constructor","k","bits","Buffer","alloc","BITS_LENGTH","estimateK","itemCount","Math","round","LN2","max","min","MAX_K","add","item","distribute","index","bit","test","cb","hash","i","d","floor"],"sourceRoot":"","sources":["../src/bloom.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}