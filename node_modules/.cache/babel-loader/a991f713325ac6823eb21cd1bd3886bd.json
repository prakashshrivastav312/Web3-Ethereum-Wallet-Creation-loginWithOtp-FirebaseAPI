{"ast":null,"code":"const bip39 = require('bip39');\n\nconst {\n  validateBuffer,\n  validateString,\n  validatePaperWalletMnemonic\n} = require(\"../utils/validation\");\n\nconst pbkdf2 = require('../utils/pbkdf2');\n\nconst crypto = require(\"./crypto-primitives\");\n\nconst Module = require('../lib.js');\n\nasync function decodePaperWalletMnemonic(paperWalletMnemonic) {\n  validatePaperWalletMnemonic(paperWalletMnemonic);\n  const paperWalletMnemonicAsList = paperWalletMnemonic.split(' ');\n  const mnemonicScrambledPart = paperWalletMnemonicAsList.slice(0, 18).join(' ');\n  const mnemonicPassphrasePart = paperWalletMnemonicAsList.slice(18, 27).join(' ');\n  const passphrase = await mnemonicToPaperWalletPassphrase(mnemonicPassphrasePart);\n  const unscrambledMnemonic = await paperWalletUnscrambleStrings(passphrase, mnemonicScrambledPart);\n  return unscrambledMnemonic;\n}\n\nasync function mnemonicToPaperWalletPassphrase(mnemonic, password) {\n  const mnemonicBuffer = Buffer.from(mnemonic, 'utf8');\n  const salt = `mnemonic${password || ''}`;\n  const saltBuffer = Buffer.from(salt, 'utf8');\n  return (await pbkdf2(mnemonicBuffer, saltBuffer, 2048, 32, 'sha512')).toString('hex');\n}\n/* taken from https://github.com/input-output-hk/rust-cardano/blob/08796d9f100f417ff30549b297bd20b249f87809/cardano/src/paperwallet.rs */\n\n\nasync function paperWalletUnscrambleStrings(passphrase, mnemonic) {\n  const input = Buffer.from(bip39.mnemonicToEntropy(mnemonic), 'hex');\n  const saltLength = 8;\n\n  if (saltLength >= input.length) {\n    throw Error('unscrambleStrings: Input is too short');\n  }\n\n  const outputLength = input.length - saltLength;\n  const output = await pbkdf2(passphrase, input.slice(0, saltLength), 10000, outputLength, 'sha512');\n\n  for (let i = 0; i < outputLength; i++) {\n    output[i] = output[i] ^ input[saltLength + i];\n  }\n\n  return bip39.entropyToMnemonic(output);\n}\n\nmodule.exports = {\n  decodePaperWalletMnemonic\n};","map":{"version":3,"names":["bip39","require","validateBuffer","validateString","validatePaperWalletMnemonic","pbkdf2","crypto","Module","decodePaperWalletMnemonic","paperWalletMnemonic","paperWalletMnemonicAsList","split","mnemonicScrambledPart","slice","join","mnemonicPassphrasePart","passphrase","mnemonicToPaperWalletPassphrase","unscrambledMnemonic","paperWalletUnscrambleStrings","mnemonic","password","mnemonicBuffer","Buffer","from","salt","saltBuffer","toString","input","mnemonicToEntropy","saltLength","length","Error","outputLength","output","i","entropyToMnemonic","module","exports"],"sources":["C:/Users/acer/node_modules/cardano-crypto.js/features/paper-wallets.js"],"sourcesContent":["const bip39 = require('bip39')\n\nconst {validateBuffer, validateString, validatePaperWalletMnemonic} = require(\"../utils/validation\")\nconst pbkdf2 = require('../utils/pbkdf2')\nconst crypto = require(\"./crypto-primitives\")\nconst Module = require('../lib.js')\n\n\nasync function decodePaperWalletMnemonic(paperWalletMnemonic) {\n  validatePaperWalletMnemonic(paperWalletMnemonic)\n\n  const paperWalletMnemonicAsList = paperWalletMnemonic.split(' ')\n\n  const mnemonicScrambledPart = paperWalletMnemonicAsList.slice(0, 18).join(' ')\n  const mnemonicPassphrasePart = paperWalletMnemonicAsList.slice(18, 27).join(' ')\n\n  const passphrase = await mnemonicToPaperWalletPassphrase(mnemonicPassphrasePart)\n  const unscrambledMnemonic = await paperWalletUnscrambleStrings(passphrase, mnemonicScrambledPart)\n\n  return unscrambledMnemonic\n}\n\nasync function mnemonicToPaperWalletPassphrase(mnemonic, password) {\n  const mnemonicBuffer = Buffer.from(mnemonic, 'utf8')\n  const salt = `mnemonic${password || ''}`\n  const saltBuffer = Buffer.from(salt, 'utf8')\n  return (await pbkdf2(mnemonicBuffer, saltBuffer, 2048, 32, 'sha512')).toString('hex')\n}\n\n/* taken from https://github.com/input-output-hk/rust-cardano/blob/08796d9f100f417ff30549b297bd20b249f87809/cardano/src/paperwallet.rs */\nasync function paperWalletUnscrambleStrings(passphrase, mnemonic) {\n  const input = Buffer.from(bip39.mnemonicToEntropy(mnemonic), 'hex')\n  const saltLength = 8\n\n  if (saltLength >= input.length) {\n    throw Error('unscrambleStrings: Input is too short')\n  }\n\n  const outputLength = input.length - saltLength\n\n  const output = await pbkdf2(passphrase, input.slice(0, saltLength), 10000, outputLength, 'sha512')\n\n  for (let i = 0; i < outputLength; i++) {\n    output[i] = output[i] ^ input[saltLength + i]\n  }\n\n  return bip39.entropyToMnemonic(output)\n}\n\nmodule.exports = {\n  decodePaperWalletMnemonic,\n}"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAM;EAACC,cAAD;EAAiBC,cAAjB;EAAiCC;AAAjC,IAAgEH,OAAO,CAAC,qBAAD,CAA7E;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,WAAD,CAAtB;;AAGA,eAAeO,yBAAf,CAAyCC,mBAAzC,EAA8D;EAC5DL,2BAA2B,CAACK,mBAAD,CAA3B;EAEA,MAAMC,yBAAyB,GAAGD,mBAAmB,CAACE,KAApB,CAA0B,GAA1B,CAAlC;EAEA,MAAMC,qBAAqB,GAAGF,yBAAyB,CAACG,KAA1B,CAAgC,CAAhC,EAAmC,EAAnC,EAAuCC,IAAvC,CAA4C,GAA5C,CAA9B;EACA,MAAMC,sBAAsB,GAAGL,yBAAyB,CAACG,KAA1B,CAAgC,EAAhC,EAAoC,EAApC,EAAwCC,IAAxC,CAA6C,GAA7C,CAA/B;EAEA,MAAME,UAAU,GAAG,MAAMC,+BAA+B,CAACF,sBAAD,CAAxD;EACA,MAAMG,mBAAmB,GAAG,MAAMC,4BAA4B,CAACH,UAAD,EAAaJ,qBAAb,CAA9D;EAEA,OAAOM,mBAAP;AACD;;AAED,eAAeD,+BAAf,CAA+CG,QAA/C,EAAyDC,QAAzD,EAAmE;EACjE,MAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsB,MAAtB,CAAvB;EACA,MAAMK,IAAI,GAAI,WAAUJ,QAAQ,IAAI,EAAG,EAAvC;EACA,MAAMK,UAAU,GAAGH,MAAM,CAACC,IAAP,CAAYC,IAAZ,EAAkB,MAAlB,CAAnB;EACA,OAAO,CAAC,MAAMpB,MAAM,CAACiB,cAAD,EAAiBI,UAAjB,EAA6B,IAA7B,EAAmC,EAAnC,EAAuC,QAAvC,CAAb,EAA+DC,QAA/D,CAAwE,KAAxE,CAAP;AACD;AAED;;;AACA,eAAeR,4BAAf,CAA4CH,UAA5C,EAAwDI,QAAxD,EAAkE;EAChE,MAAMQ,KAAK,GAAGL,MAAM,CAACC,IAAP,CAAYxB,KAAK,CAAC6B,iBAAN,CAAwBT,QAAxB,CAAZ,EAA+C,KAA/C,CAAd;EACA,MAAMU,UAAU,GAAG,CAAnB;;EAEA,IAAIA,UAAU,IAAIF,KAAK,CAACG,MAAxB,EAAgC;IAC9B,MAAMC,KAAK,CAAC,uCAAD,CAAX;EACD;;EAED,MAAMC,YAAY,GAAGL,KAAK,CAACG,MAAN,GAAeD,UAApC;EAEA,MAAMI,MAAM,GAAG,MAAM7B,MAAM,CAACW,UAAD,EAAaY,KAAK,CAACf,KAAN,CAAY,CAAZ,EAAeiB,UAAf,CAAb,EAAyC,KAAzC,EAAgDG,YAAhD,EAA8D,QAA9D,CAA3B;;EAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAApB,EAAkCE,CAAC,EAAnC,EAAuC;IACrCD,MAAM,CAACC,CAAD,CAAN,GAAYD,MAAM,CAACC,CAAD,CAAN,GAAYP,KAAK,CAACE,UAAU,GAAGK,CAAd,CAA7B;EACD;;EAED,OAAOnC,KAAK,CAACoC,iBAAN,CAAwBF,MAAxB,CAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;EACf9B;AADe,CAAjB"},"metadata":{},"sourceType":"script"}