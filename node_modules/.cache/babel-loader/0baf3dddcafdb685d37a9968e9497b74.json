{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BinarySerializer = exports.BytesList = void 0;\n\nvar assert = require(\"assert\");\n\nvar buffer_1 = require(\"buffer/\");\n/**\n * Bytes list is a collection of buffer objects\n */\n\n\nvar BytesList =\n/** @class */\nfunction () {\n  function BytesList() {\n    this.bytesArray = [];\n  }\n  /**\n   * Get the total number of bytes in the BytesList\n   *\n   * @return the number of bytes\n   */\n\n\n  BytesList.prototype.getLength = function () {\n    return buffer_1.Buffer.concat(this.bytesArray).byteLength;\n  };\n  /**\n   * Put bytes in the BytesList\n   *\n   * @param bytesArg A Buffer\n   * @return this BytesList\n   */\n\n\n  BytesList.prototype.put = function (bytesArg) {\n    var bytes = buffer_1.Buffer.from(bytesArg); // Temporary, to catch instances of Uint8Array being passed in\n\n    this.bytesArray.push(bytes);\n    return this;\n  };\n  /**\n   * Write this BytesList to the back of another bytes list\n   *\n   *  @param list The BytesList to write to\n   */\n\n\n  BytesList.prototype.toBytesSink = function (list) {\n    list.put(this.toBytes());\n  };\n\n  BytesList.prototype.toBytes = function () {\n    return buffer_1.Buffer.concat(this.bytesArray);\n  };\n\n  BytesList.prototype.toHex = function () {\n    return this.toBytes().toString('hex').toUpperCase();\n  };\n\n  return BytesList;\n}();\n\nexports.BytesList = BytesList;\n/**\n * BinarySerializer is used to write fields and values to buffers\n */\n\nvar BinarySerializer =\n/** @class */\nfunction () {\n  function BinarySerializer(sink) {\n    this.sink = new BytesList();\n    this.sink = sink;\n  }\n  /**\n   * Write a value to this BinarySerializer\n   *\n   * @param value a SerializedType value\n   */\n\n\n  BinarySerializer.prototype.write = function (value) {\n    value.toBytesSink(this.sink);\n  };\n  /**\n   * Write bytes to this BinarySerializer\n   *\n   * @param bytes the bytes to write\n   */\n\n\n  BinarySerializer.prototype.put = function (bytes) {\n    this.sink.put(bytes);\n  };\n  /**\n   * Write a value of a given type to this BinarySerializer\n   *\n   * @param type the type to write\n   * @param value a value of that type\n   */\n\n\n  BinarySerializer.prototype.writeType = function (type, value) {\n    this.write(type.from(value));\n  };\n  /**\n   * Write BytesList to this BinarySerializer\n   *\n   * @param bl BytesList to write to BinarySerializer\n   */\n\n\n  BinarySerializer.prototype.writeBytesList = function (bl) {\n    bl.toBytesSink(this.sink);\n  };\n  /**\n   * Calculate the header of Variable Length encoded bytes\n   *\n   * @param length the length of the bytes\n   */\n\n\n  BinarySerializer.prototype.encodeVariableLength = function (length) {\n    var lenBytes = buffer_1.Buffer.alloc(3);\n\n    if (length <= 192) {\n      lenBytes[0] = length;\n      return lenBytes.slice(0, 1);\n    } else if (length <= 12480) {\n      length -= 193;\n      lenBytes[0] = 193 + (length >>> 8);\n      lenBytes[1] = length & 0xff;\n      return lenBytes.slice(0, 2);\n    } else if (length <= 918744) {\n      length -= 12481;\n      lenBytes[0] = 241 + (length >>> 16);\n      lenBytes[1] = length >> 8 & 0xff;\n      lenBytes[2] = length & 0xff;\n      return lenBytes.slice(0, 3);\n    }\n\n    throw new Error('Overflow error');\n  };\n  /**\n   * Write field and value to BinarySerializer\n   *\n   * @param field field to write to BinarySerializer\n   * @param value value to write to BinarySerializer\n   */\n\n\n  BinarySerializer.prototype.writeFieldAndValue = function (field, value, isUnlModifyWorkaround) {\n    if (isUnlModifyWorkaround === void 0) {\n      isUnlModifyWorkaround = false;\n    }\n\n    var associatedValue = field.associatedType.from(value);\n    assert.ok(associatedValue.toBytesSink !== undefined);\n    assert.ok(field.name !== undefined);\n    this.sink.put(field.header);\n\n    if (field.isVariableLengthEncoded) {\n      this.writeLengthEncoded(associatedValue, isUnlModifyWorkaround);\n    } else {\n      associatedValue.toBytesSink(this.sink);\n    }\n  };\n  /**\n   * Write a variable length encoded value to the BinarySerializer\n   *\n   * @param value length encoded value to write to BytesList\n   */\n\n\n  BinarySerializer.prototype.writeLengthEncoded = function (value, isUnlModifyWorkaround) {\n    if (isUnlModifyWorkaround === void 0) {\n      isUnlModifyWorkaround = false;\n    }\n\n    var bytes = new BytesList();\n\n    if (!isUnlModifyWorkaround) {\n      // this part doesn't happen for the Account field in a UNLModify transaction\n      value.toBytesSink(bytes);\n    }\n\n    this.put(this.encodeVariableLength(bytes.getLength()));\n    this.writeBytesList(bytes);\n  };\n\n  return BinarySerializer;\n}();\n\nexports.BinarySerializer = BinarySerializer;","map":{"version":3,"mappings":"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","names":["BytesList","buffer_1","concat","bytesArray","byteLength","bytesArg","bytes","from","push","list","put","toBytes","toString","toUpperCase","exports","sink","BinarySerializer","value","toBytesSink","type","write","bl","length","lenBytes","alloc","slice","Error","field","isUnlModifyWorkaround","associatedValue","associatedType","assert","ok","undefined","name","header","isVariableLengthEncoded","writeLengthEncoded","encodeVariableLength","getLength","writeBytesList"],"sourceRoot":"","sources":["../../src/serdes/binary-serializer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}