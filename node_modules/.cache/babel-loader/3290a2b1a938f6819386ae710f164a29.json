{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionStatus = exports.TransactionHash = exports.Transaction = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst address_1 = require(\"./address\");\n\nconst balance_1 = require(\"./balance\");\n\nconst networkParams_1 = require(\"./networkParams\");\n\nconst networkConfig_1 = require(\"./networkConfig\");\n\nconst nonce_1 = require(\"./nonce\");\n\nconst signature_1 = require(\"./signature\");\n\nconst utils_1 = require(\"./utils\");\n\nconst transactionPayload_1 = require(\"./transactionPayload\");\n\nconst errors = __importStar(require(\"./errors\"));\n\nconst events_1 = require(\"./events\");\n\nconst transactionWatcher_1 = require(\"./transactionWatcher\");\n\nconst proto_1 = require(\"./proto\");\n\nconst transactionOnNetwork_1 = require(\"./transactionOnNetwork\");\n\nconst hash_1 = require(\"./hash\");\n\nconst createTransactionHasher = require(\"blake2b\");\n\nconst DEFAULT_TRANSACTION_VERSION = networkParams_1.TransactionVersion.withDefaultVersion();\nconst DEFAULT_TRANSACTION_OPTIONS = networkParams_1.TransactionOptions.withDefaultOptions();\nconst TRANSACTION_HASH_LENGTH = 32;\n/**\n * An abstraction for creating, signing and broadcasting Elrond transactions.\n */\n\nclass Transaction {\n  /**\n   * Creates a new Transaction object.\n   */\n  constructor(_ref) {\n    let {\n      nonce,\n      value,\n      receiver,\n      sender,\n      gasPrice,\n      gasLimit,\n      data,\n      chainID,\n      version,\n      options\n    } = _ref;\n\n    /**\n     * A (cached) representation of the transaction, as fetched from the API.\n     */\n    this.asOnNetwork = new transactionOnNetwork_1.TransactionOnNetwork();\n    this.nonce = nonce || new nonce_1.Nonce(0);\n    this.value = value || balance_1.Balance.Zero();\n    this.sender = sender || address_1.Address.Zero();\n    this.receiver = receiver;\n    this.gasPrice = gasPrice || networkConfig_1.NetworkConfig.getDefault().MinGasPrice;\n    this.gasLimit = gasLimit || networkConfig_1.NetworkConfig.getDefault().MinGasLimit;\n    this.data = data || new transactionPayload_1.TransactionPayload();\n    this.chainID = chainID || networkConfig_1.NetworkConfig.getDefault().ChainID;\n    this.version = version || DEFAULT_TRANSACTION_VERSION;\n    this.options = options || DEFAULT_TRANSACTION_OPTIONS;\n    this.signature = signature_1.Signature.empty();\n    this.hash = TransactionHash.empty();\n    this.status = TransactionStatus.createUnknown();\n    this.onSigned = new events_1.TypedEvent();\n    this.onSent = new events_1.TypedEvent();\n    this.onStatusUpdated = new events_1.TypedEvent();\n    this.onStatusChanged = new events_1.TypedEvent(); // We apply runtime type checks for these fields, since they are the most commonly misused when calling the Transaction constructor\n    // in JavaScript (which lacks type safety).\n\n    utils_1.guardType(\"nonce\", nonce_1.Nonce, this.nonce);\n    utils_1.guardType(\"gasLimit\", networkParams_1.GasLimit, this.gasLimit);\n    utils_1.guardType(\"gasPrice\", networkParams_1.GasPrice, this.gasPrice);\n  }\n\n  getNonce() {\n    return this.nonce;\n  }\n  /**\n   * Sets the account sequence number of the sender. Must be done prior signing.\n   *\n   * ```\n   * await alice.sync(provider);\n   *\n   * let tx = new Transaction({\n   *      value: Balance.egld(1),\n   *      receiver: bob.address\n   * });\n   *\n   * tx.setNonce(alice.nonce);\n   * await alice.signer.sign(tx);\n   * ```\n   */\n\n\n  setNonce(nonce) {\n    this.nonce = nonce;\n    this.doAfterPropertySetter();\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.doAfterPropertySetter();\n  }\n\n  getSender() {\n    return this.sender;\n  }\n\n  getReceiver() {\n    return this.receiver;\n  }\n\n  getGasPrice() {\n    return this.gasPrice;\n  }\n\n  setGasPrice(gasPrice) {\n    this.gasPrice = gasPrice;\n    this.doAfterPropertySetter();\n  }\n\n  getGasLimit() {\n    return this.gasLimit;\n  }\n\n  setGasLimit(gasLimit) {\n    this.gasLimit = gasLimit;\n    this.doAfterPropertySetter();\n  }\n\n  getData() {\n    return this.data;\n  }\n\n  getChainID() {\n    return this.chainID;\n  }\n\n  getVersion() {\n    return this.version;\n  }\n\n  getOptions() {\n    return this.options;\n  }\n\n  doAfterPropertySetter() {\n    this.signature = signature_1.Signature.empty();\n    this.hash = TransactionHash.empty();\n  }\n\n  getSignature() {\n    utils_1.guardNotEmpty(this.signature, \"signature\");\n    return this.signature;\n  }\n\n  getHash() {\n    utils_1.guardNotEmpty(this.hash, \"hash\");\n    return this.hash;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n  /**\n   * Serializes a transaction to a sequence of bytes, ready to be signed.\n   * This function is called internally, by {@link Signer} objects.\n   *\n   * @param signedBy The address of the future signer\n   */\n\n\n  serializeForSigning(signedBy) {\n    // TODO: for appropriate tx.version, interpret tx.options accordingly and sign using the content / data hash\n    let plain = this.toPlainObject(signedBy); // Make sure we never sign the transaction with another signature set up (useful when using the same method for verification)\n\n    if (plain.signature) {\n      delete plain.signature;\n    }\n\n    let serialized = JSON.stringify(plain);\n    return Buffer.from(serialized);\n  }\n  /**\n   * Converts the transaction object into a ready-to-serialize, plain JavaScript object.\n   * This function is called internally within the signing procedure.\n   *\n   * @param sender The address of the sender (will be provided when called within the signing procedure)\n   */\n\n\n  toPlainObject(sender) {\n    return {\n      nonce: this.nonce.valueOf(),\n      value: this.value.toString(),\n      receiver: this.receiver.bech32(),\n      sender: sender ? sender.bech32() : this.sender.bech32(),\n      gasPrice: this.gasPrice.valueOf(),\n      gasLimit: this.gasLimit.valueOf(),\n      data: this.data.isEmpty() ? undefined : this.data.encoded(),\n      chainID: this.chainID.valueOf(),\n      version: this.version.valueOf(),\n      options: this.options.valueOf() == 0 ? undefined : this.options.valueOf(),\n      signature: this.signature.isEmpty() ? undefined : this.signature.hex()\n    };\n  }\n  /**\n   * Applies the signature on the transaction.\n   *\n   * @param signature The signature, as computed by a {@link ISigner}.\n   * @param signedBy The address of the signer.\n   */\n\n\n  applySignature(signature, signedBy) {\n    utils_1.guardEmpty(this.signature, \"signature\");\n    utils_1.guardEmpty(this.hash, \"hash\");\n    this.signature = signature;\n    this.sender = signedBy;\n    this.hash = TransactionHash.compute(this);\n    this.onSigned.emit({\n      transaction: this,\n      signedBy: signedBy\n    });\n  }\n  /**\n   * Broadcasts a transaction to the Network, via a {@link IProvider}.\n   *\n   * ```\n   * let provider = new ProxyProvider(\"https://gateway.elrond.com\");\n   * // ... Prepare, sign the transaction, then:\n   * await tx.send(provider);\n   * await tx.awaitExecuted(provider);\n   * ```\n   */\n\n\n  send(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.hash = yield provider.sendTransaction(this);\n      this.onSent.emit({\n        transaction: this\n      });\n      return this.hash;\n    });\n  }\n  /**\n   * Simulates a transaction on the Network, via a {@link IProvider}.\n   */\n\n\n  simulate(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield provider.simulateTransaction(this);\n    });\n  }\n  /**\n   * Converts a transaction to a ready-to-broadcast object.\n   * Called internally by the {@link IProvider}.\n   */\n\n\n  toSendable() {\n    if (this.signature.isEmpty()) {\n      throw new errors.ErrTransactionNotSigned();\n    }\n\n    return this.toPlainObject();\n  }\n  /**\n   * Fetches a representation of the transaction (whether pending, processed or finalized), as found on the Network.\n   *\n   * @param provider The provider to use\n   * @param cacheLocally Whether to cache the response locally, on the transaction object\n   * @param awaitNotarized Whether to wait for the transaction to be notarized\n   * @param withResults Whether to wait for the transaction results\n   */\n\n\n  getAsOnNetwork(provider) {\n    let cacheLocally = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let awaitNotarized = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let withResults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.hash.isEmpty()) {\n        throw new errors.ErrTransactionHashUnknown();\n      } // For Smart Contract transactions, wait for their full execution & notarization before returning.\n\n\n      let isSmartContractTransaction = this.receiver.isContractAddress();\n\n      if (isSmartContractTransaction && awaitNotarized) {\n        yield this.awaitNotarized(provider);\n      }\n\n      let response = yield provider.getTransaction(this.hash, this.sender, withResults);\n\n      if (cacheLocally) {\n        this.asOnNetwork = response;\n      }\n\n      return response;\n    });\n  }\n  /**\n   * Returns the cached representation of the transaction, as previously fetched using {@link Transaction.getAsOnNetwork}.\n   */\n\n\n  getAsOnNetworkCached() {\n    return this.asOnNetwork;\n  }\n\n  awaitSigned() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.signature.isEmpty()) {\n        return;\n      }\n\n      return new Promise((resolve, _reject) => {\n        this.onSigned.on(() => resolve());\n      });\n    });\n  }\n\n  awaitHashed() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hash.isEmpty()) {\n        return;\n      }\n\n      return new Promise((resolve, _reject) => {\n        this.onSigned.on(() => resolve());\n      });\n    });\n  }\n  /**\n   * Computes the current transaction fee based on the {@link NetworkConfig} and transaction properties\n   * @param networkConfig {@link NetworkConfig}\n   */\n\n\n  computeFee(networkConfig) {\n    let moveBalanceGas = networkConfig.MinGasLimit.valueOf() + this.data.length() * networkConfig.GasPerDataByte.valueOf();\n\n    if (moveBalanceGas > this.gasLimit.valueOf()) {\n      throw new errors.ErrNotEnoughGas(this.gasLimit.valueOf());\n    }\n\n    let gasPrice = new bignumber_js_1.BigNumber(this.gasPrice.valueOf());\n    let feeForMove = new bignumber_js_1.BigNumber(moveBalanceGas).multipliedBy(gasPrice);\n\n    if (moveBalanceGas === this.gasLimit.valueOf()) {\n      return feeForMove;\n    }\n\n    let diff = new bignumber_js_1.BigNumber(this.gasLimit.valueOf() - moveBalanceGas);\n    let modifiedGasPrice = gasPrice.multipliedBy(new bignumber_js_1.BigNumber(networkConfig.GasPriceModifier.valueOf()));\n    let processingFee = diff.multipliedBy(modifiedGasPrice);\n    return feeForMove.plus(processingFee);\n  }\n  /**\n   * Awaits for a transaction to reach its \"pending\" state - that is, for the transaction to be accepted in the mempool.\n   * Performs polling against the provider, via a {@link TransactionWatcher}.\n   */\n\n\n  awaitPending(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let watcher = new transactionWatcher_1.TransactionWatcher(this.hash, provider);\n      yield watcher.awaitPending(this.notifyStatusUpdate.bind(this));\n    });\n  }\n  /**\n   * Awaits for a transaction to reach its \"executed\" state - that is, for the transaction to be processed (whether with success or with errors).\n   * Performs polling against the provider, via a {@link TransactionWatcher}.\n   */\n\n\n  awaitExecuted(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let watcher = new transactionWatcher_1.TransactionWatcher(this.hash, provider);\n      yield watcher.awaitExecuted(this.notifyStatusUpdate.bind(this));\n    });\n  }\n\n  notifyStatusUpdate(newStatus) {\n    let sameStatus = this.status.equals(newStatus);\n    this.onStatusUpdated.emit({\n      transaction: this\n    });\n\n    if (!sameStatus) {\n      this.status = newStatus;\n      this.onStatusChanged.emit({\n        transaction: this\n      });\n    }\n  }\n\n  awaitNotarized(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let watcher = new transactionWatcher_1.TransactionWatcher(this.hash, provider);\n      yield watcher.awaitNotarized();\n    });\n  }\n\n}\n\nexports.Transaction = Transaction;\n/**\n * An abstraction for handling and computing transaction hashes.\n */\n\nclass TransactionHash extends hash_1.Hash {\n  constructor(hash) {\n    super(hash);\n  }\n  /**\n   * Computes the hash of a transaction.\n   * Not yet implemented.\n   */\n\n\n  static compute(transaction) {\n    let serializer = new proto_1.ProtoSerializer();\n    let buffer = serializer.serializeTransaction(transaction);\n    let hash = createTransactionHasher(TRANSACTION_HASH_LENGTH).update(buffer).digest(\"hex\");\n    return new TransactionHash(hash);\n  }\n\n}\n\nexports.TransactionHash = TransactionHash;\n/**\n * An abstraction for handling and interpreting the \"status\" field of a {@link Transaction}.\n */\n\nclass TransactionStatus {\n  /**\n   * Creates a new TransactionStatus object.\n   */\n  constructor(status) {\n    this.status = (status || \"\").toLowerCase();\n  }\n  /**\n   * Creates an unknown status.\n   */\n\n\n  static createUnknown() {\n    return new TransactionStatus(\"unknown\");\n  }\n  /**\n   * Returns whether the transaction is pending (e.g. in mempool).\n   */\n\n\n  isPending() {\n    return this.status == \"received\" || this.status == \"pending\" || this.status == \"partially-executed\";\n  }\n  /**\n   * Returns whether the transaction has been executed (not necessarily with success).\n   */\n\n\n  isExecuted() {\n    return this.isSuccessful() || this.isInvalid();\n  }\n  /**\n   * Returns whether the transaction has been executed successfully.\n   */\n\n\n  isSuccessful() {\n    return this.status == \"executed\" || this.status == \"success\" || this.status == \"successful\";\n  }\n  /**\n   * Returns whether the transaction has been executed, but with a failure.\n   */\n\n\n  isFailed() {\n    return this.status == \"fail\" || this.status == \"failed\" || this.status == \"unsuccessful\" || this.isInvalid();\n  }\n  /**\n   * Returns whether the transaction has been executed, but marked as invalid (e.g. due to \"insufficient funds\").\n   */\n\n\n  isInvalid() {\n    return this.status == \"invalid\";\n  }\n\n  toString() {\n    return this.status;\n  }\n\n  valueOf() {\n    return this.status;\n  }\n\n  equals(other) {\n    if (!other) {\n      return false;\n    }\n\n    return this.status == other.status;\n  }\n\n}\n\nexports.TransactionStatus = TransactionStatus;","map":{"version":3,"mappings":"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","names":["createTransactionHasher","require","DEFAULT_TRANSACTION_VERSION","networkParams_1","withDefaultVersion","DEFAULT_TRANSACTION_OPTIONS","withDefaultOptions","TRANSACTION_HASH_LENGTH","Transaction","constructor","nonce","value","receiver","sender","gasPrice","gasLimit","data","chainID","version","options","transactionOnNetwork_1","nonce_1","balance_1","Zero","address_1","networkConfig_1","getDefault","MinGasPrice","MinGasLimit","transactionPayload_1","ChainID","signature","signature_1","empty","hash","TransactionHash","status","TransactionStatus","createUnknown","onSigned","events_1","onSent","onStatusUpdated","onStatusChanged","utils_1","getNonce","setNonce","doAfterPropertySetter","getValue","setValue","getSender","getReceiver","getGasPrice","setGasPrice","getGasLimit","setGasLimit","getData","getChainID","getVersion","getOptions","getSignature","getHash","getStatus","serializeForSigning","signedBy","plain","toPlainObject","serialized","JSON","stringify","Buffer","from","valueOf","toString","bech32","isEmpty","undefined","encoded","hex","applySignature","compute","emit","transaction","send","provider","sendTransaction","simulate","simulateTransaction","toSendable","errors","ErrTransactionNotSigned","getAsOnNetwork","cacheLocally","awaitNotarized","withResults","ErrTransactionHashUnknown","isSmartContractTransaction","isContractAddress","response","getTransaction","asOnNetwork","getAsOnNetworkCached","awaitSigned","Promise","resolve","_reject","on","awaitHashed","computeFee","networkConfig","moveBalanceGas","length","GasPerDataByte","ErrNotEnoughGas","bignumber_js_1","feeForMove","multipliedBy","diff","modifiedGasPrice","GasPriceModifier","processingFee","plus","awaitPending","watcher","transactionWatcher_1","notifyStatusUpdate","bind","awaitExecuted","newStatus","sameStatus","equals","exports","hash_1","serializer","proto_1","buffer","serializeTransaction","update","digest","toLowerCase","isPending","isExecuted","isSuccessful","isInvalid","isFailed","other"],"sourceRoot":"","sources":["../src/transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}