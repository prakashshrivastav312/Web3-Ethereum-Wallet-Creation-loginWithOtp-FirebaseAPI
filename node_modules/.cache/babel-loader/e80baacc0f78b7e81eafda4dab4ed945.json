{"ast":null,"code":"import { Base58 } from '@vechain/ethers/utils/basex';\nimport * as HD from '@vechain/ethers/utils/hdnode';\nimport { createHash } from 'crypto';\nimport { ec as EC } from 'elliptic';\nimport { publicKeyToAddress } from './address'; // see https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst VET_DERIVATION_PATH = `m/44'/818'/0'/0`;\nconst xpubPrefix = Buffer.from('0488b21e000000000000000000', 'hex');\nconst xprivPrefix = Buffer.from('0488ade4000000000000000000', 'hex');\nconst curve = new EC('secp256k1');\nexport var HDNode;\n\n(function (HDNode) {\n  /** create node from mnemonic words */\n  function fromMnemonic(words) {\n    const node = HD.fromMnemonic(words.join(' ')).derivePath(VET_DERIVATION_PATH);\n    return createHDNode(node);\n  }\n\n  HDNode.fromMnemonic = fromMnemonic;\n  /**\n   * create node from xpub\n   * @param pub public key\n   * @param chainCode chain code\n   */\n\n  function fromPublicKey(pub, chainCode) {\n    const compressed = curve.keyFromPublic(pub).getPublic(true, 'array');\n    const key = Buffer.concat([xpubPrefix, chainCode, Buffer.from(compressed)]);\n    const checksum = sha256(sha256(key)).slice(0, 4);\n    const node = HD.fromExtendedKey(Base58.encode(Buffer.concat([key, checksum])));\n    return createHDNode(node);\n  }\n\n  HDNode.fromPublicKey = fromPublicKey;\n  /**\n   * create node from xpriv\n   * @param priv private key\n   * @param chainCode chain code\n   */\n\n  function fromPrivateKey(priv, chainCode) {\n    const key = Buffer.concat([xprivPrefix, chainCode, Buffer.from([0]), priv]);\n    const checksum = sha256(sha256(key)).slice(0, 4);\n    const node = HD.fromExtendedKey(Base58.encode(Buffer.concat([key, checksum])));\n    return createHDNode(node);\n  }\n\n  HDNode.fromPrivateKey = fromPrivateKey;\n\n  function createHDNode(ethersNode) {\n    const pub = Buffer.from(curve.keyFromPublic(ethersNode.publicKey.slice(2), 'hex').getPublic(false, 'array'));\n    const priv = ethersNode.privateKey ? Buffer.from(ethersNode.privateKey.slice(2), 'hex') : null;\n    const cc = Buffer.from(ethersNode.chainCode.slice(2), 'hex');\n    const addr = '0x' + publicKeyToAddress(pub).toString('hex');\n    return {\n      get publicKey() {\n        return pub;\n      },\n\n      get privateKey() {\n        return priv;\n      },\n\n      get chainCode() {\n        return cc;\n      },\n\n      get address() {\n        return addr;\n      },\n\n      derive(index) {\n        return createHDNode(ethersNode.derivePath('' + index));\n      }\n\n    };\n  }\n\n  function sha256(data) {\n    return createHash('sha256').update(data).digest();\n  }\n})(HDNode || (HDNode = {}));","map":{"version":3,"mappings":"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","names":["Base58","HD","createHash","ec","EC","publicKeyToAddress","VET_DERIVATION_PATH","xpubPrefix","Buffer","from","xprivPrefix","curve","HDNode","fromMnemonic","words","node","join","derivePath","createHDNode","fromPublicKey","pub","chainCode","compressed","keyFromPublic","getPublic","key","concat","checksum","sha256","slice","fromExtendedKey","encode","fromPrivateKey","priv","ethersNode","publicKey","privateKey","cc","addr","toString","address","derive","index","data","update","digest"],"sourceRoot":"","sources":["../../src/cry/hdnode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}