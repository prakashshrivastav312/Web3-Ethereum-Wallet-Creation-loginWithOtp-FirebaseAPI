{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendBscOffchainTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst ledger_1 = require(\"../ledger\");\n\nconst model_1 = require(\"../model\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst common_1 = require(\"./common\");\n\nconst kms_1 = require(\"./kms\");\n/**\n * Send Bsc transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically\n */\n\n\nconst sendBscOffchainTransaction = async (testnet, body, provider) => {\n  if (body.signatureId) {\n    return kms_1.offchainTransferBscKMS(body);\n  }\n\n  await tatum_1.validateBody(body, model_1.TransferEthOffchain);\n\n  const {\n    mnemonic,\n    index,\n    privateKey,\n    gasLimit,\n    gasPrice,\n    nonce\n  } = body,\n        withdrawal = __rest(body, [\"mnemonic\", \"index\", \"privateKey\", \"gasLimit\", \"gasPrice\", \"nonce\"]);\n\n  const {\n    amount,\n    address\n  } = withdrawal;\n  const fromPriv = mnemonic && index !== undefined ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.BSC, testnet, mnemonic, index) : privateKey;\n  const account = await ledger_1.getAccountById(withdrawal.senderAccountId);\n  let txData;\n  const fee = {\n    gasLimit: gasLimit || '21000',\n    gasPrice: gasPrice || '20'\n  };\n\n  if (model_1.BSC_BASED_CURRENCIES.includes(account.currency)) {\n    txData = await transaction_1.prepareBscOrBep20SignedTransaction({\n      amount,\n      fromPrivateKey: fromPriv,\n      currency: account.currency,\n      fee,\n      nonce,\n      to: address\n    }, provider);\n  } else {\n    fee.gasLimit = '100000';\n    const vc = await ledger_1.getVirtualCurrencyByName(account.currency);\n    txData = await transaction_1.prepareCustomBep20SignedTransaction({\n      amount,\n      fee,\n      fromPrivateKey: fromPriv,\n      to: address,\n      digits: vc.precision,\n      nonce,\n      contractAddress: vc.erc20Address\n    }, provider);\n  } // @ts-ignore\n\n\n  withdrawal.fee = web3_utils_1.fromWei(new bignumber_js_1.default(fee.gasLimit).multipliedBy(web3_utils_1.toWei(fee.gasPrice, 'gwei')).toString(), 'ether');\n  const {\n    id\n  } = await common_1.offchainStoreWithdrawal(withdrawal);\n\n  try {\n    return Object.assign(Object.assign({}, await common_1.offchainBroadcast({\n      txData,\n      withdrawalId: id,\n      currency: model_1.Currency.BSC\n    })), {\n      id\n    });\n  } catch (e) {\n    console.error(e);\n\n    try {\n      await common_1.offchainCancelWithdrawal(id);\n    } catch (e1) {\n      console.log(e);\n      return {\n        id\n      };\n    }\n  }\n};\n\nexports.sendBscOffchainTransaction = sendBscOffchainTransaction;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AAEA;;;;;;;;;;AAQO,MAAMA,0BAA0B,GAAG,OAAOC,OAAP,EAAyBC,IAAzB,EAAoDC,QAApD,KAAyE;EAC/G,IAAGD,IAAI,CAACE,WAAR,EAAqB;IACjB,OAAOC,6BAAuBH,IAAvB,CAAP;EACH;;EACD,MAAMI,qBAAaJ,IAAb,EAAmBK,2BAAnB,CAAN;;EACA,MAAM;IACFC,QADE;IACQC,KADR;IACeC,UADf;IAC2BC,QAD3B;IACqCC,QADrC;IAC+CC;EAD/C,IAEFX,IAFJ;EAAA,MAC+DY,UAAU,UACrEZ,IADqE,EADnE,oEACmE,CADzE;;EAGA,MAAM;IAACa,MAAD;IAASC;EAAT,IAAoBF,UAA1B;EAEA,MAAMG,QAAQ,GAAGT,QAAQ,IAAIC,KAAK,KAAKS,SAAtB,GAAkC,MAAMC,wCAA+BZ,iBAASa,GAAxC,EAA6CnB,OAA7C,EAAsDO,QAAtD,EAAgEC,KAAhE,CAAxC,GAAiHC,UAAlI;EAEA,MAAMW,OAAO,GAAG,MAAMC,wBAAeR,UAAU,CAACS,eAA1B,CAAtB;EACA,IAAIC,MAAJ;EACA,MAAMC,GAAG,GAAG;IACRd,QAAQ,EAAEA,QAAQ,IAAI,OADd;IAERC,QAAQ,EAAEA,QAAQ,IAAI;EAFd,CAAZ;;EAIA,IAAIL,6BAAqBmB,QAArB,CAA8BL,OAAO,CAACM,QAAtC,CAAJ,EAAqD;IACjDH,MAAM,GAAG,MAAMI,iDAAmC;MAC9Cb,MAD8C;MAE9Cc,cAAc,EAAEZ,QAF8B;MAG9CU,QAAQ,EAAEN,OAAO,CAACM,QAH4B;MAI9CF,GAJ8C;MAK9CZ,KAL8C;MAM9CiB,EAAE,EAAEd;IAN0C,CAAnC,EAOZb,QAPY,CAAf;EAQH,CATD,MASO;IACHsB,GAAG,CAACd,QAAJ,GAAe,QAAf;IACA,MAAMoB,EAAE,GAAG,MAAMT,kCAAyBD,OAAO,CAACM,QAAjC,CAAjB;IACAH,MAAM,GAAG,MAAMI,kDAAoC;MAC/Cb,MAD+C;MAE/CU,GAF+C;MAG/CI,cAAc,EAAEZ,QAH+B;MAI/Ca,EAAE,EAAEd,OAJ2C;MAK/CgB,MAAM,EAAED,EAAE,CAACE,SALoC;MAM/CpB,KAN+C;MAO/CqB,eAAe,EAAEH,EAAE,CAACI;IAP2B,CAApC,EAQZhC,QARY,CAAf;EASH,CAvC8G,CAwC/G;;;EACAW,UAAU,CAACW,GAAX,GAAiBW,qBAAQ,IAAIC,sBAAJ,CAAcZ,GAAG,CAACd,QAAlB,EAA4B2B,YAA5B,CAAyCF,mBAAMX,GAAG,CAACb,QAAV,EAAoB,MAApB,CAAzC,EAAsE2B,QAAtE,EAAR,EAA0F,OAA1F,CAAjB;EACA,MAAM;IAACC;EAAD,IAAO,MAAMC,iCAAwB3B,UAAxB,CAAnB;;EACA,IAAI;IACA,uCAAW,MAAM2B,2BAAkB;MAACjB,MAAD;MAASkB,YAAY,EAAEF,EAAvB;MAA2Bb,QAAQ,EAAEpB,iBAASa;IAA9C,CAAlB,CAAjB,GAAsF;MAAEoB;IAAF,CAAtF;EACH,CAFD,CAEE,OAAOG,CAAP,EAAU;IACRC,OAAO,CAACC,KAAR,CAAcF,CAAd;;IACA,IAAI;MACA,MAAMF,kCAAyBD,EAAzB,CAAN;IACH,CAFD,CAEE,OAAOM,EAAP,EAAW;MACTF,OAAO,CAACG,GAAR,CAAYJ,CAAZ;MACA,OAAO;QAACH;MAAD,CAAP;IACH;EACJ;AACJ,CAtDM;;AAAMQ,qCAA0BhD,0BAA1B","names":["sendBscOffchainTransaction","testnet","body","provider","signatureId","kms_1","tatum_1","model_1","mnemonic","index","privateKey","gasLimit","gasPrice","nonce","withdrawal","amount","address","fromPriv","undefined","wallet_1","BSC","account","ledger_1","senderAccountId","txData","fee","includes","currency","transaction_1","fromPrivateKey","to","vc","digits","precision","contractAddress","erc20Address","web3_utils_1","bignumber_js_1","multipliedBy","toString","id","common_1","withdrawalId","e","console","error","e1","log","exports"],"sourceRoot":"","sources":["../../../src/offchain/bsc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}