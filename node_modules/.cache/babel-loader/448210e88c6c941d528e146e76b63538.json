{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountID = void 0;\n\nvar ripple_address_codec_1 = require(\"ripple-address-codec\");\n\nvar hash_160_1 = require(\"./hash-160\");\n\nvar buffer_1 = require(\"buffer/\");\n\nvar HEX_REGEX = /^[A-F0-9]{40}$/;\n/**\n * Class defining how to encode and decode an AccountID\n */\n\nvar AccountID =\n/** @class */\nfunction (_super) {\n  __extends(AccountID, _super);\n\n  function AccountID(bytes) {\n    return _super.call(this, bytes !== null && bytes !== void 0 ? bytes : AccountID.defaultAccountID.bytes) || this;\n  }\n  /**\n   * Defines how to construct an AccountID\n   *\n   * @param value either an existing AccountID, a hex-string, or a base58 r-Address\n   * @returns an AccountID object\n   */\n\n\n  AccountID.from = function (value) {\n    if (value instanceof AccountID) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      if (value === '') {\n        return new AccountID();\n      }\n\n      return HEX_REGEX.test(value) ? new AccountID(buffer_1.Buffer.from(value, 'hex')) : this.fromBase58(value);\n    }\n\n    throw new Error('Cannot construct AccountID from value given');\n  };\n  /**\n   * Defines how to build an AccountID from a base58 r-Address\n   *\n   * @param value a base58 r-Address\n   * @returns an AccountID object\n   */\n\n\n  AccountID.fromBase58 = function (value) {\n    if ((0, ripple_address_codec_1.isValidXAddress)(value)) {\n      var classic = (0, ripple_address_codec_1.xAddressToClassicAddress)(value);\n      if (classic.tag !== false) throw new Error('Only allowed to have tag on Account or Destination');\n      value = classic.classicAddress;\n    }\n\n    return new AccountID(buffer_1.Buffer.from((0, ripple_address_codec_1.decodeAccountID)(value)));\n  };\n  /**\n   * Overload of toJSON\n   *\n   * @returns the base58 string for this AccountID\n   */\n\n\n  AccountID.prototype.toJSON = function () {\n    return this.toBase58();\n  };\n  /**\n   * Defines how to encode AccountID into a base58 address\n   *\n   * @returns the base58 string defined by this.bytes\n   */\n\n\n  AccountID.prototype.toBase58 = function () {\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    return (0, ripple_address_codec_1.encodeAccountID)(this.bytes);\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n  };\n\n  AccountID.defaultAccountID = new AccountID(buffer_1.Buffer.alloc(20));\n  return AccountID;\n}(hash_160_1.Hash160);\n\nexports.AccountID = AccountID;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAMA;;AACA;;AAEA,IAAMA,SAAS,GAAG,gBAAlB;AAEA;;;;AAGA;AAAA;AAAA;EAAwBC;;EAGtB,mBAAYC,KAAZ,EAA0B;WACxBC,kBAAMD,KAAK,SAAL,SAAK,WAAL,WAASE,SAAS,CAACC,gBAAV,CAA2BH,KAA1C,KAAgD;EACjD;EAED;;;;;;;;EAMOE,iBAAP,UAAwCE,KAAxC,EAAgD;IAC9C,IAAIA,KAAK,YAAYF,SAArB,EAAgC;MAC9B,OAAOE,KAAP;IACD;;IAED,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,IAAIA,KAAK,KAAK,EAAd,EAAkB;QAChB,OAAO,IAAIF,SAAJ,EAAP;MACD;;MAED,OAAOJ,SAAS,CAACO,IAAV,CAAeD,KAAf,IACH,IAAIF,SAAJ,CAAcI,gBAAOC,IAAP,CAAYH,KAAZ,EAAmB,KAAnB,CAAd,CADG,GAEH,KAAKI,UAAL,CAAgBJ,KAAhB,CAFJ;IAGD;;IAED,MAAM,IAAIK,KAAJ,CAAU,6CAAV,CAAN;EACD,CAhBM;EAkBP;;;;;;;;EAMOP,uBAAP,UAAkBE,KAAlB,EAA+B;IAC7B,IAAI,4CAAgBA,KAAhB,CAAJ,EAA4B;MAC1B,IAAMM,OAAO,GAAG,qDAAyBN,KAAzB,CAAhB;MAEA,IAAIM,OAAO,CAACC,GAAR,KAAgB,KAApB,EACE,MAAM,IAAIF,KAAJ,CAAU,oDAAV,CAAN;MAEFL,KAAK,GAAGM,OAAO,CAACE,cAAhB;IACD;;IAED,OAAO,IAAIV,SAAJ,CAAcI,gBAAOC,IAAP,CAAY,4CAAgBH,KAAhB,CAAZ,CAAd,CAAP;EACD,CAXM;EAaP;;;;;;;EAKAF;IACE,OAAO,KAAKW,QAAL,EAAP;EACD,CAFD;EAIA;;;;;;;EAKAX;IACE;IACA,OAAO,4CAAgB,KAAKF,KAArB,CAAP;IACA;EACD,CAJD;;EA/DgBE,6BAA8B,IAAIA,SAAJ,CAAcI,gBAAOQ,KAAP,CAAa,EAAb,CAAd,CAA9B;EAoElB;AAAC,CArED,CAAwBC,kBAAxB;;AAuESC","names":["HEX_REGEX","__extends","bytes","_super","AccountID","defaultAccountID","value","test","buffer_1","from","fromBase58","Error","classic","tag","classicAddress","toBase58","alloc","hash_160_1","exports"],"sourceRoot":"","sources":["../../src/types/account-id.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}