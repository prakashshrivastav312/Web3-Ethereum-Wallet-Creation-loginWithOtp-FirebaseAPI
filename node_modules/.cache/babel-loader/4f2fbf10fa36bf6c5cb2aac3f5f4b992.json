{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar $ = require('./util/preconditions');\n\nvar errors = require('./errors');\n\nvar Base58Check = require('./encoding/base58check');\n\nvar Networks = require('./networks');\n\nvar Hash = require('./crypto/hash');\n\nvar JSUtil = require('./util/js');\n\nvar PublicKey = require('./publickey');\n/**\n * Instantiate an address from an address String or Buffer, a public key or script hash Buffer,\n * or an instance of {@link PublicKey} or {@link Script}.\n *\n * This is an immutable class, and if the first parameter provided to this constructor is an\n * `Address` instance, the same argument will be returned.\n *\n * An address has two key properties: `network` and `type`. The type is either\n * `Address.PayToPublicKeyHash` (value is the `'pubkeyhash'` string)\n * or `Address.PayToScriptHash` (the string `'scripthash'`). The network is an instance of {@link Network}.\n * You can quickly check whether an address is of a given kind by using the methods\n * `isPayToPublicKeyHash` and `isPayToScriptHash`\n *\n * @example\n * ```javascript\n * // validate that an input field is valid\n * var error = Address.getValidationError(input, 'testnet');\n * if (!error) {\n *   var address = Address(input, 'testnet');\n * } else {\n *   // invalid network or checksum (typo?)\n *   var message = error.messsage;\n * }\n *\n * // get an address from a public key\n * var address = Address(publicKey, 'testnet').toString();\n * ```\n *\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n * @constructor\n */\n\n\nfunction Address(data, network, type) {\n  /* jshint maxcomplexity: 12 */\n\n  /* jshint maxstatements: 20 */\n  if (!(this instanceof Address)) {\n    return new Address(data, network, type);\n  }\n\n  if (_.isArray(data) && _.isNumber(network)) {\n    return Address.createMultisig(data, network, type);\n  }\n\n  if (data instanceof Address) {\n    // Immutable instance\n    return data;\n  }\n\n  $.checkArgument(data, 'First argument is required, please include address data.', 'guide/address.html');\n\n  if (network && !Networks.get(network)) {\n    throw new TypeError('Second argument must be \"livenet\" or \"testnet\".');\n  }\n\n  if (type && type !== Address.PayToPublicKeyHash && type !== Address.PayToScriptHash) {\n    throw new TypeError('Third argument must be \"pubkeyhash\" or \"scripthash\".');\n  }\n\n  var info = this._classifyArguments(data, network, type); // set defaults if not set\n\n\n  info.network = info.network || Networks.get(network) || Networks.defaultNetwork;\n  info.type = info.type || type || Address.PayToPublicKeyHash;\n  JSUtil.defineImmutable(this, {\n    hashBuffer: info.hashBuffer,\n    network: info.network,\n    type: info.type\n  });\n  return this;\n}\n/**\n * Internal function used to split different kinds of arguments of the constructor\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Object} An \"info\" object with \"type\", \"network\", and \"hashBuffer\"\n */\n\n\nAddress.prototype._classifyArguments = function (data, network, type) {\n  /* jshint maxcomplexity: 10 */\n  // transform and validate input data\n  if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 20) {\n    return Address._transformHash(data);\n  } else if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 21) {\n    return Address._transformBuffer(data, network, type);\n  } else if (data instanceof PublicKey) {\n    return Address._transformPublicKey(data);\n  } else if (data instanceof Script) {\n    return Address._transformScript(data, network);\n  } else if (typeof data === 'string') {\n    return Address._transformString(data, network, type);\n  } else if (_.isObject(data)) {\n    return Address._transformObject(data);\n  } else {\n    throw new TypeError('First argument is an unrecognized data format.');\n  }\n};\n/** @static */\n\n\nAddress.PayToPublicKeyHash = 'pubkeyhash';\n/** @static */\n\nAddress.PayToScriptHash = 'scripthash';\n/**\n * @param {Buffer} hash - An instance of a hash Buffer\n * @returns {Object} An object with keys: hashBuffer\n * @private\n */\n\nAddress._transformHash = function (hash) {\n  var info = {};\n\n  if (!(hash instanceof Buffer) && !(hash instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n\n  if (hash.length !== 20) {\n    throw new TypeError('Address hashbuffers must be exactly 20 bytes.');\n  }\n\n  info.hashBuffer = hash;\n  return info;\n};\n/**\n * Deserializes an address serialized through `Address#toObject()`\n * @param {Object} data\n * @param {string} data.hash - the hash that this address encodes\n * @param {string} data.type - either 'pubkeyhash' or 'scripthash'\n * @param {Network=} data.network - the name of the network associated\n * @return {Address}\n */\n\n\nAddress._transformObject = function (data) {\n  $.checkArgument(data.hash || data.hashBuffer, 'Must provide a `hash` or `hashBuffer` property');\n  $.checkArgument(data.type, 'Must provide a `type` property');\n  return {\n    hashBuffer: data.hash ? Buffer.from(data.hash, 'hex') : data.hashBuffer,\n    network: Networks.get(data.network) || Networks.defaultNetwork,\n    type: data.type\n  };\n};\n/**\n * Internal function to discover the network and type based on the first data byte\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @returns {Object} An object with keys: network and type\n * @private\n */\n\n\nAddress._classifyFromVersion = function (buffer) {\n  var version = {};\n  var pubkeyhashNetwork = Networks.get(buffer[0], 'pubkeyhash');\n  var scripthashNetwork = Networks.get(buffer[0], 'scripthash');\n\n  if (pubkeyhashNetwork) {\n    version.network = pubkeyhashNetwork;\n    version.type = Address.PayToPublicKeyHash;\n  } else if (scripthashNetwork) {\n    version.network = scripthashNetwork;\n    version.type = Address.PayToScriptHash;\n  }\n\n  return version;\n};\n/**\n * Internal function to transform a bitcoin address buffer\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @param {string=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\n\n\nAddress._transformBuffer = function (buffer, network, type) {\n  /* jshint maxcomplexity: 9 */\n  var info = {};\n\n  if (!(buffer instanceof Buffer) && !(buffer instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n\n  if (buffer.length !== 1 + 20) {\n    throw new TypeError('Address buffers must be exactly 21 bytes.');\n  }\n\n  network = Networks.get(network);\n\n  var bufferVersion = Address._classifyFromVersion(buffer);\n\n  if (!bufferVersion.network || network && network !== bufferVersion.network) {\n    throw new TypeError('Address has mismatched network type.');\n  }\n\n  if (!bufferVersion.type || type && type !== bufferVersion.type) {\n    throw new TypeError('Address has mismatched type.');\n  }\n\n  info.hashBuffer = buffer.slice(1);\n  info.network = bufferVersion.network;\n  info.type = bufferVersion.type;\n  return info;\n};\n/**\n * Internal function to transform a {@link PublicKey}\n *\n * @param {PublicKey} pubkey - An instance of PublicKey\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\n\n\nAddress._transformPublicKey = function (pubkey) {\n  var info = {};\n\n  if (!(pubkey instanceof PublicKey)) {\n    throw new TypeError('Address must be an instance of PublicKey.');\n  }\n\n  info.hashBuffer = Hash.sha256ripemd160(pubkey.toBuffer());\n  info.type = Address.PayToPublicKeyHash;\n  return info;\n};\n/**\n * Internal function to transform a {@link Script} into a `info` object.\n *\n * @param {Script} script - An instance of Script\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\n\n\nAddress._transformScript = function (script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n  var info = script.getAddressInfo(network);\n\n  if (!info) {\n    throw new errors.Script.CantDeriveAddress(script);\n  }\n\n  return info;\n};\n/**\n * Creates a P2SH address from a set of public keys and a threshold.\n *\n * The addresses will be sorted lexicographically, as that is the trend in bitcoin.\n * To create an address from unsorted public keys, use the {@link Script#buildMultisigOut}\n * interface.\n *\n * @param {Array} publicKeys - a set of public keys to create an address\n * @param {number} threshold - the number of signatures needed to release the funds\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @return {Address}\n */\n\n\nAddress.createMultisig = function (publicKeys, threshold, network) {\n  network = network || publicKeys[0].network || Networks.defaultNetwork;\n  return Address.payingTo(Script.buildMultisigOut(publicKeys, threshold), network);\n};\n/**\n * Internal function to transform a bitcoin address string\n *\n * @param {string} data\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\n\n\nAddress._transformString = function (data, network, type) {\n  if (typeof data !== 'string') {\n    throw new TypeError('data parameter supplied is not a string.');\n  }\n\n  data = data.trim();\n  var addressBuffer = Base58Check.decode(data);\n\n  var info = Address._transformBuffer(addressBuffer, network, type);\n\n  return info;\n};\n/**\n * Instantiate an address from a PublicKey instance\n *\n * @param {PublicKey} data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromPublicKey = function (data, network) {\n  var info = Address._transformPublicKey(data);\n\n  network = network || Networks.defaultNetwork;\n  return new Address(info.hashBuffer, network, info.type);\n};\n/**\n * Instantiate an address from a ripemd160 public key hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromPublicKeyHash = function (hash, network) {\n  var info = Address._transformHash(hash);\n\n  return new Address(info.hashBuffer, network, Address.PayToPublicKeyHash);\n};\n/**\n * Instantiate an address from a ripemd160 script hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromScriptHash = function (hash, network) {\n  $.checkArgument(hash, 'hash parameter is required');\n\n  var info = Address._transformHash(hash);\n\n  return new Address(info.hashBuffer, network, Address.PayToScriptHash);\n};\n/**\n * Builds a p2sh address paying to script. This will hash the script and\n * use that to create the address.\n * If you want to extract an address associated with a script instead,\n * see {{Address#fromScript}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.payingTo = function (script, network) {\n  $.checkArgument(script, 'script is required');\n  $.checkArgument(script instanceof Script, 'script must be instance of Script');\n  return Address.fromScriptHash(Hash.sha256ripemd160(script.toBuffer()), network);\n};\n/**\n * Extract address from a Script. The script must be of one\n * of the following types: p2pkh input, p2pkh output, p2sh input\n * or p2sh output.\n * This will analyze the script and extract address information from it.\n * If you want to transform any script to a p2sh Address paying\n * to that script's hash instead, use {{Address#payingTo}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromScript = function (script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n\n  var info = Address._transformScript(script, network);\n\n  return new Address(info.hashBuffer, network, info.type);\n};\n/**\n * Instantiate an address from a buffer of the address\n *\n * @param {Buffer} buffer - An instance of buffer of the address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromBuffer = function (buffer, network, type) {\n  var info = Address._transformBuffer(buffer, network, type);\n\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n/**\n * Instantiate an address from an address string\n *\n * @param {string} str - An string of the bitcoin address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromString = function (str, network, type) {\n  var info = Address._transformString(str, network, type);\n\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n/**\n * Instantiate an address from an Object\n *\n * @param {string} json - An JSON string or Object with keys: hash, network and type\n * @returns {Address} A new valid instance of an Address\n */\n\n\nAddress.fromObject = function fromObject(obj) {\n  $.checkState(JSUtil.isHexa(obj.hash), 'Unexpected hash property, \"' + obj.hash + '\", expected to be hex.');\n  var hashBuffer = Buffer.from(obj.hash, 'hex');\n  return new Address(hashBuffer, obj.network, obj.type);\n};\n/**\n * Will return a validation error if exists\n *\n * @example\n * ```javascript\n * // a network mismatch error\n * var error = Address.getValidationError('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'testnet');\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {null|Error} The corresponding error message\n */\n\n\nAddress.getValidationError = function (data, network, type) {\n  var error;\n\n  try {\n    /* jshint nonew: false */\n    new Address(data, network, type);\n  } catch (e) {\n    error = e;\n  }\n\n  return error;\n};\n/**\n * Will return a boolean if an address is valid\n *\n * @example\n * ```javascript\n * assert(Address.isValid('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'livenet'));\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {boolean} The corresponding error message\n */\n\n\nAddress.isValid = function (data, network, type) {\n  return !Address.getValidationError(data, network, type);\n};\n/**\n * Returns true if an address is of pay to public key hash type\n * @return boolean\n */\n\n\nAddress.prototype.isPayToPublicKeyHash = function () {\n  return this.type === Address.PayToPublicKeyHash;\n};\n/**\n * Returns true if an address is of pay to script hash type\n * @return boolean\n */\n\n\nAddress.prototype.isPayToScriptHash = function () {\n  return this.type === Address.PayToScriptHash;\n};\n/**\n * Will return a buffer representation of the address\n *\n * @returns {Buffer} Bitcoin address buffer\n */\n\n\nAddress.prototype.toBuffer = function () {\n  var version = Buffer.from([this.network[this.type]]);\n  var buf = Buffer.concat([version, this.hashBuffer]);\n  return buf;\n};\n/**\n * @returns {Object} A plain object with the address information\n */\n\n\nAddress.prototype.toObject = Address.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hashBuffer.toString('hex'),\n    type: this.type,\n    network: this.network.toString()\n  };\n};\n/**\n * Will return a the string representation of the address\n *\n * @returns {string} Bitcoin address\n */\n\n\nAddress.prototype.toString = function () {\n  return Base58Check.encode(this.toBuffer());\n};\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Bitcoin address\n */\n\n\nAddress.prototype.inspect = function () {\n  return '<Address: ' + this.toString() + ', type: ' + this.type + ', network: ' + this.network + '>';\n};\n\nmodule.exports = Address;\n\nvar Script = require('./script');","map":{"version":3,"names":["_","require","$","errors","Base58Check","Networks","Hash","JSUtil","PublicKey","Address","data","network","type","isArray","isNumber","createMultisig","checkArgument","get","TypeError","PayToPublicKeyHash","PayToScriptHash","info","_classifyArguments","defaultNetwork","defineImmutable","hashBuffer","prototype","Buffer","Uint8Array","length","_transformHash","_transformBuffer","_transformPublicKey","Script","_transformScript","_transformString","isObject","_transformObject","hash","from","_classifyFromVersion","buffer","version","pubkeyhashNetwork","scripthashNetwork","bufferVersion","slice","pubkey","sha256ripemd160","toBuffer","script","getAddressInfo","CantDeriveAddress","publicKeys","threshold","payingTo","buildMultisigOut","trim","addressBuffer","decode","fromPublicKey","fromPublicKeyHash","fromScriptHash","fromScript","fromBuffer","fromString","str","fromObject","obj","checkState","isHexa","getValidationError","error","e","isValid","isPayToPublicKeyHash","isPayToScriptHash","buf","concat","toObject","toJSON","toString","encode","inspect","module","exports"],"sources":["C:/Users/acer/node_modules/bitcore-lib-doge/lib/address.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('./util/preconditions');\nvar errors = require('./errors');\nvar Base58Check = require('./encoding/base58check');\nvar Networks = require('./networks');\nvar Hash = require('./crypto/hash');\nvar JSUtil = require('./util/js');\nvar PublicKey = require('./publickey');\n\n/**\n * Instantiate an address from an address String or Buffer, a public key or script hash Buffer,\n * or an instance of {@link PublicKey} or {@link Script}.\n *\n * This is an immutable class, and if the first parameter provided to this constructor is an\n * `Address` instance, the same argument will be returned.\n *\n * An address has two key properties: `network` and `type`. The type is either\n * `Address.PayToPublicKeyHash` (value is the `'pubkeyhash'` string)\n * or `Address.PayToScriptHash` (the string `'scripthash'`). The network is an instance of {@link Network}.\n * You can quickly check whether an address is of a given kind by using the methods\n * `isPayToPublicKeyHash` and `isPayToScriptHash`\n *\n * @example\n * ```javascript\n * // validate that an input field is valid\n * var error = Address.getValidationError(input, 'testnet');\n * if (!error) {\n *   var address = Address(input, 'testnet');\n * } else {\n *   // invalid network or checksum (typo?)\n *   var message = error.messsage;\n * }\n *\n * // get an address from a public key\n * var address = Address(publicKey, 'testnet').toString();\n * ```\n *\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n * @constructor\n */\nfunction Address(data, network, type) {\n  /* jshint maxcomplexity: 12 */\n  /* jshint maxstatements: 20 */\n\n  if (!(this instanceof Address)) {\n    return new Address(data, network, type);\n  }\n\n  if (_.isArray(data) && _.isNumber(network)) {\n    return Address.createMultisig(data, network, type);\n  }\n\n  if (data instanceof Address) {\n    // Immutable instance\n    return data;\n  }\n\n  $.checkArgument(data, 'First argument is required, please include address data.', 'guide/address.html');\n\n  if (network && !Networks.get(network)) {\n    throw new TypeError('Second argument must be \"livenet\" or \"testnet\".');\n  }\n\n  if (type && (type !== Address.PayToPublicKeyHash && type !== Address.PayToScriptHash)) {\n    throw new TypeError('Third argument must be \"pubkeyhash\" or \"scripthash\".');\n  }\n\n  var info = this._classifyArguments(data, network, type);\n\n  // set defaults if not set\n  info.network = info.network || Networks.get(network) || Networks.defaultNetwork;\n  info.type = info.type || type || Address.PayToPublicKeyHash;\n\n  JSUtil.defineImmutable(this, {\n    hashBuffer: info.hashBuffer,\n    network: info.network,\n    type: info.type\n  });\n\n  return this;\n}\n\n/**\n * Internal function used to split different kinds of arguments of the constructor\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Object} An \"info\" object with \"type\", \"network\", and \"hashBuffer\"\n */\nAddress.prototype._classifyArguments = function(data, network, type) {\n  /* jshint maxcomplexity: 10 */\n  // transform and validate input data\n  if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 20) {\n    return Address._transformHash(data);\n  } else if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 21) {\n    return Address._transformBuffer(data, network, type);\n  } else if (data instanceof PublicKey) {\n    return Address._transformPublicKey(data);\n  } else if (data instanceof Script) {\n    return Address._transformScript(data, network);\n  } else if (typeof(data) === 'string') {\n    return Address._transformString(data, network, type);\n  } else if (_.isObject(data)) {\n    return Address._transformObject(data);\n  } else {\n    throw new TypeError('First argument is an unrecognized data format.');\n  }\n};\n\n/** @static */\nAddress.PayToPublicKeyHash = 'pubkeyhash';\n/** @static */\nAddress.PayToScriptHash = 'scripthash';\n\n/**\n * @param {Buffer} hash - An instance of a hash Buffer\n * @returns {Object} An object with keys: hashBuffer\n * @private\n */\nAddress._transformHash = function(hash) {\n  var info = {};\n  if (!(hash instanceof Buffer) && !(hash instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n  if (hash.length !== 20) {\n    throw new TypeError('Address hashbuffers must be exactly 20 bytes.');\n  }\n  info.hashBuffer = hash;\n  return info;\n};\n\n/**\n * Deserializes an address serialized through `Address#toObject()`\n * @param {Object} data\n * @param {string} data.hash - the hash that this address encodes\n * @param {string} data.type - either 'pubkeyhash' or 'scripthash'\n * @param {Network=} data.network - the name of the network associated\n * @return {Address}\n */\nAddress._transformObject = function(data) {\n  $.checkArgument(data.hash || data.hashBuffer, 'Must provide a `hash` or `hashBuffer` property');\n  $.checkArgument(data.type, 'Must provide a `type` property');\n  return {\n    hashBuffer: data.hash ? Buffer.from(data.hash, 'hex') : data.hashBuffer,\n    network: Networks.get(data.network) || Networks.defaultNetwork,\n    type: data.type\n  };\n};\n\n/**\n * Internal function to discover the network and type based on the first data byte\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @returns {Object} An object with keys: network and type\n * @private\n */\nAddress._classifyFromVersion = function(buffer) {\n  var version = {};\n\n  var pubkeyhashNetwork = Networks.get(buffer[0], 'pubkeyhash');\n  var scripthashNetwork = Networks.get(buffer[0], 'scripthash');\n\n  if (pubkeyhashNetwork) {\n    version.network = pubkeyhashNetwork;\n    version.type = Address.PayToPublicKeyHash;\n  } else if (scripthashNetwork) {\n    version.network = scripthashNetwork;\n    version.type = Address.PayToScriptHash;\n  }\n\n  return version;\n};\n\n/**\n * Internal function to transform a bitcoin address buffer\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @param {string=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\nAddress._transformBuffer = function(buffer, network, type) {\n  /* jshint maxcomplexity: 9 */\n  var info = {};\n  if (!(buffer instanceof Buffer) && !(buffer instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n  if (buffer.length !== 1 + 20) {\n    throw new TypeError('Address buffers must be exactly 21 bytes.');\n  }\n\n  network = Networks.get(network);\n  var bufferVersion = Address._classifyFromVersion(buffer);\n\n  if (!bufferVersion.network || (network && network !== bufferVersion.network)) {\n    throw new TypeError('Address has mismatched network type.');\n  }\n\n  if (!bufferVersion.type || (type && type !== bufferVersion.type)) {\n    throw new TypeError('Address has mismatched type.');\n  }\n\n  info.hashBuffer = buffer.slice(1);\n  info.network = bufferVersion.network;\n  info.type = bufferVersion.type;\n  return info;\n};\n\n/**\n * Internal function to transform a {@link PublicKey}\n *\n * @param {PublicKey} pubkey - An instance of PublicKey\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\nAddress._transformPublicKey = function(pubkey) {\n  var info = {};\n  if (!(pubkey instanceof PublicKey)) {\n    throw new TypeError('Address must be an instance of PublicKey.');\n  }\n  info.hashBuffer = Hash.sha256ripemd160(pubkey.toBuffer());\n  info.type = Address.PayToPublicKeyHash;\n  return info;\n};\n\n/**\n * Internal function to transform a {@link Script} into a `info` object.\n *\n * @param {Script} script - An instance of Script\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\nAddress._transformScript = function(script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n  var info = script.getAddressInfo(network);\n  if (!info) {\n    throw new errors.Script.CantDeriveAddress(script);\n  }\n  return info;\n};\n\n/**\n * Creates a P2SH address from a set of public keys and a threshold.\n *\n * The addresses will be sorted lexicographically, as that is the trend in bitcoin.\n * To create an address from unsorted public keys, use the {@link Script#buildMultisigOut}\n * interface.\n *\n * @param {Array} publicKeys - a set of public keys to create an address\n * @param {number} threshold - the number of signatures needed to release the funds\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @return {Address}\n */\nAddress.createMultisig = function(publicKeys, threshold, network) {\n  network = network || publicKeys[0].network || Networks.defaultNetwork;\n  return Address.payingTo(Script.buildMultisigOut(publicKeys, threshold), network);\n};\n\n/**\n * Internal function to transform a bitcoin address string\n *\n * @param {string} data\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\nAddress._transformString = function(data, network, type) {\n  if (typeof(data) !== 'string') {\n    throw new TypeError('data parameter supplied is not a string.');\n  }\n  data = data.trim();\n  var addressBuffer = Base58Check.decode(data);\n  var info = Address._transformBuffer(addressBuffer, network, type);\n  return info;\n};\n\n/**\n * Instantiate an address from a PublicKey instance\n *\n * @param {PublicKey} data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromPublicKey = function(data, network) {\n  var info = Address._transformPublicKey(data);\n  network = network || Networks.defaultNetwork;\n  return new Address(info.hashBuffer, network, info.type);\n};\n\n/**\n * Instantiate an address from a ripemd160 public key hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromPublicKeyHash = function(hash, network) {\n  var info = Address._transformHash(hash);\n  return new Address(info.hashBuffer, network, Address.PayToPublicKeyHash);\n};\n\n/**\n * Instantiate an address from a ripemd160 script hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromScriptHash = function(hash, network) {\n  $.checkArgument(hash, 'hash parameter is required');\n  var info = Address._transformHash(hash);\n  return new Address(info.hashBuffer, network, Address.PayToScriptHash);\n};\n\n/**\n * Builds a p2sh address paying to script. This will hash the script and\n * use that to create the address.\n * If you want to extract an address associated with a script instead,\n * see {{Address#fromScript}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.payingTo = function(script, network) {\n  $.checkArgument(script, 'script is required');\n  $.checkArgument(script instanceof Script, 'script must be instance of Script');\n\n  return Address.fromScriptHash(Hash.sha256ripemd160(script.toBuffer()), network);\n};\n\n/**\n * Extract address from a Script. The script must be of one\n * of the following types: p2pkh input, p2pkh output, p2sh input\n * or p2sh output.\n * This will analyze the script and extract address information from it.\n * If you want to transform any script to a p2sh Address paying\n * to that script's hash instead, use {{Address#payingTo}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromScript = function(script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n  var info = Address._transformScript(script, network);\n  return new Address(info.hashBuffer, network, info.type);\n};\n\n/**\n * Instantiate an address from a buffer of the address\n *\n * @param {Buffer} buffer - An instance of buffer of the address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromBuffer = function(buffer, network, type) {\n  var info = Address._transformBuffer(buffer, network, type);\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n\n/**\n * Instantiate an address from an address string\n *\n * @param {string} str - An string of the bitcoin address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\nAddress.fromString = function(str, network, type) {\n  var info = Address._transformString(str, network, type);\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n\n/**\n * Instantiate an address from an Object\n *\n * @param {string} json - An JSON string or Object with keys: hash, network and type\n * @returns {Address} A new valid instance of an Address\n */\nAddress.fromObject = function fromObject(obj) {\n  $.checkState(\n    JSUtil.isHexa(obj.hash),\n    'Unexpected hash property, \"' + obj.hash + '\", expected to be hex.'\n  );\n  var hashBuffer = Buffer.from(obj.hash, 'hex');\n  return new Address(hashBuffer, obj.network, obj.type);\n};\n\n/**\n * Will return a validation error if exists\n *\n * @example\n * ```javascript\n * // a network mismatch error\n * var error = Address.getValidationError('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'testnet');\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {null|Error} The corresponding error message\n */\nAddress.getValidationError = function(data, network, type) {\n  var error;\n  try {\n    /* jshint nonew: false */\n    new Address(data, network, type);\n  } catch (e) {\n    error = e;\n  }\n  return error;\n};\n\n/**\n * Will return a boolean if an address is valid\n *\n * @example\n * ```javascript\n * assert(Address.isValid('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'livenet'));\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {boolean} The corresponding error message\n */\nAddress.isValid = function(data, network, type) {\n  return !Address.getValidationError(data, network, type);\n};\n\n/**\n * Returns true if an address is of pay to public key hash type\n * @return boolean\n */\nAddress.prototype.isPayToPublicKeyHash = function() {\n  return this.type === Address.PayToPublicKeyHash;\n};\n\n/**\n * Returns true if an address is of pay to script hash type\n * @return boolean\n */\nAddress.prototype.isPayToScriptHash = function() {\n  return this.type === Address.PayToScriptHash;\n};\n\n/**\n * Will return a buffer representation of the address\n *\n * @returns {Buffer} Bitcoin address buffer\n */\nAddress.prototype.toBuffer = function() {\n  var version = Buffer.from([this.network[this.type]]);\n  var buf = Buffer.concat([version, this.hashBuffer]);\n  return buf;\n};\n\n/**\n * @returns {Object} A plain object with the address information\n */\nAddress.prototype.toObject = Address.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hashBuffer.toString('hex'),\n    type: this.type,\n    network: this.network.toString()\n  };\n};\n\n/**\n * Will return a the string representation of the address\n *\n * @returns {string} Bitcoin address\n */\nAddress.prototype.toString = function() {\n  return Base58Check.encode(this.toBuffer());\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Bitcoin address\n */\nAddress.prototype.inspect = function() {\n  return '<Address: ' + this.toString() + ', type: ' + this.type + ', network: ' + this.network + '>';\n};\n\nmodule.exports = Address;\n\nvar Script = require('./script');\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}