{"ast":null,"code":"'use strict';\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nconst SubscriptionTracker = require('./subscription-tracker');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure((api, options) => {\n  const subsTracker = SubscriptionTracker.singleton();\n  return async function (topic, handler) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // eslint-disable-line require-await\n    options.signal = subsTracker.subscribe(topic, handler, options.signal);\n    let done;\n    let fail;\n    const result = new Promise((resolve, reject) => {\n      done = resolve;\n      fail = reject;\n    }); // In Firefox, the initial call to fetch does not resolve until some data\n    // is received. If this doesn't happen within 1 second assume success\n\n    const ffWorkaround = setTimeout(() => done(), 1000); // Do this async to not block Firefox\n\n    setTimeout(() => {\n      api.post('pubsub/sub', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        // Initial subscribe fail, ensure we clean up\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n\n        if (!response) {\n          // if there was no response, the subscribe failed\n          return;\n        }\n\n        readMessages(response.ndjson(), {\n          onMessage: handler,\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n    }, 0);\n    return result;\n  };\n});\n\nasync function readMessages(msgStream, _ref) {\n  let {\n    onMessage,\n    onEnd,\n    onError\n  } = _ref;\n  onError = onError || log;\n\n  try {\n    for await (const msg of msgStream) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        });\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`;\n        onError(err, false, msg); // Not fatal\n      }\n    }\n  } catch (err) {\n    // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n    // Temporarily use the name property instead.\n    if (err.type !== 'aborted' && err.name !== 'AbortError') {\n      onError(err, true); // Fatal\n    }\n  } finally {\n    onEnd();\n  }\n}","map":{"version":3,"names":["uint8ArrayFromString","require","uint8ArrayToString","log","SubscriptionTracker","configure","toUrlSearchParams","module","exports","api","options","subsTracker","singleton","topic","handler","signal","subscribe","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","timeout","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","ndjson","onMessage","onEnd","onError","msgStream","msg","from","data","seqno","topicIDs","message","type","name"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"sourcesContent":["'use strict'\n\nconst uint8ArrayFromString = require('uint8arrays/from-string')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe')\nconst SubscriptionTracker = require('./subscription-tracker')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure((api, options) => {\n  const subsTracker = SubscriptionTracker.singleton()\n\n  return async (topic, handler, options = {}) => { // eslint-disable-line require-await\n    options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n    let done\n    let fail\n\n    const result = new Promise((resolve, reject) => {\n      done = resolve\n      fail = reject\n    })\n\n    // In Firefox, the initial call to fetch does not resolve until some data\n    // is received. If this doesn't happen within 1 second assume success\n    const ffWorkaround = setTimeout(() => done(), 1000)\n\n    // Do this async to not block Firefox\n    setTimeout(() => {\n      api.post('pubsub/sub', {\n        timeout: options.timeout,\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response.ndjson(), {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n    }, 0)\n\n    return result\n  }\n})\n\nasync function readMessages (msgStream, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of msgStream) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        })\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (err) {\n    // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n    // Temporarily use the name property instead.\n    if (err.type !== 'aborted' && err.name !== 'AbortError') {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}