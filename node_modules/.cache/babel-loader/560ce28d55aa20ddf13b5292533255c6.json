{"ast":null,"code":"let imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\n\nconst {\n  TextDecoder\n} = require(String.raw`util`);\n\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\nlet cachegetNodeBufferMemory0 = null;\n\nfunction getNodeBufferMemory0() {\n  if (cachegetNodeBufferMemory0 === null || cachegetNodeBufferMemory0.buffer !== wasm.memory.buffer) {\n    cachegetNodeBufferMemory0 = Buffer.from(wasm.memory.buffer);\n  }\n\n  return cachegetNodeBufferMemory0;\n}\n\nfunction passStringToWasm0(arg, malloc) {\n  const len = Buffer.byteLength(arg);\n  const ptr = malloc(len);\n  getNodeBufferMemory0().write(arg, ptr, len);\n  WASM_VECTOR_LEN = len;\n  return ptr;\n}\n\nfunction isLikeNone(x) {\n  return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n\nfunction debugString(val) {\n  // primitive types\n  const type = typeof val;\n\n  if (type == 'number' || type == 'boolean' || val == null) {\n    return `${val}`;\n  }\n\n  if (type == 'string') {\n    return `\"${val}\"`;\n  }\n\n  if (type == 'symbol') {\n    const description = val.description;\n\n    if (description == null) {\n      return 'Symbol';\n    } else {\n      return `Symbol(${description})`;\n    }\n  }\n\n  if (type == 'function') {\n    const name = val.name;\n\n    if (typeof name == 'string' && name.length > 0) {\n      return `Function(${name})`;\n    } else {\n      return 'Function';\n    }\n  } // objects\n\n\n  if (Array.isArray(val)) {\n    const length = val.length;\n    let debug = '[';\n\n    if (length > 0) {\n      debug += debugString(val[0]);\n    }\n\n    for (let i = 1; i < length; i++) {\n      debug += ', ' + debugString(val[i]);\n    }\n\n    debug += ']';\n    return debug;\n  } // Test for built-in\n\n\n  const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n  let className;\n\n  if (builtInMatches.length > 1) {\n    className = builtInMatches[1];\n  } else {\n    // Failed to match the standard '[object ClassName]'\n    return toString.call(val);\n  }\n\n  if (className == 'Object') {\n    // we're a user defined class or Object\n    // JSON.stringify avoids problems with cycles, and is generally much\n    // easier than looping through ownProperties of `val`.\n    try {\n      return 'Object(' + JSON.stringify(val) + ')';\n    } catch (_) {\n      return 'Object';\n    }\n  } // errors\n\n\n  if (val instanceof Error) {\n    return `${val.name}: ${val.message}\\n${val.stack}`;\n  } // TODO we could test for more things here, like `Set`s and `Map`s.\n\n\n  return className;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n  const ptr = malloc(arg.length * 1);\n  getUint8Memory0().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n  if (!(instance instanceof klass)) {\n    throw new Error(`expected instance of ${klass.name}`);\n  }\n\n  return instance.ptr;\n}\n\nlet cachegetUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n  if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n  return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {LegacyDaedalusPrivateKey} key\n* @returns {BootstrapWitness}\n*/\n\n\nmodule.exports.make_daedalus_bootstrap_witness = function (tx_body_hash, addr, key) {\n  _assertClass(tx_body_hash, TransactionHash);\n\n  _assertClass(addr, ByronAddress);\n\n  _assertClass(key, LegacyDaedalusPrivateKey);\n\n  var ret = wasm.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n  return BootstrapWitness.__wrap(ret);\n};\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {Bip32PrivateKey} key\n* @returns {BootstrapWitness}\n*/\n\n\nmodule.exports.make_icarus_bootstrap_witness = function (tx_body_hash, addr, key) {\n  _assertClass(tx_body_hash, TransactionHash);\n\n  _assertClass(addr, ByronAddress);\n\n  _assertClass(key, Bip32PrivateKey);\n\n  var ret = wasm.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n  return BootstrapWitness.__wrap(ret);\n};\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {PrivateKey} sk\n* @returns {Vkeywitness}\n*/\n\n\nmodule.exports.make_vkey_witness = function (tx_body_hash, sk) {\n  _assertClass(tx_body_hash, TransactionHash);\n\n  _assertClass(sk, PrivateKey);\n\n  var ret = wasm.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n  return Vkeywitness.__wrap(ret);\n};\n/**\n* @param {TransactionMetadata} metadata\n* @returns {MetadataHash}\n*/\n\n\nmodule.exports.hash_metadata = function (metadata) {\n  _assertClass(metadata, TransactionMetadata);\n\n  var ret = wasm.hash_metadata(metadata.ptr);\n  return MetadataHash.__wrap(ret);\n};\n/**\n* @param {TransactionBody} tx_body\n* @returns {TransactionHash}\n*/\n\n\nmodule.exports.hash_transaction = function (tx_body) {\n  _assertClass(tx_body, TransactionBody);\n\n  var ret = wasm.hash_transaction(tx_body.ptr);\n  return TransactionHash.__wrap(ret);\n};\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {Value}\n*/\n\n\nmodule.exports.get_implicit_input = function (txbody, pool_deposit, key_deposit) {\n  _assertClass(txbody, TransactionBody);\n\n  _assertClass(pool_deposit, BigNum);\n\n  _assertClass(key_deposit, BigNum);\n\n  var ret = wasm.get_implicit_input(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n  return Value.__wrap(ret);\n};\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {BigNum}\n*/\n\n\nmodule.exports.get_deposit = function (txbody, pool_deposit, key_deposit) {\n  _assertClass(txbody, TransactionBody);\n\n  _assertClass(pool_deposit, BigNum);\n\n  _assertClass(key_deposit, BigNum);\n\n  var ret = wasm.get_deposit(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n  return BigNum.__wrap(ret);\n};\n/**\n* @param {Value} assets\n* @param {BigNum} minimum_utxo_val\n* @returns {BigNum}\n*/\n\n\nmodule.exports.min_ada_required = function (assets, minimum_utxo_val) {\n  _assertClass(assets, Value);\n\n  _assertClass(minimum_utxo_val, BigNum);\n\n  var ret = wasm.min_ada_required(assets.ptr, minimum_utxo_val.ptr);\n  return BigNum.__wrap(ret);\n};\n/**\n* @param {Uint8Array} bytes\n* @returns {TransactionMetadatum}\n*/\n\n\nmodule.exports.encode_arbitrary_bytes_as_metadatum = function (bytes) {\n  var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ret = wasm.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n  return TransactionMetadatum.__wrap(ret);\n};\n/**\n* @param {TransactionMetadatum} metadata\n* @returns {Uint8Array}\n*/\n\n\nmodule.exports.decode_arbitrary_bytes_from_metadatum = function (metadata) {\n  _assertClass(metadata, TransactionMetadatum);\n\n  wasm.decode_arbitrary_bytes_from_metadatum(8, metadata.ptr);\n  var r0 = getInt32Memory0()[8 / 4 + 0];\n  var r1 = getInt32Memory0()[8 / 4 + 1];\n  var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n  wasm.__wbindgen_free(r0, r1 * 1);\n\n  return v0;\n};\n/**\n* @param {string} json\n* @param {number} schema\n* @returns {TransactionMetadatum}\n*/\n\n\nmodule.exports.encode_json_str_to_metadatum = function (json, schema) {\n  var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ret = wasm.encode_json_str_to_metadatum(ptr0, len0, schema);\n  return TransactionMetadatum.__wrap(ret);\n};\n/**\n* @param {TransactionMetadatum} metadatum\n* @param {number} schema\n* @returns {string}\n*/\n\n\nmodule.exports.decode_metadatum_to_json_str = function (metadatum, schema) {\n  try {\n    _assertClass(metadatum, TransactionMetadatum);\n\n    wasm.decode_metadatum_to_json_str(8, metadatum.ptr, schema);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_free(r0, r1);\n  }\n};\n/**\n* @param {Transaction} tx\n* @param {LinearFee} linear_fee\n* @returns {BigNum}\n*/\n\n\nmodule.exports.min_fee = function (tx, linear_fee) {\n  _assertClass(tx, Transaction);\n\n  _assertClass(linear_fee, LinearFee);\n\n  var ret = wasm.min_fee(tx.ptr, linear_fee.ptr);\n  return BigNum.__wrap(ret);\n};\n/**\n* @param {string} password\n* @param {string} salt\n* @param {string} nonce\n* @param {string} data\n* @returns {string}\n*/\n\n\nmodule.exports.encrypt_with_password = function (password, salt, nonce, data) {\n  try {\n    var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len3 = WASM_VECTOR_LEN;\n    wasm.encrypt_with_password(8, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_free(r0, r1);\n  }\n};\n/**\n* @param {string} password\n* @param {string} data\n* @returns {string}\n*/\n\n\nmodule.exports.decrypt_with_password = function (password, data) {\n  try {\n    var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.decrypt_with_password(8, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_free(r0, r1);\n  }\n};\n/**\n*/\n\n\nmodule.exports.CertificateKind = Object.freeze({\n  StakeRegistration: 0,\n  StakeDeregistration: 1,\n  StakeDelegation: 2,\n  PoolRegistration: 3,\n  PoolRetirement: 4,\n  GenesisKeyDelegation: 5,\n  MoveInstantaneousRewardsCert: 6\n});\n/**\n*/\n\nmodule.exports.MIRPot = Object.freeze({\n  Reserves: 0,\n  Treasury: 1\n});\n/**\n*/\n\nmodule.exports.RelayKind = Object.freeze({\n  SingleHostAddr: 0,\n  SingleHostName: 1,\n  MultiHostName: 2\n});\n/**\n*/\n\nmodule.exports.NativeScriptKind = Object.freeze({\n  ScriptPubkey: 0,\n  ScriptAll: 1,\n  ScriptAny: 2,\n  ScriptNOfK: 3,\n  TimelockStart: 4,\n  TimelockExpiry: 5\n});\n/**\n*/\n\nmodule.exports.TransactionMetadatumKind = Object.freeze({\n  MetadataMap: 0,\n  MetadataList: 1,\n  Int: 2,\n  Bytes: 3,\n  Text: 4\n});\n/**\n*/\n\nmodule.exports.MetadataJsonSchema = Object.freeze({\n  NoConversions: 0,\n  BasicConversions: 1,\n  DetailedSchema: 2\n});\n/**\n*/\n\nclass Address {\n  static __wrap(ptr) {\n    const obj = Object.create(Address.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_address_free(ptr);\n  }\n  /**\n  * @param {Uint8Array} data\n  * @returns {Address}\n  */\n\n\n  static from_bytes(data) {\n    var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.address_from_bytes(ptr0, len0);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.address_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string | undefined} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.address_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {Address}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.address_from_bech32(ptr0, len0);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  network_id() {\n    var ret = wasm.address_network_id(this.ptr);\n    return ret;\n  }\n\n}\n\nmodule.exports.Address = Address;\n/**\n*/\n\nclass AssetName {\n  static __wrap(ptr) {\n    const obj = Object.create(AssetName.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_assetname_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.assetname_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {AssetName}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.assetname_from_bytes(ptr0, len0);\n    return AssetName.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} name\n  * @returns {AssetName}\n  */\n\n\n  static new(name) {\n    var ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.assetname_new(ptr0, len0);\n    return AssetName.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  name() {\n    wasm.assetname_name(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n\n}\n\nmodule.exports.AssetName = AssetName;\n/**\n*/\n\nclass AssetNames {\n  static __wrap(ptr) {\n    const obj = Object.create(AssetNames.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_assetnames_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.assetnames_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {AssetNames}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.assetnames_from_bytes(ptr0, len0);\n    return AssetNames.__wrap(ret);\n  }\n  /**\n  * @returns {AssetNames}\n  */\n\n\n  static new() {\n    var ret = wasm.assetnames_new();\n    return AssetNames.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.assetnames_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {AssetName}\n  */\n\n\n  get(index) {\n    var ret = wasm.assetnames_get(this.ptr, index);\n    return AssetName.__wrap(ret);\n  }\n  /**\n  * @param {AssetName} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, AssetName);\n\n    wasm.assetnames_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.AssetNames = AssetNames;\n/**\n*/\n\nclass Assets {\n  static __wrap(ptr) {\n    const obj = Object.create(Assets.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_assets_free(ptr);\n  }\n  /**\n  * @returns {Assets}\n  */\n\n\n  static new() {\n    var ret = wasm.assets_new();\n    return Assets.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.assets_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {AssetName} key\n  * @param {BigNum} value\n  * @returns {BigNum | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, AssetName);\n\n    _assertClass(value, BigNum);\n\n    var ret = wasm.assets_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {AssetName} key\n  * @returns {BigNum | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, AssetName);\n\n    var ret = wasm.assets_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {AssetNames}\n  */\n\n\n  keys() {\n    var ret = wasm.assets_keys(this.ptr);\n    return AssetNames.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Assets = Assets;\n/**\n*/\n\nclass BaseAddress {\n  static __wrap(ptr) {\n    const obj = Object.create(BaseAddress.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_baseaddress_free(ptr);\n  }\n  /**\n  * @param {number} network\n  * @param {StakeCredential} payment\n  * @param {StakeCredential} stake\n  * @returns {BaseAddress}\n  */\n\n\n  static new(network, payment, stake) {\n    _assertClass(payment, StakeCredential);\n\n    _assertClass(stake, StakeCredential);\n\n    var ret = wasm.baseaddress_new(network, payment.ptr, stake.ptr);\n    return BaseAddress.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  payment_cred() {\n    var ret = wasm.baseaddress_payment_cred(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  stake_cred() {\n    var ret = wasm.baseaddress_stake_cred(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  to_address() {\n    var ret = wasm.baseaddress_to_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @param {Address} addr\n  * @returns {BaseAddress | undefined}\n  */\n\n\n  static from_address(addr) {\n    _assertClass(addr, Address);\n\n    var ret = wasm.baseaddress_from_address(addr.ptr);\n    return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n  }\n\n}\n\nmodule.exports.BaseAddress = BaseAddress;\n/**\n*/\n\nclass BigNum {\n  static __wrap(ptr) {\n    const obj = Object.create(BigNum.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_bignum_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.bignum_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {BigNum}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bignum_from_bytes(ptr0, len0);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {string} string\n  * @returns {BigNum}\n  */\n\n\n  static from_str(string) {\n    var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bignum_from_str(ptr0, len0);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_str() {\n    try {\n      wasm.bignum_to_str(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {BigNum} other\n  * @returns {BigNum}\n  */\n\n\n  checked_mul(other) {\n    _assertClass(other, BigNum);\n\n    var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} other\n  * @returns {BigNum}\n  */\n\n\n  checked_add(other) {\n    _assertClass(other, BigNum);\n\n    var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} other\n  * @returns {BigNum}\n  */\n\n\n  checked_sub(other) {\n    _assertClass(other, BigNum);\n\n    var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * returns 0 if it would otherwise underflow\n  * @param {BigNum} other\n  * @returns {BigNum}\n  */\n\n\n  clamped_sub(other) {\n    _assertClass(other, BigNum);\n\n    var ret = wasm.bignum_clamped_sub(this.ptr, other.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} rhs_value\n  * @returns {number}\n  */\n\n\n  compare(rhs_value) {\n    _assertClass(rhs_value, BigNum);\n\n    var ret = wasm.bignum_compare(this.ptr, rhs_value.ptr);\n    return ret;\n  }\n\n}\n\nmodule.exports.BigNum = BigNum;\n/**\n*/\n\nclass Bip32PrivateKey {\n  static __wrap(ptr) {\n    const obj = Object.create(Bip32PrivateKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_bip32privatekey_free(ptr);\n  }\n  /**\n  * derive this private key with the given index.\n  *\n  * # Security considerations\n  *\n  * * hard derivation index cannot be soft derived with the public key\n  *\n  * # Hard derivation vs Soft derivation\n  *\n  * If you pass an index below 0x80000000 then it is a soft derivation.\n  * The advantage of soft derivation is that it is possible to derive the\n  * public key too. I.e. derivation the private key with a soft derivation\n  * index and then retrieving the associated public key is equivalent to\n  * deriving the public key associated to the parent private key.\n  *\n  * Hard derivation index does not allow public key derivation.\n  *\n  * This is why deriving the private key should not fail while deriving\n  * the public key may fail (if the derivation index is invalid).\n  * @param {number} index\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  derive(index) {\n    var ret = wasm.bip32privatekey_derive(this.ptr, index);\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * 128-byte xprv a key format in Cardano that some software still uses or requires\n  * the traditional 96-byte xprv is simply encoded as\n  * prv | chaincode\n  * however, because some software may not know how to compute a public key from a private key,\n  * the 128-byte inlines the public key in the following format\n  * prv | pub | chaincode\n  * so be careful if you see the term \"xprv\" as it could refer to either one\n  * our library does not require the pub (instead we compute the pub key when needed)\n  * @param {Uint8Array} bytes\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  static from_128_xprv(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32privatekey_from_128_xprv(ptr0, len0);\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * see from_128_xprv\n  * @returns {Uint8Array}\n  */\n\n\n  to_128_xprv() {\n    wasm.bip32privatekey_to_128_xprv(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  static generate_ed25519_bip32() {\n    var ret = wasm.bip32privatekey_generate_ed25519_bip32();\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {PrivateKey}\n  */\n\n\n  to_raw_key() {\n    var ret = wasm.bip32privatekey_to_raw_key(this.ptr);\n    return PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {Bip32PublicKey}\n  */\n\n\n  to_public() {\n    var ret = wasm.bip32privatekey_to_public(this.ptr);\n    return Bip32PublicKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32privatekey_from_bytes(ptr0, len0);\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    wasm.bip32privatekey_as_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} bech32_str\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  static from_bech32(bech32_str) {\n    var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32privatekey_from_bech32(ptr0, len0);\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_bech32() {\n    try {\n      wasm.bip32privatekey_to_bech32(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {Uint8Array} entropy\n  * @param {Uint8Array} password\n  * @returns {Bip32PrivateKey}\n  */\n\n\n  static from_bip39_entropy(entropy, password) {\n    var ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(password, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n    return Bip32PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  chaincode() {\n    wasm.bip32privatekey_chaincode(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n\n}\n\nmodule.exports.Bip32PrivateKey = Bip32PrivateKey;\n/**\n*/\n\nclass Bip32PublicKey {\n  static __wrap(ptr) {\n    const obj = Object.create(Bip32PublicKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_bip32publickey_free(ptr);\n  }\n  /**\n  * derive this public key with the given index.\n  *\n  * # Errors\n  *\n  * If the index is not a soft derivation index (< 0x80000000) then\n  * calling this method will fail.\n  *\n  * # Security considerations\n  *\n  * * hard derivation index cannot be soft derived with the public key\n  *\n  * # Hard derivation vs Soft derivation\n  *\n  * If you pass an index below 0x80000000 then it is a soft derivation.\n  * The advantage of soft derivation is that it is possible to derive the\n  * public key too. I.e. derivation the private key with a soft derivation\n  * index and then retrieving the associated public key is equivalent to\n  * deriving the public key associated to the parent private key.\n  *\n  * Hard derivation index does not allow public key derivation.\n  *\n  * This is why deriving the private key should not fail while deriving\n  * the public key may fail (if the derivation index is invalid).\n  * @param {number} index\n  * @returns {Bip32PublicKey}\n  */\n\n\n  derive(index) {\n    var ret = wasm.bip32publickey_derive(this.ptr, index);\n    return Bip32PublicKey.__wrap(ret);\n  }\n  /**\n  * @returns {PublicKey}\n  */\n\n\n  to_raw_key() {\n    var ret = wasm.bip32publickey_to_raw_key(this.ptr);\n    return PublicKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Bip32PublicKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32publickey_from_bytes(ptr0, len0);\n    return Bip32PublicKey.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    wasm.bip32publickey_as_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} bech32_str\n  * @returns {Bip32PublicKey}\n  */\n\n\n  static from_bech32(bech32_str) {\n    var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bip32publickey_from_bech32(ptr0, len0);\n    return Bip32PublicKey.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_bech32() {\n    try {\n      wasm.bip32publickey_to_bech32(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  chaincode() {\n    wasm.bip32publickey_chaincode(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n\n}\n\nmodule.exports.Bip32PublicKey = Bip32PublicKey;\n/**\n*/\n\nclass Block {\n  static __wrap(ptr) {\n    const obj = Object.create(Block.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_block_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.block_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Block}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.block_from_bytes(ptr0, len0);\n    return Block.__wrap(ret);\n  }\n  /**\n  * @returns {Header}\n  */\n\n\n  header() {\n    var ret = wasm.block_header(this.ptr);\n    return Header.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionBodies}\n  */\n\n\n  transaction_bodies() {\n    var ret = wasm.block_transaction_bodies(this.ptr);\n    return TransactionBodies.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionWitnessSets}\n  */\n\n\n  transaction_witness_sets() {\n    var ret = wasm.block_transaction_witness_sets(this.ptr);\n    return TransactionWitnessSets.__wrap(ret);\n  }\n  /**\n  * @returns {MapTransactionIndexToTransactionMetadata}\n  */\n\n\n  transaction_metadata_set() {\n    var ret = wasm.block_transaction_metadata_set(this.ptr);\n    return MapTransactionIndexToTransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @param {Header} header\n  * @param {TransactionBodies} transaction_bodies\n  * @param {TransactionWitnessSets} transaction_witness_sets\n  * @param {MapTransactionIndexToTransactionMetadata} transaction_metadata_set\n  * @returns {Block}\n  */\n\n\n  static new(header, transaction_bodies, transaction_witness_sets, transaction_metadata_set) {\n    _assertClass(header, Header);\n\n    _assertClass(transaction_bodies, TransactionBodies);\n\n    _assertClass(transaction_witness_sets, TransactionWitnessSets);\n\n    _assertClass(transaction_metadata_set, MapTransactionIndexToTransactionMetadata);\n\n    var ret = wasm.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, transaction_metadata_set.ptr);\n    return Block.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Block = Block;\n/**\n*/\n\nclass BlockHash {\n  static __wrap(ptr) {\n    const obj = Object.create(BlockHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_blockhash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.blockhash_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.blockhash_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {BlockHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.blockhash_from_bech32(ptr0, len0);\n    return BlockHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {BlockHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.blockhash_from_bytes(ptr0, len0);\n    return BlockHash.__wrap(ret);\n  }\n\n}\n\nmodule.exports.BlockHash = BlockHash;\n/**\n*/\n\nclass BootstrapWitness {\n  static __wrap(ptr) {\n    const obj = Object.create(BootstrapWitness.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_bootstrapwitness_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.bootstrapwitness_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {BootstrapWitness}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.bootstrapwitness_from_bytes(ptr0, len0);\n    return BootstrapWitness.__wrap(ret);\n  }\n  /**\n  * @returns {Vkey}\n  */\n\n\n  vkey() {\n    var ret = wasm.bootstrapwitness_vkey(this.ptr);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519Signature}\n  */\n\n\n  signature() {\n    var ret = wasm.bootstrapwitness_signature(this.ptr);\n    return Ed25519Signature.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  chain_code() {\n    wasm.bootstrapwitness_chain_code(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  attributes() {\n    wasm.bootstrapwitness_attributes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Vkey} vkey\n  * @param {Ed25519Signature} signature\n  * @param {Uint8Array} chain_code\n  * @param {Uint8Array} attributes\n  * @returns {BootstrapWitness}\n  */\n\n\n  static new(vkey, signature, chain_code, attributes) {\n    _assertClass(vkey, Vkey);\n\n    _assertClass(signature, Ed25519Signature);\n\n    var ptr0 = passArray8ToWasm0(chain_code, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(attributes, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n    return BootstrapWitness.__wrap(ret);\n  }\n\n}\n\nmodule.exports.BootstrapWitness = BootstrapWitness;\n/**\n*/\n\nclass BootstrapWitnesses {\n  static __wrap(ptr) {\n    const obj = Object.create(BootstrapWitnesses.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_bootstrapwitnesses_free(ptr);\n  }\n  /**\n  * @returns {BootstrapWitnesses}\n  */\n\n\n  static new() {\n    var ret = wasm.bootstrapwitnesses_new();\n    return BootstrapWitnesses.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.bootstrapwitnesses_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {BootstrapWitness}\n  */\n\n\n  get(index) {\n    var ret = wasm.bootstrapwitnesses_get(this.ptr, index);\n    return BootstrapWitness.__wrap(ret);\n  }\n  /**\n  * @param {BootstrapWitness} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, BootstrapWitness);\n\n    wasm.bootstrapwitnesses_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.BootstrapWitnesses = BootstrapWitnesses;\n/**\n*/\n\nclass ByronAddress {\n  static __wrap(ptr) {\n    const obj = Object.create(ByronAddress.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_byronaddress_free(ptr);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_base58() {\n    try {\n      wasm.byronaddress_to_base58(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.byronaddress_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ByronAddress}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.byronaddress_from_bytes(ptr0, len0);\n    return ByronAddress.__wrap(ret);\n  }\n  /**\n  * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n  * note: for bech32 addresses, you need to use network_id instead\n  * @returns {number}\n  */\n\n\n  byron_protocol_magic() {\n    var ret = wasm.byronaddress_byron_protocol_magic(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  attributes() {\n    wasm.byronaddress_attributes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  network_id() {\n    var ret = wasm.byronaddress_network_id(this.ptr);\n    return ret;\n  }\n  /**\n  * @param {string} s\n  * @returns {ByronAddress}\n  */\n\n\n  static from_base58(s) {\n    var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.byronaddress_from_base58(ptr0, len0);\n    return ByronAddress.__wrap(ret);\n  }\n  /**\n  * @param {Bip32PublicKey} key\n  * @param {number} protocol_magic\n  * @returns {ByronAddress}\n  */\n\n\n  static icarus_from_key(key, protocol_magic) {\n    _assertClass(key, Bip32PublicKey);\n\n    var ret = wasm.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n    return ByronAddress.__wrap(ret);\n  }\n  /**\n  * @param {string} s\n  * @returns {boolean}\n  */\n\n\n  static is_valid(s) {\n    var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.byronaddress_is_valid(ptr0, len0);\n    return ret !== 0;\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  to_address() {\n    var ret = wasm.byronaddress_to_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @param {Address} addr\n  * @returns {ByronAddress | undefined}\n  */\n\n\n  static from_address(addr) {\n    _assertClass(addr, Address);\n\n    var ret = wasm.byronaddress_from_address(addr.ptr);\n    return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n  }\n\n}\n\nmodule.exports.ByronAddress = ByronAddress;\n/**\n*/\n\nclass Certificate {\n  static __wrap(ptr) {\n    const obj = Object.create(Certificate.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_certificate_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.certificate_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Certificate}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.certificate_from_bytes(ptr0, len0);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {StakeRegistration} stake_registration\n  * @returns {Certificate}\n  */\n\n\n  static new_stake_registration(stake_registration) {\n    _assertClass(stake_registration, StakeRegistration);\n\n    var ret = wasm.certificate_new_stake_registration(stake_registration.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {StakeDeregistration} stake_deregistration\n  * @returns {Certificate}\n  */\n\n\n  static new_stake_deregistration(stake_deregistration) {\n    _assertClass(stake_deregistration, StakeDeregistration);\n\n    var ret = wasm.certificate_new_stake_deregistration(stake_deregistration.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {StakeDelegation} stake_delegation\n  * @returns {Certificate}\n  */\n\n\n  static new_stake_delegation(stake_delegation) {\n    _assertClass(stake_delegation, StakeDelegation);\n\n    var ret = wasm.certificate_new_stake_delegation(stake_delegation.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {PoolRegistration} pool_registration\n  * @returns {Certificate}\n  */\n\n\n  static new_pool_registration(pool_registration) {\n    _assertClass(pool_registration, PoolRegistration);\n\n    var ret = wasm.certificate_new_pool_registration(pool_registration.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {PoolRetirement} pool_retirement\n  * @returns {Certificate}\n  */\n\n\n  static new_pool_retirement(pool_retirement) {\n    _assertClass(pool_retirement, PoolRetirement);\n\n    var ret = wasm.certificate_new_pool_retirement(pool_retirement.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {GenesisKeyDelegation} genesis_key_delegation\n  * @returns {Certificate}\n  */\n\n\n  static new_genesis_key_delegation(genesis_key_delegation) {\n    _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n\n    var ret = wasm.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n  * @returns {Certificate}\n  */\n\n\n  static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n    _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n\n    var ret = wasm.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.certificate_kind(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {StakeRegistration | undefined}\n  */\n\n\n  as_stake_registration() {\n    var ret = wasm.certificate_as_stake_registration(this.ptr);\n    return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n  }\n  /**\n  * @returns {StakeDeregistration | undefined}\n  */\n\n\n  as_stake_deregistration() {\n    var ret = wasm.certificate_as_stake_deregistration(this.ptr);\n    return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n  }\n  /**\n  * @returns {StakeDelegation | undefined}\n  */\n\n\n  as_stake_delegation() {\n    var ret = wasm.certificate_as_stake_delegation(this.ptr);\n    return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n  }\n  /**\n  * @returns {PoolRegistration | undefined}\n  */\n\n\n  as_pool_registration() {\n    var ret = wasm.certificate_as_pool_registration(this.ptr);\n    return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n  }\n  /**\n  * @returns {PoolRetirement | undefined}\n  */\n\n\n  as_pool_retirement() {\n    var ret = wasm.certificate_as_pool_retirement(this.ptr);\n    return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n  }\n  /**\n  * @returns {GenesisKeyDelegation | undefined}\n  */\n\n\n  as_genesis_key_delegation() {\n    var ret = wasm.certificate_as_genesis_key_delegation(this.ptr);\n    return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n  }\n  /**\n  * @returns {MoveInstantaneousRewardsCert | undefined}\n  */\n\n\n  as_move_instantaneous_rewards_cert() {\n    var ret = wasm.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n    return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Certificate = Certificate;\n/**\n*/\n\nclass Certificates {\n  static __wrap(ptr) {\n    const obj = Object.create(Certificates.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_certificates_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.certificates_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Certificates}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.certificates_from_bytes(ptr0, len0);\n    return Certificates.__wrap(ret);\n  }\n  /**\n  * @returns {Certificates}\n  */\n\n\n  static new() {\n    var ret = wasm.certificates_new();\n    return Certificates.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.certificates_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Certificate}\n  */\n\n\n  get(index) {\n    var ret = wasm.certificates_get(this.ptr, index);\n    return Certificate.__wrap(ret);\n  }\n  /**\n  * @param {Certificate} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Certificate);\n\n    wasm.certificates_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.Certificates = Certificates;\n/**\n*/\n\nclass DNSRecordAorAAAA {\n  static __wrap(ptr) {\n    const obj = Object.create(DNSRecordAorAAAA.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_dnsrecordaoraaaa_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.dnsrecordaoraaaa_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {DNSRecordAorAAAA}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.dnsrecordaoraaaa_from_bytes(ptr0, len0);\n    return DNSRecordAorAAAA.__wrap(ret);\n  }\n  /**\n  * @param {string} dns_name\n  * @returns {DNSRecordAorAAAA}\n  */\n\n\n  static new(dns_name) {\n    var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.dnsrecordaoraaaa_new(ptr0, len0);\n    return DNSRecordAorAAAA.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  record() {\n    try {\n      wasm.dnsrecordaoraaaa_record(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n\n}\n\nmodule.exports.DNSRecordAorAAAA = DNSRecordAorAAAA;\n/**\n*/\n\nclass DNSRecordSRV {\n  static __wrap(ptr) {\n    const obj = Object.create(DNSRecordSRV.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_dnsrecordsrv_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.dnsrecordsrv_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {DNSRecordSRV}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.dnsrecordsrv_from_bytes(ptr0, len0);\n    return DNSRecordSRV.__wrap(ret);\n  }\n  /**\n  * @param {string} dns_name\n  * @returns {DNSRecordSRV}\n  */\n\n\n  static new(dns_name) {\n    var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.dnsrecordsrv_new(ptr0, len0);\n    return DNSRecordSRV.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  record() {\n    try {\n      wasm.dnsrecordsrv_record(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n\n}\n\nmodule.exports.DNSRecordSRV = DNSRecordSRV;\n/**\n*/\n\nclass Ed25519KeyHash {\n  static __wrap(ptr) {\n    const obj = Object.create(Ed25519KeyHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_ed25519keyhash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.ed25519keyhash_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.ed25519keyhash_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519keyhash_from_bech32(ptr0, len0);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519keyhash_from_bytes(ptr0, len0);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Ed25519KeyHash = Ed25519KeyHash;\n/**\n*/\n\nclass Ed25519KeyHashes {\n  static __wrap(ptr) {\n    const obj = Object.create(Ed25519KeyHashes.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_ed25519keyhashes_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.ed25519keyhashes_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Ed25519KeyHashes}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519keyhashes_from_bytes(ptr0, len0);\n    return Ed25519KeyHashes.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHashes}\n  */\n\n\n  static new() {\n    var ret = wasm.ed25519keyhashes_new();\n    return Ed25519KeyHashes.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.ed25519keyhashes_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  get(index) {\n    var ret = wasm.ed25519keyhashes_get(this.ptr, index);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @param {Ed25519KeyHash} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Ed25519KeyHash);\n\n    wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.Ed25519KeyHashes = Ed25519KeyHashes;\n/**\n*/\n\nclass Ed25519Signature {\n  static __wrap(ptr) {\n    const obj = Object.create(Ed25519Signature.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_ed25519signature_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.ed25519signature_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_bech32() {\n    try {\n      wasm.ed25519signature_to_bech32(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_hex() {\n    try {\n      wasm.ed25519signature_to_hex(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech32_str\n  * @returns {Ed25519Signature}\n  */\n\n\n  static from_bech32(bech32_str) {\n    var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519signature_from_bech32(ptr0, len0);\n    return Ed25519Signature.__wrap(ret);\n  }\n  /**\n  * @param {string} input\n  * @returns {Ed25519Signature}\n  */\n\n\n  static from_hex(input) {\n    var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519signature_from_hex(ptr0, len0);\n    return Ed25519Signature.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Ed25519Signature}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ed25519signature_from_bytes(ptr0, len0);\n    return Ed25519Signature.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Ed25519Signature = Ed25519Signature;\n/**\n*/\n\nclass EnterpriseAddress {\n  static __wrap(ptr) {\n    const obj = Object.create(EnterpriseAddress.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_enterpriseaddress_free(ptr);\n  }\n  /**\n  * @param {number} network\n  * @param {StakeCredential} payment\n  * @returns {EnterpriseAddress}\n  */\n\n\n  static new(network, payment) {\n    _assertClass(payment, StakeCredential);\n\n    var ret = wasm.enterpriseaddress_new(network, payment.ptr);\n    return EnterpriseAddress.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  payment_cred() {\n    var ret = wasm.enterpriseaddress_payment_cred(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  to_address() {\n    var ret = wasm.enterpriseaddress_to_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @param {Address} addr\n  * @returns {EnterpriseAddress | undefined}\n  */\n\n\n  static from_address(addr) {\n    _assertClass(addr, Address);\n\n    var ret = wasm.enterpriseaddress_from_address(addr.ptr);\n    return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n  }\n\n}\n\nmodule.exports.EnterpriseAddress = EnterpriseAddress;\n/**\n*/\n\nclass GeneralTransactionMetadata {\n  static __wrap(ptr) {\n    const obj = Object.create(GeneralTransactionMetadata.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_generaltransactionmetadata_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.generaltransactionmetadata_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {GeneralTransactionMetadata}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.generaltransactionmetadata_from_bytes(ptr0, len0);\n    return GeneralTransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @returns {GeneralTransactionMetadata}\n  */\n\n\n  static new() {\n    var ret = wasm.generaltransactionmetadata_new();\n    return GeneralTransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.generaltransactionmetadata_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {BigNum} key\n  * @param {TransactionMetadatum} value\n  * @returns {TransactionMetadatum | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, BigNum);\n\n    _assertClass(value, TransactionMetadatum);\n\n    var ret = wasm.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} key\n  * @returns {TransactionMetadatum | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, BigNum);\n\n    var ret = wasm.generaltransactionmetadata_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionMetadatumLabels}\n  */\n\n\n  keys() {\n    var ret = wasm.generaltransactionmetadata_keys(this.ptr);\n    return TransactionMetadatumLabels.__wrap(ret);\n  }\n\n}\n\nmodule.exports.GeneralTransactionMetadata = GeneralTransactionMetadata;\n/**\n*/\n\nclass GenesisDelegateHash {\n  static __wrap(ptr) {\n    const obj = Object.create(GenesisDelegateHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_genesisdelegatehash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.genesisdelegatehash_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.genesisdelegatehash_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {GenesisDelegateHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesisdelegatehash_from_bech32(ptr0, len0);\n    return GenesisDelegateHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {GenesisDelegateHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesisdelegatehash_from_bytes(ptr0, len0);\n    return GenesisDelegateHash.__wrap(ret);\n  }\n\n}\n\nmodule.exports.GenesisDelegateHash = GenesisDelegateHash;\n/**\n*/\n\nclass GenesisHash {\n  static __wrap(ptr) {\n    const obj = Object.create(GenesisHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_genesishash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.genesishash_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.genesishash_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {GenesisHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesishash_from_bech32(ptr0, len0);\n    return GenesisHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {GenesisHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesishash_from_bytes(ptr0, len0);\n    return GenesisHash.__wrap(ret);\n  }\n\n}\n\nmodule.exports.GenesisHash = GenesisHash;\n/**\n*/\n\nclass GenesisHashes {\n  static __wrap(ptr) {\n    const obj = Object.create(GenesisHashes.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_genesishashes_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.genesishashes_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {GenesisHashes}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesishashes_from_bytes(ptr0, len0);\n    return GenesisHashes.__wrap(ret);\n  }\n  /**\n  * @returns {GenesisHashes}\n  */\n\n\n  static new() {\n    var ret = wasm.genesishashes_new();\n    return GenesisHashes.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.genesishashes_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {GenesisHash}\n  */\n\n\n  get(index) {\n    var ret = wasm.genesishashes_get(this.ptr, index);\n    return GenesisHash.__wrap(ret);\n  }\n  /**\n  * @param {GenesisHash} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, GenesisHash);\n\n    wasm.genesishashes_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.GenesisHashes = GenesisHashes;\n/**\n*/\n\nclass GenesisKeyDelegation {\n  static __wrap(ptr) {\n    const obj = Object.create(GenesisKeyDelegation.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_genesiskeydelegation_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.genesiskeydelegation_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {GenesisKeyDelegation}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.genesiskeydelegation_from_bytes(ptr0, len0);\n    return GenesisKeyDelegation.__wrap(ret);\n  }\n  /**\n  * @returns {GenesisHash}\n  */\n\n\n  genesishash() {\n    var ret = wasm.genesiskeydelegation_genesishash(this.ptr);\n    return GenesisHash.__wrap(ret);\n  }\n  /**\n  * @returns {GenesisDelegateHash}\n  */\n\n\n  genesis_delegate_hash() {\n    var ret = wasm.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n    return GenesisDelegateHash.__wrap(ret);\n  }\n  /**\n  * @returns {VRFKeyHash}\n  */\n\n\n  vrf_keyhash() {\n    var ret = wasm.genesiskeydelegation_vrf_keyhash(this.ptr);\n    return VRFKeyHash.__wrap(ret);\n  }\n  /**\n  * @param {GenesisHash} genesishash\n  * @param {GenesisDelegateHash} genesis_delegate_hash\n  * @param {VRFKeyHash} vrf_keyhash\n  * @returns {GenesisKeyDelegation}\n  */\n\n\n  static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n    _assertClass(genesishash, GenesisHash);\n\n    _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n\n    _assertClass(vrf_keyhash, VRFKeyHash);\n\n    var ret = wasm.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n    return GenesisKeyDelegation.__wrap(ret);\n  }\n\n}\n\nmodule.exports.GenesisKeyDelegation = GenesisKeyDelegation;\n/**\n*/\n\nclass Header {\n  static __wrap(ptr) {\n    const obj = Object.create(Header.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_header_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.header_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Header}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.header_from_bytes(ptr0, len0);\n    return Header.__wrap(ret);\n  }\n  /**\n  * @returns {HeaderBody}\n  */\n\n\n  header_body() {\n    var ret = wasm.header_header_body(this.ptr);\n    return HeaderBody.__wrap(ret);\n  }\n  /**\n  * @returns {KESSignature}\n  */\n\n\n  body_signature() {\n    var ret = wasm.header_body_signature(this.ptr);\n    return KESSignature.__wrap(ret);\n  }\n  /**\n  * @param {HeaderBody} header_body\n  * @param {KESSignature} body_signature\n  * @returns {Header}\n  */\n\n\n  static new(header_body, body_signature) {\n    _assertClass(header_body, HeaderBody);\n\n    _assertClass(body_signature, KESSignature);\n\n    var ret = wasm.header_new(header_body.ptr, body_signature.ptr);\n    return Header.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Header = Header;\n/**\n*/\n\nclass HeaderBody {\n  static __wrap(ptr) {\n    const obj = Object.create(HeaderBody.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_headerbody_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.headerbody_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {HeaderBody}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.headerbody_from_bytes(ptr0, len0);\n    return HeaderBody.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  block_number() {\n    var ret = wasm.headerbody_block_number(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  slot() {\n    var ret = wasm.headerbody_slot(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {BlockHash | undefined}\n  */\n\n\n  prev_hash() {\n    var ret = wasm.headerbody_prev_hash(this.ptr);\n    return ret === 0 ? undefined : BlockHash.__wrap(ret);\n  }\n  /**\n  * @returns {Vkey}\n  */\n\n\n  issuer_vkey() {\n    var ret = wasm.headerbody_issuer_vkey(this.ptr);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @returns {VRFVKey}\n  */\n\n\n  vrf_vkey() {\n    var ret = wasm.headerbody_vrf_vkey(this.ptr);\n    return VRFVKey.__wrap(ret);\n  }\n  /**\n  * @returns {VRFCert}\n  */\n\n\n  nonce_vrf() {\n    var ret = wasm.headerbody_nonce_vrf(this.ptr);\n    return VRFCert.__wrap(ret);\n  }\n  /**\n  * @returns {VRFCert}\n  */\n\n\n  leader_vrf() {\n    var ret = wasm.headerbody_leader_vrf(this.ptr);\n    return VRFCert.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  block_body_size() {\n    var ret = wasm.headerbody_block_body_size(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {BlockHash}\n  */\n\n\n  block_body_hash() {\n    var ret = wasm.headerbody_block_body_hash(this.ptr);\n    return BlockHash.__wrap(ret);\n  }\n  /**\n  * @returns {OperationalCert}\n  */\n\n\n  operational_cert() {\n    var ret = wasm.headerbody_operational_cert(this.ptr);\n    return OperationalCert.__wrap(ret);\n  }\n  /**\n  * @returns {ProtocolVersion}\n  */\n\n\n  protocol_version() {\n    var ret = wasm.headerbody_protocol_version(this.ptr);\n    return ProtocolVersion.__wrap(ret);\n  }\n  /**\n  * @param {number} block_number\n  * @param {number} slot\n  * @param {BlockHash | undefined} prev_hash\n  * @param {Vkey} issuer_vkey\n  * @param {VRFVKey} vrf_vkey\n  * @param {VRFCert} nonce_vrf\n  * @param {VRFCert} leader_vrf\n  * @param {number} block_body_size\n  * @param {BlockHash} block_body_hash\n  * @param {OperationalCert} operational_cert\n  * @param {ProtocolVersion} protocol_version\n  * @returns {HeaderBody}\n  */\n\n\n  static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\n    let ptr0 = 0;\n\n    if (!isLikeNone(prev_hash)) {\n      _assertClass(prev_hash, BlockHash);\n\n      ptr0 = prev_hash.ptr;\n      prev_hash.ptr = 0;\n    }\n\n    _assertClass(issuer_vkey, Vkey);\n\n    _assertClass(vrf_vkey, VRFVKey);\n\n    _assertClass(nonce_vrf, VRFCert);\n\n    _assertClass(leader_vrf, VRFCert);\n\n    _assertClass(block_body_hash, BlockHash);\n\n    _assertClass(operational_cert, OperationalCert);\n\n    _assertClass(protocol_version, ProtocolVersion);\n\n    var ret = wasm.headerbody_new(block_number, slot, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n    return HeaderBody.__wrap(ret);\n  }\n\n}\n\nmodule.exports.HeaderBody = HeaderBody;\n/**\n*/\n\nclass Int {\n  static __wrap(ptr) {\n    const obj = Object.create(Int.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_int_free(ptr);\n  }\n  /**\n  * @param {BigNum} x\n  * @returns {Int}\n  */\n\n\n  static new(x) {\n    _assertClass(x, BigNum);\n\n    var ret = wasm.int_new(x.ptr);\n    return Int.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} x\n  * @returns {Int}\n  */\n\n\n  static new_negative(x) {\n    _assertClass(x, BigNum);\n\n    var ret = wasm.int_new_negative(x.ptr);\n    return Int.__wrap(ret);\n  }\n  /**\n  * @param {number} x\n  * @returns {Int}\n  */\n\n\n  static new_i32(x) {\n    var ret = wasm.int_new_i32(x);\n    return Int.__wrap(ret);\n  }\n  /**\n  * @returns {boolean}\n  */\n\n\n  is_positive() {\n    var ret = wasm.int_is_positive(this.ptr);\n    return ret !== 0;\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  as_positive() {\n    var ret = wasm.int_as_positive(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  as_negative() {\n    var ret = wasm.int_as_negative(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  as_i32() {\n    wasm.int_as_i32(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1;\n  }\n\n}\n\nmodule.exports.Int = Int;\n/**\n*/\n\nclass Ipv4 {\n  static __wrap(ptr) {\n    const obj = Object.create(Ipv4.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_ipv4_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.ipv4_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Ipv4}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ipv4_from_bytes(ptr0, len0);\n    return Ipv4.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} data\n  * @returns {Ipv4}\n  */\n\n\n  static new(data) {\n    var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ipv4_new(ptr0, len0);\n    return Ipv4.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  ip() {\n    wasm.ipv4_ip(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n\n}\n\nmodule.exports.Ipv4 = Ipv4;\n/**\n*/\n\nclass Ipv6 {\n  static __wrap(ptr) {\n    const obj = Object.create(Ipv6.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_ipv6_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.ipv6_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Ipv6}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ipv6_from_bytes(ptr0, len0);\n    return Ipv6.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} data\n  * @returns {Ipv6}\n  */\n\n\n  static new(data) {\n    var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.ipv6_new(ptr0, len0);\n    return Ipv6.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  ip() {\n    wasm.ipv6_ip(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n\n}\n\nmodule.exports.Ipv6 = Ipv6;\n/**\n*/\n\nclass KESSignature {\n  static __wrap(ptr) {\n    const obj = Object.create(KESSignature.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_kessignature_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.kessignature_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {KESSignature}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.kessignature_from_bytes(ptr0, len0);\n    return KESSignature.__wrap(ret);\n  }\n\n}\n\nmodule.exports.KESSignature = KESSignature;\n/**\n*/\n\nclass KESVKey {\n  static __wrap(ptr) {\n    const obj = Object.create(KESVKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_kesvkey_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.kesvkey_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.kesvkey_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {KESVKey}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.kesvkey_from_bech32(ptr0, len0);\n    return KESVKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {KESVKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.kesvkey_from_bytes(ptr0, len0);\n    return KESVKey.__wrap(ret);\n  }\n\n}\n\nmodule.exports.KESVKey = KESVKey;\n/**\n*/\n\nclass LegacyDaedalusPrivateKey {\n  static __wrap(ptr) {\n    const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_legacydaedalusprivatekey_free(ptr);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {LegacyDaedalusPrivateKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.legacydaedalusprivatekey_from_bytes(ptr0, len0);\n    return LegacyDaedalusPrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    wasm.legacydaedalusprivatekey_as_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  chaincode() {\n    wasm.legacydaedalusprivatekey_chaincode(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n\n}\n\nmodule.exports.LegacyDaedalusPrivateKey = LegacyDaedalusPrivateKey;\n/**\n*/\n\nclass LinearFee {\n  static __wrap(ptr) {\n    const obj = Object.create(LinearFee.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_linearfee_free(ptr);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  constant() {\n    var ret = wasm.linearfee_constant(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  coefficient() {\n    var ret = wasm.linearfee_coefficient(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} coefficient\n  * @param {BigNum} constant\n  * @returns {LinearFee}\n  */\n\n\n  static new(coefficient, constant) {\n    _assertClass(coefficient, BigNum);\n\n    _assertClass(constant, BigNum);\n\n    var ret = wasm.linearfee_new(coefficient.ptr, constant.ptr);\n    return LinearFee.__wrap(ret);\n  }\n\n}\n\nmodule.exports.LinearFee = LinearFee;\n/**\n*/\n\nclass MapTransactionIndexToTransactionMetadata {\n  static __wrap(ptr) {\n    const obj = Object.create(MapTransactionIndexToTransactionMetadata.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_maptransactionindextotransactionmetadata_free(ptr);\n  }\n  /**\n  * @returns {MapTransactionIndexToTransactionMetadata}\n  */\n\n\n  static new() {\n    var ret = wasm.maptransactionindextotransactionmetadata_new();\n    return MapTransactionIndexToTransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.maptransactionindextotransactionmetadata_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} key\n  * @param {TransactionMetadata} value\n  * @returns {TransactionMetadata | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(value, TransactionMetadata);\n\n    var ret = wasm.maptransactionindextotransactionmetadata_insert(this.ptr, key, value.ptr);\n    return ret === 0 ? undefined : TransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @param {number} key\n  * @returns {TransactionMetadata | undefined}\n  */\n\n\n  get(key) {\n    var ret = wasm.maptransactionindextotransactionmetadata_get(this.ptr, key);\n    return ret === 0 ? undefined : TransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @returns {Uint32Array}\n  */\n\n\n  keys() {\n    wasm.maptransactionindextotransactionmetadata_keys(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU32FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 4);\n\n    return v0;\n  }\n\n}\n\nmodule.exports.MapTransactionIndexToTransactionMetadata = MapTransactionIndexToTransactionMetadata;\n/**\n*/\n\nclass MetadataHash {\n  static __wrap(ptr) {\n    const obj = Object.create(MetadataHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_metadatahash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.metadatahash_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.metadatahash_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {MetadataHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.metadatahash_from_bech32(ptr0, len0);\n    return MetadataHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MetadataHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.metadatahash_from_bytes(ptr0, len0);\n    return MetadataHash.__wrap(ret);\n  }\n\n}\n\nmodule.exports.MetadataHash = MetadataHash;\n/**\n*/\n\nclass MetadataList {\n  static __wrap(ptr) {\n    const obj = Object.create(MetadataList.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_metadatalist_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.metadatalist_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MetadataList}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.metadatalist_from_bytes(ptr0, len0);\n    return MetadataList.__wrap(ret);\n  }\n  /**\n  * @returns {MetadataList}\n  */\n\n\n  static new() {\n    var ret = wasm.metadatalist_new();\n    return MetadataList.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.metadatalist_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {TransactionMetadatum}\n  */\n\n\n  get(index) {\n    var ret = wasm.metadatalist_get(this.ptr, index);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {TransactionMetadatum} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, TransactionMetadatum);\n\n    wasm.metadatalist_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.MetadataList = MetadataList;\n/**\n*/\n\nclass MetadataMap {\n  static __wrap(ptr) {\n    const obj = Object.create(MetadataMap.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_metadatamap_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.metadatamap_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MetadataMap}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.metadatamap_from_bytes(ptr0, len0);\n    return MetadataMap.__wrap(ret);\n  }\n  /**\n  * @returns {MetadataMap}\n  */\n\n\n  static new() {\n    var ret = wasm.metadatamap_new();\n    return MetadataMap.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.metadatamap_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {TransactionMetadatum} key\n  * @param {TransactionMetadatum} value\n  * @returns {TransactionMetadatum | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, TransactionMetadatum);\n\n    _assertClass(value, TransactionMetadatum);\n\n    var ret = wasm.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {string} key\n  * @param {TransactionMetadatum} value\n  * @returns {TransactionMetadatum | undefined}\n  */\n\n\n  insert_str(key, value) {\n    var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n\n    _assertClass(value, TransactionMetadatum);\n\n    var ret = wasm.metadatamap_insert_str(this.ptr, ptr0, len0, value.ptr);\n    return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {number} key\n  * @param {TransactionMetadatum} value\n  * @returns {TransactionMetadatum | undefined}\n  */\n\n\n  insert_i32(key, value) {\n    _assertClass(value, TransactionMetadatum);\n\n    var ret = wasm.metadatamap_insert_i32(this.ptr, key, value.ptr);\n    return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {TransactionMetadatum} key\n  * @returns {TransactionMetadatum}\n  */\n\n\n  get(key) {\n    _assertClass(key, TransactionMetadatum);\n\n    var ret = wasm.metadatamap_get(this.ptr, key.ptr);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {string} key\n  * @returns {TransactionMetadatum}\n  */\n\n\n  get_str(key) {\n    var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.metadatamap_get_str(this.ptr, ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {number} key\n  * @returns {TransactionMetadatum}\n  */\n\n\n  get_i32(key) {\n    var ret = wasm.metadatamap_get_i32(this.ptr, key);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {TransactionMetadatum} key\n  * @returns {boolean}\n  */\n\n\n  has(key) {\n    _assertClass(key, TransactionMetadatum);\n\n    var ret = wasm.metadatamap_has(this.ptr, key.ptr);\n    return ret !== 0;\n  }\n  /**\n  * @returns {MetadataList}\n  */\n\n\n  keys() {\n    var ret = wasm.metadatamap_keys(this.ptr);\n    return MetadataList.__wrap(ret);\n  }\n\n}\n\nmodule.exports.MetadataMap = MetadataMap;\n/**\n*/\n\nclass Mint {\n  static __wrap(ptr) {\n    const obj = Object.create(Mint.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_mint_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.mint_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Mint}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.mint_from_bytes(ptr0, len0);\n    return Mint.__wrap(ret);\n  }\n  /**\n  * @returns {Mint}\n  */\n\n\n  static new() {\n    var ret = wasm.mint_new();\n    return Mint.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.mint_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {ScriptHash} key\n  * @param {MintAssets} value\n  * @returns {MintAssets | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, ScriptHash);\n\n    _assertClass(value, MintAssets);\n\n    var ret = wasm.mint_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : MintAssets.__wrap(ret);\n  }\n  /**\n  * @param {ScriptHash} key\n  * @returns {MintAssets | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, ScriptHash);\n\n    var ret = wasm.mint_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : MintAssets.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptHashes}\n  */\n\n\n  keys() {\n    var ret = wasm.mint_keys(this.ptr);\n    return ScriptHashes.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Mint = Mint;\n/**\n*/\n\nclass MintAssets {\n  static __wrap(ptr) {\n    const obj = Object.create(MintAssets.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_mintassets_free(ptr);\n  }\n  /**\n  * @returns {MintAssets}\n  */\n\n\n  static new() {\n    var ret = wasm.mintassets_new();\n    return MintAssets.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.mintassets_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {AssetName} key\n  * @param {Int} value\n  * @returns {Int | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, AssetName);\n\n    _assertClass(value, Int);\n\n    var ptr0 = value.ptr;\n    value.ptr = 0;\n    var ret = wasm.mintassets_insert(this.ptr, key.ptr, ptr0);\n    return ret === 0 ? undefined : Int.__wrap(ret);\n  }\n  /**\n  * @param {AssetName} key\n  * @returns {Int | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, AssetName);\n\n    var ret = wasm.mintassets_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : Int.__wrap(ret);\n  }\n  /**\n  * @returns {AssetNames}\n  */\n\n\n  keys() {\n    var ret = wasm.mintassets_keys(this.ptr);\n    return AssetNames.__wrap(ret);\n  }\n\n}\n\nmodule.exports.MintAssets = MintAssets;\n/**\n*/\n\nclass MoveInstantaneousReward {\n  static __wrap(ptr) {\n    const obj = Object.create(MoveInstantaneousReward.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_moveinstantaneousreward_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.moveinstantaneousreward_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MoveInstantaneousReward}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.moveinstantaneousreward_from_bytes(ptr0, len0);\n    return MoveInstantaneousReward.__wrap(ret);\n  }\n  /**\n  * @param {number} pot\n  * @returns {MoveInstantaneousReward}\n  */\n\n\n  static new(pot) {\n    var ret = wasm.moveinstantaneousreward_new(pot);\n    return MoveInstantaneousReward.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.moveinstantaneousreward_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {StakeCredential} key\n  * @param {BigNum} value\n  * @returns {BigNum | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, StakeCredential);\n\n    _assertClass(value, BigNum);\n\n    var ret = wasm.moveinstantaneousreward_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {StakeCredential} key\n  * @returns {BigNum | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, StakeCredential);\n\n    var ret = wasm.moveinstantaneousreward_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredentials}\n  */\n\n\n  keys() {\n    var ret = wasm.moveinstantaneousreward_keys(this.ptr);\n    return StakeCredentials.__wrap(ret);\n  }\n\n}\n\nmodule.exports.MoveInstantaneousReward = MoveInstantaneousReward;\n/**\n*/\n\nclass MoveInstantaneousRewardsCert {\n  static __wrap(ptr) {\n    const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_moveinstantaneousrewardscert_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.moveinstantaneousrewardscert_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MoveInstantaneousRewardsCert}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.moveinstantaneousrewardscert_from_bytes(ptr0, len0);\n    return MoveInstantaneousRewardsCert.__wrap(ret);\n  }\n  /**\n  * @returns {MoveInstantaneousReward}\n  */\n\n\n  move_instantaneous_reward() {\n    var ret = wasm.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n    return MoveInstantaneousReward.__wrap(ret);\n  }\n  /**\n  * @param {MoveInstantaneousReward} move_instantaneous_reward\n  * @returns {MoveInstantaneousRewardsCert}\n  */\n\n\n  static new(move_instantaneous_reward) {\n    _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n\n    var ret = wasm.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n    return MoveInstantaneousRewardsCert.__wrap(ret);\n  }\n\n}\n\nmodule.exports.MoveInstantaneousRewardsCert = MoveInstantaneousRewardsCert;\n/**\n*/\n\nclass MultiAsset {\n  static __wrap(ptr) {\n    const obj = Object.create(MultiAsset.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_multiasset_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.multiasset_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MultiAsset}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.multiasset_from_bytes(ptr0, len0);\n    return MultiAsset.__wrap(ret);\n  }\n  /**\n  * @returns {MultiAsset}\n  */\n\n\n  static new() {\n    var ret = wasm.multiasset_new();\n    return MultiAsset.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.multiasset_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {ScriptHash} key\n  * @param {Assets} value\n  * @returns {Assets | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, ScriptHash);\n\n    _assertClass(value, Assets);\n\n    var ret = wasm.multiasset_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : Assets.__wrap(ret);\n  }\n  /**\n  * @param {ScriptHash} key\n  * @returns {Assets | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, ScriptHash);\n\n    var ret = wasm.multiasset_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : Assets.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptHashes}\n  */\n\n\n  keys() {\n    var ret = wasm.multiasset_keys(this.ptr);\n    return ScriptHashes.__wrap(ret);\n  }\n  /**\n  * removes an asset from the list if the result is 0 or less\n  * @param {MultiAsset} rhs_ma\n  * @returns {MultiAsset}\n  */\n\n\n  sub(rhs_ma) {\n    _assertClass(rhs_ma, MultiAsset);\n\n    var ret = wasm.multiasset_sub(this.ptr, rhs_ma.ptr);\n    return MultiAsset.__wrap(ret);\n  }\n\n}\n\nmodule.exports.MultiAsset = MultiAsset;\n/**\n*/\n\nclass MultiHostName {\n  static __wrap(ptr) {\n    const obj = Object.create(MultiHostName.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_multihostname_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.multihostname_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {MultiHostName}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.multihostname_from_bytes(ptr0, len0);\n    return MultiHostName.__wrap(ret);\n  }\n  /**\n  * @returns {DNSRecordSRV}\n  */\n\n\n  dns_name() {\n    var ret = wasm.multihostname_dns_name(this.ptr);\n    return DNSRecordSRV.__wrap(ret);\n  }\n  /**\n  * @param {DNSRecordSRV} dns_name\n  * @returns {MultiHostName}\n  */\n\n\n  static new(dns_name) {\n    _assertClass(dns_name, DNSRecordSRV);\n\n    var ret = wasm.multihostname_new(dns_name.ptr);\n    return MultiHostName.__wrap(ret);\n  }\n\n}\n\nmodule.exports.MultiHostName = MultiHostName;\n/**\n*/\n\nclass NativeScript {\n  static __wrap(ptr) {\n    const obj = Object.create(NativeScript.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_nativescript_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.nativescript_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {NativeScript}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.nativescript_from_bytes(ptr0, len0);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  hash() {\n    var ret = wasm.nativescript_hash(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * like hash(), but prefixes 0x00 in the pre-image bytes, to match the specs\n  * followed by cardano-cli. See https://github.com/input-output-hk/cardano-node/issues/2593\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  script_hash() {\n    var ret = wasm.nativescript_script_hash(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @param {ScriptPubkey} script_pubkey\n  * @returns {NativeScript}\n  */\n\n\n  static new_script_pubkey(script_pubkey) {\n    _assertClass(script_pubkey, ScriptPubkey);\n\n    var ret = wasm.nativescript_new_script_pubkey(script_pubkey.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {ScriptAll} script_all\n  * @returns {NativeScript}\n  */\n\n\n  static new_script_all(script_all) {\n    _assertClass(script_all, ScriptAll);\n\n    var ret = wasm.nativescript_new_script_all(script_all.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {ScriptAny} script_any\n  * @returns {NativeScript}\n  */\n\n\n  static new_script_any(script_any) {\n    _assertClass(script_any, ScriptAny);\n\n    var ret = wasm.nativescript_new_script_any(script_any.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {ScriptNOfK} script_n_of_k\n  * @returns {NativeScript}\n  */\n\n\n  static new_script_n_of_k(script_n_of_k) {\n    _assertClass(script_n_of_k, ScriptNOfK);\n\n    var ret = wasm.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {TimelockStart} timelock_start\n  * @returns {NativeScript}\n  */\n\n\n  static new_timelock_start(timelock_start) {\n    _assertClass(timelock_start, TimelockStart);\n\n    var ret = wasm.nativescript_new_timelock_start(timelock_start.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {TimelockExpiry} timelock_expiry\n  * @returns {NativeScript}\n  */\n\n\n  static new_timelock_expiry(timelock_expiry) {\n    _assertClass(timelock_expiry, TimelockExpiry);\n\n    var ret = wasm.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.nativescript_kind(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {ScriptPubkey | undefined}\n  */\n\n\n  as_script_pubkey() {\n    var ret = wasm.nativescript_as_script_pubkey(this.ptr);\n    return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptAll | undefined}\n  */\n\n\n  as_script_all() {\n    var ret = wasm.nativescript_as_script_all(this.ptr);\n    return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptAny | undefined}\n  */\n\n\n  as_script_any() {\n    var ret = wasm.nativescript_as_script_any(this.ptr);\n    return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptNOfK | undefined}\n  */\n\n\n  as_script_n_of_k() {\n    var ret = wasm.nativescript_as_script_n_of_k(this.ptr);\n    return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n  }\n  /**\n  * @returns {TimelockStart | undefined}\n  */\n\n\n  as_timelock_start() {\n    var ret = wasm.nativescript_as_timelock_start(this.ptr);\n    return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n  }\n  /**\n  * @returns {TimelockExpiry | undefined}\n  */\n\n\n  as_timelock_expiry() {\n    var ret = wasm.nativescript_as_timelock_expiry(this.ptr);\n    return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n  }\n\n}\n\nmodule.exports.NativeScript = NativeScript;\n/**\n*/\n\nclass NativeScripts {\n  static __wrap(ptr) {\n    const obj = Object.create(NativeScripts.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_nativescripts_free(ptr);\n  }\n  /**\n  * @returns {NativeScripts}\n  */\n\n\n  static new() {\n    var ret = wasm.nativescripts_new();\n    return NativeScripts.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.nativescripts_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {NativeScript}\n  */\n\n\n  get(index) {\n    var ret = wasm.nativescripts_get(this.ptr, index);\n    return NativeScript.__wrap(ret);\n  }\n  /**\n  * @param {NativeScript} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, NativeScript);\n\n    wasm.nativescripts_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.NativeScripts = NativeScripts;\n/**\n*/\n\nclass NetworkInfo {\n  static __wrap(ptr) {\n    const obj = Object.create(NetworkInfo.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_networkinfo_free(ptr);\n  }\n  /**\n  * @param {number} network_id\n  * @param {number} protocol_magic\n  * @returns {NetworkInfo}\n  */\n\n\n  static new(network_id, protocol_magic) {\n    var ret = wasm.networkinfo_new(network_id, protocol_magic);\n    return NetworkInfo.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  network_id() {\n    var ret = wasm.networkinfo_network_id(this.ptr);\n    return ret;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  protocol_magic() {\n    var ret = wasm.networkinfo_protocol_magic(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {NetworkInfo}\n  */\n\n\n  static testnet() {\n    var ret = wasm.networkinfo_testnet();\n    return NetworkInfo.__wrap(ret);\n  }\n  /**\n  * @returns {NetworkInfo}\n  */\n\n\n  static mainnet() {\n    var ret = wasm.networkinfo_mainnet();\n    return NetworkInfo.__wrap(ret);\n  }\n\n}\n\nmodule.exports.NetworkInfo = NetworkInfo;\n/**\n*/\n\nclass Nonce {\n  static __wrap(ptr) {\n    const obj = Object.create(Nonce.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_nonce_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.nonce_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Nonce}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.nonce_from_bytes(ptr0, len0);\n    return Nonce.__wrap(ret);\n  }\n  /**\n  * @returns {Nonce}\n  */\n\n\n  static new_identity() {\n    var ret = wasm.nonce_new_identity();\n    return Nonce.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} hash\n  * @returns {Nonce}\n  */\n\n\n  static new_from_hash(hash) {\n    var ptr0 = passArray8ToWasm0(hash, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.nonce_new_from_hash(ptr0, len0);\n    return Nonce.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array | undefined}\n  */\n\n\n  get_hash() {\n    wasm.nonce_get_hash(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    let v0;\n\n    if (r0 !== 0) {\n      v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n      wasm.__wbindgen_free(r0, r1 * 1);\n    }\n\n    return v0;\n  }\n\n}\n\nmodule.exports.Nonce = Nonce;\n/**\n*/\n\nclass OperationalCert {\n  static __wrap(ptr) {\n    const obj = Object.create(OperationalCert.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_operationalcert_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.operationalcert_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {OperationalCert}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.operationalcert_from_bytes(ptr0, len0);\n    return OperationalCert.__wrap(ret);\n  }\n  /**\n  * @returns {KESVKey}\n  */\n\n\n  hot_vkey() {\n    var ret = wasm.operationalcert_hot_vkey(this.ptr);\n    return KESVKey.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  sequence_number() {\n    var ret = wasm.operationalcert_sequence_number(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kes_period() {\n    var ret = wasm.operationalcert_kes_period(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {Ed25519Signature}\n  */\n\n\n  sigma() {\n    var ret = wasm.operationalcert_sigma(this.ptr);\n    return Ed25519Signature.__wrap(ret);\n  }\n  /**\n  * @param {KESVKey} hot_vkey\n  * @param {number} sequence_number\n  * @param {number} kes_period\n  * @param {Ed25519Signature} sigma\n  * @returns {OperationalCert}\n  */\n\n\n  static new(hot_vkey, sequence_number, kes_period, sigma) {\n    _assertClass(hot_vkey, KESVKey);\n\n    _assertClass(sigma, Ed25519Signature);\n\n    var ret = wasm.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n    return OperationalCert.__wrap(ret);\n  }\n\n}\n\nmodule.exports.OperationalCert = OperationalCert;\n/**\n*/\n\nclass Pointer {\n  static __wrap(ptr) {\n    const obj = Object.create(Pointer.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_pointer_free(ptr);\n  }\n  /**\n  * @param {number} slot\n  * @param {number} tx_index\n  * @param {number} cert_index\n  * @returns {Pointer}\n  */\n\n\n  static new(slot, tx_index, cert_index) {\n    var ret = wasm.pointer_new(slot, tx_index, cert_index);\n    return Pointer.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  slot() {\n    var ret = wasm.pointer_slot(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  tx_index() {\n    var ret = wasm.pointer_tx_index(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  cert_index() {\n    var ret = wasm.pointer_cert_index(this.ptr);\n    return ret >>> 0;\n  }\n\n}\n\nmodule.exports.Pointer = Pointer;\n/**\n*/\n\nclass PointerAddress {\n  static __wrap(ptr) {\n    const obj = Object.create(PointerAddress.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_pointeraddress_free(ptr);\n  }\n  /**\n  * @param {number} network\n  * @param {StakeCredential} payment\n  * @param {Pointer} stake\n  * @returns {PointerAddress}\n  */\n\n\n  static new(network, payment, stake) {\n    _assertClass(payment, StakeCredential);\n\n    _assertClass(stake, Pointer);\n\n    var ret = wasm.pointeraddress_new(network, payment.ptr, stake.ptr);\n    return PointerAddress.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  payment_cred() {\n    var ret = wasm.pointeraddress_payment_cred(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Pointer}\n  */\n\n\n  stake_pointer() {\n    var ret = wasm.pointeraddress_stake_pointer(this.ptr);\n    return Pointer.__wrap(ret);\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  to_address() {\n    var ret = wasm.pointeraddress_to_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @param {Address} addr\n  * @returns {PointerAddress | undefined}\n  */\n\n\n  static from_address(addr) {\n    _assertClass(addr, Address);\n\n    var ret = wasm.pointeraddress_from_address(addr.ptr);\n    return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n  }\n\n}\n\nmodule.exports.PointerAddress = PointerAddress;\n/**\n*/\n\nclass PoolMetadata {\n  static __wrap(ptr) {\n    const obj = Object.create(PoolMetadata.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_poolmetadata_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.poolmetadata_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PoolMetadata}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.poolmetadata_from_bytes(ptr0, len0);\n    return PoolMetadata.__wrap(ret);\n  }\n  /**\n  * @returns {URL}\n  */\n\n\n  url() {\n    var ret = wasm.poolmetadata_url(this.ptr);\n    return URL.__wrap(ret);\n  }\n  /**\n  * @returns {MetadataHash}\n  */\n\n\n  metadata_hash() {\n    var ret = wasm.poolmetadata_metadata_hash(this.ptr);\n    return MetadataHash.__wrap(ret);\n  }\n  /**\n  * @param {URL} url\n  * @param {MetadataHash} metadata_hash\n  * @returns {PoolMetadata}\n  */\n\n\n  static new(url, metadata_hash) {\n    _assertClass(url, URL);\n\n    _assertClass(metadata_hash, MetadataHash);\n\n    var ret = wasm.poolmetadata_new(url.ptr, metadata_hash.ptr);\n    return PoolMetadata.__wrap(ret);\n  }\n\n}\n\nmodule.exports.PoolMetadata = PoolMetadata;\n/**\n*/\n\nclass PoolParams {\n  static __wrap(ptr) {\n    const obj = Object.create(PoolParams.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_poolparams_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.poolparams_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PoolParams}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.poolparams_from_bytes(ptr0, len0);\n    return PoolParams.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  operator() {\n    var ret = wasm.poolparams_operator(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @returns {VRFKeyHash}\n  */\n\n\n  vrf_keyhash() {\n    var ret = wasm.poolparams_vrf_keyhash(this.ptr);\n    return VRFKeyHash.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  pledge() {\n    var ret = wasm.poolparams_pledge(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  cost() {\n    var ret = wasm.poolparams_cost(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {UnitInterval}\n  */\n\n\n  margin() {\n    var ret = wasm.poolparams_margin(this.ptr);\n    return UnitInterval.__wrap(ret);\n  }\n  /**\n  * @returns {RewardAddress}\n  */\n\n\n  reward_account() {\n    var ret = wasm.poolparams_reward_account(this.ptr);\n    return RewardAddress.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHashes}\n  */\n\n\n  pool_owners() {\n    var ret = wasm.poolparams_pool_owners(this.ptr);\n    return Ed25519KeyHashes.__wrap(ret);\n  }\n  /**\n  * @returns {Relays}\n  */\n\n\n  relays() {\n    var ret = wasm.poolparams_relays(this.ptr);\n    return Relays.__wrap(ret);\n  }\n  /**\n  * @returns {PoolMetadata | undefined}\n  */\n\n\n  pool_metadata() {\n    var ret = wasm.poolparams_pool_metadata(this.ptr);\n    return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n  }\n  /**\n  * @param {Ed25519KeyHash} operator\n  * @param {VRFKeyHash} vrf_keyhash\n  * @param {BigNum} pledge\n  * @param {BigNum} cost\n  * @param {UnitInterval} margin\n  * @param {RewardAddress} reward_account\n  * @param {Ed25519KeyHashes} pool_owners\n  * @param {Relays} relays\n  * @param {PoolMetadata | undefined} pool_metadata\n  * @returns {PoolParams}\n  */\n\n\n  static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n    _assertClass(operator, Ed25519KeyHash);\n\n    _assertClass(vrf_keyhash, VRFKeyHash);\n\n    _assertClass(pledge, BigNum);\n\n    _assertClass(cost, BigNum);\n\n    _assertClass(margin, UnitInterval);\n\n    _assertClass(reward_account, RewardAddress);\n\n    _assertClass(pool_owners, Ed25519KeyHashes);\n\n    _assertClass(relays, Relays);\n\n    let ptr0 = 0;\n\n    if (!isLikeNone(pool_metadata)) {\n      _assertClass(pool_metadata, PoolMetadata);\n\n      ptr0 = pool_metadata.ptr;\n      pool_metadata.ptr = 0;\n    }\n\n    var ret = wasm.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n    return PoolParams.__wrap(ret);\n  }\n\n}\n\nmodule.exports.PoolParams = PoolParams;\n/**\n*/\n\nclass PoolRegistration {\n  static __wrap(ptr) {\n    const obj = Object.create(PoolRegistration.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_poolregistration_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.poolregistration_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PoolRegistration}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.poolregistration_from_bytes(ptr0, len0);\n    return PoolRegistration.__wrap(ret);\n  }\n  /**\n  * @returns {PoolParams}\n  */\n\n\n  pool_params() {\n    var ret = wasm.poolregistration_pool_params(this.ptr);\n    return PoolParams.__wrap(ret);\n  }\n  /**\n  * @param {PoolParams} pool_params\n  * @returns {PoolRegistration}\n  */\n\n\n  static new(pool_params) {\n    _assertClass(pool_params, PoolParams);\n\n    var ret = wasm.poolregistration_new(pool_params.ptr);\n    return PoolRegistration.__wrap(ret);\n  }\n\n}\n\nmodule.exports.PoolRegistration = PoolRegistration;\n/**\n*/\n\nclass PoolRetirement {\n  static __wrap(ptr) {\n    const obj = Object.create(PoolRetirement.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_poolretirement_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.poolretirement_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PoolRetirement}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.poolretirement_from_bytes(ptr0, len0);\n    return PoolRetirement.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  pool_keyhash() {\n    var ret = wasm.poolretirement_pool_keyhash(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  epoch() {\n    var ret = wasm.poolretirement_epoch(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {Ed25519KeyHash} pool_keyhash\n  * @param {number} epoch\n  * @returns {PoolRetirement}\n  */\n\n\n  static new(pool_keyhash, epoch) {\n    _assertClass(pool_keyhash, Ed25519KeyHash);\n\n    var ret = wasm.poolretirement_new(pool_keyhash.ptr, epoch);\n    return PoolRetirement.__wrap(ret);\n  }\n\n}\n\nmodule.exports.PoolRetirement = PoolRetirement;\n/**\n*/\n\nclass PrivateKey {\n  static __wrap(ptr) {\n    const obj = Object.create(PrivateKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_privatekey_free(ptr);\n  }\n  /**\n  * @returns {PublicKey}\n  */\n\n\n  to_public() {\n    var ret = wasm.privatekey_to_public(this.ptr);\n    return PublicKey.__wrap(ret);\n  }\n  /**\n  * @returns {PrivateKey}\n  */\n\n\n  static generate_ed25519() {\n    var ret = wasm.privatekey_generate_ed25519();\n    return PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {PrivateKey}\n  */\n\n\n  static generate_ed25519extended() {\n    var ret = wasm.privatekey_generate_ed25519extended();\n    return PrivateKey.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_bech32() {\n    try {\n      wasm.privatekey_to_bech32(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    wasm.privatekey_as_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PrivateKey}\n  */\n\n\n  static from_extended_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.privatekey_from_extended_bytes(ptr0, len0);\n    return PrivateKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PrivateKey}\n  */\n\n\n  static from_normal_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.privatekey_from_normal_bytes(ptr0, len0);\n    return PrivateKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} message\n  * @returns {Ed25519Signature}\n  */\n\n\n  sign(message) {\n    var ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\n    return Ed25519Signature.__wrap(ret);\n  }\n\n}\n\nmodule.exports.PrivateKey = PrivateKey;\n/**\n*/\n\nclass ProposedProtocolParameterUpdates {\n  static __wrap(ptr) {\n    const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_proposedprotocolparameterupdates_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.proposedprotocolparameterupdates_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ProposedProtocolParameterUpdates}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.proposedprotocolparameterupdates_from_bytes(ptr0, len0);\n    return ProposedProtocolParameterUpdates.__wrap(ret);\n  }\n  /**\n  * @returns {ProposedProtocolParameterUpdates}\n  */\n\n\n  static new() {\n    var ret = wasm.proposedprotocolparameterupdates_new();\n    return ProposedProtocolParameterUpdates.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.proposedprotocolparameterupdates_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {GenesisHash} key\n  * @param {ProtocolParamUpdate} value\n  * @returns {ProtocolParamUpdate | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, GenesisHash);\n\n    _assertClass(value, ProtocolParamUpdate);\n\n    var ret = wasm.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n  }\n  /**\n  * @param {GenesisHash} key\n  * @returns {ProtocolParamUpdate | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, GenesisHash);\n\n    var ret = wasm.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n  }\n  /**\n  * @returns {GenesisHashes}\n  */\n\n\n  keys() {\n    var ret = wasm.proposedprotocolparameterupdates_keys(this.ptr);\n    return GenesisHashes.__wrap(ret);\n  }\n\n}\n\nmodule.exports.ProposedProtocolParameterUpdates = ProposedProtocolParameterUpdates;\n/**\n*/\n\nclass ProtocolParamUpdate {\n  static __wrap(ptr) {\n    const obj = Object.create(ProtocolParamUpdate.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_protocolparamupdate_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.protocolparamupdate_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ProtocolParamUpdate}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.protocolparamupdate_from_bytes(ptr0, len0);\n    return ProtocolParamUpdate.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} minfee_a\n  */\n\n\n  set_minfee_a(minfee_a) {\n    _assertClass(minfee_a, BigNum);\n\n    wasm.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  minfee_a() {\n    var ret = wasm.protocolparamupdate_minfee_a(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} minfee_b\n  */\n\n\n  set_minfee_b(minfee_b) {\n    _assertClass(minfee_b, BigNum);\n\n    wasm.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  minfee_b() {\n    var ret = wasm.protocolparamupdate_minfee_b(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {number} max_block_body_size\n  */\n\n\n  set_max_block_body_size(max_block_body_size) {\n    wasm.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  max_block_body_size() {\n    wasm.protocolparamupdate_max_block_body_size(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n  }\n  /**\n  * @param {number} max_tx_size\n  */\n\n\n  set_max_tx_size(max_tx_size) {\n    wasm.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  max_tx_size() {\n    wasm.protocolparamupdate_max_tx_size(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n  }\n  /**\n  * @param {number} max_block_header_size\n  */\n\n\n  set_max_block_header_size(max_block_header_size) {\n    wasm.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  max_block_header_size() {\n    wasm.protocolparamupdate_max_block_header_size(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n  }\n  /**\n  * @param {BigNum} key_deposit\n  */\n\n\n  set_key_deposit(key_deposit) {\n    _assertClass(key_deposit, BigNum);\n\n    wasm.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  key_deposit() {\n    var ret = wasm.protocolparamupdate_key_deposit(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} pool_deposit\n  */\n\n\n  set_pool_deposit(pool_deposit) {\n    _assertClass(pool_deposit, BigNum);\n\n    wasm.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  pool_deposit() {\n    var ret = wasm.protocolparamupdate_pool_deposit(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {number} max_epoch\n  */\n\n\n  set_max_epoch(max_epoch) {\n    wasm.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  max_epoch() {\n    wasm.protocolparamupdate_max_epoch(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n  }\n  /**\n  * @param {number} n_opt\n  */\n\n\n  set_n_opt(n_opt) {\n    wasm.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  n_opt() {\n    wasm.protocolparamupdate_n_opt(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n  }\n  /**\n  * @param {UnitInterval} pool_pledge_influence\n  */\n\n\n  set_pool_pledge_influence(pool_pledge_influence) {\n    _assertClass(pool_pledge_influence, UnitInterval);\n\n    wasm.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n  }\n  /**\n  * @returns {UnitInterval | undefined}\n  */\n\n\n  pool_pledge_influence() {\n    var ret = wasm.protocolparamupdate_pool_pledge_influence(this.ptr);\n    return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n  }\n  /**\n  * @param {UnitInterval} expansion_rate\n  */\n\n\n  set_expansion_rate(expansion_rate) {\n    _assertClass(expansion_rate, UnitInterval);\n\n    wasm.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n  }\n  /**\n  * @returns {UnitInterval | undefined}\n  */\n\n\n  expansion_rate() {\n    var ret = wasm.protocolparamupdate_expansion_rate(this.ptr);\n    return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n  }\n  /**\n  * @param {UnitInterval} treasury_growth_rate\n  */\n\n\n  set_treasury_growth_rate(treasury_growth_rate) {\n    _assertClass(treasury_growth_rate, UnitInterval);\n\n    wasm.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n  }\n  /**\n  * @returns {UnitInterval | undefined}\n  */\n\n\n  treasury_growth_rate() {\n    var ret = wasm.protocolparamupdate_treasury_growth_rate(this.ptr);\n    return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n  }\n  /**\n  * @param {UnitInterval} d\n  */\n\n\n  set_d(d) {\n    _assertClass(d, UnitInterval);\n\n    wasm.protocolparamupdate_set_d(this.ptr, d.ptr);\n  }\n  /**\n  * @returns {UnitInterval | undefined}\n  */\n\n\n  d() {\n    var ret = wasm.protocolparamupdate_d(this.ptr);\n    return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n  }\n  /**\n  * @param {Nonce} extra_entropy\n  */\n\n\n  set_extra_entropy(extra_entropy) {\n    _assertClass(extra_entropy, Nonce);\n\n    wasm.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\n  }\n  /**\n  * @returns {Nonce | undefined}\n  */\n\n\n  extra_entropy() {\n    var ret = wasm.protocolparamupdate_extra_entropy(this.ptr);\n    return ret === 0 ? undefined : Nonce.__wrap(ret);\n  }\n  /**\n  * @param {ProtocolVersions} protocol_version\n  */\n\n\n  set_protocol_version(protocol_version) {\n    _assertClass(protocol_version, ProtocolVersions);\n\n    wasm.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n  }\n  /**\n  * @returns {ProtocolVersions | undefined}\n  */\n\n\n  protocol_version() {\n    var ret = wasm.protocolparamupdate_protocol_version(this.ptr);\n    return ret === 0 ? undefined : ProtocolVersions.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} min_utxo_value\n  */\n\n\n  set_min_utxo_value(min_utxo_value) {\n    _assertClass(min_utxo_value, BigNum);\n\n    wasm.protocolparamupdate_set_min_utxo_value(this.ptr, min_utxo_value.ptr);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  min_utxo_value() {\n    var ret = wasm.protocolparamupdate_min_utxo_value(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {ProtocolParamUpdate}\n  */\n\n\n  static new() {\n    var ret = wasm.protocolparamupdate_new();\n    return ProtocolParamUpdate.__wrap(ret);\n  }\n\n}\n\nmodule.exports.ProtocolParamUpdate = ProtocolParamUpdate;\n/**\n*/\n\nclass ProtocolVersion {\n  static __wrap(ptr) {\n    const obj = Object.create(ProtocolVersion.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_protocolversion_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.protocolversion_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ProtocolVersion}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.protocolversion_from_bytes(ptr0, len0);\n    return ProtocolVersion.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  major() {\n    var ret = wasm.protocolversion_major(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  minor() {\n    var ret = wasm.protocolversion_minor(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} major\n  * @param {number} minor\n  * @returns {ProtocolVersion}\n  */\n\n\n  static new(major, minor) {\n    var ret = wasm.protocolversion_new(major, minor);\n    return ProtocolVersion.__wrap(ret);\n  }\n\n}\n\nmodule.exports.ProtocolVersion = ProtocolVersion;\n/**\n*/\n\nclass ProtocolVersions {\n  static __wrap(ptr) {\n    const obj = Object.create(ProtocolVersions.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_protocolversions_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.protocolversions_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ProtocolVersions}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.protocolversions_from_bytes(ptr0, len0);\n    return ProtocolVersions.__wrap(ret);\n  }\n  /**\n  * @returns {ProtocolVersions}\n  */\n\n\n  static new() {\n    var ret = wasm.protocolversions_new();\n    return ProtocolVersions.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.protocolversions_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {ProtocolVersion}\n  */\n\n\n  get(index) {\n    var ret = wasm.protocolversions_get(this.ptr, index);\n    return ProtocolVersion.__wrap(ret);\n  }\n  /**\n  * @param {ProtocolVersion} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, ProtocolVersion);\n\n    wasm.protocolversions_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.ProtocolVersions = ProtocolVersions;\n/**\n* ED25519 key used as public key\n*/\n\nclass PublicKey {\n  static __wrap(ptr) {\n    const obj = Object.create(PublicKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_publickey_free(ptr);\n  }\n  /**\n  * Get public key from its bech32 representation\n  * Example:\n  * ```javascript\n  * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n  * ```\n  * @param {string} bech32_str\n  * @returns {PublicKey}\n  */\n\n\n  static from_bech32(bech32_str) {\n    var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.publickey_from_bech32(ptr0, len0);\n    return PublicKey.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  to_bech32() {\n    try {\n      wasm.publickey_to_bech32(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    wasm.publickey_as_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {PublicKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.publickey_from_bytes(ptr0, len0);\n    return PublicKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} data\n  * @param {Ed25519Signature} signature\n  * @returns {boolean}\n  */\n\n\n  verify(data, signature) {\n    var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n\n    _assertClass(signature, Ed25519Signature);\n\n    var ret = wasm.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n    return ret !== 0;\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  hash() {\n    var ret = wasm.publickey_hash(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n\n}\n\nmodule.exports.PublicKey = PublicKey;\n/**\n*/\n\nclass PublicKeys {\n  static __wrap(ptr) {\n    const obj = Object.create(PublicKeys.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_publickeys_free(ptr);\n  }\n  /**\n  */\n\n\n  constructor() {\n    var ret = wasm.publickeys_new();\n    return PublicKeys.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  size() {\n    var ret = wasm.publickeys_size(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {PublicKey}\n  */\n\n\n  get(index) {\n    var ret = wasm.publickeys_get(this.ptr, index);\n    return PublicKey.__wrap(ret);\n  }\n  /**\n  * @param {PublicKey} key\n  */\n\n\n  add(key) {\n    _assertClass(key, PublicKey);\n\n    wasm.publickeys_add(this.ptr, key.ptr);\n  }\n\n}\n\nmodule.exports.PublicKeys = PublicKeys;\n/**\n*/\n\nclass Relay {\n  static __wrap(ptr) {\n    const obj = Object.create(Relay.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_relay_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.relay_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Relay}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.relay_from_bytes(ptr0, len0);\n    return Relay.__wrap(ret);\n  }\n  /**\n  * @param {SingleHostAddr} single_host_addr\n  * @returns {Relay}\n  */\n\n\n  static new_single_host_addr(single_host_addr) {\n    _assertClass(single_host_addr, SingleHostAddr);\n\n    var ret = wasm.relay_new_single_host_addr(single_host_addr.ptr);\n    return Relay.__wrap(ret);\n  }\n  /**\n  * @param {SingleHostName} single_host_name\n  * @returns {Relay}\n  */\n\n\n  static new_single_host_name(single_host_name) {\n    _assertClass(single_host_name, SingleHostName);\n\n    var ret = wasm.relay_new_single_host_name(single_host_name.ptr);\n    return Relay.__wrap(ret);\n  }\n  /**\n  * @param {MultiHostName} multi_host_name\n  * @returns {Relay}\n  */\n\n\n  static new_multi_host_name(multi_host_name) {\n    _assertClass(multi_host_name, MultiHostName);\n\n    var ret = wasm.relay_new_multi_host_name(multi_host_name.ptr);\n    return Relay.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.relay_kind(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {SingleHostAddr | undefined}\n  */\n\n\n  as_single_host_addr() {\n    var ret = wasm.relay_as_single_host_addr(this.ptr);\n    return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n  }\n  /**\n  * @returns {SingleHostName | undefined}\n  */\n\n\n  as_single_host_name() {\n    var ret = wasm.relay_as_single_host_name(this.ptr);\n    return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n  }\n  /**\n  * @returns {MultiHostName | undefined}\n  */\n\n\n  as_multi_host_name() {\n    var ret = wasm.relay_as_multi_host_name(this.ptr);\n    return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Relay = Relay;\n/**\n*/\n\nclass Relays {\n  static __wrap(ptr) {\n    const obj = Object.create(Relays.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_relays_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.relays_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Relays}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.relays_from_bytes(ptr0, len0);\n    return Relays.__wrap(ret);\n  }\n  /**\n  * @returns {Relays}\n  */\n\n\n  static new() {\n    var ret = wasm.relays_new();\n    return Relays.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.relays_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Relay}\n  */\n\n\n  get(index) {\n    var ret = wasm.relays_get(this.ptr, index);\n    return Relay.__wrap(ret);\n  }\n  /**\n  * @param {Relay} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Relay);\n\n    wasm.relays_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.Relays = Relays;\n/**\n*/\n\nclass RewardAddress {\n  static __wrap(ptr) {\n    const obj = Object.create(RewardAddress.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_rewardaddress_free(ptr);\n  }\n  /**\n  * @param {number} network\n  * @param {StakeCredential} payment\n  * @returns {RewardAddress}\n  */\n\n\n  static new(network, payment) {\n    _assertClass(payment, StakeCredential);\n\n    var ret = wasm.rewardaddress_new(network, payment.ptr);\n    return RewardAddress.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  payment_cred() {\n    var ret = wasm.rewardaddress_payment_cred(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  to_address() {\n    var ret = wasm.rewardaddress_to_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @param {Address} addr\n  * @returns {RewardAddress | undefined}\n  */\n\n\n  static from_address(addr) {\n    _assertClass(addr, Address);\n\n    var ret = wasm.rewardaddress_from_address(addr.ptr);\n    return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n  }\n\n}\n\nmodule.exports.RewardAddress = RewardAddress;\n/**\n*/\n\nclass RewardAddresses {\n  static __wrap(ptr) {\n    const obj = Object.create(RewardAddresses.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_rewardaddresses_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.rewardaddresses_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {RewardAddresses}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.rewardaddresses_from_bytes(ptr0, len0);\n    return RewardAddresses.__wrap(ret);\n  }\n  /**\n  * @returns {RewardAddresses}\n  */\n\n\n  static new() {\n    var ret = wasm.rewardaddresses_new();\n    return RewardAddresses.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.rewardaddresses_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {RewardAddress}\n  */\n\n\n  get(index) {\n    var ret = wasm.rewardaddresses_get(this.ptr, index);\n    return RewardAddress.__wrap(ret);\n  }\n  /**\n  * @param {RewardAddress} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, RewardAddress);\n\n    wasm.rewardaddresses_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.RewardAddresses = RewardAddresses;\n/**\n*/\n\nclass ScriptAll {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptAll.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_scriptall_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.scriptall_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptAll}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scriptall_from_bytes(ptr0, len0);\n    return ScriptAll.__wrap(ret);\n  }\n  /**\n  * @returns {NativeScripts}\n  */\n\n\n  native_scripts() {\n    var ret = wasm.scriptall_native_scripts(this.ptr);\n    return NativeScripts.__wrap(ret);\n  }\n  /**\n  * @param {NativeScripts} native_scripts\n  * @returns {ScriptAll}\n  */\n\n\n  static new(native_scripts) {\n    _assertClass(native_scripts, NativeScripts);\n\n    var ret = wasm.scriptall_new(native_scripts.ptr);\n    return ScriptAll.__wrap(ret);\n  }\n\n}\n\nmodule.exports.ScriptAll = ScriptAll;\n/**\n*/\n\nclass ScriptAny {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptAny.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_scriptany_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.scriptany_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptAny}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scriptany_from_bytes(ptr0, len0);\n    return ScriptAny.__wrap(ret);\n  }\n  /**\n  * @returns {NativeScripts}\n  */\n\n\n  native_scripts() {\n    var ret = wasm.scriptany_native_scripts(this.ptr);\n    return NativeScripts.__wrap(ret);\n  }\n  /**\n  * @param {NativeScripts} native_scripts\n  * @returns {ScriptAny}\n  */\n\n\n  static new(native_scripts) {\n    _assertClass(native_scripts, NativeScripts);\n\n    var ret = wasm.scriptany_new(native_scripts.ptr);\n    return ScriptAny.__wrap(ret);\n  }\n\n}\n\nmodule.exports.ScriptAny = ScriptAny;\n/**\n*/\n\nclass ScriptHash {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_scripthash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.scripthash_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.scripthash_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {ScriptHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scripthash_from_bech32(ptr0, len0);\n    return ScriptHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scripthash_from_bytes(ptr0, len0);\n    return ScriptHash.__wrap(ret);\n  }\n\n}\n\nmodule.exports.ScriptHash = ScriptHash;\n/**\n*/\n\nclass ScriptHashes {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptHashes.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_scripthashes_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.scripthashes_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptHashes}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scripthashes_from_bytes(ptr0, len0);\n    return ScriptHashes.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptHashes}\n  */\n\n\n  static new() {\n    var ret = wasm.scripthashes_new();\n    return ScriptHashes.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.scripthashes_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {ScriptHash}\n  */\n\n\n  get(index) {\n    var ret = wasm.scripthashes_get(this.ptr, index);\n    return ScriptHash.__wrap(ret);\n  }\n  /**\n  * @param {ScriptHash} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, ScriptHash);\n\n    wasm.scripthashes_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.ScriptHashes = ScriptHashes;\n/**\n*/\n\nclass ScriptNOfK {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptNOfK.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_scriptnofk_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.scriptnofk_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptNOfK}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scriptnofk_from_bytes(ptr0, len0);\n    return ScriptNOfK.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  n() {\n    var ret = wasm.scriptnofk_n(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {NativeScripts}\n  */\n\n\n  native_scripts() {\n    var ret = wasm.scriptnofk_native_scripts(this.ptr);\n    return NativeScripts.__wrap(ret);\n  }\n  /**\n  * @param {number} n\n  * @param {NativeScripts} native_scripts\n  * @returns {ScriptNOfK}\n  */\n\n\n  static new(n, native_scripts) {\n    _assertClass(native_scripts, NativeScripts);\n\n    var ret = wasm.scriptnofk_new(n, native_scripts.ptr);\n    return ScriptNOfK.__wrap(ret);\n  }\n\n}\n\nmodule.exports.ScriptNOfK = ScriptNOfK;\n/**\n*/\n\nclass ScriptPubkey {\n  static __wrap(ptr) {\n    const obj = Object.create(ScriptPubkey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_scriptpubkey_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.scriptpubkey_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {ScriptPubkey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.scriptpubkey_from_bytes(ptr0, len0);\n    return ScriptPubkey.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  addr_keyhash() {\n    var ret = wasm.scriptpubkey_addr_keyhash(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @param {Ed25519KeyHash} addr_keyhash\n  * @returns {ScriptPubkey}\n  */\n\n\n  static new(addr_keyhash) {\n    _assertClass(addr_keyhash, Ed25519KeyHash);\n\n    var ret = wasm.scriptpubkey_new(addr_keyhash.ptr);\n    return ScriptPubkey.__wrap(ret);\n  }\n\n}\n\nmodule.exports.ScriptPubkey = ScriptPubkey;\n/**\n*/\n\nclass SingleHostAddr {\n  static __wrap(ptr) {\n    const obj = Object.create(SingleHostAddr.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_singlehostaddr_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.singlehostaddr_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {SingleHostAddr}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.singlehostaddr_from_bytes(ptr0, len0);\n    return SingleHostAddr.__wrap(ret);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  port() {\n    var ret = wasm.singlehostaddr_port(this.ptr);\n    return ret === 0xFFFFFF ? undefined : ret;\n  }\n  /**\n  * @returns {Ipv4 | undefined}\n  */\n\n\n  ipv4() {\n    var ret = wasm.singlehostaddr_ipv4(this.ptr);\n    return ret === 0 ? undefined : Ipv4.__wrap(ret);\n  }\n  /**\n  * @returns {Ipv6 | undefined}\n  */\n\n\n  ipv6() {\n    var ret = wasm.singlehostaddr_ipv6(this.ptr);\n    return ret === 0 ? undefined : Ipv6.__wrap(ret);\n  }\n  /**\n  * @param {number | undefined} port\n  * @param {Ipv4 | undefined} ipv4\n  * @param {Ipv6 | undefined} ipv6\n  * @returns {SingleHostAddr}\n  */\n\n\n  static new(port, ipv4, ipv6) {\n    let ptr0 = 0;\n\n    if (!isLikeNone(ipv4)) {\n      _assertClass(ipv4, Ipv4);\n\n      ptr0 = ipv4.ptr;\n      ipv4.ptr = 0;\n    }\n\n    let ptr1 = 0;\n\n    if (!isLikeNone(ipv6)) {\n      _assertClass(ipv6, Ipv6);\n\n      ptr1 = ipv6.ptr;\n      ipv6.ptr = 0;\n    }\n\n    var ret = wasm.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n    return SingleHostAddr.__wrap(ret);\n  }\n\n}\n\nmodule.exports.SingleHostAddr = SingleHostAddr;\n/**\n*/\n\nclass SingleHostName {\n  static __wrap(ptr) {\n    const obj = Object.create(SingleHostName.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_singlehostname_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.singlehostname_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {SingleHostName}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.singlehostname_from_bytes(ptr0, len0);\n    return SingleHostName.__wrap(ret);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  port() {\n    var ret = wasm.singlehostname_port(this.ptr);\n    return ret === 0xFFFFFF ? undefined : ret;\n  }\n  /**\n  * @returns {DNSRecordAorAAAA}\n  */\n\n\n  dns_name() {\n    var ret = wasm.singlehostname_dns_name(this.ptr);\n    return DNSRecordAorAAAA.__wrap(ret);\n  }\n  /**\n  * @param {number | undefined} port\n  * @param {DNSRecordAorAAAA} dns_name\n  * @returns {SingleHostName}\n  */\n\n\n  static new(port, dns_name) {\n    _assertClass(dns_name, DNSRecordAorAAAA);\n\n    var ret = wasm.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n    return SingleHostName.__wrap(ret);\n  }\n\n}\n\nmodule.exports.SingleHostName = SingleHostName;\n/**\n*/\n\nclass StakeCredential {\n  static __wrap(ptr) {\n    const obj = Object.create(StakeCredential.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_stakecredential_free(ptr);\n  }\n  /**\n  * @param {Ed25519KeyHash} hash\n  * @returns {StakeCredential}\n  */\n\n\n  static from_keyhash(hash) {\n    _assertClass(hash, Ed25519KeyHash);\n\n    var ret = wasm.stakecredential_from_keyhash(hash.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @param {ScriptHash} hash\n  * @returns {StakeCredential}\n  */\n\n\n  static from_scripthash(hash) {\n    _assertClass(hash, ScriptHash);\n\n    var ret = wasm.stakecredential_from_scripthash(hash.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash | undefined}\n  */\n\n\n  to_keyhash() {\n    var ret = wasm.stakecredential_to_keyhash(this.ptr);\n    return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @returns {ScriptHash | undefined}\n  */\n\n\n  to_scripthash() {\n    var ret = wasm.stakecredential_to_scripthash(this.ptr);\n    return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.stakecredential_kind(this.ptr);\n    return ret;\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.stakecredential_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {StakeCredential}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.stakecredential_from_bytes(ptr0, len0);\n    return StakeCredential.__wrap(ret);\n  }\n\n}\n\nmodule.exports.StakeCredential = StakeCredential;\n/**\n*/\n\nclass StakeCredentials {\n  static __wrap(ptr) {\n    const obj = Object.create(StakeCredentials.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_stakecredentials_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.stakecredentials_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {StakeCredentials}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.stakecredentials_from_bytes(ptr0, len0);\n    return StakeCredentials.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredentials}\n  */\n\n\n  static new() {\n    var ret = wasm.stakecredentials_new();\n    return StakeCredentials.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.stakecredentials_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {StakeCredential}\n  */\n\n\n  get(index) {\n    var ret = wasm.stakecredentials_get(this.ptr, index);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @param {StakeCredential} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, StakeCredential);\n\n    wasm.stakecredentials_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.StakeCredentials = StakeCredentials;\n/**\n*/\n\nclass StakeDelegation {\n  static __wrap(ptr) {\n    const obj = Object.create(StakeDelegation.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_stakedelegation_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.stakedelegation_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {StakeDelegation}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.stakedelegation_from_bytes(ptr0, len0);\n    return StakeDelegation.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  stake_credential() {\n    var ret = wasm.stakedelegation_stake_credential(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519KeyHash}\n  */\n\n\n  pool_keyhash() {\n    var ret = wasm.stakedelegation_pool_keyhash(this.ptr);\n    return Ed25519KeyHash.__wrap(ret);\n  }\n  /**\n  * @param {StakeCredential} stake_credential\n  * @param {Ed25519KeyHash} pool_keyhash\n  * @returns {StakeDelegation}\n  */\n\n\n  static new(stake_credential, pool_keyhash) {\n    _assertClass(stake_credential, StakeCredential);\n\n    _assertClass(pool_keyhash, Ed25519KeyHash);\n\n    var ret = wasm.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n    return StakeDelegation.__wrap(ret);\n  }\n\n}\n\nmodule.exports.StakeDelegation = StakeDelegation;\n/**\n*/\n\nclass StakeDeregistration {\n  static __wrap(ptr) {\n    const obj = Object.create(StakeDeregistration.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_stakederegistration_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.stakederegistration_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {StakeDeregistration}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.stakederegistration_from_bytes(ptr0, len0);\n    return StakeDeregistration.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  stake_credential() {\n    var ret = wasm.stakederegistration_stake_credential(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @param {StakeCredential} stake_credential\n  * @returns {StakeDeregistration}\n  */\n\n\n  static new(stake_credential) {\n    _assertClass(stake_credential, StakeCredential);\n\n    var ret = wasm.stakederegistration_new(stake_credential.ptr);\n    return StakeDeregistration.__wrap(ret);\n  }\n\n}\n\nmodule.exports.StakeDeregistration = StakeDeregistration;\n/**\n*/\n\nclass StakeRegistration {\n  static __wrap(ptr) {\n    const obj = Object.create(StakeRegistration.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_stakeregistration_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.stakeregistration_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {StakeRegistration}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.stakeregistration_from_bytes(ptr0, len0);\n    return StakeRegistration.__wrap(ret);\n  }\n  /**\n  * @returns {StakeCredential}\n  */\n\n\n  stake_credential() {\n    var ret = wasm.stakeregistration_stake_credential(this.ptr);\n    return StakeCredential.__wrap(ret);\n  }\n  /**\n  * @param {StakeCredential} stake_credential\n  * @returns {StakeRegistration}\n  */\n\n\n  static new(stake_credential) {\n    _assertClass(stake_credential, StakeCredential);\n\n    var ret = wasm.stakeregistration_new(stake_credential.ptr);\n    return StakeRegistration.__wrap(ret);\n  }\n\n}\n\nmodule.exports.StakeRegistration = StakeRegistration;\n/**\n*/\n\nclass TimelockExpiry {\n  static __wrap(ptr) {\n    const obj = Object.create(TimelockExpiry.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_timelockexpiry_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.timelockexpiry_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TimelockExpiry}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.timelockexpiry_from_bytes(ptr0, len0);\n    return TimelockExpiry.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  slot() {\n    var ret = wasm.timelockexpiry_slot(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} slot\n  * @returns {TimelockExpiry}\n  */\n\n\n  static new(slot) {\n    var ret = wasm.timelockexpiry_new(slot);\n    return TimelockExpiry.__wrap(ret);\n  }\n\n}\n\nmodule.exports.TimelockExpiry = TimelockExpiry;\n/**\n*/\n\nclass TimelockStart {\n  static __wrap(ptr) {\n    const obj = Object.create(TimelockStart.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_timelockstart_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.timelockstart_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TimelockStart}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.timelockstart_from_bytes(ptr0, len0);\n    return TimelockStart.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  slot() {\n    var ret = wasm.timelockstart_slot(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} slot\n  * @returns {TimelockStart}\n  */\n\n\n  static new(slot) {\n    var ret = wasm.timelockstart_new(slot);\n    return TimelockStart.__wrap(ret);\n  }\n\n}\n\nmodule.exports.TimelockStart = TimelockStart;\n/**\n*/\n\nclass Transaction {\n  static __wrap(ptr) {\n    const obj = Object.create(Transaction.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transaction_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transaction_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Transaction}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transaction_from_bytes(ptr0, len0);\n    return Transaction.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionBody}\n  */\n\n\n  body() {\n    var ret = wasm.transaction_body(this.ptr);\n    return TransactionBody.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionWitnessSet}\n  */\n\n\n  witness_set() {\n    var ret = wasm.transaction_witness_set(this.ptr);\n    return TransactionWitnessSet.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionMetadata | undefined}\n  */\n\n\n  metadata() {\n    var ret = wasm.transaction_metadata(this.ptr);\n    return ret === 0 ? undefined : TransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @param {TransactionBody} body\n  * @param {TransactionWitnessSet} witness_set\n  * @param {TransactionMetadata | undefined} metadata\n  * @returns {Transaction}\n  */\n\n\n  static new(body, witness_set, metadata) {\n    _assertClass(body, TransactionBody);\n\n    _assertClass(witness_set, TransactionWitnessSet);\n\n    let ptr0 = 0;\n\n    if (!isLikeNone(metadata)) {\n      _assertClass(metadata, TransactionMetadata);\n\n      ptr0 = metadata.ptr;\n      metadata.ptr = 0;\n    }\n\n    var ret = wasm.transaction_new(body.ptr, witness_set.ptr, ptr0);\n    return Transaction.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Transaction = Transaction;\n/**\n*/\n\nclass TransactionBodies {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionBodies.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionbodies_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactionbodies_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionBodies}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionbodies_from_bytes(ptr0, len0);\n    return TransactionBodies.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionBodies}\n  */\n\n\n  static new() {\n    var ret = wasm.transactionbodies_new();\n    return TransactionBodies.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.transactionbodies_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {TransactionBody}\n  */\n\n\n  get(index) {\n    var ret = wasm.transactionbodies_get(this.ptr, index);\n    return TransactionBody.__wrap(ret);\n  }\n  /**\n  * @param {TransactionBody} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, TransactionBody);\n\n    wasm.transactionbodies_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.TransactionBodies = TransactionBodies;\n/**\n*/\n\nclass TransactionBody {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionBody.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionbody_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactionbody_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionBody}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionbody_from_bytes(ptr0, len0);\n    return TransactionBody.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionInputs}\n  */\n\n\n  inputs() {\n    var ret = wasm.transactionbody_inputs(this.ptr);\n    return TransactionInputs.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionOutputs}\n  */\n\n\n  outputs() {\n    var ret = wasm.transactionbody_outputs(this.ptr);\n    return TransactionOutputs.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  fee() {\n    var ret = wasm.transactionbody_fee(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  ttl() {\n    wasm.transactionbody_ttl(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n  }\n  /**\n  * @param {Certificates} certs\n  */\n\n\n  set_certs(certs) {\n    _assertClass(certs, Certificates);\n\n    wasm.transactionbody_set_certs(this.ptr, certs.ptr);\n  }\n  /**\n  * @returns {Certificates | undefined}\n  */\n\n\n  certs() {\n    var ret = wasm.transactionbody_certs(this.ptr);\n    return ret === 0 ? undefined : Certificates.__wrap(ret);\n  }\n  /**\n  * @param {Withdrawals} withdrawals\n  */\n\n\n  set_withdrawals(withdrawals) {\n    _assertClass(withdrawals, Withdrawals);\n\n    wasm.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n  }\n  /**\n  * @returns {Withdrawals | undefined}\n  */\n\n\n  withdrawals() {\n    var ret = wasm.transactionbody_withdrawals(this.ptr);\n    return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n  }\n  /**\n  * @param {Update} update\n  */\n\n\n  set_update(update) {\n    _assertClass(update, Update);\n\n    wasm.transactionbody_set_update(this.ptr, update.ptr);\n  }\n  /**\n  * @returns {Update | undefined}\n  */\n\n\n  update() {\n    var ret = wasm.transactionbody_update(this.ptr);\n    return ret === 0 ? undefined : Update.__wrap(ret);\n  }\n  /**\n  * @param {MetadataHash} metadata_hash\n  */\n\n\n  set_metadata_hash(metadata_hash) {\n    _assertClass(metadata_hash, MetadataHash);\n\n    wasm.transactionbody_set_metadata_hash(this.ptr, metadata_hash.ptr);\n  }\n  /**\n  * @returns {MetadataHash | undefined}\n  */\n\n\n  metadata_hash() {\n    var ret = wasm.transactionbody_metadata_hash(this.ptr);\n    return ret === 0 ? undefined : MetadataHash.__wrap(ret);\n  }\n  /**\n  * @param {number} validity_start_interval\n  */\n\n\n  set_validity_start_interval(validity_start_interval) {\n    wasm.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval);\n  }\n  /**\n  * @returns {number | undefined}\n  */\n\n\n  validity_start_interval() {\n    wasm.transactionbody_validity_start_interval(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n  }\n  /**\n  * @param {Mint} mint\n  */\n\n\n  set_mint(mint) {\n    _assertClass(mint, Mint);\n\n    wasm.transactionbody_set_mint(this.ptr, mint.ptr);\n  }\n  /**\n  * @returns {Mint | undefined}\n  */\n\n\n  multiassets() {\n    var ret = wasm.transactionbody_multiassets(this.ptr);\n    return ret === 0 ? undefined : Mint.__wrap(ret);\n  }\n  /**\n  * @param {TransactionInputs} inputs\n  * @param {TransactionOutputs} outputs\n  * @param {BigNum} fee\n  * @param {number | undefined} ttl\n  * @returns {TransactionBody}\n  */\n\n\n  static new(inputs, outputs, fee, ttl) {\n    _assertClass(inputs, TransactionInputs);\n\n    _assertClass(outputs, TransactionOutputs);\n\n    _assertClass(fee, BigNum);\n\n    var ret = wasm.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, !isLikeNone(ttl), isLikeNone(ttl) ? 0 : ttl);\n    return TransactionBody.__wrap(ret);\n  }\n\n}\n\nmodule.exports.TransactionBody = TransactionBody;\n/**\n*/\n\nclass TransactionBuilder {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionBuilder.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionbuilder_free(ptr);\n  }\n  /**\n  * @param {Ed25519KeyHash} hash\n  * @param {TransactionInput} input\n  * @param {Value} amount\n  */\n\n\n  add_key_input(hash, input, amount) {\n    _assertClass(hash, Ed25519KeyHash);\n\n    _assertClass(input, TransactionInput);\n\n    _assertClass(amount, Value);\n\n    wasm.transactionbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n  }\n  /**\n  * @param {ScriptHash} hash\n  * @param {TransactionInput} input\n  * @param {Value} amount\n  */\n\n\n  add_script_input(hash, input, amount) {\n    _assertClass(hash, ScriptHash);\n\n    _assertClass(input, TransactionInput);\n\n    _assertClass(amount, Value);\n\n    wasm.transactionbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n  }\n  /**\n  * @param {ByronAddress} hash\n  * @param {TransactionInput} input\n  * @param {Value} amount\n  */\n\n\n  add_bootstrap_input(hash, input, amount) {\n    _assertClass(hash, ByronAddress);\n\n    _assertClass(input, TransactionInput);\n\n    _assertClass(amount, Value);\n\n    wasm.transactionbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n  }\n  /**\n  * @param {Address} address\n  * @param {TransactionInput} input\n  * @param {Value} amount\n  */\n\n\n  add_input(address, input, amount) {\n    _assertClass(address, Address);\n\n    _assertClass(input, TransactionInput);\n\n    _assertClass(amount, Value);\n\n    wasm.transactionbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n  }\n  /**\n  * calculates how much the fee would increase if you added a given output\n  * @param {Address} address\n  * @param {TransactionInput} input\n  * @param {Value} amount\n  * @returns {BigNum}\n  */\n\n\n  fee_for_input(address, input, amount) {\n    _assertClass(address, Address);\n\n    _assertClass(input, TransactionInput);\n\n    _assertClass(amount, Value);\n\n    var ret = wasm.transactionbuilder_fee_for_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {TransactionOutput} output\n  */\n\n\n  add_output(output) {\n    _assertClass(output, TransactionOutput);\n\n    wasm.transactionbuilder_add_output(this.ptr, output.ptr);\n  }\n  /**\n  * calculates how much the fee would increase if you added a given output\n  * @param {TransactionOutput} output\n  * @returns {BigNum}\n  */\n\n\n  fee_for_output(output) {\n    _assertClass(output, TransactionOutput);\n\n    var ret = wasm.transactionbuilder_fee_for_output(this.ptr, output.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} fee\n  */\n\n\n  set_fee(fee) {\n    _assertClass(fee, BigNum);\n\n    wasm.transactionbuilder_set_fee(this.ptr, fee.ptr);\n  }\n  /**\n  * @param {number} ttl\n  */\n\n\n  set_ttl(ttl) {\n    wasm.transactionbuilder_set_ttl(this.ptr, ttl);\n  }\n  /**\n  * @param {number} validity_start_interval\n  */\n\n\n  set_validity_start_interval(validity_start_interval) {\n    wasm.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval);\n  }\n  /**\n  * @param {Certificates} certs\n  */\n\n\n  set_certs(certs) {\n    _assertClass(certs, Certificates);\n\n    wasm.transactionbuilder_set_certs(this.ptr, certs.ptr);\n  }\n  /**\n  * @param {Withdrawals} withdrawals\n  */\n\n\n  set_withdrawals(withdrawals) {\n    _assertClass(withdrawals, Withdrawals);\n\n    wasm.transactionbuilder_set_withdrawals(this.ptr, withdrawals.ptr);\n  }\n  /**\n  * @param {TransactionMetadata} metadata\n  */\n\n\n  set_metadata(metadata) {\n    _assertClass(metadata, TransactionMetadata);\n\n    wasm.transactionbuilder_set_metadata(this.ptr, metadata.ptr);\n  }\n  /**\n  * @param {LinearFee} linear_fee\n  * @param {BigNum} minimum_utxo_val\n  * @param {BigNum} pool_deposit\n  * @param {BigNum} key_deposit\n  * @returns {TransactionBuilder}\n  */\n\n\n  static new(linear_fee, minimum_utxo_val, pool_deposit, key_deposit) {\n    _assertClass(linear_fee, LinearFee);\n\n    _assertClass(minimum_utxo_val, BigNum);\n\n    _assertClass(pool_deposit, BigNum);\n\n    _assertClass(key_deposit, BigNum);\n\n    var ret = wasm.transactionbuilder_new(linear_fee.ptr, minimum_utxo_val.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return TransactionBuilder.__wrap(ret);\n  }\n  /**\n  * does not include refunds or withdrawals\n  * @returns {Value}\n  */\n\n\n  get_explicit_input() {\n    var ret = wasm.transactionbuilder_get_explicit_input(this.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * withdrawals and refunds\n  * @returns {Value}\n  */\n\n\n  get_implicit_input() {\n    var ret = wasm.transactionbuilder_get_implicit_input(this.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * does not include fee\n  * @returns {Value}\n  */\n\n\n  get_explicit_output() {\n    var ret = wasm.transactionbuilder_get_explicit_output(this.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  get_deposit() {\n    var ret = wasm.transactionbuilder_get_deposit(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum | undefined}\n  */\n\n\n  get_fee_if_set() {\n    var ret = wasm.transactionbuilder_get_fee_if_set(this.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * Warning: this function will mutate the /fee/ field\n  * @param {Address} address\n  * @returns {boolean}\n  */\n\n\n  add_change_if_needed(address) {\n    _assertClass(address, Address);\n\n    var ret = wasm.transactionbuilder_add_change_if_needed(this.ptr, address.ptr);\n    return ret !== 0;\n  }\n  /**\n  * @returns {TransactionBody}\n  */\n\n\n  build() {\n    var ret = wasm.transactionbuilder_build(this.ptr);\n    return TransactionBody.__wrap(ret);\n  }\n  /**\n  * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n  * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n  * this is done to simplify the library code, but can be fixed later\n  * @returns {BigNum}\n  */\n\n\n  min_fee() {\n    var ret = wasm.transactionbuilder_min_fee(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n\n}\n\nmodule.exports.TransactionBuilder = TransactionBuilder;\n/**\n*/\n\nclass TransactionHash {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionhash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactionhash_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.transactionhash_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {TransactionHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionhash_from_bech32(ptr0, len0);\n    return TransactionHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionhash_from_bytes(ptr0, len0);\n    return TransactionHash.__wrap(ret);\n  }\n\n}\n\nmodule.exports.TransactionHash = TransactionHash;\n/**\n*/\n\nclass TransactionInput {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionInput.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactioninput_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactioninput_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionInput}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactioninput_from_bytes(ptr0, len0);\n    return TransactionInput.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionHash}\n  */\n\n\n  transaction_id() {\n    var ret = wasm.transactioninput_transaction_id(this.ptr);\n    return TransactionHash.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  index() {\n    var ret = wasm.transactioninput_index(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {TransactionHash} transaction_id\n  * @param {number} index\n  * @returns {TransactionInput}\n  */\n\n\n  static new(transaction_id, index) {\n    _assertClass(transaction_id, TransactionHash);\n\n    var ret = wasm.transactioninput_new(transaction_id.ptr, index);\n    return TransactionInput.__wrap(ret);\n  }\n\n}\n\nmodule.exports.TransactionInput = TransactionInput;\n/**\n*/\n\nclass TransactionInputs {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionInputs.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactioninputs_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactioninputs_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionInputs}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactioninputs_from_bytes(ptr0, len0);\n    return TransactionInputs.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionInputs}\n  */\n\n\n  static new() {\n    var ret = wasm.transactioninputs_new();\n    return TransactionInputs.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.transactioninputs_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {TransactionInput}\n  */\n\n\n  get(index) {\n    var ret = wasm.transactioninputs_get(this.ptr, index);\n    return TransactionInput.__wrap(ret);\n  }\n  /**\n  * @param {TransactionInput} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, TransactionInput);\n\n    wasm.transactioninputs_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.TransactionInputs = TransactionInputs;\n/**\n*/\n\nclass TransactionMetadata {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionMetadata.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionmetadata_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactionmetadata_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionMetadata}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionmetadata_from_bytes(ptr0, len0);\n    return TransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @returns {GeneralTransactionMetadata}\n  */\n\n\n  general() {\n    var ret = wasm.transactionmetadata_general(this.ptr);\n    return GeneralTransactionMetadata.__wrap(ret);\n  }\n  /**\n  * @returns {NativeScripts | undefined}\n  */\n\n\n  native_scripts() {\n    var ret = wasm.transactionmetadata_native_scripts(this.ptr);\n    return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n  }\n  /**\n  * @param {NativeScripts} native_scripts\n  */\n\n\n  set_native_scripts(native_scripts) {\n    _assertClass(native_scripts, NativeScripts);\n\n    wasm.transactionmetadata_set_native_scripts(this.ptr, native_scripts.ptr);\n  }\n  /**\n  * @param {GeneralTransactionMetadata} general\n  * @returns {TransactionMetadata}\n  */\n\n\n  static new(general) {\n    _assertClass(general, GeneralTransactionMetadata);\n\n    var ret = wasm.transactionmetadata_new(general.ptr);\n    return TransactionMetadata.__wrap(ret);\n  }\n\n}\n\nmodule.exports.TransactionMetadata = TransactionMetadata;\n/**\n*/\n\nclass TransactionMetadatum {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionMetadatum.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionmetadatum_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactionmetadatum_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionmetadatum_from_bytes(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {MetadataMap} map\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static new_map(map) {\n    _assertClass(map, MetadataMap);\n\n    var ret = wasm.transactionmetadatum_new_map(map.ptr);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {MetadataList} list\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static new_list(list) {\n    _assertClass(list, MetadataList);\n\n    var ret = wasm.transactionmetadatum_new_list(list.ptr);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {Int} int\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static new_int(int) {\n    _assertClass(int, Int);\n\n    var ret = wasm.transactionmetadatum_new_int(int.ptr);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static new_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionmetadatum_new_bytes(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @param {string} text\n  * @returns {TransactionMetadatum}\n  */\n\n\n  static new_text(text) {\n    var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionmetadatum_new_text(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  kind() {\n    var ret = wasm.transactionmetadatum_kind(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @returns {MetadataMap}\n  */\n\n\n  as_map() {\n    var ret = wasm.transactionmetadatum_as_map(this.ptr);\n    return MetadataMap.__wrap(ret);\n  }\n  /**\n  * @returns {MetadataList}\n  */\n\n\n  as_list() {\n    var ret = wasm.transactionmetadatum_as_list(this.ptr);\n    return MetadataList.__wrap(ret);\n  }\n  /**\n  * @returns {Int}\n  */\n\n\n  as_int() {\n    var ret = wasm.transactionmetadatum_as_int(this.ptr);\n    return Int.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  as_bytes() {\n    wasm.transactionmetadatum_as_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  as_text() {\n    try {\n      wasm.transactionmetadatum_as_text(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n\n}\n\nmodule.exports.TransactionMetadatum = TransactionMetadatum;\n/**\n*/\n\nclass TransactionMetadatumLabels {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionMetadatumLabels.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionmetadatumlabels_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactionmetadatumlabels_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionMetadatumLabels}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionmetadatumlabels_from_bytes(ptr0, len0);\n    return TransactionMetadatumLabels.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionMetadatumLabels}\n  */\n\n\n  static new() {\n    var ret = wasm.transactionmetadatumlabels_new();\n    return TransactionMetadatumLabels.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.transactionmetadatumlabels_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {BigNum}\n  */\n\n\n  get(index) {\n    var ret = wasm.transactionmetadatumlabels_get(this.ptr, index);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, BigNum);\n\n    wasm.transactionmetadatumlabels_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.TransactionMetadatumLabels = TransactionMetadatumLabels;\n/**\n*/\n\nclass TransactionOutput {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionOutput.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionoutput_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactionoutput_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionOutput}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionoutput_from_bytes(ptr0, len0);\n    return TransactionOutput.__wrap(ret);\n  }\n  /**\n  * @returns {Address}\n  */\n\n\n  address() {\n    var ret = wasm.transactionoutput_address(this.ptr);\n    return Address.__wrap(ret);\n  }\n  /**\n  * @returns {Value}\n  */\n\n\n  amount() {\n    var ret = wasm.transactionoutput_amount(this.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @param {Address} address\n  * @param {Value} amount\n  * @returns {TransactionOutput}\n  */\n\n\n  static new(address, amount) {\n    _assertClass(address, Address);\n\n    _assertClass(amount, Value);\n\n    var ret = wasm.transactionoutput_new(address.ptr, amount.ptr);\n    return TransactionOutput.__wrap(ret);\n  }\n\n}\n\nmodule.exports.TransactionOutput = TransactionOutput;\n/**\n*/\n\nclass TransactionOutputs {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionOutputs.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionoutputs_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactionoutputs_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionOutputs}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionoutputs_from_bytes(ptr0, len0);\n    return TransactionOutputs.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionOutputs}\n  */\n\n\n  static new() {\n    var ret = wasm.transactionoutputs_new();\n    return TransactionOutputs.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.transactionoutputs_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {TransactionOutput}\n  */\n\n\n  get(index) {\n    var ret = wasm.transactionoutputs_get(this.ptr, index);\n    return TransactionOutput.__wrap(ret);\n  }\n  /**\n  * @param {TransactionOutput} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, TransactionOutput);\n\n    wasm.transactionoutputs_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.TransactionOutputs = TransactionOutputs;\n/**\n*/\n\nclass TransactionWitnessSet {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionWitnessSet.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionwitnessset_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactionwitnessset_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionWitnessSet}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionwitnessset_from_bytes(ptr0, len0);\n    return TransactionWitnessSet.__wrap(ret);\n  }\n  /**\n  * @param {Vkeywitnesses} vkeys\n  */\n\n\n  set_vkeys(vkeys) {\n    _assertClass(vkeys, Vkeywitnesses);\n\n    wasm.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n  }\n  /**\n  * @returns {Vkeywitnesses | undefined}\n  */\n\n\n  vkeys() {\n    var ret = wasm.transactionwitnessset_vkeys(this.ptr);\n    return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n  }\n  /**\n  * @param {NativeScripts} scripts\n  */\n\n\n  set_scripts(scripts) {\n    _assertClass(scripts, NativeScripts);\n\n    wasm.transactionwitnessset_set_scripts(this.ptr, scripts.ptr);\n  }\n  /**\n  * @returns {NativeScripts | undefined}\n  */\n\n\n  scripts() {\n    var ret = wasm.transactionwitnessset_scripts(this.ptr);\n    return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n  }\n  /**\n  * @param {BootstrapWitnesses} bootstraps\n  */\n\n\n  set_bootstraps(bootstraps) {\n    _assertClass(bootstraps, BootstrapWitnesses);\n\n    wasm.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n  }\n  /**\n  * @returns {BootstrapWitnesses | undefined}\n  */\n\n\n  bootstraps() {\n    var ret = wasm.transactionwitnessset_bootstraps(this.ptr);\n    return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionWitnessSet}\n  */\n\n\n  static new() {\n    var ret = wasm.transactionwitnessset_new();\n    return TransactionWitnessSet.__wrap(ret);\n  }\n\n}\n\nmodule.exports.TransactionWitnessSet = TransactionWitnessSet;\n/**\n*/\n\nclass TransactionWitnessSets {\n  static __wrap(ptr) {\n    const obj = Object.create(TransactionWitnessSets.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_transactionwitnesssets_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.transactionwitnesssets_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {TransactionWitnessSets}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.transactionwitnesssets_from_bytes(ptr0, len0);\n    return TransactionWitnessSets.__wrap(ret);\n  }\n  /**\n  * @returns {TransactionWitnessSets}\n  */\n\n\n  static new() {\n    var ret = wasm.transactionwitnesssets_new();\n    return TransactionWitnessSets.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.transactionwitnesssets_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {TransactionWitnessSet}\n  */\n\n\n  get(index) {\n    var ret = wasm.transactionwitnesssets_get(this.ptr, index);\n    return TransactionWitnessSet.__wrap(ret);\n  }\n  /**\n  * @param {TransactionWitnessSet} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, TransactionWitnessSet);\n\n    wasm.transactionwitnesssets_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.TransactionWitnessSets = TransactionWitnessSets;\n/**\n*/\n\nclass URL {\n  static __wrap(ptr) {\n    const obj = Object.create(URL.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_url_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.url_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {URL}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.url_from_bytes(ptr0, len0);\n    return URL.__wrap(ret);\n  }\n  /**\n  * @param {string} url\n  * @returns {URL}\n  */\n\n\n  static new(url) {\n    var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.url_new(ptr0, len0);\n    return URL.__wrap(ret);\n  }\n  /**\n  * @returns {string}\n  */\n\n\n  url() {\n    try {\n      wasm.url_url(8, this.ptr);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n\n}\n\nmodule.exports.URL = URL;\n/**\n*/\n\nclass UnitInterval {\n  static __wrap(ptr) {\n    const obj = Object.create(UnitInterval.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_unitinterval_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.unitinterval_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {UnitInterval}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.unitinterval_from_bytes(ptr0, len0);\n    return UnitInterval.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  numerator() {\n    var ret = wasm.unitinterval_numerator(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  denominator() {\n    var ret = wasm.unitinterval_denominator(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} numerator\n  * @param {BigNum} denominator\n  * @returns {UnitInterval}\n  */\n\n\n  static new(numerator, denominator) {\n    _assertClass(numerator, BigNum);\n\n    _assertClass(denominator, BigNum);\n\n    var ret = wasm.unitinterval_new(numerator.ptr, denominator.ptr);\n    return UnitInterval.__wrap(ret);\n  }\n\n}\n\nmodule.exports.UnitInterval = UnitInterval;\n/**\n*/\n\nclass Update {\n  static __wrap(ptr) {\n    const obj = Object.create(Update.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_update_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.update_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Update}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.update_from_bytes(ptr0, len0);\n    return Update.__wrap(ret);\n  }\n  /**\n  * @returns {ProposedProtocolParameterUpdates}\n  */\n\n\n  proposed_protocol_parameter_updates() {\n    var ret = wasm.update_proposed_protocol_parameter_updates(this.ptr);\n    return ProposedProtocolParameterUpdates.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  epoch() {\n    var ret = wasm.update_epoch(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n  * @param {number} epoch\n  * @returns {Update}\n  */\n\n\n  static new(proposed_protocol_parameter_updates, epoch) {\n    _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n\n    var ret = wasm.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n    return Update.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Update = Update;\n/**\n*/\n\nclass VRFCert {\n  static __wrap(ptr) {\n    const obj = Object.create(VRFCert.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_vrfcert_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.vrfcert_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {VRFCert}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfcert_from_bytes(ptr0, len0);\n    return VRFCert.__wrap(ret);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  output() {\n    wasm.vrfcert_output(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  proof() {\n    wasm.vrfcert_proof(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} output\n  * @param {Uint8Array} proof\n  * @returns {VRFCert}\n  */\n\n\n  static new(output, proof) {\n    var ptr0 = passArray8ToWasm0(output, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfcert_new(ptr0, len0, ptr1, len1);\n    return VRFCert.__wrap(ret);\n  }\n\n}\n\nmodule.exports.VRFCert = VRFCert;\n/**\n*/\n\nclass VRFKeyHash {\n  static __wrap(ptr) {\n    const obj = Object.create(VRFKeyHash.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_vrfkeyhash_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.vrfkeyhash_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.vrfkeyhash_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {VRFKeyHash}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfkeyhash_from_bech32(ptr0, len0);\n    return VRFKeyHash.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {VRFKeyHash}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfkeyhash_from_bytes(ptr0, len0);\n    return VRFKeyHash.__wrap(ret);\n  }\n\n}\n\nmodule.exports.VRFKeyHash = VRFKeyHash;\n/**\n*/\n\nclass VRFVKey {\n  static __wrap(ptr) {\n    const obj = Object.create(VRFVKey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_vrfvkey_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.vrfvkey_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {string} prefix\n  * @returns {string}\n  */\n\n\n  to_bech32(prefix) {\n    try {\n      var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.vrfvkey_to_bech32(8, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[8 / 4 + 0];\n      var r1 = getInt32Memory0()[8 / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * @param {string} bech_str\n  * @returns {VRFVKey}\n  */\n\n\n  static from_bech32(bech_str) {\n    var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfvkey_from_bech32(ptr0, len0);\n    return VRFVKey.__wrap(ret);\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {VRFVKey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vrfvkey_from_bytes(ptr0, len0);\n    return VRFVKey.__wrap(ret);\n  }\n\n}\n\nmodule.exports.VRFVKey = VRFVKey;\n/**\n*/\n\nclass Value {\n  static __wrap(ptr) {\n    const obj = Object.create(Value.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_value_free(ptr);\n  }\n  /**\n  * @param {BigNum} coin\n  * @returns {Value}\n  */\n\n\n  static new(coin) {\n    _assertClass(coin, BigNum);\n\n    var ret = wasm.value_new(coin.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @returns {BigNum}\n  */\n\n\n  coin() {\n    var ret = wasm.value_coin(this.ptr);\n    return BigNum.__wrap(ret);\n  }\n  /**\n  * @param {BigNum} coin\n  */\n\n\n  set_coin(coin) {\n    _assertClass(coin, BigNum);\n\n    wasm.value_set_coin(this.ptr, coin.ptr);\n  }\n  /**\n  * @returns {MultiAsset | undefined}\n  */\n\n\n  multiasset() {\n    var ret = wasm.value_multiasset(this.ptr);\n    return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n  }\n  /**\n  * @param {MultiAsset} multiasset\n  */\n\n\n  set_multiasset(multiasset) {\n    _assertClass(multiasset, MultiAsset);\n\n    wasm.value_set_multiasset(this.ptr, multiasset.ptr);\n  }\n  /**\n  * @param {Value} rhs\n  * @returns {Value}\n  */\n\n\n  checked_add(rhs) {\n    _assertClass(rhs, Value);\n\n    var ret = wasm.value_checked_add(this.ptr, rhs.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @param {Value} rhs_value\n  * @returns {Value}\n  */\n\n\n  checked_sub(rhs_value) {\n    _assertClass(rhs_value, Value);\n\n    var ret = wasm.value_checked_sub(this.ptr, rhs_value.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * @param {Value} rhs_value\n  * @returns {Value}\n  */\n\n\n  clamped_sub(rhs_value) {\n    _assertClass(rhs_value, Value);\n\n    var ret = wasm.value_clamped_sub(this.ptr, rhs_value.ptr);\n    return Value.__wrap(ret);\n  }\n  /**\n  * note: values are only partially comparable\n  * @param {Value} rhs_value\n  * @returns {number | undefined}\n  */\n\n\n  compare(rhs_value) {\n    _assertClass(rhs_value, Value);\n\n    var ret = wasm.value_compare(this.ptr, rhs_value.ptr);\n    return ret === 0xFFFFFF ? undefined : ret;\n  }\n\n}\n\nmodule.exports.Value = Value;\n/**\n*/\n\nclass Vkey {\n  static __wrap(ptr) {\n    const obj = Object.create(Vkey.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_vkey_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.vkey_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Vkey}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vkey_from_bytes(ptr0, len0);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @param {PublicKey} pk\n  * @returns {Vkey}\n  */\n\n\n  static new(pk) {\n    _assertClass(pk, PublicKey);\n\n    var ret = wasm.vkey_new(pk.ptr);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @returns {PublicKey}\n  */\n\n\n  public_key() {\n    var ret = wasm.vkey_public_key(this.ptr);\n    return PublicKey.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Vkey = Vkey;\n/**\n*/\n\nclass Vkeywitness {\n  static __wrap(ptr) {\n    const obj = Object.create(Vkeywitness.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_vkeywitness_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.vkeywitness_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Vkeywitness}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.vkeywitness_from_bytes(ptr0, len0);\n    return Vkeywitness.__wrap(ret);\n  }\n  /**\n  * @param {Vkey} vkey\n  * @param {Ed25519Signature} signature\n  * @returns {Vkeywitness}\n  */\n\n\n  static new(vkey, signature) {\n    _assertClass(vkey, Vkey);\n\n    _assertClass(signature, Ed25519Signature);\n\n    var ret = wasm.vkeywitness_new(vkey.ptr, signature.ptr);\n    return Vkeywitness.__wrap(ret);\n  }\n  /**\n  * @returns {Vkey}\n  */\n\n\n  vkey() {\n    var ret = wasm.vkeywitness_vkey(this.ptr);\n    return Vkey.__wrap(ret);\n  }\n  /**\n  * @returns {Ed25519Signature}\n  */\n\n\n  signature() {\n    var ret = wasm.vkeywitness_signature(this.ptr);\n    return Ed25519Signature.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Vkeywitness = Vkeywitness;\n/**\n*/\n\nclass Vkeywitnesses {\n  static __wrap(ptr) {\n    const obj = Object.create(Vkeywitnesses.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_vkeywitnesses_free(ptr);\n  }\n  /**\n  * @returns {Vkeywitnesses}\n  */\n\n\n  static new() {\n    var ret = wasm.vkeywitnesses_new();\n    return Vkeywitnesses.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.vkeywitnesses_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {number} index\n  * @returns {Vkeywitness}\n  */\n\n\n  get(index) {\n    var ret = wasm.vkeywitnesses_get(this.ptr, index);\n    return Vkeywitness.__wrap(ret);\n  }\n  /**\n  * @param {Vkeywitness} elem\n  */\n\n\n  add(elem) {\n    _assertClass(elem, Vkeywitness);\n\n    wasm.vkeywitnesses_add(this.ptr, elem.ptr);\n  }\n\n}\n\nmodule.exports.Vkeywitnesses = Vkeywitnesses;\n/**\n*/\n\nclass Withdrawals {\n  static __wrap(ptr) {\n    const obj = Object.create(Withdrawals.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_withdrawals_free(ptr);\n  }\n  /**\n  * @returns {Uint8Array}\n  */\n\n\n  to_bytes() {\n    wasm.withdrawals_to_bytes(8, this.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  }\n  /**\n  * @param {Uint8Array} bytes\n  * @returns {Withdrawals}\n  */\n\n\n  static from_bytes(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.withdrawals_from_bytes(ptr0, len0);\n    return Withdrawals.__wrap(ret);\n  }\n  /**\n  * @returns {Withdrawals}\n  */\n\n\n  static new() {\n    var ret = wasm.withdrawals_new();\n    return Withdrawals.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  len() {\n    var ret = wasm.withdrawals_len(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * @param {RewardAddress} key\n  * @param {BigNum} value\n  * @returns {BigNum | undefined}\n  */\n\n\n  insert(key, value) {\n    _assertClass(key, RewardAddress);\n\n    _assertClass(value, BigNum);\n\n    var ret = wasm.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @param {RewardAddress} key\n  * @returns {BigNum | undefined}\n  */\n\n\n  get(key) {\n    _assertClass(key, RewardAddress);\n\n    var ret = wasm.withdrawals_get(this.ptr, key.ptr);\n    return ret === 0 ? undefined : BigNum.__wrap(ret);\n  }\n  /**\n  * @returns {RewardAddresses}\n  */\n\n\n  keys() {\n    var ret = wasm.withdrawals_keys(this.ptr);\n    return RewardAddresses.__wrap(ret);\n  }\n\n}\n\nmodule.exports.Withdrawals = Withdrawals;\n\nmodule.exports.__wbindgen_object_drop_ref = function (arg0) {\n  takeObject(arg0);\n};\n\nmodule.exports.__wbindgen_string_new = function (arg0, arg1) {\n  var ret = getStringFromWasm0(arg0, arg1);\n  return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_3a746f2619705add = function (arg0, arg1) {\n  var ret = new Function(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_call_f54d3a6dadb199ca = function (arg0, arg1) {\n  var ret = getObject(arg0).call(getObject(arg1));\n  return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_jsval_eq = function (arg0, arg1) {\n  var ret = getObject(arg0) === getObject(arg1);\n  return ret;\n};\n\nmodule.exports.__wbg_self_ac379e780a0d8b94 = function (arg0) {\n  var ret = getObject(arg0).self;\n  return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_crypto_1e4302b85d4f64a2 = function (arg0) {\n  var ret = getObject(arg0).crypto;\n  return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_undefined = function (arg0) {\n  var ret = getObject(arg0) === undefined;\n  return ret;\n};\n\nmodule.exports.__wbg_getRandomValues_1b4ba144162a5c9e = function (arg0) {\n  var ret = getObject(arg0).getRandomValues;\n  return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_require_6461b1e9a0d7c34a = function (arg0, arg1) {\n  var ret = require(getStringFromWasm0(arg0, arg1));\n\n  return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_getRandomValues_1ef11e888e5228e9 = function (arg0, arg1, arg2) {\n  getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n};\n\nmodule.exports.__wbg_randomFillSync_1b52c8482374c55b = function (arg0, arg1, arg2) {\n  getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n};\n\nmodule.exports.__wbindgen_string_get = function (arg0, arg1) {\n  const obj = getObject(arg1);\n  var ret = typeof obj === 'string' ? obj : undefined;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_debug_string = function (arg0, arg1) {\n  var ret = debugString(getObject(arg1));\n  var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_throw = function (arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nmodule.exports.__wbindgen_rethrow = function (arg0) {\n  throw takeObject(arg0);\n};\n\nconst path = require('path').join(__dirname, 'cardano_serialization_lib_bg.wasm');\n\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;","map":{"version":3,"names":["imports","module","exports","wasm","TextDecoder","require","String","raw","heap","Array","fill","undefined","push","getObject","idx","heap_next","length","dropObject","takeObject","ret","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","WASM_VECTOR_LEN","cachegetNodeBufferMemory0","getNodeBufferMemory0","Buffer","from","passStringToWasm0","arg","malloc","byteLength","write","isLikeNone","x","cachegetInt32Memory0","getInt32Memory0","Int32Array","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","getArrayU8FromWasm0","passArray8ToWasm0","set","_assertClass","instance","klass","cachegetUint32Memory0","getUint32Memory0","Uint32Array","getArrayU32FromWasm0","make_daedalus_bootstrap_witness","tx_body_hash","addr","key","TransactionHash","ByronAddress","LegacyDaedalusPrivateKey","BootstrapWitness","__wrap","make_icarus_bootstrap_witness","Bip32PrivateKey","make_vkey_witness","sk","PrivateKey","Vkeywitness","hash_metadata","metadata","TransactionMetadata","MetadataHash","hash_transaction","tx_body","TransactionBody","get_implicit_input","txbody","pool_deposit","key_deposit","BigNum","Value","get_deposit","min_ada_required","assets","minimum_utxo_val","encode_arbitrary_bytes_as_metadatum","bytes","ptr0","__wbindgen_malloc","len0","TransactionMetadatum","decode_arbitrary_bytes_from_metadatum","r0","r1","v0","slice","__wbindgen_free","encode_json_str_to_metadatum","json","schema","__wbindgen_realloc","decode_metadatum_to_json_str","metadatum","min_fee","tx","linear_fee","Transaction","LinearFee","encrypt_with_password","password","salt","nonce","data","ptr1","len1","ptr2","len2","ptr3","len3","decrypt_with_password","CertificateKind","Object","freeze","StakeRegistration","StakeDeregistration","StakeDelegation","PoolRegistration","PoolRetirement","GenesisKeyDelegation","MoveInstantaneousRewardsCert","MIRPot","Reserves","Treasury","RelayKind","SingleHostAddr","SingleHostName","MultiHostName","NativeScriptKind","ScriptPubkey","ScriptAll","ScriptAny","ScriptNOfK","TimelockStart","TimelockExpiry","TransactionMetadatumKind","MetadataMap","MetadataList","Int","Bytes","Text","MetadataJsonSchema","NoConversions","BasicConversions","DetailedSchema","Address","create","prototype","free","__wbg_address_free","from_bytes","address_from_bytes","to_bytes","address_to_bytes","to_bech32","prefix","address_to_bech32","from_bech32","bech_str","address_from_bech32","network_id","address_network_id","AssetName","__wbg_assetname_free","assetname_to_bytes","assetname_from_bytes","new","assetname_new","assetname_name","AssetNames","__wbg_assetnames_free","assetnames_to_bytes","assetnames_from_bytes","assetnames_new","assetnames_len","get","index","assetnames_get","add","elem","assetnames_add","Assets","__wbg_assets_free","assets_new","assets_len","insert","value","assets_insert","assets_get","keys","assets_keys","BaseAddress","__wbg_baseaddress_free","network","payment","stake","StakeCredential","baseaddress_new","payment_cred","baseaddress_payment_cred","stake_cred","baseaddress_stake_cred","to_address","baseaddress_to_address","from_address","baseaddress_from_address","__wbg_bignum_free","bignum_to_bytes","bignum_from_bytes","from_str","string","bignum_from_str","to_str","bignum_to_str","checked_mul","other","bignum_checked_mul","checked_add","bignum_checked_add","checked_sub","bignum_checked_sub","clamped_sub","bignum_clamped_sub","compare","rhs_value","bignum_compare","__wbg_bip32privatekey_free","derive","bip32privatekey_derive","from_128_xprv","bip32privatekey_from_128_xprv","to_128_xprv","bip32privatekey_to_128_xprv","generate_ed25519_bip32","bip32privatekey_generate_ed25519_bip32","to_raw_key","bip32privatekey_to_raw_key","to_public","bip32privatekey_to_public","Bip32PublicKey","bip32privatekey_from_bytes","as_bytes","bip32privatekey_as_bytes","bech32_str","bip32privatekey_from_bech32","bip32privatekey_to_bech32","from_bip39_entropy","entropy","bip32privatekey_from_bip39_entropy","chaincode","bip32privatekey_chaincode","__wbg_bip32publickey_free","bip32publickey_derive","bip32publickey_to_raw_key","PublicKey","bip32publickey_from_bytes","bip32publickey_as_bytes","bip32publickey_from_bech32","bip32publickey_to_bech32","bip32publickey_chaincode","Block","__wbg_block_free","block_to_bytes","block_from_bytes","header","block_header","Header","transaction_bodies","block_transaction_bodies","TransactionBodies","transaction_witness_sets","block_transaction_witness_sets","TransactionWitnessSets","transaction_metadata_set","block_transaction_metadata_set","MapTransactionIndexToTransactionMetadata","block_new","BlockHash","__wbg_blockhash_free","blockhash_to_bytes","blockhash_to_bech32","blockhash_from_bech32","blockhash_from_bytes","__wbg_bootstrapwitness_free","bootstrapwitness_to_bytes","bootstrapwitness_from_bytes","vkey","bootstrapwitness_vkey","Vkey","signature","bootstrapwitness_signature","Ed25519Signature","chain_code","bootstrapwitness_chain_code","attributes","bootstrapwitness_attributes","bootstrapwitness_new","BootstrapWitnesses","__wbg_bootstrapwitnesses_free","bootstrapwitnesses_new","bootstrapwitnesses_len","bootstrapwitnesses_get","bootstrapwitnesses_add","__wbg_byronaddress_free","to_base58","byronaddress_to_base58","byronaddress_to_bytes","byronaddress_from_bytes","byron_protocol_magic","byronaddress_byron_protocol_magic","byronaddress_attributes","byronaddress_network_id","from_base58","s","byronaddress_from_base58","icarus_from_key","protocol_magic","byronaddress_icarus_from_key","is_valid","byronaddress_is_valid","byronaddress_to_address","byronaddress_from_address","Certificate","__wbg_certificate_free","certificate_to_bytes","certificate_from_bytes","new_stake_registration","stake_registration","certificate_new_stake_registration","new_stake_deregistration","stake_deregistration","certificate_new_stake_deregistration","new_stake_delegation","stake_delegation","certificate_new_stake_delegation","new_pool_registration","pool_registration","certificate_new_pool_registration","new_pool_retirement","pool_retirement","certificate_new_pool_retirement","new_genesis_key_delegation","genesis_key_delegation","certificate_new_genesis_key_delegation","new_move_instantaneous_rewards_cert","move_instantaneous_rewards_cert","certificate_new_move_instantaneous_rewards_cert","kind","certificate_kind","as_stake_registration","certificate_as_stake_registration","as_stake_deregistration","certificate_as_stake_deregistration","as_stake_delegation","certificate_as_stake_delegation","as_pool_registration","certificate_as_pool_registration","as_pool_retirement","certificate_as_pool_retirement","as_genesis_key_delegation","certificate_as_genesis_key_delegation","as_move_instantaneous_rewards_cert","certificate_as_move_instantaneous_rewards_cert","Certificates","__wbg_certificates_free","certificates_to_bytes","certificates_from_bytes","certificates_new","certificates_len","certificates_get","certificates_add","DNSRecordAorAAAA","__wbg_dnsrecordaoraaaa_free","dnsrecordaoraaaa_to_bytes","dnsrecordaoraaaa_from_bytes","dns_name","dnsrecordaoraaaa_new","record","dnsrecordaoraaaa_record","DNSRecordSRV","__wbg_dnsrecordsrv_free","dnsrecordsrv_to_bytes","dnsrecordsrv_from_bytes","dnsrecordsrv_new","dnsrecordsrv_record","Ed25519KeyHash","__wbg_ed25519keyhash_free","ed25519keyhash_to_bytes","ed25519keyhash_to_bech32","ed25519keyhash_from_bech32","ed25519keyhash_from_bytes","Ed25519KeyHashes","__wbg_ed25519keyhashes_free","ed25519keyhashes_to_bytes","ed25519keyhashes_from_bytes","ed25519keyhashes_new","ed25519keyhashes_len","ed25519keyhashes_get","ed25519keyhashes_add","__wbg_ed25519signature_free","ed25519signature_to_bytes","ed25519signature_to_bech32","to_hex","ed25519signature_to_hex","ed25519signature_from_bech32","from_hex","input","ed25519signature_from_hex","ed25519signature_from_bytes","EnterpriseAddress","__wbg_enterpriseaddress_free","enterpriseaddress_new","enterpriseaddress_payment_cred","enterpriseaddress_to_address","enterpriseaddress_from_address","GeneralTransactionMetadata","__wbg_generaltransactionmetadata_free","generaltransactionmetadata_to_bytes","generaltransactionmetadata_from_bytes","generaltransactionmetadata_new","generaltransactionmetadata_len","generaltransactionmetadata_insert","generaltransactionmetadata_get","generaltransactionmetadata_keys","TransactionMetadatumLabels","GenesisDelegateHash","__wbg_genesisdelegatehash_free","genesisdelegatehash_to_bytes","genesisdelegatehash_to_bech32","genesisdelegatehash_from_bech32","genesisdelegatehash_from_bytes","GenesisHash","__wbg_genesishash_free","genesishash_to_bytes","genesishash_to_bech32","genesishash_from_bech32","genesishash_from_bytes","GenesisHashes","__wbg_genesishashes_free","genesishashes_to_bytes","genesishashes_from_bytes","genesishashes_new","genesishashes_len","genesishashes_get","genesishashes_add","__wbg_genesiskeydelegation_free","genesiskeydelegation_to_bytes","genesiskeydelegation_from_bytes","genesishash","genesiskeydelegation_genesishash","genesis_delegate_hash","genesiskeydelegation_genesis_delegate_hash","vrf_keyhash","genesiskeydelegation_vrf_keyhash","VRFKeyHash","genesiskeydelegation_new","__wbg_header_free","header_to_bytes","header_from_bytes","header_body","header_header_body","HeaderBody","body_signature","header_body_signature","KESSignature","header_new","__wbg_headerbody_free","headerbody_to_bytes","headerbody_from_bytes","block_number","headerbody_block_number","slot","headerbody_slot","prev_hash","headerbody_prev_hash","issuer_vkey","headerbody_issuer_vkey","vrf_vkey","headerbody_vrf_vkey","VRFVKey","nonce_vrf","headerbody_nonce_vrf","VRFCert","leader_vrf","headerbody_leader_vrf","block_body_size","headerbody_block_body_size","block_body_hash","headerbody_block_body_hash","operational_cert","headerbody_operational_cert","OperationalCert","protocol_version","headerbody_protocol_version","ProtocolVersion","headerbody_new","__wbg_int_free","int_new","new_negative","int_new_negative","new_i32","int_new_i32","is_positive","int_is_positive","as_positive","int_as_positive","as_negative","int_as_negative","as_i32","int_as_i32","Ipv4","__wbg_ipv4_free","ipv4_to_bytes","ipv4_from_bytes","ipv4_new","ip","ipv4_ip","Ipv6","__wbg_ipv6_free","ipv6_to_bytes","ipv6_from_bytes","ipv6_new","ipv6_ip","__wbg_kessignature_free","kessignature_to_bytes","kessignature_from_bytes","KESVKey","__wbg_kesvkey_free","kesvkey_to_bytes","kesvkey_to_bech32","kesvkey_from_bech32","kesvkey_from_bytes","__wbg_legacydaedalusprivatekey_free","legacydaedalusprivatekey_from_bytes","legacydaedalusprivatekey_as_bytes","legacydaedalusprivatekey_chaincode","__wbg_linearfee_free","constant","linearfee_constant","coefficient","linearfee_coefficient","linearfee_new","__wbg_maptransactionindextotransactionmetadata_free","maptransactionindextotransactionmetadata_new","maptransactionindextotransactionmetadata_len","maptransactionindextotransactionmetadata_insert","maptransactionindextotransactionmetadata_get","maptransactionindextotransactionmetadata_keys","__wbg_metadatahash_free","metadatahash_to_bytes","metadatahash_to_bech32","metadatahash_from_bech32","metadatahash_from_bytes","__wbg_metadatalist_free","metadatalist_to_bytes","metadatalist_from_bytes","metadatalist_new","metadatalist_len","metadatalist_get","metadatalist_add","__wbg_metadatamap_free","metadatamap_to_bytes","metadatamap_from_bytes","metadatamap_new","metadatamap_len","metadatamap_insert","insert_str","metadatamap_insert_str","insert_i32","metadatamap_insert_i32","metadatamap_get","get_str","metadatamap_get_str","get_i32","metadatamap_get_i32","has","metadatamap_has","metadatamap_keys","Mint","__wbg_mint_free","mint_to_bytes","mint_from_bytes","mint_new","mint_len","ScriptHash","MintAssets","mint_insert","mint_get","mint_keys","ScriptHashes","__wbg_mintassets_free","mintassets_new","mintassets_len","mintassets_insert","mintassets_get","mintassets_keys","MoveInstantaneousReward","__wbg_moveinstantaneousreward_free","moveinstantaneousreward_to_bytes","moveinstantaneousreward_from_bytes","pot","moveinstantaneousreward_new","moveinstantaneousreward_len","moveinstantaneousreward_insert","moveinstantaneousreward_get","moveinstantaneousreward_keys","StakeCredentials","__wbg_moveinstantaneousrewardscert_free","moveinstantaneousrewardscert_to_bytes","moveinstantaneousrewardscert_from_bytes","move_instantaneous_reward","moveinstantaneousrewardscert_move_instantaneous_reward","moveinstantaneousrewardscert_new","MultiAsset","__wbg_multiasset_free","multiasset_to_bytes","multiasset_from_bytes","multiasset_new","multiasset_len","multiasset_insert","multiasset_get","multiasset_keys","sub","rhs_ma","multiasset_sub","__wbg_multihostname_free","multihostname_to_bytes","multihostname_from_bytes","multihostname_dns_name","multihostname_new","NativeScript","__wbg_nativescript_free","nativescript_to_bytes","nativescript_from_bytes","hash","nativescript_hash","script_hash","nativescript_script_hash","new_script_pubkey","script_pubkey","nativescript_new_script_pubkey","new_script_all","script_all","nativescript_new_script_all","new_script_any","script_any","nativescript_new_script_any","new_script_n_of_k","script_n_of_k","nativescript_new_script_n_of_k","new_timelock_start","timelock_start","nativescript_new_timelock_start","new_timelock_expiry","timelock_expiry","nativescript_new_timelock_expiry","nativescript_kind","as_script_pubkey","nativescript_as_script_pubkey","as_script_all","nativescript_as_script_all","as_script_any","nativescript_as_script_any","as_script_n_of_k","nativescript_as_script_n_of_k","as_timelock_start","nativescript_as_timelock_start","as_timelock_expiry","nativescript_as_timelock_expiry","NativeScripts","__wbg_nativescripts_free","nativescripts_new","nativescripts_len","nativescripts_get","nativescripts_add","NetworkInfo","__wbg_networkinfo_free","networkinfo_new","networkinfo_network_id","networkinfo_protocol_magic","testnet","networkinfo_testnet","mainnet","networkinfo_mainnet","Nonce","__wbg_nonce_free","nonce_to_bytes","nonce_from_bytes","new_identity","nonce_new_identity","new_from_hash","nonce_new_from_hash","get_hash","nonce_get_hash","__wbg_operationalcert_free","operationalcert_to_bytes","operationalcert_from_bytes","hot_vkey","operationalcert_hot_vkey","sequence_number","operationalcert_sequence_number","kes_period","operationalcert_kes_period","sigma","operationalcert_sigma","operationalcert_new","Pointer","__wbg_pointer_free","tx_index","cert_index","pointer_new","pointer_slot","pointer_tx_index","pointer_cert_index","PointerAddress","__wbg_pointeraddress_free","pointeraddress_new","pointeraddress_payment_cred","stake_pointer","pointeraddress_stake_pointer","pointeraddress_to_address","pointeraddress_from_address","PoolMetadata","__wbg_poolmetadata_free","poolmetadata_to_bytes","poolmetadata_from_bytes","url","poolmetadata_url","URL","metadata_hash","poolmetadata_metadata_hash","poolmetadata_new","PoolParams","__wbg_poolparams_free","poolparams_to_bytes","poolparams_from_bytes","operator","poolparams_operator","poolparams_vrf_keyhash","pledge","poolparams_pledge","cost","poolparams_cost","margin","poolparams_margin","UnitInterval","reward_account","poolparams_reward_account","RewardAddress","pool_owners","poolparams_pool_owners","relays","poolparams_relays","Relays","pool_metadata","poolparams_pool_metadata","poolparams_new","__wbg_poolregistration_free","poolregistration_to_bytes","poolregistration_from_bytes","pool_params","poolregistration_pool_params","poolregistration_new","__wbg_poolretirement_free","poolretirement_to_bytes","poolretirement_from_bytes","pool_keyhash","poolretirement_pool_keyhash","epoch","poolretirement_epoch","poolretirement_new","__wbg_privatekey_free","privatekey_to_public","generate_ed25519","privatekey_generate_ed25519","generate_ed25519extended","privatekey_generate_ed25519extended","privatekey_to_bech32","privatekey_as_bytes","from_extended_bytes","privatekey_from_extended_bytes","from_normal_bytes","privatekey_from_normal_bytes","sign","privatekey_sign","ProposedProtocolParameterUpdates","__wbg_proposedprotocolparameterupdates_free","proposedprotocolparameterupdates_to_bytes","proposedprotocolparameterupdates_from_bytes","proposedprotocolparameterupdates_new","proposedprotocolparameterupdates_len","ProtocolParamUpdate","proposedprotocolparameterupdates_insert","proposedprotocolparameterupdates_get","proposedprotocolparameterupdates_keys","__wbg_protocolparamupdate_free","protocolparamupdate_to_bytes","protocolparamupdate_from_bytes","set_minfee_a","minfee_a","protocolparamupdate_set_minfee_a","protocolparamupdate_minfee_a","set_minfee_b","minfee_b","protocolparamupdate_set_minfee_b","protocolparamupdate_minfee_b","set_max_block_body_size","max_block_body_size","protocolparamupdate_set_max_block_body_size","protocolparamupdate_max_block_body_size","set_max_tx_size","max_tx_size","protocolparamupdate_set_max_tx_size","protocolparamupdate_max_tx_size","set_max_block_header_size","max_block_header_size","protocolparamupdate_set_max_block_header_size","protocolparamupdate_max_block_header_size","set_key_deposit","protocolparamupdate_set_key_deposit","protocolparamupdate_key_deposit","set_pool_deposit","protocolparamupdate_set_pool_deposit","protocolparamupdate_pool_deposit","set_max_epoch","max_epoch","protocolparamupdate_set_max_epoch","protocolparamupdate_max_epoch","set_n_opt","n_opt","protocolparamupdate_set_n_opt","protocolparamupdate_n_opt","set_pool_pledge_influence","pool_pledge_influence","protocolparamupdate_set_pool_pledge_influence","protocolparamupdate_pool_pledge_influence","set_expansion_rate","expansion_rate","protocolparamupdate_set_expansion_rate","protocolparamupdate_expansion_rate","set_treasury_growth_rate","treasury_growth_rate","protocolparamupdate_set_treasury_growth_rate","protocolparamupdate_treasury_growth_rate","set_d","d","protocolparamupdate_set_d","protocolparamupdate_d","set_extra_entropy","extra_entropy","protocolparamupdate_set_extra_entropy","protocolparamupdate_extra_entropy","set_protocol_version","ProtocolVersions","protocolparamupdate_set_protocol_version","protocolparamupdate_protocol_version","set_min_utxo_value","min_utxo_value","protocolparamupdate_set_min_utxo_value","protocolparamupdate_min_utxo_value","protocolparamupdate_new","__wbg_protocolversion_free","protocolversion_to_bytes","protocolversion_from_bytes","major","protocolversion_major","minor","protocolversion_minor","protocolversion_new","__wbg_protocolversions_free","protocolversions_to_bytes","protocolversions_from_bytes","protocolversions_new","protocolversions_len","protocolversions_get","protocolversions_add","__wbg_publickey_free","publickey_from_bech32","publickey_to_bech32","publickey_as_bytes","publickey_from_bytes","verify","publickey_verify","publickey_hash","PublicKeys","__wbg_publickeys_free","constructor","publickeys_new","size","publickeys_size","publickeys_get","publickeys_add","Relay","__wbg_relay_free","relay_to_bytes","relay_from_bytes","new_single_host_addr","single_host_addr","relay_new_single_host_addr","new_single_host_name","single_host_name","relay_new_single_host_name","new_multi_host_name","multi_host_name","relay_new_multi_host_name","relay_kind","as_single_host_addr","relay_as_single_host_addr","as_single_host_name","relay_as_single_host_name","as_multi_host_name","relay_as_multi_host_name","__wbg_relays_free","relays_to_bytes","relays_from_bytes","relays_new","relays_len","relays_get","relays_add","__wbg_rewardaddress_free","rewardaddress_new","rewardaddress_payment_cred","rewardaddress_to_address","rewardaddress_from_address","RewardAddresses","__wbg_rewardaddresses_free","rewardaddresses_to_bytes","rewardaddresses_from_bytes","rewardaddresses_new","rewardaddresses_len","rewardaddresses_get","rewardaddresses_add","__wbg_scriptall_free","scriptall_to_bytes","scriptall_from_bytes","native_scripts","scriptall_native_scripts","scriptall_new","__wbg_scriptany_free","scriptany_to_bytes","scriptany_from_bytes","scriptany_native_scripts","scriptany_new","__wbg_scripthash_free","scripthash_to_bytes","scripthash_to_bech32","scripthash_from_bech32","scripthash_from_bytes","__wbg_scripthashes_free","scripthashes_to_bytes","scripthashes_from_bytes","scripthashes_new","scripthashes_len","scripthashes_get","scripthashes_add","__wbg_scriptnofk_free","scriptnofk_to_bytes","scriptnofk_from_bytes","n","scriptnofk_n","scriptnofk_native_scripts","scriptnofk_new","__wbg_scriptpubkey_free","scriptpubkey_to_bytes","scriptpubkey_from_bytes","addr_keyhash","scriptpubkey_addr_keyhash","scriptpubkey_new","__wbg_singlehostaddr_free","singlehostaddr_to_bytes","singlehostaddr_from_bytes","port","singlehostaddr_port","ipv4","singlehostaddr_ipv4","ipv6","singlehostaddr_ipv6","singlehostaddr_new","__wbg_singlehostname_free","singlehostname_to_bytes","singlehostname_from_bytes","singlehostname_port","singlehostname_dns_name","singlehostname_new","__wbg_stakecredential_free","from_keyhash","stakecredential_from_keyhash","from_scripthash","stakecredential_from_scripthash","to_keyhash","stakecredential_to_keyhash","to_scripthash","stakecredential_to_scripthash","stakecredential_kind","stakecredential_to_bytes","stakecredential_from_bytes","__wbg_stakecredentials_free","stakecredentials_to_bytes","stakecredentials_from_bytes","stakecredentials_new","stakecredentials_len","stakecredentials_get","stakecredentials_add","__wbg_stakedelegation_free","stakedelegation_to_bytes","stakedelegation_from_bytes","stake_credential","stakedelegation_stake_credential","stakedelegation_pool_keyhash","stakedelegation_new","__wbg_stakederegistration_free","stakederegistration_to_bytes","stakederegistration_from_bytes","stakederegistration_stake_credential","stakederegistration_new","__wbg_stakeregistration_free","stakeregistration_to_bytes","stakeregistration_from_bytes","stakeregistration_stake_credential","stakeregistration_new","__wbg_timelockexpiry_free","timelockexpiry_to_bytes","timelockexpiry_from_bytes","timelockexpiry_slot","timelockexpiry_new","__wbg_timelockstart_free","timelockstart_to_bytes","timelockstart_from_bytes","timelockstart_slot","timelockstart_new","__wbg_transaction_free","transaction_to_bytes","transaction_from_bytes","body","transaction_body","witness_set","transaction_witness_set","TransactionWitnessSet","transaction_metadata","transaction_new","__wbg_transactionbodies_free","transactionbodies_to_bytes","transactionbodies_from_bytes","transactionbodies_new","transactionbodies_len","transactionbodies_get","transactionbodies_add","__wbg_transactionbody_free","transactionbody_to_bytes","transactionbody_from_bytes","inputs","transactionbody_inputs","TransactionInputs","outputs","transactionbody_outputs","TransactionOutputs","fee","transactionbody_fee","ttl","transactionbody_ttl","set_certs","certs","transactionbody_set_certs","transactionbody_certs","set_withdrawals","withdrawals","Withdrawals","transactionbody_set_withdrawals","transactionbody_withdrawals","set_update","update","Update","transactionbody_set_update","transactionbody_update","set_metadata_hash","transactionbody_set_metadata_hash","transactionbody_metadata_hash","set_validity_start_interval","validity_start_interval","transactionbody_set_validity_start_interval","transactionbody_validity_start_interval","set_mint","mint","transactionbody_set_mint","multiassets","transactionbody_multiassets","transactionbody_new","TransactionBuilder","__wbg_transactionbuilder_free","add_key_input","amount","TransactionInput","transactionbuilder_add_key_input","add_script_input","transactionbuilder_add_script_input","add_bootstrap_input","transactionbuilder_add_bootstrap_input","add_input","address","transactionbuilder_add_input","fee_for_input","transactionbuilder_fee_for_input","add_output","output","TransactionOutput","transactionbuilder_add_output","fee_for_output","transactionbuilder_fee_for_output","set_fee","transactionbuilder_set_fee","set_ttl","transactionbuilder_set_ttl","transactionbuilder_set_validity_start_interval","transactionbuilder_set_certs","transactionbuilder_set_withdrawals","set_metadata","transactionbuilder_set_metadata","transactionbuilder_new","get_explicit_input","transactionbuilder_get_explicit_input","transactionbuilder_get_implicit_input","get_explicit_output","transactionbuilder_get_explicit_output","transactionbuilder_get_deposit","get_fee_if_set","transactionbuilder_get_fee_if_set","add_change_if_needed","transactionbuilder_add_change_if_needed","build","transactionbuilder_build","transactionbuilder_min_fee","__wbg_transactionhash_free","transactionhash_to_bytes","transactionhash_to_bech32","transactionhash_from_bech32","transactionhash_from_bytes","__wbg_transactioninput_free","transactioninput_to_bytes","transactioninput_from_bytes","transaction_id","transactioninput_transaction_id","transactioninput_index","transactioninput_new","__wbg_transactioninputs_free","transactioninputs_to_bytes","transactioninputs_from_bytes","transactioninputs_new","transactioninputs_len","transactioninputs_get","transactioninputs_add","__wbg_transactionmetadata_free","transactionmetadata_to_bytes","transactionmetadata_from_bytes","general","transactionmetadata_general","transactionmetadata_native_scripts","set_native_scripts","transactionmetadata_set_native_scripts","transactionmetadata_new","__wbg_transactionmetadatum_free","transactionmetadatum_to_bytes","transactionmetadatum_from_bytes","new_map","map","transactionmetadatum_new_map","new_list","list","transactionmetadatum_new_list","new_int","int","transactionmetadatum_new_int","new_bytes","transactionmetadatum_new_bytes","new_text","text","transactionmetadatum_new_text","transactionmetadatum_kind","as_map","transactionmetadatum_as_map","as_list","transactionmetadatum_as_list","as_int","transactionmetadatum_as_int","transactionmetadatum_as_bytes","as_text","transactionmetadatum_as_text","__wbg_transactionmetadatumlabels_free","transactionmetadatumlabels_to_bytes","transactionmetadatumlabels_from_bytes","transactionmetadatumlabels_new","transactionmetadatumlabels_len","transactionmetadatumlabels_get","transactionmetadatumlabels_add","__wbg_transactionoutput_free","transactionoutput_to_bytes","transactionoutput_from_bytes","transactionoutput_address","transactionoutput_amount","transactionoutput_new","__wbg_transactionoutputs_free","transactionoutputs_to_bytes","transactionoutputs_from_bytes","transactionoutputs_new","transactionoutputs_len","transactionoutputs_get","transactionoutputs_add","__wbg_transactionwitnessset_free","transactionwitnessset_to_bytes","transactionwitnessset_from_bytes","set_vkeys","vkeys","Vkeywitnesses","transactionwitnessset_set_vkeys","transactionwitnessset_vkeys","set_scripts","scripts","transactionwitnessset_set_scripts","transactionwitnessset_scripts","set_bootstraps","bootstraps","transactionwitnessset_set_bootstraps","transactionwitnessset_bootstraps","transactionwitnessset_new","__wbg_transactionwitnesssets_free","transactionwitnesssets_to_bytes","transactionwitnesssets_from_bytes","transactionwitnesssets_new","transactionwitnesssets_len","transactionwitnesssets_get","transactionwitnesssets_add","__wbg_url_free","url_to_bytes","url_from_bytes","url_new","url_url","__wbg_unitinterval_free","unitinterval_to_bytes","unitinterval_from_bytes","numerator","unitinterval_numerator","denominator","unitinterval_denominator","unitinterval_new","__wbg_update_free","update_to_bytes","update_from_bytes","proposed_protocol_parameter_updates","update_proposed_protocol_parameter_updates","update_epoch","update_new","__wbg_vrfcert_free","vrfcert_to_bytes","vrfcert_from_bytes","vrfcert_output","proof","vrfcert_proof","vrfcert_new","__wbg_vrfkeyhash_free","vrfkeyhash_to_bytes","vrfkeyhash_to_bech32","vrfkeyhash_from_bech32","vrfkeyhash_from_bytes","__wbg_vrfvkey_free","vrfvkey_to_bytes","vrfvkey_to_bech32","vrfvkey_from_bech32","vrfvkey_from_bytes","__wbg_value_free","coin","value_new","value_coin","set_coin","value_set_coin","multiasset","value_multiasset","set_multiasset","value_set_multiasset","rhs","value_checked_add","value_checked_sub","value_clamped_sub","value_compare","__wbg_vkey_free","vkey_to_bytes","vkey_from_bytes","pk","vkey_new","public_key","vkey_public_key","__wbg_vkeywitness_free","vkeywitness_to_bytes","vkeywitness_from_bytes","vkeywitness_new","vkeywitness_vkey","vkeywitness_signature","__wbg_vkeywitnesses_free","vkeywitnesses_new","vkeywitnesses_len","vkeywitnesses_get","vkeywitnesses_add","__wbg_withdrawals_free","withdrawals_to_bytes","withdrawals_from_bytes","withdrawals_new","withdrawals_len","withdrawals_insert","withdrawals_get","withdrawals_keys","__wbindgen_object_drop_ref","arg0","__wbindgen_string_new","arg1","__wbg_new_3a746f2619705add","Function","__wbg_call_f54d3a6dadb199ca","__wbindgen_jsval_eq","__wbg_self_ac379e780a0d8b94","self","__wbg_crypto_1e4302b85d4f64a2","crypto","__wbindgen_is_undefined","__wbg_getRandomValues_1b4ba144162a5c9e","getRandomValues","__wbg_require_6461b1e9a0d7c34a","__wbg_getRandomValues_1ef11e888e5228e9","arg2","__wbg_randomFillSync_1b52c8482374c55b","randomFillSync","__wbindgen_string_get","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","path","join","__dirname","readFileSync","wasmModule","WebAssembly","Module","wasmInstance","Instance","__wasm"],"sources":["C:/Users/acer/node_modules/@emurgo/cardano-serialization-lib-nodejs/cardano_serialization_lib.js"],"sourcesContent":["let imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextDecoder } = require(String.raw`util`);\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetNodeBufferMemory0 = null;\nfunction getNodeBufferMemory0() {\n    if (cachegetNodeBufferMemory0 === null || cachegetNodeBufferMemory0.buffer !== wasm.memory.buffer) {\n        cachegetNodeBufferMemory0 = Buffer.from(wasm.memory.buffer);\n    }\n    return cachegetNodeBufferMemory0;\n}\n\nfunction passStringToWasm0(arg, malloc) {\n\n    const len = Buffer.byteLength(arg);\n    const ptr = malloc(len);\n    getNodeBufferMemory0().write(arg, ptr, len);\n    WASM_VECTOR_LEN = len;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {LegacyDaedalusPrivateKey} key\n* @returns {BootstrapWitness}\n*/\nmodule.exports.make_daedalus_bootstrap_witness = function(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, LegacyDaedalusPrivateKey);\n    var ret = wasm.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n};\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {Bip32PrivateKey} key\n* @returns {BootstrapWitness}\n*/\nmodule.exports.make_icarus_bootstrap_witness = function(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, Bip32PrivateKey);\n    var ret = wasm.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n};\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {PrivateKey} sk\n* @returns {Vkeywitness}\n*/\nmodule.exports.make_vkey_witness = function(tx_body_hash, sk) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(sk, PrivateKey);\n    var ret = wasm.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n    return Vkeywitness.__wrap(ret);\n};\n\n/**\n* @param {TransactionMetadata} metadata\n* @returns {MetadataHash}\n*/\nmodule.exports.hash_metadata = function(metadata) {\n    _assertClass(metadata, TransactionMetadata);\n    var ret = wasm.hash_metadata(metadata.ptr);\n    return MetadataHash.__wrap(ret);\n};\n\n/**\n* @param {TransactionBody} tx_body\n* @returns {TransactionHash}\n*/\nmodule.exports.hash_transaction = function(tx_body) {\n    _assertClass(tx_body, TransactionBody);\n    var ret = wasm.hash_transaction(tx_body.ptr);\n    return TransactionHash.__wrap(ret);\n};\n\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {Value}\n*/\nmodule.exports.get_implicit_input = function(txbody, pool_deposit, key_deposit) {\n    _assertClass(txbody, TransactionBody);\n    _assertClass(pool_deposit, BigNum);\n    _assertClass(key_deposit, BigNum);\n    var ret = wasm.get_implicit_input(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return Value.__wrap(ret);\n};\n\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {BigNum}\n*/\nmodule.exports.get_deposit = function(txbody, pool_deposit, key_deposit) {\n    _assertClass(txbody, TransactionBody);\n    _assertClass(pool_deposit, BigNum);\n    _assertClass(key_deposit, BigNum);\n    var ret = wasm.get_deposit(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return BigNum.__wrap(ret);\n};\n\n/**\n* @param {Value} assets\n* @param {BigNum} minimum_utxo_val\n* @returns {BigNum}\n*/\nmodule.exports.min_ada_required = function(assets, minimum_utxo_val) {\n    _assertClass(assets, Value);\n    _assertClass(minimum_utxo_val, BigNum);\n    var ret = wasm.min_ada_required(assets.ptr, minimum_utxo_val.ptr);\n    return BigNum.__wrap(ret);\n};\n\n/**\n* @param {Uint8Array} bytes\n* @returns {TransactionMetadatum}\n*/\nmodule.exports.encode_arbitrary_bytes_as_metadatum = function(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n};\n\n/**\n* @param {TransactionMetadatum} metadata\n* @returns {Uint8Array}\n*/\nmodule.exports.decode_arbitrary_bytes_from_metadatum = function(metadata) {\n    _assertClass(metadata, TransactionMetadatum);\n    wasm.decode_arbitrary_bytes_from_metadatum(8, metadata.ptr);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v0;\n};\n\n/**\n* @param {string} json\n* @param {number} schema\n* @returns {TransactionMetadatum}\n*/\nmodule.exports.encode_json_str_to_metadatum = function(json, schema) {\n    var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_json_str_to_metadatum(ptr0, len0, schema);\n    return TransactionMetadatum.__wrap(ret);\n};\n\n/**\n* @param {TransactionMetadatum} metadatum\n* @param {number} schema\n* @returns {string}\n*/\nmodule.exports.decode_metadatum_to_json_str = function(metadatum, schema) {\n    try {\n        _assertClass(metadatum, TransactionMetadatum);\n        wasm.decode_metadatum_to_json_str(8, metadatum.ptr, schema);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* @param {Transaction} tx\n* @param {LinearFee} linear_fee\n* @returns {BigNum}\n*/\nmodule.exports.min_fee = function(tx, linear_fee) {\n    _assertClass(tx, Transaction);\n    _assertClass(linear_fee, LinearFee);\n    var ret = wasm.min_fee(tx.ptr, linear_fee.ptr);\n    return BigNum.__wrap(ret);\n};\n\n/**\n* @param {string} password\n* @param {string} salt\n* @param {string} nonce\n* @param {string} data\n* @returns {string}\n*/\nmodule.exports.encrypt_with_password = function(password, salt, nonce, data) {\n    try {\n        var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        var ptr3 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        wasm.encrypt_with_password(8, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* @param {string} password\n* @param {string} data\n* @returns {string}\n*/\nmodule.exports.decrypt_with_password = function(password, data) {\n    try {\n        var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.decrypt_with_password(8, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n*/\nmodule.exports.CertificateKind = Object.freeze({ StakeRegistration:0,StakeDeregistration:1,StakeDelegation:2,PoolRegistration:3,PoolRetirement:4,GenesisKeyDelegation:5,MoveInstantaneousRewardsCert:6, });\n/**\n*/\nmodule.exports.MIRPot = Object.freeze({ Reserves:0,Treasury:1, });\n/**\n*/\nmodule.exports.RelayKind = Object.freeze({ SingleHostAddr:0,SingleHostName:1,MultiHostName:2, });\n/**\n*/\nmodule.exports.NativeScriptKind = Object.freeze({ ScriptPubkey:0,ScriptAll:1,ScriptAny:2,ScriptNOfK:3,TimelockStart:4,TimelockExpiry:5, });\n/**\n*/\nmodule.exports.TransactionMetadatumKind = Object.freeze({ MetadataMap:0,MetadataList:1,Int:2,Bytes:3,Text:4, });\n/**\n*/\nmodule.exports.MetadataJsonSchema = Object.freeze({ NoConversions:0,BasicConversions:1,DetailedSchema:2, });\n/**\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Address.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Address}\n    */\n    static from_bytes(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.address_from_bytes(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.address_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string | undefined} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.address_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {Address}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.address_from_bech32(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        var ret = wasm.address_network_id(this.ptr);\n        return ret;\n    }\n}\nmodule.exports.Address = Address;\n/**\n*/\nclass AssetName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_assetname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.assetname_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AssetName}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetname_from_bytes(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} name\n    * @returns {AssetName}\n    */\n    static new(name) {\n        var ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetname_new(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    name() {\n        wasm.assetname_name(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n}\nmodule.exports.AssetName = AssetName;\n/**\n*/\nclass AssetNames {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetNames.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_assetnames_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.assetnames_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AssetNames}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetnames_from_bytes(ptr0, len0);\n        return AssetNames.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    static new() {\n        var ret = wasm.assetnames_new();\n        return AssetNames.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {AssetName}\n    */\n    get(index) {\n        var ret = wasm.assetnames_get(this.ptr, index);\n        return AssetName.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} elem\n    */\n    add(elem) {\n        _assertClass(elem, AssetName);\n        wasm.assetnames_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.AssetNames = AssetNames;\n/**\n*/\nclass Assets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Assets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_assets_free(ptr);\n    }\n    /**\n    * @returns {Assets}\n    */\n    static new() {\n        var ret = wasm.assets_new();\n        return Assets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.assets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {AssetName} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, BigNum);\n        var ret = wasm.assets_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @returns {BigNum | undefined}\n    */\n    get(key) {\n        _assertClass(key, AssetName);\n        var ret = wasm.assets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    keys() {\n        var ret = wasm.assets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\nmodule.exports.Assets = Assets;\n/**\n*/\nclass BaseAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BaseAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_baseaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @param {StakeCredential} stake\n    * @returns {BaseAddress}\n    */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, StakeCredential);\n        var ret = wasm.baseaddress_new(network, payment.ptr, stake.ptr);\n        return BaseAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_cred() {\n        var ret = wasm.baseaddress_stake_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = wasm.baseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {BaseAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.baseaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\nmodule.exports.BaseAddress = BaseAddress;\n/**\n*/\nclass BigNum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.bignum_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigNum}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {string} string\n    * @returns {BigNum}\n    */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            wasm.bignum_to_str(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * returns 0 if it would otherwise underflow\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    clamped_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_clamped_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} rhs_value\n    * @returns {number}\n    */\n    compare(rhs_value) {\n        _assertClass(rhs_value, BigNum);\n        var ret = wasm.bignum_compare(this.ptr, rhs_value.ptr);\n        return ret;\n    }\n}\nmodule.exports.BigNum = BigNum;\n/**\n*/\nclass Bip32PrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_bip32privatekey_free(ptr);\n    }\n    /**\n    * derive this private key with the given index.\n    *\n    * # Security considerations\n    *\n    * * hard derivation index cannot be soft derived with the public key\n    *\n    * # Hard derivation vs Soft derivation\n    *\n    * If you pass an index below 0x80000000 then it is a soft derivation.\n    * The advantage of soft derivation is that it is possible to derive the\n    * public key too. I.e. derivation the private key with a soft derivation\n    * index and then retrieving the associated public key is equivalent to\n    * deriving the public key associated to the parent private key.\n    *\n    * Hard derivation index does not allow public key derivation.\n    *\n    * This is why deriving the private key should not fail while deriving\n    * the public key may fail (if the derivation index is invalid).\n    * @param {number} index\n    * @returns {Bip32PrivateKey}\n    */\n    derive(index) {\n        var ret = wasm.bip32privatekey_derive(this.ptr, index);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * 128-byte xprv a key format in Cardano that some software still uses or requires\n    * the traditional 96-byte xprv is simply encoded as\n    * prv | chaincode\n    * however, because some software may not know how to compute a public key from a private key,\n    * the 128-byte inlines the public key in the following format\n    * prv | pub | chaincode\n    * so be careful if you see the term \"xprv\" as it could refer to either one\n    * our library does not require the pub (instead we compute the pub key when needed)\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PrivateKey}\n    */\n    static from_128_xprv(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_128_xprv(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * see from_128_xprv\n    * @returns {Uint8Array}\n    */\n    to_128_xprv() {\n        wasm.bip32privatekey_to_128_xprv(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @returns {Bip32PrivateKey}\n    */\n    static generate_ed25519_bip32() {\n        var ret = wasm.bip32privatekey_generate_ed25519_bip32();\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    to_raw_key() {\n        var ret = wasm.bip32privatekey_to_raw_key(this.ptr);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Bip32PublicKey}\n    */\n    to_public() {\n        var ret = wasm.bip32privatekey_to_public(this.ptr);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bytes(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        wasm.bip32privatekey_as_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bech32(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            wasm.bip32privatekey_to_bech32(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {Uint8Array} entropy\n    * @param {Uint8Array} password\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bip39_entropy(entropy, password) {\n        var ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(password, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        wasm.bip32privatekey_chaincode(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n}\nmodule.exports.Bip32PrivateKey = Bip32PrivateKey;\n/**\n*/\nclass Bip32PublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_bip32publickey_free(ptr);\n    }\n    /**\n    * derive this public key with the given index.\n    *\n    * # Errors\n    *\n    * If the index is not a soft derivation index (< 0x80000000) then\n    * calling this method will fail.\n    *\n    * # Security considerations\n    *\n    * * hard derivation index cannot be soft derived with the public key\n    *\n    * # Hard derivation vs Soft derivation\n    *\n    * If you pass an index below 0x80000000 then it is a soft derivation.\n    * The advantage of soft derivation is that it is possible to derive the\n    * public key too. I.e. derivation the private key with a soft derivation\n    * index and then retrieving the associated public key is equivalent to\n    * deriving the public key associated to the parent private key.\n    *\n    * Hard derivation index does not allow public key derivation.\n    *\n    * This is why deriving the private key should not fail while deriving\n    * the public key may fail (if the derivation index is invalid).\n    * @param {number} index\n    * @returns {Bip32PublicKey}\n    */\n    derive(index) {\n        var ret = wasm.bip32publickey_derive(this.ptr, index);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    to_raw_key() {\n        var ret = wasm.bip32publickey_to_raw_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PublicKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32publickey_from_bytes(ptr0, len0);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        wasm.bip32publickey_as_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Bip32PublicKey}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32publickey_from_bech32(ptr0, len0);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            wasm.bip32publickey_to_bech32(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        wasm.bip32publickey_chaincode(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n}\nmodule.exports.Bip32PublicKey = Bip32PublicKey;\n/**\n*/\nclass Block {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Block.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_block_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.block_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Block}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.block_from_bytes(ptr0, len0);\n        return Block.__wrap(ret);\n    }\n    /**\n    * @returns {Header}\n    */\n    header() {\n        var ret = wasm.block_header(this.ptr);\n        return Header.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBodies}\n    */\n    transaction_bodies() {\n        var ret = wasm.block_transaction_bodies(this.ptr);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSets}\n    */\n    transaction_witness_sets() {\n        var ret = wasm.block_transaction_witness_sets(this.ptr);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {MapTransactionIndexToTransactionMetadata}\n    */\n    transaction_metadata_set() {\n        var ret = wasm.block_transaction_metadata_set(this.ptr);\n        return MapTransactionIndexToTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @param {Header} header\n    * @param {TransactionBodies} transaction_bodies\n    * @param {TransactionWitnessSets} transaction_witness_sets\n    * @param {MapTransactionIndexToTransactionMetadata} transaction_metadata_set\n    * @returns {Block}\n    */\n    static new(header, transaction_bodies, transaction_witness_sets, transaction_metadata_set) {\n        _assertClass(header, Header);\n        _assertClass(transaction_bodies, TransactionBodies);\n        _assertClass(transaction_witness_sets, TransactionWitnessSets);\n        _assertClass(transaction_metadata_set, MapTransactionIndexToTransactionMetadata);\n        var ret = wasm.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, transaction_metadata_set.ptr);\n        return Block.__wrap(ret);\n    }\n}\nmodule.exports.Block = Block;\n/**\n*/\nclass BlockHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BlockHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_blockhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.blockhash_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.blockhash_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {BlockHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.blockhash_from_bech32(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BlockHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.blockhash_from_bytes(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n}\nmodule.exports.BlockHash = BlockHash;\n/**\n*/\nclass BootstrapWitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_bootstrapwitness_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.bootstrapwitness_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BootstrapWitness}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bootstrapwitness_from_bytes(ptr0, len0);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    vkey() {\n        var ret = wasm.bootstrapwitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    signature() {\n        var ret = wasm.bootstrapwitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chain_code() {\n        wasm.bootstrapwitness_chain_code(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    attributes() {\n        wasm.bootstrapwitness_attributes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Vkey} vkey\n    * @param {Ed25519Signature} signature\n    * @param {Uint8Array} chain_code\n    * @param {Uint8Array} attributes\n    * @returns {BootstrapWitness}\n    */\n    static new(vkey, signature, chain_code, attributes) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        var ptr0 = passArray8ToWasm0(chain_code, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(attributes, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n        return BootstrapWitness.__wrap(ret);\n    }\n}\nmodule.exports.BootstrapWitness = BootstrapWitness;\n/**\n*/\nclass BootstrapWitnesses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitnesses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_bootstrapwitnesses_free(ptr);\n    }\n    /**\n    * @returns {BootstrapWitnesses}\n    */\n    static new() {\n        var ret = wasm.bootstrapwitnesses_new();\n        return BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BootstrapWitness}\n    */\n    get(index) {\n        var ret = wasm.bootstrapwitnesses_get(this.ptr, index);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n    * @param {BootstrapWitness} elem\n    */\n    add(elem) {\n        _assertClass(elem, BootstrapWitness);\n        wasm.bootstrapwitnesses_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.BootstrapWitnesses = BootstrapWitnesses;\n/**\n*/\nclass ByronAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ByronAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_byronaddress_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    to_base58() {\n        try {\n            wasm.byronaddress_to_base58(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.byronaddress_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ByronAddress}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_from_bytes(ptr0, len0);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n    * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n    * note: for bech32 addresses, you need to use network_id instead\n    * @returns {number}\n    */\n    byron_protocol_magic() {\n        var ret = wasm.byronaddress_byron_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    attributes() {\n        wasm.byronaddress_attributes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        var ret = wasm.byronaddress_network_id(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {string} s\n    * @returns {ByronAddress}\n    */\n    static from_base58(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_from_base58(ptr0, len0);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n    * @param {Bip32PublicKey} key\n    * @param {number} protocol_magic\n    * @returns {ByronAddress}\n    */\n    static icarus_from_key(key, protocol_magic) {\n        _assertClass(key, Bip32PublicKey);\n        var ret = wasm.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n    * @param {string} s\n    * @returns {boolean}\n    */\n    static is_valid(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_is_valid(ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = wasm.byronaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {ByronAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.byronaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n}\nmodule.exports.ByronAddress = ByronAddress;\n/**\n*/\nclass Certificate {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Certificate.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_certificate_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.certificate_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Certificate}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificate_from_bytes(ptr0, len0);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeRegistration} stake_registration\n    * @returns {Certificate}\n    */\n    static new_stake_registration(stake_registration) {\n        _assertClass(stake_registration, StakeRegistration);\n        var ret = wasm.certificate_new_stake_registration(stake_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeDeregistration} stake_deregistration\n    * @returns {Certificate}\n    */\n    static new_stake_deregistration(stake_deregistration) {\n        _assertClass(stake_deregistration, StakeDeregistration);\n        var ret = wasm.certificate_new_stake_deregistration(stake_deregistration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeDelegation} stake_delegation\n    * @returns {Certificate}\n    */\n    static new_stake_delegation(stake_delegation) {\n        _assertClass(stake_delegation, StakeDelegation);\n        var ret = wasm.certificate_new_stake_delegation(stake_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {PoolRegistration} pool_registration\n    * @returns {Certificate}\n    */\n    static new_pool_registration(pool_registration) {\n        _assertClass(pool_registration, PoolRegistration);\n        var ret = wasm.certificate_new_pool_registration(pool_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {PoolRetirement} pool_retirement\n    * @returns {Certificate}\n    */\n    static new_pool_retirement(pool_retirement) {\n        _assertClass(pool_retirement, PoolRetirement);\n        var ret = wasm.certificate_new_pool_retirement(pool_retirement.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {GenesisKeyDelegation} genesis_key_delegation\n    * @returns {Certificate}\n    */\n    static new_genesis_key_delegation(genesis_key_delegation) {\n        _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n        var ret = wasm.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n    * @returns {Certificate}\n    */\n    static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n        _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n        var ret = wasm.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.certificate_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {StakeRegistration | undefined}\n    */\n    as_stake_registration() {\n        var ret = wasm.certificate_as_stake_registration(this.ptr);\n        return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeDeregistration | undefined}\n    */\n    as_stake_deregistration() {\n        var ret = wasm.certificate_as_stake_deregistration(this.ptr);\n        return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeDelegation | undefined}\n    */\n    as_stake_delegation() {\n        var ret = wasm.certificate_as_stake_delegation(this.ptr);\n        return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {PoolRegistration | undefined}\n    */\n    as_pool_registration() {\n        var ret = wasm.certificate_as_pool_registration(this.ptr);\n        return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {PoolRetirement | undefined}\n    */\n    as_pool_retirement() {\n        var ret = wasm.certificate_as_pool_retirement(this.ptr);\n        return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisKeyDelegation | undefined}\n    */\n    as_genesis_key_delegation() {\n        var ret = wasm.certificate_as_genesis_key_delegation(this.ptr);\n        return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {MoveInstantaneousRewardsCert | undefined}\n    */\n    as_move_instantaneous_rewards_cert() {\n        var ret = wasm.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n        return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\nmodule.exports.Certificate = Certificate;\n/**\n*/\nclass Certificates {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Certificates.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_certificates_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.certificates_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Certificates}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificates_from_bytes(ptr0, len0);\n        return Certificates.__wrap(ret);\n    }\n    /**\n    * @returns {Certificates}\n    */\n    static new() {\n        var ret = wasm.certificates_new();\n        return Certificates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.certificates_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Certificate}\n    */\n    get(index) {\n        var ret = wasm.certificates_get(this.ptr, index);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {Certificate} elem\n    */\n    add(elem) {\n        _assertClass(elem, Certificate);\n        wasm.certificates_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.Certificates = Certificates;\n/**\n*/\nclass DNSRecordAorAAAA {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordAorAAAA.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_dnsrecordaoraaaa_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.dnsrecordaoraaaa_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DNSRecordAorAAAA}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordaoraaaa_from_bytes(ptr0, len0);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @param {string} dns_name\n    * @returns {DNSRecordAorAAAA}\n    */\n    static new(dns_name) {\n        var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordaoraaaa_new(ptr0, len0);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    record() {\n        try {\n            wasm.dnsrecordaoraaaa_record(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nmodule.exports.DNSRecordAorAAAA = DNSRecordAorAAAA;\n/**\n*/\nclass DNSRecordSRV {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordSRV.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_dnsrecordsrv_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.dnsrecordsrv_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DNSRecordSRV}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordsrv_from_bytes(ptr0, len0);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @param {string} dns_name\n    * @returns {DNSRecordSRV}\n    */\n    static new(dns_name) {\n        var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordsrv_new(ptr0, len0);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    record() {\n        try {\n            wasm.dnsrecordsrv_record(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nmodule.exports.DNSRecordSRV = DNSRecordSRV;\n/**\n*/\nclass Ed25519KeyHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_ed25519keyhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.ed25519keyhash_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {Ed25519KeyHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhash_from_bech32(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519KeyHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhash_from_bytes(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\nmodule.exports.Ed25519KeyHash = Ed25519KeyHash;\n/**\n*/\nclass Ed25519KeyHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_ed25519keyhashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.ed25519keyhashes_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519KeyHashes}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhashes_from_bytes(ptr0, len0);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHashes}\n    */\n    static new() {\n        var ret = wasm.ed25519keyhashes_new();\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.ed25519keyhashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Ed25519KeyHash}\n    */\n    get(index) {\n        var ret = wasm.ed25519keyhashes_get(this.ptr, index);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, Ed25519KeyHash);\n        wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.Ed25519KeyHashes = Ed25519KeyHashes;\n/**\n*/\nclass Ed25519Signature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_ed25519signature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.ed25519signature_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            wasm.ed25519signature_to_bech32(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            wasm.ed25519signature_to_hex(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Ed25519Signature}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_bech32(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {string} input\n    * @returns {Ed25519Signature}\n    */\n    static from_hex(input) {\n        var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_hex(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519Signature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_bytes(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\nmodule.exports.Ed25519Signature = Ed25519Signature;\n/**\n*/\nclass EnterpriseAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EnterpriseAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_enterpriseaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @returns {EnterpriseAddress}\n    */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        var ret = wasm.enterpriseaddress_new(network, payment.ptr);\n        return EnterpriseAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = wasm.enterpriseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = wasm.enterpriseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {EnterpriseAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.enterpriseaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n}\nmodule.exports.EnterpriseAddress = EnterpriseAddress;\n/**\n*/\nclass GeneralTransactionMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GeneralTransactionMetadata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_generaltransactionmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.generaltransactionmetadata_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GeneralTransactionMetadata}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.generaltransactionmetadata_from_bytes(ptr0, len0);\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {GeneralTransactionMetadata}\n    */\n    static new() {\n        var ret = wasm.generaltransactionmetadata_new();\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.generaltransactionmetadata_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {BigNum} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, BigNum);\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} key\n    * @returns {TransactionMetadatum | undefined}\n    */\n    get(key) {\n        _assertClass(key, BigNum);\n        var ret = wasm.generaltransactionmetadata_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionMetadatumLabels}\n    */\n    keys() {\n        var ret = wasm.generaltransactionmetadata_keys(this.ptr);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n}\nmodule.exports.GeneralTransactionMetadata = GeneralTransactionMetadata;\n/**\n*/\nclass GenesisDelegateHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisDelegateHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_genesisdelegatehash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.genesisdelegatehash_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.genesisdelegatehash_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {GenesisDelegateHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesisdelegatehash_from_bech32(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisDelegateHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesisdelegatehash_from_bytes(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n}\nmodule.exports.GenesisDelegateHash = GenesisDelegateHash;\n/**\n*/\nclass GenesisHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_genesishash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.genesishash_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.genesishash_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {GenesisHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishash_from_bech32(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishash_from_bytes(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n}\nmodule.exports.GenesisHash = GenesisHash;\n/**\n*/\nclass GenesisHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_genesishashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.genesishashes_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisHashes}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishashes_from_bytes(ptr0, len0);\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHashes}\n    */\n    static new() {\n        var ret = wasm.genesishashes_new();\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.genesishashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {GenesisHash}\n    */\n    get(index) {\n        var ret = wasm.genesishashes_get(this.ptr, index);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, GenesisHash);\n        wasm.genesishashes_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.GenesisHashes = GenesisHashes;\n/**\n*/\nclass GenesisKeyDelegation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisKeyDelegation.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_genesiskeydelegation_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.genesiskeydelegation_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisKeyDelegation}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesiskeydelegation_from_bytes(ptr0, len0);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHash}\n    */\n    genesishash() {\n        var ret = wasm.genesiskeydelegation_genesishash(this.ptr);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisDelegateHash}\n    */\n    genesis_delegate_hash() {\n        var ret = wasm.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n    * @returns {VRFKeyHash}\n    */\n    vrf_keyhash() {\n        var ret = wasm.genesiskeydelegation_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} genesishash\n    * @param {GenesisDelegateHash} genesis_delegate_hash\n    * @param {VRFKeyHash} vrf_keyhash\n    * @returns {GenesisKeyDelegation}\n    */\n    static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n        _assertClass(genesishash, GenesisHash);\n        _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        var ret = wasm.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n}\nmodule.exports.GenesisKeyDelegation = GenesisKeyDelegation;\n/**\n*/\nclass Header {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Header.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_header_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.header_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Header}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.header_from_bytes(ptr0, len0);\n        return Header.__wrap(ret);\n    }\n    /**\n    * @returns {HeaderBody}\n    */\n    header_body() {\n        var ret = wasm.header_header_body(this.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n    * @returns {KESSignature}\n    */\n    body_signature() {\n        var ret = wasm.header_body_signature(this.ptr);\n        return KESSignature.__wrap(ret);\n    }\n    /**\n    * @param {HeaderBody} header_body\n    * @param {KESSignature} body_signature\n    * @returns {Header}\n    */\n    static new(header_body, body_signature) {\n        _assertClass(header_body, HeaderBody);\n        _assertClass(body_signature, KESSignature);\n        var ret = wasm.header_new(header_body.ptr, body_signature.ptr);\n        return Header.__wrap(ret);\n    }\n}\nmodule.exports.Header = Header;\n/**\n*/\nclass HeaderBody {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderBody.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_headerbody_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.headerbody_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {HeaderBody}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headerbody_from_bytes(ptr0, len0);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    block_number() {\n        var ret = wasm.headerbody_block_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = wasm.headerbody_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {BlockHash | undefined}\n    */\n    prev_hash() {\n        var ret = wasm.headerbody_prev_hash(this.ptr);\n        return ret === 0 ? undefined : BlockHash.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    issuer_vkey() {\n        var ret = wasm.headerbody_issuer_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {VRFVKey}\n    */\n    vrf_vkey() {\n        var ret = wasm.headerbody_vrf_vkey(this.ptr);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n    * @returns {VRFCert}\n    */\n    nonce_vrf() {\n        var ret = wasm.headerbody_nonce_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {VRFCert}\n    */\n    leader_vrf() {\n        var ret = wasm.headerbody_leader_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    block_body_size() {\n        var ret = wasm.headerbody_block_body_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {BlockHash}\n    */\n    block_body_hash() {\n        var ret = wasm.headerbody_block_body_hash(this.ptr);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n    * @returns {OperationalCert}\n    */\n    operational_cert() {\n        var ret = wasm.headerbody_operational_cert(this.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n    * @returns {ProtocolVersion}\n    */\n    protocol_version() {\n        var ret = wasm.headerbody_protocol_version(this.ptr);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @param {number} block_number\n    * @param {number} slot\n    * @param {BlockHash | undefined} prev_hash\n    * @param {Vkey} issuer_vkey\n    * @param {VRFVKey} vrf_vkey\n    * @param {VRFCert} nonce_vrf\n    * @param {VRFCert} leader_vrf\n    * @param {number} block_body_size\n    * @param {BlockHash} block_body_hash\n    * @param {OperationalCert} operational_cert\n    * @param {ProtocolVersion} protocol_version\n    * @returns {HeaderBody}\n    */\n    static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\n        let ptr0 = 0;\n        if (!isLikeNone(prev_hash)) {\n            _assertClass(prev_hash, BlockHash);\n            ptr0 = prev_hash.ptr;\n            prev_hash.ptr = 0;\n        }\n        _assertClass(issuer_vkey, Vkey);\n        _assertClass(vrf_vkey, VRFVKey);\n        _assertClass(nonce_vrf, VRFCert);\n        _assertClass(leader_vrf, VRFCert);\n        _assertClass(block_body_hash, BlockHash);\n        _assertClass(operational_cert, OperationalCert);\n        _assertClass(protocol_version, ProtocolVersion);\n        var ret = wasm.headerbody_new(block_number, slot, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n}\nmodule.exports.HeaderBody = HeaderBody;\n/**\n*/\nclass Int {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ret = wasm.int_new(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ret = wasm.int_new_negative(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} x\n    * @returns {Int}\n    */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    as_i32() {\n        wasm.int_as_i32(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return r0 === 0 ? undefined : r1;\n    }\n}\nmodule.exports.Int = Int;\n/**\n*/\nclass Ipv4 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv4.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_ipv4_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.ipv4_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ipv4}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv4_from_bytes(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Ipv4}\n    */\n    static new(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv4_new(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    ip() {\n        wasm.ipv4_ip(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n}\nmodule.exports.Ipv4 = Ipv4;\n/**\n*/\nclass Ipv6 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv6.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_ipv6_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.ipv6_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ipv6}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv6_from_bytes(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Ipv6}\n    */\n    static new(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv6_new(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    ip() {\n        wasm.ipv6_ip(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n}\nmodule.exports.Ipv6 = Ipv6;\n/**\n*/\nclass KESSignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KESSignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_kessignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.kessignature_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {KESSignature}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kessignature_from_bytes(ptr0, len0);\n        return KESSignature.__wrap(ret);\n    }\n}\nmodule.exports.KESSignature = KESSignature;\n/**\n*/\nclass KESVKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KESVKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_kesvkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.kesvkey_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.kesvkey_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {KESVKey}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kesvkey_from_bech32(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {KESVKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kesvkey_from_bytes(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n}\nmodule.exports.KESVKey = KESVKey;\n/**\n*/\nclass LegacyDaedalusPrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_legacydaedalusprivatekey_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {LegacyDaedalusPrivateKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.legacydaedalusprivatekey_from_bytes(ptr0, len0);\n        return LegacyDaedalusPrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        wasm.legacydaedalusprivatekey_as_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        wasm.legacydaedalusprivatekey_chaincode(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n}\nmodule.exports.LegacyDaedalusPrivateKey = LegacyDaedalusPrivateKey;\n/**\n*/\nclass LinearFee {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LinearFee.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_linearfee_free(ptr);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    constant() {\n        var ret = wasm.linearfee_constant(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    coefficient() {\n        var ret = wasm.linearfee_coefficient(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coefficient\n    * @param {BigNum} constant\n    * @returns {LinearFee}\n    */\n    static new(coefficient, constant) {\n        _assertClass(coefficient, BigNum);\n        _assertClass(constant, BigNum);\n        var ret = wasm.linearfee_new(coefficient.ptr, constant.ptr);\n        return LinearFee.__wrap(ret);\n    }\n}\nmodule.exports.LinearFee = LinearFee;\n/**\n*/\nclass MapTransactionIndexToTransactionMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MapTransactionIndexToTransactionMetadata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_maptransactionindextotransactionmetadata_free(ptr);\n    }\n    /**\n    * @returns {MapTransactionIndexToTransactionMetadata}\n    */\n    static new() {\n        var ret = wasm.maptransactionindextotransactionmetadata_new();\n        return MapTransactionIndexToTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.maptransactionindextotransactionmetadata_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} key\n    * @param {TransactionMetadata} value\n    * @returns {TransactionMetadata | undefined}\n    */\n    insert(key, value) {\n        _assertClass(value, TransactionMetadata);\n        var ret = wasm.maptransactionindextotransactionmetadata_insert(this.ptr, key, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @param {number} key\n    * @returns {TransactionMetadata | undefined}\n    */\n    get(key) {\n        var ret = wasm.maptransactionindextotransactionmetadata_get(this.ptr, key);\n        return ret === 0 ? undefined : TransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    keys() {\n        wasm.maptransactionindextotransactionmetadata_keys(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU32FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4);\n        return v0;\n    }\n}\nmodule.exports.MapTransactionIndexToTransactionMetadata = MapTransactionIndexToTransactionMetadata;\n/**\n*/\nclass MetadataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_metadatahash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.metadatahash_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.metadatahash_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {MetadataHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatahash_from_bech32(ptr0, len0);\n        return MetadataHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatahash_from_bytes(ptr0, len0);\n        return MetadataHash.__wrap(ret);\n    }\n}\nmodule.exports.MetadataHash = MetadataHash;\n/**\n*/\nclass MetadataList {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataList.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_metadatalist_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.metadatalist_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataList}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatalist_from_bytes(ptr0, len0);\n        return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    static new() {\n        var ret = wasm.metadatalist_new();\n        return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.metadatalist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionMetadatum}\n    */\n    get(index) {\n        var ret = wasm.metadatalist_get(this.ptr, index);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionMetadatum);\n        wasm.metadatalist_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.MetadataList = MetadataList;\n/**\n*/\nclass MetadataMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_metadatamap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.metadatamap_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataMap}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatamap_from_bytes(ptr0, len0);\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataMap}\n    */\n    static new() {\n        var ret = wasm.metadatamap_new();\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.metadatamap_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, TransactionMetadatum);\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert_str(key, value) {\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert_str(this.ptr, ptr0, len0, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {number} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert_i32(key, value) {\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert_i32(this.ptr, key, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @returns {TransactionMetadatum}\n    */\n    get(key) {\n        _assertClass(key, TransactionMetadatum);\n        var ret = wasm.metadatamap_get(this.ptr, key.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} key\n    * @returns {TransactionMetadatum}\n    */\n    get_str(key) {\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatamap_get_str(this.ptr, ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {number} key\n    * @returns {TransactionMetadatum}\n    */\n    get_i32(key) {\n        var ret = wasm.metadatamap_get_i32(this.ptr, key);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @returns {boolean}\n    */\n    has(key) {\n        _assertClass(key, TransactionMetadatum);\n        var ret = wasm.metadatamap_has(this.ptr, key.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    keys() {\n        var ret = wasm.metadatamap_keys(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n}\nmodule.exports.MetadataMap = MetadataMap;\n/**\n*/\nclass Mint {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Mint.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_mint_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.mint_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Mint}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mint_from_bytes(ptr0, len0);\n        return Mint.__wrap(ret);\n    }\n    /**\n    * @returns {Mint}\n    */\n    static new() {\n        var ret = wasm.mint_new();\n        return Mint.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.mint_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ScriptHash} key\n    * @param {MintAssets} value\n    * @returns {MintAssets | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        var ret = wasm.mint_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} key\n    * @returns {MintAssets | undefined}\n    */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        var ret = wasm.mint_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    keys() {\n        var ret = wasm.mint_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n}\nmodule.exports.Mint = Mint;\n/**\n*/\nclass MintAssets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MintAssets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_mintassets_free(ptr);\n    }\n    /**\n    * @returns {MintAssets}\n    */\n    static new() {\n        var ret = wasm.mintassets_new();\n        return MintAssets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.mintassets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {AssetName} key\n    * @param {Int} value\n    * @returns {Int | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        var ret = wasm.mintassets_insert(this.ptr, key.ptr, ptr0);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @returns {Int | undefined}\n    */\n    get(key) {\n        _assertClass(key, AssetName);\n        var ret = wasm.mintassets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    keys() {\n        var ret = wasm.mintassets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\nmodule.exports.MintAssets = MintAssets;\n/**\n*/\nclass MoveInstantaneousReward {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousReward.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_moveinstantaneousreward_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.moveinstantaneousreward_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MoveInstantaneousReward}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousreward_from_bytes(ptr0, len0);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {number} pot\n    * @returns {MoveInstantaneousReward}\n    */\n    static new(pot) {\n        var ret = wasm.moveinstantaneousreward_new(pot);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.moveinstantaneousreward_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {StakeCredential} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, StakeCredential);\n        _assertClass(value, BigNum);\n        var ret = wasm.moveinstantaneousreward_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} key\n    * @returns {BigNum | undefined}\n    */\n    get(key) {\n        _assertClass(key, StakeCredential);\n        var ret = wasm.moveinstantaneousreward_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredentials}\n    */\n    keys() {\n        var ret = wasm.moveinstantaneousreward_keys(this.ptr);\n        return StakeCredentials.__wrap(ret);\n    }\n}\nmodule.exports.MoveInstantaneousReward = MoveInstantaneousReward;\n/**\n*/\nclass MoveInstantaneousRewardsCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_moveinstantaneousrewardscert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.moveinstantaneousrewardscert_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousrewardscert_from_bytes(ptr0, len0);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n    /**\n    * @returns {MoveInstantaneousReward}\n    */\n    move_instantaneous_reward() {\n        var ret = wasm.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {MoveInstantaneousReward} move_instantaneous_reward\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n    static new(move_instantaneous_reward) {\n        _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n        var ret = wasm.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\nmodule.exports.MoveInstantaneousRewardsCert = MoveInstantaneousRewardsCert;\n/**\n*/\nclass MultiAsset {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MultiAsset.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_multiasset_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.multiasset_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MultiAsset}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multiasset_from_bytes(ptr0, len0);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n    * @returns {MultiAsset}\n    */\n    static new() {\n        var ret = wasm.multiasset_new();\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.multiasset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ScriptHash} key\n    * @param {Assets} value\n    * @returns {Assets | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, Assets);\n        var ret = wasm.multiasset_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} key\n    * @returns {Assets | undefined}\n    */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        var ret = wasm.multiasset_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    keys() {\n        var ret = wasm.multiasset_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * removes an asset from the list if the result is 0 or less\n    * @param {MultiAsset} rhs_ma\n    * @returns {MultiAsset}\n    */\n    sub(rhs_ma) {\n        _assertClass(rhs_ma, MultiAsset);\n        var ret = wasm.multiasset_sub(this.ptr, rhs_ma.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\nmodule.exports.MultiAsset = MultiAsset;\n/**\n*/\nclass MultiHostName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MultiHostName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_multihostname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.multihostname_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MultiHostName}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multihostname_from_bytes(ptr0, len0);\n        return MultiHostName.__wrap(ret);\n    }\n    /**\n    * @returns {DNSRecordSRV}\n    */\n    dns_name() {\n        var ret = wasm.multihostname_dns_name(this.ptr);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @param {DNSRecordSRV} dns_name\n    * @returns {MultiHostName}\n    */\n    static new(dns_name) {\n        _assertClass(dns_name, DNSRecordSRV);\n        var ret = wasm.multihostname_new(dns_name.ptr);\n        return MultiHostName.__wrap(ret);\n    }\n}\nmodule.exports.MultiHostName = MultiHostName;\n/**\n*/\nclass NativeScript {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScript.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_nativescript_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.nativescript_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {NativeScript}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nativescript_from_bytes(ptr0, len0);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    hash() {\n        var ret = wasm.nativescript_hash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * like hash(), but prefixes 0x00 in the pre-image bytes, to match the specs\n    * followed by cardano-cli. See https://github.com/input-output-hk/cardano-node/issues/2593\n    * @returns {Ed25519KeyHash}\n    */\n    script_hash() {\n        var ret = wasm.nativescript_script_hash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {ScriptPubkey} script_pubkey\n    * @returns {NativeScript}\n    */\n    static new_script_pubkey(script_pubkey) {\n        _assertClass(script_pubkey, ScriptPubkey);\n        var ret = wasm.nativescript_new_script_pubkey(script_pubkey.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptAll} script_all\n    * @returns {NativeScript}\n    */\n    static new_script_all(script_all) {\n        _assertClass(script_all, ScriptAll);\n        var ret = wasm.nativescript_new_script_all(script_all.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptAny} script_any\n    * @returns {NativeScript}\n    */\n    static new_script_any(script_any) {\n        _assertClass(script_any, ScriptAny);\n        var ret = wasm.nativescript_new_script_any(script_any.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptNOfK} script_n_of_k\n    * @returns {NativeScript}\n    */\n    static new_script_n_of_k(script_n_of_k) {\n        _assertClass(script_n_of_k, ScriptNOfK);\n        var ret = wasm.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {TimelockStart} timelock_start\n    * @returns {NativeScript}\n    */\n    static new_timelock_start(timelock_start) {\n        _assertClass(timelock_start, TimelockStart);\n        var ret = wasm.nativescript_new_timelock_start(timelock_start.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {TimelockExpiry} timelock_expiry\n    * @returns {NativeScript}\n    */\n    static new_timelock_expiry(timelock_expiry) {\n        _assertClass(timelock_expiry, TimelockExpiry);\n        var ret = wasm.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.nativescript_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ScriptPubkey | undefined}\n    */\n    as_script_pubkey() {\n        var ret = wasm.nativescript_as_script_pubkey(this.ptr);\n        return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptAll | undefined}\n    */\n    as_script_all() {\n        var ret = wasm.nativescript_as_script_all(this.ptr);\n        return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptAny | undefined}\n    */\n    as_script_any() {\n        var ret = wasm.nativescript_as_script_any(this.ptr);\n        return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptNOfK | undefined}\n    */\n    as_script_n_of_k() {\n        var ret = wasm.nativescript_as_script_n_of_k(this.ptr);\n        return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n    }\n    /**\n    * @returns {TimelockStart | undefined}\n    */\n    as_timelock_start() {\n        var ret = wasm.nativescript_as_timelock_start(this.ptr);\n        return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n    }\n    /**\n    * @returns {TimelockExpiry | undefined}\n    */\n    as_timelock_expiry() {\n        var ret = wasm.nativescript_as_timelock_expiry(this.ptr);\n        return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n    }\n}\nmodule.exports.NativeScript = NativeScript;\n/**\n*/\nclass NativeScripts {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScripts.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_nativescripts_free(ptr);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    static new() {\n        var ret = wasm.nativescripts_new();\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.nativescripts_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {NativeScript}\n    */\n    get(index) {\n        var ret = wasm.nativescripts_get(this.ptr, index);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {NativeScript} elem\n    */\n    add(elem) {\n        _assertClass(elem, NativeScript);\n        wasm.nativescripts_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.NativeScripts = NativeScripts;\n/**\n*/\nclass NetworkInfo {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkInfo.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_networkinfo_free(ptr);\n    }\n    /**\n    * @param {number} network_id\n    * @param {number} protocol_magic\n    * @returns {NetworkInfo}\n    */\n    static new(network_id, protocol_magic) {\n        var ret = wasm.networkinfo_new(network_id, protocol_magic);\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        var ret = wasm.networkinfo_network_id(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    protocol_magic() {\n        var ret = wasm.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n    static testnet() {\n        var ret = wasm.networkinfo_testnet();\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n    static mainnet() {\n        var ret = wasm.networkinfo_mainnet();\n        return NetworkInfo.__wrap(ret);\n    }\n}\nmodule.exports.NetworkInfo = NetworkInfo;\n/**\n*/\nclass Nonce {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Nonce.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_nonce_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.nonce_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Nonce}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nonce_from_bytes(ptr0, len0);\n        return Nonce.__wrap(ret);\n    }\n    /**\n    * @returns {Nonce}\n    */\n    static new_identity() {\n        var ret = wasm.nonce_new_identity();\n        return Nonce.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} hash\n    * @returns {Nonce}\n    */\n    static new_from_hash(hash) {\n        var ptr0 = passArray8ToWasm0(hash, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nonce_new_from_hash(ptr0, len0);\n        return Nonce.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    get_hash() {\n        wasm.nonce_get_hash(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        let v0;\n        if (r0 !== 0) {\n            v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n        }\n        return v0;\n    }\n}\nmodule.exports.Nonce = Nonce;\n/**\n*/\nclass OperationalCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(OperationalCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_operationalcert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.operationalcert_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {OperationalCert}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.operationalcert_from_bytes(ptr0, len0);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n    * @returns {KESVKey}\n    */\n    hot_vkey() {\n        var ret = wasm.operationalcert_hot_vkey(this.ptr);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    sequence_number() {\n        var ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    kes_period() {\n        var ret = wasm.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    sigma() {\n        var ret = wasm.operationalcert_sigma(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {KESVKey} hot_vkey\n    * @param {number} sequence_number\n    * @param {number} kes_period\n    * @param {Ed25519Signature} sigma\n    * @returns {OperationalCert}\n    */\n    static new(hot_vkey, sequence_number, kes_period, sigma) {\n        _assertClass(hot_vkey, KESVKey);\n        _assertClass(sigma, Ed25519Signature);\n        var ret = wasm.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n}\nmodule.exports.OperationalCert = OperationalCert;\n/**\n*/\nclass Pointer {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Pointer.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_pointer_free(ptr);\n    }\n    /**\n    * @param {number} slot\n    * @param {number} tx_index\n    * @param {number} cert_index\n    * @returns {Pointer}\n    */\n    static new(slot, tx_index, cert_index) {\n        var ret = wasm.pointer_new(slot, tx_index, cert_index);\n        return Pointer.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = wasm.pointer_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    tx_index() {\n        var ret = wasm.pointer_tx_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    cert_index() {\n        var ret = wasm.pointer_cert_index(this.ptr);\n        return ret >>> 0;\n    }\n}\nmodule.exports.Pointer = Pointer;\n/**\n*/\nclass PointerAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PointerAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_pointeraddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @param {Pointer} stake\n    * @returns {PointerAddress}\n    */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, Pointer);\n        var ret = wasm.pointeraddress_new(network, payment.ptr, stake.ptr);\n        return PointerAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = wasm.pointeraddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Pointer}\n    */\n    stake_pointer() {\n        var ret = wasm.pointeraddress_stake_pointer(this.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = wasm.pointeraddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {PointerAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.pointeraddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n}\nmodule.exports.PointerAddress = PointerAddress;\n/**\n*/\nclass PoolMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_poolmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.poolmetadata_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolMetadata}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadata_from_bytes(ptr0, len0);\n        return PoolMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {URL}\n    */\n    url() {\n        var ret = wasm.poolmetadata_url(this.ptr);\n        return URL.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataHash}\n    */\n    metadata_hash() {\n        var ret = wasm.poolmetadata_metadata_hash(this.ptr);\n        return MetadataHash.__wrap(ret);\n    }\n    /**\n    * @param {URL} url\n    * @param {MetadataHash} metadata_hash\n    * @returns {PoolMetadata}\n    */\n    static new(url, metadata_hash) {\n        _assertClass(url, URL);\n        _assertClass(metadata_hash, MetadataHash);\n        var ret = wasm.poolmetadata_new(url.ptr, metadata_hash.ptr);\n        return PoolMetadata.__wrap(ret);\n    }\n}\nmodule.exports.PoolMetadata = PoolMetadata;\n/**\n*/\nclass PoolParams {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolParams.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_poolparams_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.poolparams_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolParams}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolparams_from_bytes(ptr0, len0);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    operator() {\n        var ret = wasm.poolparams_operator(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {VRFKeyHash}\n    */\n    vrf_keyhash() {\n        var ret = wasm.poolparams_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    pledge() {\n        var ret = wasm.poolparams_pledge(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    cost() {\n        var ret = wasm.poolparams_cost(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n    margin() {\n        var ret = wasm.poolparams_margin(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddress}\n    */\n    reward_account() {\n        var ret = wasm.poolparams_reward_account(this.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHashes}\n    */\n    pool_owners() {\n        var ret = wasm.poolparams_pool_owners(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {Relays}\n    */\n    relays() {\n        var ret = wasm.poolparams_relays(this.ptr);\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {PoolMetadata | undefined}\n    */\n    pool_metadata() {\n        var ret = wasm.poolparams_pool_metadata(this.ptr);\n        return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} operator\n    * @param {VRFKeyHash} vrf_keyhash\n    * @param {BigNum} pledge\n    * @param {BigNum} cost\n    * @param {UnitInterval} margin\n    * @param {RewardAddress} reward_account\n    * @param {Ed25519KeyHashes} pool_owners\n    * @param {Relays} relays\n    * @param {PoolMetadata | undefined} pool_metadata\n    * @returns {PoolParams}\n    */\n    static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n        _assertClass(operator, Ed25519KeyHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        _assertClass(pledge, BigNum);\n        _assertClass(cost, BigNum);\n        _assertClass(margin, UnitInterval);\n        _assertClass(reward_account, RewardAddress);\n        _assertClass(pool_owners, Ed25519KeyHashes);\n        _assertClass(relays, Relays);\n        let ptr0 = 0;\n        if (!isLikeNone(pool_metadata)) {\n            _assertClass(pool_metadata, PoolMetadata);\n            ptr0 = pool_metadata.ptr;\n            pool_metadata.ptr = 0;\n        }\n        var ret = wasm.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n        return PoolParams.__wrap(ret);\n    }\n}\nmodule.exports.PoolParams = PoolParams;\n/**\n*/\nclass PoolRegistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRegistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_poolregistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.poolregistration_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolRegistration}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolregistration_from_bytes(ptr0, len0);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {PoolParams}\n    */\n    pool_params() {\n        var ret = wasm.poolregistration_pool_params(this.ptr);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n    * @param {PoolParams} pool_params\n    * @returns {PoolRegistration}\n    */\n    static new(pool_params) {\n        _assertClass(pool_params, PoolParams);\n        var ret = wasm.poolregistration_new(pool_params.ptr);\n        return PoolRegistration.__wrap(ret);\n    }\n}\nmodule.exports.PoolRegistration = PoolRegistration;\n/**\n*/\nclass PoolRetirement {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRetirement.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_poolretirement_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.poolretirement_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolRetirement}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolretirement_from_bytes(ptr0, len0);\n        return PoolRetirement.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    pool_keyhash() {\n        var ret = wasm.poolretirement_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    epoch() {\n        var ret = wasm.poolretirement_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {Ed25519KeyHash} pool_keyhash\n    * @param {number} epoch\n    * @returns {PoolRetirement}\n    */\n    static new(pool_keyhash, epoch) {\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        var ret = wasm.poolretirement_new(pool_keyhash.ptr, epoch);\n        return PoolRetirement.__wrap(ret);\n    }\n}\nmodule.exports.PoolRetirement = PoolRetirement;\n/**\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    to_public() {\n        var ret = wasm.privatekey_to_public(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    static generate_ed25519() {\n        var ret = wasm.privatekey_generate_ed25519();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    static generate_ed25519extended() {\n        var ret = wasm.privatekey_generate_ed25519extended();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            wasm.privatekey_to_bech32(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        wasm.privatekey_as_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PrivateKey}\n    */\n    static from_extended_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_extended_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PrivateKey}\n    */\n    static from_normal_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_normal_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} message\n    * @returns {Ed25519Signature}\n    */\n    sign(message) {\n        var ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\nmodule.exports.PrivateKey = PrivateKey;\n/**\n*/\nclass ProposedProtocolParameterUpdates {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_proposedprotocolparameterupdates_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.proposedprotocolparameterupdates_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.proposedprotocolparameterupdates_from_bytes(ptr0, len0);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    static new() {\n        var ret = wasm.proposedprotocolparameterupdates_new();\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.proposedprotocolparameterupdates_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {GenesisHash} key\n    * @param {ProtocolParamUpdate} value\n    * @returns {ProtocolParamUpdate | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, GenesisHash);\n        _assertClass(value, ProtocolParamUpdate);\n        var ret = wasm.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} key\n    * @returns {ProtocolParamUpdate | undefined}\n    */\n    get(key) {\n        _assertClass(key, GenesisHash);\n        var ret = wasm.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHashes}\n    */\n    keys() {\n        var ret = wasm.proposedprotocolparameterupdates_keys(this.ptr);\n        return GenesisHashes.__wrap(ret);\n    }\n}\nmodule.exports.ProposedProtocolParameterUpdates = ProposedProtocolParameterUpdates;\n/**\n*/\nclass ProtocolParamUpdate {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolParamUpdate.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_protocolparamupdate_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.protocolparamupdate_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolParamUpdate}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolparamupdate_from_bytes(ptr0, len0);\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} minfee_a\n    */\n    set_minfee_a(minfee_a) {\n        _assertClass(minfee_a, BigNum);\n        wasm.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    minfee_a() {\n        var ret = wasm.protocolparamupdate_minfee_a(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} minfee_b\n    */\n    set_minfee_b(minfee_b) {\n        _assertClass(minfee_b, BigNum);\n        wasm.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    minfee_b() {\n        var ret = wasm.protocolparamupdate_minfee_b(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {number} max_block_body_size\n    */\n    set_max_block_body_size(max_block_body_size) {\n        wasm.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_block_body_size() {\n        wasm.protocolparamupdate_max_block_body_size(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n    }\n    /**\n    * @param {number} max_tx_size\n    */\n    set_max_tx_size(max_tx_size) {\n        wasm.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_tx_size() {\n        wasm.protocolparamupdate_max_tx_size(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n    }\n    /**\n    * @param {number} max_block_header_size\n    */\n    set_max_block_header_size(max_block_header_size) {\n        wasm.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_block_header_size() {\n        wasm.protocolparamupdate_max_block_header_size(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n    }\n    /**\n    * @param {BigNum} key_deposit\n    */\n    set_key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        wasm.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    key_deposit() {\n        var ret = wasm.protocolparamupdate_key_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} pool_deposit\n    */\n    set_pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        wasm.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    pool_deposit() {\n        var ret = wasm.protocolparamupdate_pool_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {number} max_epoch\n    */\n    set_max_epoch(max_epoch) {\n        wasm.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_epoch() {\n        wasm.protocolparamupdate_max_epoch(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n    }\n    /**\n    * @param {number} n_opt\n    */\n    set_n_opt(n_opt) {\n        wasm.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    n_opt() {\n        wasm.protocolparamupdate_n_opt(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n    }\n    /**\n    * @param {UnitInterval} pool_pledge_influence\n    */\n    set_pool_pledge_influence(pool_pledge_influence) {\n        _assertClass(pool_pledge_influence, UnitInterval);\n        wasm.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    pool_pledge_influence() {\n        var ret = wasm.protocolparamupdate_pool_pledge_influence(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} expansion_rate\n    */\n    set_expansion_rate(expansion_rate) {\n        _assertClass(expansion_rate, UnitInterval);\n        wasm.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    expansion_rate() {\n        var ret = wasm.protocolparamupdate_expansion_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} treasury_growth_rate\n    */\n    set_treasury_growth_rate(treasury_growth_rate) {\n        _assertClass(treasury_growth_rate, UnitInterval);\n        wasm.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    treasury_growth_rate() {\n        var ret = wasm.protocolparamupdate_treasury_growth_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} d\n    */\n    set_d(d) {\n        _assertClass(d, UnitInterval);\n        wasm.protocolparamupdate_set_d(this.ptr, d.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    d() {\n        var ret = wasm.protocolparamupdate_d(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {Nonce} extra_entropy\n    */\n    set_extra_entropy(extra_entropy) {\n        _assertClass(extra_entropy, Nonce);\n        wasm.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\n    }\n    /**\n    * @returns {Nonce | undefined}\n    */\n    extra_entropy() {\n        var ret = wasm.protocolparamupdate_extra_entropy(this.ptr);\n        return ret === 0 ? undefined : Nonce.__wrap(ret);\n    }\n    /**\n    * @param {ProtocolVersions} protocol_version\n    */\n    set_protocol_version(protocol_version) {\n        _assertClass(protocol_version, ProtocolVersions);\n        wasm.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n    }\n    /**\n    * @returns {ProtocolVersions | undefined}\n    */\n    protocol_version() {\n        var ret = wasm.protocolparamupdate_protocol_version(this.ptr);\n        return ret === 0 ? undefined : ProtocolVersions.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} min_utxo_value\n    */\n    set_min_utxo_value(min_utxo_value) {\n        _assertClass(min_utxo_value, BigNum);\n        wasm.protocolparamupdate_set_min_utxo_value(this.ptr, min_utxo_value.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    min_utxo_value() {\n        var ret = wasm.protocolparamupdate_min_utxo_value(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {ProtocolParamUpdate}\n    */\n    static new() {\n        var ret = wasm.protocolparamupdate_new();\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n}\nmodule.exports.ProtocolParamUpdate = ProtocolParamUpdate;\n/**\n*/\nclass ProtocolVersion {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersion.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_protocolversion_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.protocolversion_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolVersion}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolversion_from_bytes(ptr0, len0);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    major() {\n        var ret = wasm.protocolversion_major(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    minor() {\n        var ret = wasm.protocolversion_minor(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} major\n    * @param {number} minor\n    * @returns {ProtocolVersion}\n    */\n    static new(major, minor) {\n        var ret = wasm.protocolversion_new(major, minor);\n        return ProtocolVersion.__wrap(ret);\n    }\n}\nmodule.exports.ProtocolVersion = ProtocolVersion;\n/**\n*/\nclass ProtocolVersions {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersions.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_protocolversions_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.protocolversions_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolVersions}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolversions_from_bytes(ptr0, len0);\n        return ProtocolVersions.__wrap(ret);\n    }\n    /**\n    * @returns {ProtocolVersions}\n    */\n    static new() {\n        var ret = wasm.protocolversions_new();\n        return ProtocolVersions.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.protocolversions_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {ProtocolVersion}\n    */\n    get(index) {\n        var ret = wasm.protocolversions_get(this.ptr, index);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @param {ProtocolVersion} elem\n    */\n    add(elem) {\n        _assertClass(elem, ProtocolVersion);\n        wasm.protocolversions_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.ProtocolVersions = ProtocolVersions;\n/**\n* ED25519 key used as public key\n*/\nclass PublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_publickey_free(ptr);\n    }\n    /**\n    * Get public key from its bech32 representation\n    * Example:\n    * ```javascript\n    * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n    * ```\n    * @param {string} bech32_str\n    * @returns {PublicKey}\n    */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.publickey_from_bech32(ptr0, len0);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            wasm.publickey_to_bech32(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        wasm.publickey_as_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PublicKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.publickey_from_bytes(ptr0, len0);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @param {Ed25519Signature} signature\n    * @returns {boolean}\n    */\n    verify(data, signature) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Ed25519Signature);\n        var ret = wasm.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    hash() {\n        var ret = wasm.publickey_hash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\nmodule.exports.PublicKey = PublicKey;\n/**\n*/\nclass PublicKeys {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKeys.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_publickeys_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        var ret = wasm.publickeys_new();\n        return PublicKeys.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    size() {\n        var ret = wasm.publickeys_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PublicKey}\n    */\n    get(index) {\n        var ret = wasm.publickeys_get(this.ptr, index);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {PublicKey} key\n    */\n    add(key) {\n        _assertClass(key, PublicKey);\n        wasm.publickeys_add(this.ptr, key.ptr);\n    }\n}\nmodule.exports.PublicKeys = PublicKeys;\n/**\n*/\nclass Relay {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Relay.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_relay_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.relay_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Relay}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relay_from_bytes(ptr0, len0);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {SingleHostAddr} single_host_addr\n    * @returns {Relay}\n    */\n    static new_single_host_addr(single_host_addr) {\n        _assertClass(single_host_addr, SingleHostAddr);\n        var ret = wasm.relay_new_single_host_addr(single_host_addr.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {SingleHostName} single_host_name\n    * @returns {Relay}\n    */\n    static new_single_host_name(single_host_name) {\n        _assertClass(single_host_name, SingleHostName);\n        var ret = wasm.relay_new_single_host_name(single_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {MultiHostName} multi_host_name\n    * @returns {Relay}\n    */\n    static new_multi_host_name(multi_host_name) {\n        _assertClass(multi_host_name, MultiHostName);\n        var ret = wasm.relay_new_multi_host_name(multi_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.relay_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {SingleHostAddr | undefined}\n    */\n    as_single_host_addr() {\n        var ret = wasm.relay_as_single_host_addr(this.ptr);\n        return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n    }\n    /**\n    * @returns {SingleHostName | undefined}\n    */\n    as_single_host_name() {\n        var ret = wasm.relay_as_single_host_name(this.ptr);\n        return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n    }\n    /**\n    * @returns {MultiHostName | undefined}\n    */\n    as_multi_host_name() {\n        var ret = wasm.relay_as_multi_host_name(this.ptr);\n        return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n    }\n}\nmodule.exports.Relay = Relay;\n/**\n*/\nclass Relays {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Relays.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_relays_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.relays_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Relays}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relays_from_bytes(ptr0, len0);\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {Relays}\n    */\n    static new() {\n        var ret = wasm.relays_new();\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.relays_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Relay}\n    */\n    get(index) {\n        var ret = wasm.relays_get(this.ptr, index);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {Relay} elem\n    */\n    add(elem) {\n        _assertClass(elem, Relay);\n        wasm.relays_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.Relays = Relays;\n/**\n*/\nclass RewardAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_rewardaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @returns {RewardAddress}\n    */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        var ret = wasm.rewardaddress_new(network, payment.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        var ret = wasm.rewardaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        var ret = wasm.rewardaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {RewardAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.rewardaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n}\nmodule.exports.RewardAddress = RewardAddress;\n/**\n*/\nclass RewardAddresses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddresses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_rewardaddresses_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.rewardaddresses_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {RewardAddresses}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.rewardaddresses_from_bytes(ptr0, len0);\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddresses}\n    */\n    static new() {\n        var ret = wasm.rewardaddresses_new();\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.rewardaddresses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {RewardAddress}\n    */\n    get(index) {\n        var ret = wasm.rewardaddresses_get(this.ptr, index);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @param {RewardAddress} elem\n    */\n    add(elem) {\n        _assertClass(elem, RewardAddress);\n        wasm.rewardaddresses_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.RewardAddresses = RewardAddresses;\n/**\n*/\nclass ScriptAll {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAll.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_scriptall_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.scriptall_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptAll}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptall_from_bytes(ptr0, len0);\n        return ScriptAll.__wrap(ret);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        var ret = wasm.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptAll}\n    */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptall_new(native_scripts.ptr);\n        return ScriptAll.__wrap(ret);\n    }\n}\nmodule.exports.ScriptAll = ScriptAll;\n/**\n*/\nclass ScriptAny {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAny.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_scriptany_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.scriptany_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptAny}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptany_from_bytes(ptr0, len0);\n        return ScriptAny.__wrap(ret);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        var ret = wasm.scriptany_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptAny}\n    */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptany_new(native_scripts.ptr);\n        return ScriptAny.__wrap(ret);\n    }\n}\nmodule.exports.ScriptAny = ScriptAny;\n/**\n*/\nclass ScriptHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_scripthash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.scripthash_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.scripthash_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {ScriptHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthash_from_bech32(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthash_from_bytes(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n}\nmodule.exports.ScriptHash = ScriptHash;\n/**\n*/\nclass ScriptHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_scripthashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.scripthashes_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptHashes}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthashes_from_bytes(ptr0, len0);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    static new() {\n        var ret = wasm.scripthashes_new();\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.scripthashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {ScriptHash}\n    */\n    get(index) {\n        var ret = wasm.scripthashes_get(this.ptr, index);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, ScriptHash);\n        wasm.scripthashes_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.ScriptHashes = ScriptHashes;\n/**\n*/\nclass ScriptNOfK {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptNOfK.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_scriptnofk_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.scriptnofk_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptNOfK}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptnofk_from_bytes(ptr0, len0);\n        return ScriptNOfK.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    n() {\n        var ret = wasm.scriptnofk_n(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        var ret = wasm.scriptnofk_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {number} n\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptNOfK}\n    */\n    static new(n, native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptnofk_new(n, native_scripts.ptr);\n        return ScriptNOfK.__wrap(ret);\n    }\n}\nmodule.exports.ScriptNOfK = ScriptNOfK;\n/**\n*/\nclass ScriptPubkey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptPubkey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_scriptpubkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.scriptpubkey_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptPubkey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptpubkey_from_bytes(ptr0, len0);\n        return ScriptPubkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    addr_keyhash() {\n        var ret = wasm.scriptpubkey_addr_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} addr_keyhash\n    * @returns {ScriptPubkey}\n    */\n    static new(addr_keyhash) {\n        _assertClass(addr_keyhash, Ed25519KeyHash);\n        var ret = wasm.scriptpubkey_new(addr_keyhash.ptr);\n        return ScriptPubkey.__wrap(ret);\n    }\n}\nmodule.exports.ScriptPubkey = ScriptPubkey;\n/**\n*/\nclass SingleHostAddr {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostAddr.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_singlehostaddr_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.singlehostaddr_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SingleHostAddr}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostaddr_from_bytes(ptr0, len0);\n        return SingleHostAddr.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    port() {\n        var ret = wasm.singlehostaddr_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {Ipv4 | undefined}\n    */\n    ipv4() {\n        var ret = wasm.singlehostaddr_ipv4(this.ptr);\n        return ret === 0 ? undefined : Ipv4.__wrap(ret);\n    }\n    /**\n    * @returns {Ipv6 | undefined}\n    */\n    ipv6() {\n        var ret = wasm.singlehostaddr_ipv6(this.ptr);\n        return ret === 0 ? undefined : Ipv6.__wrap(ret);\n    }\n    /**\n    * @param {number | undefined} port\n    * @param {Ipv4 | undefined} ipv4\n    * @param {Ipv6 | undefined} ipv6\n    * @returns {SingleHostAddr}\n    */\n    static new(port, ipv4, ipv6) {\n        let ptr0 = 0;\n        if (!isLikeNone(ipv4)) {\n            _assertClass(ipv4, Ipv4);\n            ptr0 = ipv4.ptr;\n            ipv4.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(ipv6)) {\n            _assertClass(ipv6, Ipv6);\n            ptr1 = ipv6.ptr;\n            ipv6.ptr = 0;\n        }\n        var ret = wasm.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n        return SingleHostAddr.__wrap(ret);\n    }\n}\nmodule.exports.SingleHostAddr = SingleHostAddr;\n/**\n*/\nclass SingleHostName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_singlehostname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.singlehostname_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SingleHostName}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostname_from_bytes(ptr0, len0);\n        return SingleHostName.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    port() {\n        var ret = wasm.singlehostname_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {DNSRecordAorAAAA}\n    */\n    dns_name() {\n        var ret = wasm.singlehostname_dns_name(this.ptr);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @param {number | undefined} port\n    * @param {DNSRecordAorAAAA} dns_name\n    * @returns {SingleHostName}\n    */\n    static new(port, dns_name) {\n        _assertClass(dns_name, DNSRecordAorAAAA);\n        var ret = wasm.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n        return SingleHostName.__wrap(ret);\n    }\n}\nmodule.exports.SingleHostName = SingleHostName;\n/**\n*/\nclass StakeCredential {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredential.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_stakecredential_free(ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} hash\n    * @returns {StakeCredential}\n    */\n    static from_keyhash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        var ret = wasm.stakecredential_from_keyhash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} hash\n    * @returns {StakeCredential}\n    */\n    static from_scripthash(hash) {\n        _assertClass(hash, ScriptHash);\n        var ret = wasm.stakecredential_from_scripthash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash | undefined}\n    */\n    to_keyhash() {\n        var ret = wasm.stakecredential_to_keyhash(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHash | undefined}\n    */\n    to_scripthash() {\n        var ret = wasm.stakecredential_to_scripthash(this.ptr);\n        return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.stakecredential_kind(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.stakecredential_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeCredential}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredential_from_bytes(ptr0, len0);\n        return StakeCredential.__wrap(ret);\n    }\n}\nmodule.exports.StakeCredential = StakeCredential;\n/**\n*/\nclass StakeCredentials {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredentials.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_stakecredentials_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.stakecredentials_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeCredentials}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredentials_from_bytes(ptr0, len0);\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredentials}\n    */\n    static new() {\n        var ret = wasm.stakecredentials_new();\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.stakecredentials_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {StakeCredential}\n    */\n    get(index) {\n        var ret = wasm.stakecredentials_get(this.ptr, index);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} elem\n    */\n    add(elem) {\n        _assertClass(elem, StakeCredential);\n        wasm.stakecredentials_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.StakeCredentials = StakeCredentials;\n/**\n*/\nclass StakeDelegation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDelegation.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_stakedelegation_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.stakedelegation_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeDelegation}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakedelegation_from_bytes(ptr0, len0);\n        return StakeDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        var ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    pool_keyhash() {\n        var ret = wasm.stakedelegation_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @param {Ed25519KeyHash} pool_keyhash\n    * @returns {StakeDelegation}\n    */\n    static new(stake_credential, pool_keyhash) {\n        _assertClass(stake_credential, StakeCredential);\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        var ret = wasm.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n        return StakeDelegation.__wrap(ret);\n    }\n}\nmodule.exports.StakeDelegation = StakeDelegation;\n/**\n*/\nclass StakeDeregistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDeregistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_stakederegistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.stakederegistration_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeDeregistration}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakederegistration_from_bytes(ptr0, len0);\n        return StakeDeregistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        var ret = wasm.stakederegistration_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @returns {StakeDeregistration}\n    */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        var ret = wasm.stakederegistration_new(stake_credential.ptr);\n        return StakeDeregistration.__wrap(ret);\n    }\n}\nmodule.exports.StakeDeregistration = StakeDeregistration;\n/**\n*/\nclass StakeRegistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeRegistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_stakeregistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.stakeregistration_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeRegistration}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakeregistration_from_bytes(ptr0, len0);\n        return StakeRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        var ret = wasm.stakeregistration_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @returns {StakeRegistration}\n    */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        var ret = wasm.stakeregistration_new(stake_credential.ptr);\n        return StakeRegistration.__wrap(ret);\n    }\n}\nmodule.exports.StakeRegistration = StakeRegistration;\n/**\n*/\nclass TimelockExpiry {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockExpiry.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_timelockexpiry_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.timelockexpiry_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TimelockExpiry}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockexpiry_from_bytes(ptr0, len0);\n        return TimelockExpiry.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = wasm.timelockexpiry_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} slot\n    * @returns {TimelockExpiry}\n    */\n    static new(slot) {\n        var ret = wasm.timelockexpiry_new(slot);\n        return TimelockExpiry.__wrap(ret);\n    }\n}\nmodule.exports.TimelockExpiry = TimelockExpiry;\n/**\n*/\nclass TimelockStart {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockStart.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_timelockstart_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.timelockstart_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TimelockStart}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockstart_from_bytes(ptr0, len0);\n        return TimelockStart.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        var ret = wasm.timelockstart_slot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} slot\n    * @returns {TimelockStart}\n    */\n    static new(slot) {\n        var ret = wasm.timelockstart_new(slot);\n        return TimelockStart.__wrap(ret);\n    }\n}\nmodule.exports.TimelockStart = TimelockStart;\n/**\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Transaction.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transaction_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Transaction}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transaction_from_bytes(ptr0, len0);\n        return Transaction.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBody}\n    */\n    body() {\n        var ret = wasm.transaction_body(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n    witness_set() {\n        var ret = wasm.transaction_witness_set(this.ptr);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionMetadata | undefined}\n    */\n    metadata() {\n        var ret = wasm.transaction_metadata(this.ptr);\n        return ret === 0 ? undefined : TransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @param {TransactionBody} body\n    * @param {TransactionWitnessSet} witness_set\n    * @param {TransactionMetadata | undefined} metadata\n    * @returns {Transaction}\n    */\n    static new(body, witness_set, metadata) {\n        _assertClass(body, TransactionBody);\n        _assertClass(witness_set, TransactionWitnessSet);\n        let ptr0 = 0;\n        if (!isLikeNone(metadata)) {\n            _assertClass(metadata, TransactionMetadata);\n            ptr0 = metadata.ptr;\n            metadata.ptr = 0;\n        }\n        var ret = wasm.transaction_new(body.ptr, witness_set.ptr, ptr0);\n        return Transaction.__wrap(ret);\n    }\n}\nmodule.exports.Transaction = Transaction;\n/**\n*/\nclass TransactionBodies {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBodies.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionbodies_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactionbodies_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionBodies}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbodies_from_bytes(ptr0, len0);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBodies}\n    */\n    static new() {\n        var ret = wasm.transactionbodies_new();\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.transactionbodies_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionBody}\n    */\n    get(index) {\n        var ret = wasm.transactionbodies_get(this.ptr, index);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @param {TransactionBody} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionBody);\n        wasm.transactionbodies_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.TransactionBodies = TransactionBodies;\n/**\n*/\nclass TransactionBody {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBody.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionbody_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactionbody_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionBody}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbody_from_bytes(ptr0, len0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    inputs() {\n        var ret = wasm.transactionbody_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n    outputs() {\n        var ret = wasm.transactionbody_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    fee() {\n        var ret = wasm.transactionbody_fee(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    ttl() {\n        wasm.transactionbody_ttl(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n    }\n    /**\n    * @param {Certificates} certs\n    */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        wasm.transactionbody_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n    * @returns {Certificates | undefined}\n    */\n    certs() {\n        var ret = wasm.transactionbody_certs(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n    * @param {Withdrawals} withdrawals\n    */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        wasm.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n    * @returns {Withdrawals | undefined}\n    */\n    withdrawals() {\n        var ret = wasm.transactionbody_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n    * @param {Update} update\n    */\n    set_update(update) {\n        _assertClass(update, Update);\n        wasm.transactionbody_set_update(this.ptr, update.ptr);\n    }\n    /**\n    * @returns {Update | undefined}\n    */\n    update() {\n        var ret = wasm.transactionbody_update(this.ptr);\n        return ret === 0 ? undefined : Update.__wrap(ret);\n    }\n    /**\n    * @param {MetadataHash} metadata_hash\n    */\n    set_metadata_hash(metadata_hash) {\n        _assertClass(metadata_hash, MetadataHash);\n        wasm.transactionbody_set_metadata_hash(this.ptr, metadata_hash.ptr);\n    }\n    /**\n    * @returns {MetadataHash | undefined}\n    */\n    metadata_hash() {\n        var ret = wasm.transactionbody_metadata_hash(this.ptr);\n        return ret === 0 ? undefined : MetadataHash.__wrap(ret);\n    }\n    /**\n    * @param {number} validity_start_interval\n    */\n    set_validity_start_interval(validity_start_interval) {\n        wasm.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    validity_start_interval() {\n        wasm.transactionbody_validity_start_interval(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n    }\n    /**\n    * @param {Mint} mint\n    */\n    set_mint(mint) {\n        _assertClass(mint, Mint);\n        wasm.transactionbody_set_mint(this.ptr, mint.ptr);\n    }\n    /**\n    * @returns {Mint | undefined}\n    */\n    multiassets() {\n        var ret = wasm.transactionbody_multiassets(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInputs} inputs\n    * @param {TransactionOutputs} outputs\n    * @param {BigNum} fee\n    * @param {number | undefined} ttl\n    * @returns {TransactionBody}\n    */\n    static new(inputs, outputs, fee, ttl) {\n        _assertClass(inputs, TransactionInputs);\n        _assertClass(outputs, TransactionOutputs);\n        _assertClass(fee, BigNum);\n        var ret = wasm.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, !isLikeNone(ttl), isLikeNone(ttl) ? 0 : ttl);\n        return TransactionBody.__wrap(ret);\n    }\n}\nmodule.exports.TransactionBody = TransactionBody;\n/**\n*/\nclass TransactionBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_key_input(hash, input, amount) {\n        _assertClass(hash, Ed25519KeyHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        wasm.transactionbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {ScriptHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_script_input(hash, input, amount) {\n        _assertClass(hash, ScriptHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        wasm.transactionbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {ByronAddress} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_bootstrap_input(hash, input, amount) {\n        _assertClass(hash, ByronAddress);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        wasm.transactionbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_input(address, input, amount) {\n        _assertClass(address, Address);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        wasm.transactionbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * calculates how much the fee would increase if you added a given output\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    * @returns {BigNum}\n    */\n    fee_for_input(address, input, amount) {\n        _assertClass(address, Address);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        var ret = wasm.transactionbuilder_fee_for_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionOutput} output\n    */\n    add_output(output) {\n        _assertClass(output, TransactionOutput);\n        wasm.transactionbuilder_add_output(this.ptr, output.ptr);\n    }\n    /**\n    * calculates how much the fee would increase if you added a given output\n    * @param {TransactionOutput} output\n    * @returns {BigNum}\n    */\n    fee_for_output(output) {\n        _assertClass(output, TransactionOutput);\n        var ret = wasm.transactionbuilder_fee_for_output(this.ptr, output.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} fee\n    */\n    set_fee(fee) {\n        _assertClass(fee, BigNum);\n        wasm.transactionbuilder_set_fee(this.ptr, fee.ptr);\n    }\n    /**\n    * @param {number} ttl\n    */\n    set_ttl(ttl) {\n        wasm.transactionbuilder_set_ttl(this.ptr, ttl);\n    }\n    /**\n    * @param {number} validity_start_interval\n    */\n    set_validity_start_interval(validity_start_interval) {\n        wasm.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval);\n    }\n    /**\n    * @param {Certificates} certs\n    */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        wasm.transactionbuilder_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n    * @param {Withdrawals} withdrawals\n    */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        wasm.transactionbuilder_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n    * @param {TransactionMetadata} metadata\n    */\n    set_metadata(metadata) {\n        _assertClass(metadata, TransactionMetadata);\n        wasm.transactionbuilder_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n    * @param {LinearFee} linear_fee\n    * @param {BigNum} minimum_utxo_val\n    * @param {BigNum} pool_deposit\n    * @param {BigNum} key_deposit\n    * @returns {TransactionBuilder}\n    */\n    static new(linear_fee, minimum_utxo_val, pool_deposit, key_deposit) {\n        _assertClass(linear_fee, LinearFee);\n        _assertClass(minimum_utxo_val, BigNum);\n        _assertClass(pool_deposit, BigNum);\n        _assertClass(key_deposit, BigNum);\n        var ret = wasm.transactionbuilder_new(linear_fee.ptr, minimum_utxo_val.ptr, pool_deposit.ptr, key_deposit.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * does not include refunds or withdrawals\n    * @returns {Value}\n    */\n    get_explicit_input() {\n        var ret = wasm.transactionbuilder_get_explicit_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * withdrawals and refunds\n    * @returns {Value}\n    */\n    get_implicit_input() {\n        var ret = wasm.transactionbuilder_get_implicit_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * does not include fee\n    * @returns {Value}\n    */\n    get_explicit_output() {\n        var ret = wasm.transactionbuilder_get_explicit_output(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    get_deposit() {\n        var ret = wasm.transactionbuilder_get_deposit(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    get_fee_if_set() {\n        var ret = wasm.transactionbuilder_get_fee_if_set(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * Warning: this function will mutate the /fee/ field\n    * @param {Address} address\n    * @returns {boolean}\n    */\n    add_change_if_needed(address) {\n        _assertClass(address, Address);\n        var ret = wasm.transactionbuilder_add_change_if_needed(this.ptr, address.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {TransactionBody}\n    */\n    build() {\n        var ret = wasm.transactionbuilder_build(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n    * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n    * this is done to simplify the library code, but can be fixed later\n    * @returns {BigNum}\n    */\n    min_fee() {\n        var ret = wasm.transactionbuilder_min_fee(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\nmodule.exports.TransactionBuilder = TransactionBuilder;\n/**\n*/\nclass TransactionHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactionhash_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.transactionhash_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {TransactionHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionhash_from_bech32(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionhash_from_bytes(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n}\nmodule.exports.TransactionHash = TransactionHash;\n/**\n*/\nclass TransactionInput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactioninput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactioninput_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionInput}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninput_from_bytes(ptr0, len0);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionHash}\n    */\n    transaction_id() {\n        var ret = wasm.transactioninput_transaction_id(this.ptr);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    index() {\n        var ret = wasm.transactioninput_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {TransactionHash} transaction_id\n    * @param {number} index\n    * @returns {TransactionInput}\n    */\n    static new(transaction_id, index) {\n        _assertClass(transaction_id, TransactionHash);\n        var ret = wasm.transactioninput_new(transaction_id.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n}\nmodule.exports.TransactionInput = TransactionInput;\n/**\n*/\nclass TransactionInputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactioninputs_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactioninputs_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionInputs}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninputs_from_bytes(ptr0, len0);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    static new() {\n        var ret = wasm.transactioninputs_new();\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.transactioninputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionInput}\n    */\n    get(index) {\n        var ret = wasm.transactioninputs_get(this.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInput} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionInput);\n        wasm.transactioninputs_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.TransactionInputs = TransactionInputs;\n/**\n*/\nclass TransactionMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactionmetadata_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadata}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadata_from_bytes(ptr0, len0);\n        return TransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {GeneralTransactionMetadata}\n    */\n    general() {\n        var ret = wasm.transactionmetadata_general(this.ptr);\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {NativeScripts | undefined}\n    */\n    native_scripts() {\n        var ret = wasm.transactionmetadata_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.transactionmetadata_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n    * @param {GeneralTransactionMetadata} general\n    * @returns {TransactionMetadata}\n    */\n    static new(general) {\n        _assertClass(general, GeneralTransactionMetadata);\n        var ret = wasm.transactionmetadata_new(general.ptr);\n        return TransactionMetadata.__wrap(ret);\n    }\n}\nmodule.exports.TransactionMetadata = TransactionMetadata;\n/**\n*/\nclass TransactionMetadatum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionmetadatum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactionmetadatum_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatum}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_from_bytes(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {MetadataMap} map\n    * @returns {TransactionMetadatum}\n    */\n    static new_map(map) {\n        _assertClass(map, MetadataMap);\n        var ret = wasm.transactionmetadatum_new_map(map.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {MetadataList} list\n    * @returns {TransactionMetadatum}\n    */\n    static new_list(list) {\n        _assertClass(list, MetadataList);\n        var ret = wasm.transactionmetadatum_new_list(list.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {TransactionMetadatum}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.transactionmetadatum_new_int(int.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatum}\n    */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_new_bytes(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {TransactionMetadatum}\n    */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_new_text(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        var ret = wasm.transactionmetadatum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {MetadataMap}\n    */\n    as_map() {\n        var ret = wasm.transactionmetadatum_as_map(this.ptr);\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    as_list() {\n        var ret = wasm.transactionmetadatum_as_list(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {Int}\n    */\n    as_int() {\n        var ret = wasm.transactionmetadatum_as_int(this.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        wasm.transactionmetadatum_as_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @returns {string}\n    */\n    as_text() {\n        try {\n            wasm.transactionmetadatum_as_text(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nmodule.exports.TransactionMetadatum = TransactionMetadatum;\n/**\n*/\nclass TransactionMetadatumLabels {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatumLabels.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionmetadatumlabels_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactionmetadatumlabels_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatumLabels}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatumlabels_from_bytes(ptr0, len0);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionMetadatumLabels}\n    */\n    static new() {\n        var ret = wasm.transactionmetadatumlabels_new();\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.transactionmetadatumlabels_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BigNum}\n    */\n    get(index) {\n        var ret = wasm.transactionmetadatumlabels_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} elem\n    */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        wasm.transactionmetadatumlabels_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.TransactionMetadatumLabels = TransactionMetadatumLabels;\n/**\n*/\nclass TransactionOutput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionoutput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactionoutput_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionOutput}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutput_from_bytes(ptr0, len0);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    address() {\n        var ret = wasm.transactionoutput_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {Value}\n    */\n    amount() {\n        var ret = wasm.transactionoutput_amount(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {Address} address\n    * @param {Value} amount\n    * @returns {TransactionOutput}\n    */\n    static new(address, amount) {\n        _assertClass(address, Address);\n        _assertClass(amount, Value);\n        var ret = wasm.transactionoutput_new(address.ptr, amount.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n}\nmodule.exports.TransactionOutput = TransactionOutput;\n/**\n*/\nclass TransactionOutputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionoutputs_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactionoutputs_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionOutputs}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutputs_from_bytes(ptr0, len0);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n    static new() {\n        var ret = wasm.transactionoutputs_new();\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.transactionoutputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionOutput}\n    */\n    get(index) {\n        var ret = wasm.transactionoutputs_get(this.ptr, index);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionOutput} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionOutput);\n        wasm.transactionoutputs_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.TransactionOutputs = TransactionOutputs;\n/**\n*/\nclass TransactionWitnessSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionwitnessset_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactionwitnessset_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionWitnessSet}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnessset_from_bytes(ptr0, len0);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @param {Vkeywitnesses} vkeys\n    */\n    set_vkeys(vkeys) {\n        _assertClass(vkeys, Vkeywitnesses);\n        wasm.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n    }\n    /**\n    * @returns {Vkeywitnesses | undefined}\n    */\n    vkeys() {\n        var ret = wasm.transactionwitnessset_vkeys(this.ptr);\n        return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} scripts\n    */\n    set_scripts(scripts) {\n        _assertClass(scripts, NativeScripts);\n        wasm.transactionwitnessset_set_scripts(this.ptr, scripts.ptr);\n    }\n    /**\n    * @returns {NativeScripts | undefined}\n    */\n    scripts() {\n        var ret = wasm.transactionwitnessset_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {BootstrapWitnesses} bootstraps\n    */\n    set_bootstraps(bootstraps) {\n        _assertClass(bootstraps, BootstrapWitnesses);\n        wasm.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n    }\n    /**\n    * @returns {BootstrapWitnesses | undefined}\n    */\n    bootstraps() {\n        var ret = wasm.transactionwitnessset_bootstraps(this.ptr);\n        return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n    static new() {\n        var ret = wasm.transactionwitnessset_new();\n        return TransactionWitnessSet.__wrap(ret);\n    }\n}\nmodule.exports.TransactionWitnessSet = TransactionWitnessSet;\n/**\n*/\nclass TransactionWitnessSets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionwitnesssets_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.transactionwitnesssets_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionWitnessSets}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnesssets_from_bytes(ptr0, len0);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSets}\n    */\n    static new() {\n        var ret = wasm.transactionwitnesssets_new();\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.transactionwitnesssets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionWitnessSet}\n    */\n    get(index) {\n        var ret = wasm.transactionwitnesssets_get(this.ptr, index);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @param {TransactionWitnessSet} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionWitnessSet);\n        wasm.transactionwitnesssets_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.TransactionWitnessSets = TransactionWitnessSets;\n/**\n*/\nclass URL {\n\n    static __wrap(ptr) {\n        const obj = Object.create(URL.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_url_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.url_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {URL}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.url_from_bytes(ptr0, len0);\n        return URL.__wrap(ret);\n    }\n    /**\n    * @param {string} url\n    * @returns {URL}\n    */\n    static new(url) {\n        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.url_new(ptr0, len0);\n        return URL.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    url() {\n        try {\n            wasm.url_url(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nmodule.exports.URL = URL;\n/**\n*/\nclass UnitInterval {\n\n    static __wrap(ptr) {\n        const obj = Object.create(UnitInterval.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_unitinterval_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.unitinterval_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {UnitInterval}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.unitinterval_from_bytes(ptr0, len0);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    numerator() {\n        var ret = wasm.unitinterval_numerator(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    denominator() {\n        var ret = wasm.unitinterval_denominator(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} numerator\n    * @param {BigNum} denominator\n    * @returns {UnitInterval}\n    */\n    static new(numerator, denominator) {\n        _assertClass(numerator, BigNum);\n        _assertClass(denominator, BigNum);\n        var ret = wasm.unitinterval_new(numerator.ptr, denominator.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n}\nmodule.exports.UnitInterval = UnitInterval;\n/**\n*/\nclass Update {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Update.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_update_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.update_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Update}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.update_from_bytes(ptr0, len0);\n        return Update.__wrap(ret);\n    }\n    /**\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    proposed_protocol_parameter_updates() {\n        var ret = wasm.update_proposed_protocol_parameter_updates(this.ptr);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    epoch() {\n        var ret = wasm.update_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n    * @param {number} epoch\n    * @returns {Update}\n    */\n    static new(proposed_protocol_parameter_updates, epoch) {\n        _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n        var ret = wasm.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n        return Update.__wrap(ret);\n    }\n}\nmodule.exports.Update = Update;\n/**\n*/\nclass VRFCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_vrfcert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.vrfcert_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFCert}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfcert_from_bytes(ptr0, len0);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    output() {\n        wasm.vrfcert_output(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    proof() {\n        wasm.vrfcert_proof(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} output\n    * @param {Uint8Array} proof\n    * @returns {VRFCert}\n    */\n    static new(output, proof) {\n        var ptr0 = passArray8ToWasm0(output, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfcert_new(ptr0, len0, ptr1, len1);\n        return VRFCert.__wrap(ret);\n    }\n}\nmodule.exports.VRFCert = VRFCert;\n/**\n*/\nclass VRFKeyHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFKeyHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_vrfkeyhash_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.vrfkeyhash_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.vrfkeyhash_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {VRFKeyHash}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfkeyhash_from_bech32(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFKeyHash}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfkeyhash_from_bytes(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n}\nmodule.exports.VRFKeyHash = VRFKeyHash;\n/**\n*/\nclass VRFVKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFVKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_vrfvkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.vrfvkey_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.vrfvkey_to_bech32(8, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {VRFVKey}\n    */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfvkey_from_bech32(ptr0, len0);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFVKey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfvkey_from_bytes(ptr0, len0);\n        return VRFVKey.__wrap(ret);\n    }\n}\nmodule.exports.VRFVKey = VRFVKey;\n/**\n*/\nclass Value {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Value.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_value_free(ptr);\n    }\n    /**\n    * @param {BigNum} coin\n    * @returns {Value}\n    */\n    static new(coin) {\n        _assertClass(coin, BigNum);\n        var ret = wasm.value_new(coin.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    coin() {\n        var ret = wasm.value_coin(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    */\n    set_coin(coin) {\n        _assertClass(coin, BigNum);\n        wasm.value_set_coin(this.ptr, coin.ptr);\n    }\n    /**\n    * @returns {MultiAsset | undefined}\n    */\n    multiasset() {\n        var ret = wasm.value_multiasset(this.ptr);\n        return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n    }\n    /**\n    * @param {MultiAsset} multiasset\n    */\n    set_multiasset(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        wasm.value_set_multiasset(this.ptr, multiasset.ptr);\n    }\n    /**\n    * @param {Value} rhs\n    * @returns {Value}\n    */\n    checked_add(rhs) {\n        _assertClass(rhs, Value);\n        var ret = wasm.value_checked_add(this.ptr, rhs.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {Value} rhs_value\n    * @returns {Value}\n    */\n    checked_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_checked_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {Value} rhs_value\n    * @returns {Value}\n    */\n    clamped_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_clamped_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * note: values are only partially comparable\n    * @param {Value} rhs_value\n    * @returns {number | undefined}\n    */\n    compare(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_compare(this.ptr, rhs_value.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\nmodule.exports.Value = Value;\n/**\n*/\nclass Vkey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_vkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.vkey_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkey}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vkey_from_bytes(ptr0, len0);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @param {PublicKey} pk\n    * @returns {Vkey}\n    */\n    static new(pk) {\n        _assertClass(pk, PublicKey);\n        var ret = wasm.vkey_new(pk.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    public_key() {\n        var ret = wasm.vkey_public_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n}\nmodule.exports.Vkey = Vkey;\n/**\n*/\nclass Vkeywitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_vkeywitness_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.vkeywitness_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkeywitness}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vkeywitness_from_bytes(ptr0, len0);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @param {Vkey} vkey\n    * @param {Ed25519Signature} signature\n    * @returns {Vkeywitness}\n    */\n    static new(vkey, signature) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        var ret = wasm.vkeywitness_new(vkey.ptr, signature.ptr);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    vkey() {\n        var ret = wasm.vkeywitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    signature() {\n        var ret = wasm.vkeywitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\nmodule.exports.Vkeywitness = Vkeywitness;\n/**\n*/\nclass Vkeywitnesses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitnesses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_vkeywitnesses_free(ptr);\n    }\n    /**\n    * @returns {Vkeywitnesses}\n    */\n    static new() {\n        var ret = wasm.vkeywitnesses_new();\n        return Vkeywitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.vkeywitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Vkeywitness}\n    */\n    get(index) {\n        var ret = wasm.vkeywitnesses_get(this.ptr, index);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @param {Vkeywitness} elem\n    */\n    add(elem) {\n        _assertClass(elem, Vkeywitness);\n        wasm.vkeywitnesses_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.Vkeywitnesses = Vkeywitnesses;\n/**\n*/\nclass Withdrawals {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Withdrawals.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_withdrawals_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        wasm.withdrawals_to_bytes(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Withdrawals}\n    */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.withdrawals_from_bytes(ptr0, len0);\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n    * @returns {Withdrawals}\n    */\n    static new() {\n        var ret = wasm.withdrawals_new();\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        var ret = wasm.withdrawals_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {RewardAddress} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, RewardAddress);\n        _assertClass(value, BigNum);\n        var ret = wasm.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {RewardAddress} key\n    * @returns {BigNum | undefined}\n    */\n    get(key) {\n        _assertClass(key, RewardAddress);\n        var ret = wasm.withdrawals_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddresses}\n    */\n    keys() {\n        var ret = wasm.withdrawals_keys(this.ptr);\n        return RewardAddresses.__wrap(ret);\n    }\n}\nmodule.exports.Withdrawals = Withdrawals;\n\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nmodule.exports.__wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_3a746f2619705add = function(arg0, arg1) {\n    var ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_call_f54d3a6dadb199ca = function(arg0, arg1) {\n    var ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_jsval_eq = function(arg0, arg1) {\n    var ret = getObject(arg0) === getObject(arg1);\n    return ret;\n};\n\nmodule.exports.__wbg_self_ac379e780a0d8b94 = function(arg0) {\n    var ret = getObject(arg0).self;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_crypto_1e4302b85d4f64a2 = function(arg0) {\n    var ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_undefined = function(arg0) {\n    var ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nmodule.exports.__wbg_getRandomValues_1b4ba144162a5c9e = function(arg0) {\n    var ret = getObject(arg0).getRandomValues;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_require_6461b1e9a0d7c34a = function(arg0, arg1) {\n    var ret = require(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_getRandomValues_1ef11e888e5228e9 = function(arg0, arg1, arg2) {\n    getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n};\n\nmodule.exports.__wbg_randomFillSync_1b52c8482374c55b = function(arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n};\n\nmodule.exports.__wbindgen_string_get = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    var ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_debug_string = function(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nmodule.exports.__wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\nconst path = require('path').join(__dirname, 'cardano_serialization_lib_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}