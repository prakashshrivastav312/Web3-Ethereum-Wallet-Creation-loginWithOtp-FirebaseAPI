{"ast":null,"code":"\"use strict\";\n/**\n # @harmony-js/crypto\n\nThis package provides a collection of apis related to address management, kestore, encoding, and encrypt/decrypt.\n\n## Installation\n\n```\nnpm install @harmony-js/crypto\n```\n\n## Usage\n\n```javascript\n* const {\n*   encode,\n*   decode,\n*   randomBytes,\n*   toBech32,\n*   fromBech32,\n*   HarmonyAddress,\n*   generatePrivateKey,\n*   getPubkeyFromPrivateKey,\n*   getAddressFromPublicKey,\n*   getAddressFromPrivateKey,\n*   encryptPhrase,\n*   decryptPhrase\n* } = require('@harmony-js/crypto');\n* const { isPrivateKey, isAddress, isPublicKey } = require('@harmony-js/utils');\n```\n\nAddress apis\n```javascript\nconst bytes = randomBytes(20);\nconst addr = new HarmonyAddress(bytes);\n\nconsole.log(addr.checksum);\nconsole.log(addr.bech32);\n\nconsole.log(HarmonyAddress.isValidBech32(addr.bech32));\n```\n\nRLP apis\n```javascript\nconst encoded = '0x89010101010101010101';\nconst decoded = '0x010101010101010101';\nconsole.log(encode(decoded));\nconsole.log(decode(encoded));\n```\n\nKeystore apis\n```javascript\nconst prv = generatePrivateKey();\nconst pub = getPubkeyFromPrivateKey(prv);\nconst addr = getAddressFromPublicKey(pub);\nconst addrPrv = getAddressFromPrivateKey(prv);\nconsole.log(isPrivateKey(prv));\nconsole.log(isPublicKey(pub));\nconsole.log(isAddress(addr));\nconsole.log(isAddress(addrPrv));\n```\n\nEncrypt/decrypt apis\n```javascript\n* const { Wallet } = require('@harmony-js/account');\n\n* const myPhrase = new Wallet().newMnemonic();\n* console.log(myPhrase);\n* const pwd = '1234';\n* encryptPhrase(myPhrase, pwd).then((value) => {\n*   console.log(value);\n*   decryptPhrase(JSON.parse(value), pwd).then(value => {\n*     console.log(value);\n*   });\n* });\n```\n *\n * @packageDocumentation\n * @module harmony-crypto\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.info = exports.warn = exports.setLogLevel = exports.checkNormalize = exports.setCensorship = exports.checkArgumentCount = exports.checkNew = exports.throwError = exports.UNSUPPORTED_OPERATION = exports.REPLACEMENT_UNDERPRICED = exports.NONCE_EXPIRED = exports.INSUFFICIENT_FUNDS = exports.NUMERIC_FAULT = exports.UNEXPECTED_ARGUMENT = exports.MISSING_ARGUMENT = exports.INVALID_ARGUMENT = exports.CALL_EXCEPTION = exports.MISSING_NEW = exports.NOT_IMPLEMENTED = exports.UNKNOWN_ERROR = void 0; // This file is ported from ether.js/src.ts/errors.ts\n// Unknown Error\n\n/** @hidden */\n\nexports.UNKNOWN_ERROR = 'UNKNOWN_ERROR'; // Not implemented\n\n/** @hidden */\n\nexports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED'; // Missing new operator to an object\n//  - name: The name of the class\n\n/** @hidden */\n\nexports.MISSING_NEW = 'MISSING_NEW'; // Call exception\n//  - transaction: the transaction\n//  - address?: the contract address\n//  - args?: The arguments passed into the function\n//  - method?: The Solidity method signature\n//  - errorSignature?: The EIP848 error signature\n//  - errorArgs?: The EIP848 error parameters\n//  - reason: The reason (only for EIP848 \"Error(string)\")\n\n/** @hidden */\n\nexports.CALL_EXCEPTION = 'CALL_EXCEPTION'; // Invalid argument (e.g. value is incompatible with type) to a function:\n//   - argument: The argument name that was invalid\n//   - value: The value of the argument\n\n/** @hidden */\n\nexports.INVALID_ARGUMENT = 'INVALID_ARGUMENT'; // Missing argument to a function:\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n\n/** @hidden */\n\nexports.MISSING_ARGUMENT = 'MISSING_ARGUMENT'; // Too many arguments\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n\n/** @hidden */\n\nexports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT'; // Numeric Fault\n//   - operation: the operation being executed\n//   - fault: the reason this faulted\n\n/** @hidden */\n\nexports.NUMERIC_FAULT = 'NUMERIC_FAULT'; // Insufficien funds (< value + gasLimit * gasPrice)\n//   - transaction: the transaction attempted\n\n/** @hidden */\n\nexports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS'; // Nonce has already been used\n//   - transaction: the transaction attempted\n\n/** @hidden */\n\nexports.NONCE_EXPIRED = 'NONCE_EXPIRED'; // The replacement fee for the transaction is too low\n//   - transaction: the transaction attempted\n\n/** @hidden */\n\nexports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED'; // Unsupported operation\n//   - operation\n\n/** @hidden */\n\nexports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION'; // tslint:disable-next-line: variable-name\n\n/** @hidden */\n\nvar _permanentCensorErrors = false; // tslint:disable-next-line: variable-name\n\n/** @hidden */\n\nvar _censorErrors = false; // @TODO: Enum\n\n/** @hidden */\n\nfunction throwError(message, code, params) {\n  if (_censorErrors) {\n    throw new Error('unknown error');\n  }\n\n  if (!code) {\n    code = exports.UNKNOWN_ERROR;\n  }\n\n  if (!params) {\n    params = {};\n  }\n\n  var messageDetails = [];\n  Object.keys(params).forEach(function (key) {\n    try {\n      messageDetails.push(key + '=' + JSON.stringify(params[key]));\n    } catch (error) {\n      messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n    }\n  });\n  messageDetails.push('version=' + '#version');\n  var reason = message;\n\n  if (messageDetails.length) {\n    message += ' (' + messageDetails.join(', ') + ')';\n  } // @TODO: Any??\n\n\n  var error = new Error(message);\n  error.reason = reason;\n  error.code = code;\n  Object.keys(params).forEach(function (key) {\n    error[key] = params[key];\n  });\n  throw error;\n}\n\nexports.throwError = throwError;\n/** @hidden */\n\nfunction checkNew(self, kind) {\n  if (!(self instanceof kind)) {\n    throwError('missing new', exports.MISSING_NEW, {\n      name: kind.name\n    });\n  }\n}\n\nexports.checkNew = checkNew;\n/** @hidden */\n\nfunction checkArgumentCount(count, expectedCount, suffix) {\n  if (!suffix) {\n    suffix = '';\n  }\n\n  if (count < expectedCount) {\n    throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, {\n      count: count,\n      expectedCount: expectedCount\n    });\n  }\n\n  if (count > expectedCount) {\n    throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, {\n      count: count,\n      expectedCount: expectedCount\n    });\n  }\n}\n\nexports.checkArgumentCount = checkArgumentCount;\n/** @hidden */\n\nfunction setCensorship(censorship, permanent) {\n  if (_permanentCensorErrors) {\n    throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, {\n      operation: 'setCensorship'\n    });\n  }\n\n  _censorErrors = !!censorship;\n  _permanentCensorErrors = !!permanent;\n}\n\nexports.setCensorship = setCensorship;\n/** @hidden */\n\nfunction checkNormalize() {\n  try {\n    // Make sure all forms of normalization are supported\n    ['NFD', 'NFC', 'NFKD', 'NFKC'].forEach(function (form) {\n      try {\n        'test'.normalize(form);\n      } catch (error) {\n        throw new Error('missing ' + form);\n      }\n    });\n\n    if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error('broken implementation');\n    }\n  } catch (error) {\n    throwError('platform missing String.prototype.normalize', exports.UNSUPPORTED_OPERATION, {\n      operation: 'String.prototype.normalize',\n      form: error.message\n    });\n  }\n}\n\nexports.checkNormalize = checkNormalize;\n/** @hidden */\n\nvar LogLevels = {\n  debug: 1,\n  default: 2,\n  info: 2,\n  warn: 3,\n  error: 4,\n  off: 5\n};\n/** @hidden */\n\nvar LogLevel = LogLevels.default;\n/** @hidden */\n\nfunction setLogLevel(logLevel) {\n  var level = LogLevels[logLevel];\n\n  if (level == null) {\n    warn('invliad log level - ' + logLevel);\n    return;\n  }\n\n  LogLevel = level;\n}\n\nexports.setLogLevel = setLogLevel;\n/** @hidden */\n\nfunction log(logLevel, args) {\n  if (LogLevel > LogLevels[logLevel]) {\n    return;\n  }\n\n  console.log.apply(console, args);\n}\n/** @hidden */\n\n\nfunction warn() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  log('warn', args);\n}\n\nexports.warn = warn;\n/** @hidden */\n\nfunction info() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  log('info', args);\n}\n\nexports.info = info;","map":{"version":3,"mappings":"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","names":["exports","_permanentCensorErrors","_censorErrors","throwError","message","code","params","Error","messageDetails","Object","keys","forEach","key","push","JSON","stringify","error","toString","reason","length","join","checkNew","self","kind","name","checkArgumentCount","count","expectedCount","suffix","setCensorship","censorship","permanent","operation","checkNormalize","form","normalize","String","fromCharCode","LogLevels","debug","default","info","warn","off","LogLevel","setLogLevel","logLevel","level","log","args","console","apply"],"sourceRoot":"","sources":["../src/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}