{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.helperPrepareSCCall = exports.helperGetWeb3Client = exports.helperBroadcastTx = void 0;\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst marketplace_1 = require(\"../contracts/marketplace\");\n\nconst model_1 = require(\"../model\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst helperBroadcastTx = async (chain, txData, signatureId) => {\n  switch (chain) {\n    case model_1.Currency.CELO:\n      return await blockchain_1.celoBroadcast(txData, signatureId);\n\n    case model_1.Currency.ONE:\n      return await blockchain_1.oneBroadcast(txData, signatureId);\n\n    case model_1.Currency.ETH:\n      return await blockchain_1.ethBroadcast(txData, signatureId);\n\n    case model_1.Currency.BSC:\n      return await blockchain_1.bscBroadcast(txData, signatureId);\n\n    case model_1.Currency.MATIC:\n      return await blockchain_1.polygonBroadcast(txData, signatureId);\n\n    case model_1.Currency.KLAY:\n      return await blockchain_1.klaytnBroadcast(txData, signatureId);\n\n    case model_1.Currency.TRON:\n      return await blockchain_1.tronBroadcast(txData, signatureId);\n\n    default:\n      throw new Error('Unsupported chain');\n  }\n};\n\nexports.helperBroadcastTx = helperBroadcastTx;\n\nconst helperGetWeb3Client = (testnet, chain, provider) => {\n  switch (chain) {\n    case model_1.Currency.CELO:\n      return transaction_1.getCeloClient(provider);\n\n    case model_1.Currency.ONE:\n      return transaction_1.prepareOneClient(testnet, provider);\n\n    case model_1.Currency.XDC:\n      return transaction_1.getXdcClient(provider);\n\n    case model_1.Currency.ETH:\n      return transaction_1.getClient(provider);\n\n    case model_1.Currency.BSC:\n      return transaction_1.getBscClient(provider);\n\n    case model_1.Currency.MATIC:\n      return transaction_1.preparePolygonClient(testnet, provider);\n\n    case model_1.Currency.KLAY:\n      return transaction_1.prepareKlaytnClient(testnet, provider);\n\n    default:\n      throw new Error('Unsupported chain');\n  }\n};\n\nexports.helperGetWeb3Client = helperGetWeb3Client; // eslint-disable-next-line @typescript-eslint/ban-types\n\nconst helperPrepareSCCall = async function (testnet, body, clazz, methodName, params, methodSig, provider) {\n  let abi = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : marketplace_1.listing.abi;\n  let r;\n\n  if (body.chain === model_1.Currency.CELO) {\n    r = new model_1.CeloSmartContractMethodInvocation();\n  } else {\n    r = new model_1.SmartContractMethodInvocation();\n  }\n\n  r.fee = body.fee;\n  r.nonce = body.nonce;\n  r.fromPrivateKey = body.fromPrivateKey;\n  r.signatureId = body.signatureId;\n  r.index = body.index;\n  r.amount = body.amount;\n  r.contractAddress = body.contractAddress;\n  r.methodName = methodName;\n  r.params = params;\n  r.methodABI = abi.find(a => a.name === r.methodName);\n\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      return await transaction_1.prepareCeloSmartContractWriteMethodInvocation(testnet, Object.assign(Object.assign({}, r), {\n        feeCurrency: body.feeCurrency || model_1.Currency.CELO\n      }), provider);\n\n    case model_1.Currency.ONE:\n      return await transaction_1.prepareOneSmartContractWriteMethodInvocation(testnet, r, provider);\n\n    case model_1.Currency.XDC:\n      return await transaction_1.prepareXdcSmartContractWriteMethodInvocation(r, provider);\n\n    case model_1.Currency.ETH:\n      return await transaction_1.prepareSmartContractWriteMethodInvocation(r, provider);\n\n    case model_1.Currency.BSC:\n      return await transaction_1.prepareBscSmartContractWriteMethodInvocation(r, provider);\n\n    case model_1.Currency.MATIC:\n      return await transaction_1.preparePolygonSmartContractWriteMethodInvocation(testnet, r, provider);\n\n    case model_1.Currency.KLAY:\n      return await transaction_1.prepareKlaytnSmartContractWriteMethodInvocation(testnet, r, provider);\n\n    case model_1.Currency.TRON:\n      r.methodName = methodSig;\n      return await transaction_1.prepareTronSmartContractInvocation(testnet, r, body.feeLimit, body.from, provider);\n\n    default:\n      throw new Error('Unsupported combination of inputs.');\n  }\n};\n\nexports.helperPrepareSCCall = helperPrepareSCCall;","map":{"version":3,"mappings":"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","names":["helperBroadcastTx","chain","txData","signatureId","model_1","CELO","blockchain_1","ONE","ETH","BSC","MATIC","KLAY","TRON","Error","exports","helperGetWeb3Client","testnet","provider","transaction_1","XDC","helperPrepareSCCall","body","clazz","methodName","params","methodSig","abi","marketplace_1","r","fee","nonce","fromPrivateKey","index","amount","contractAddress","methodABI","find","a","name","Object","feeCurrency","feeLimit","from"],"sourceRoot":"","sources":["../../../src/helpers/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}