{"ast":null,"code":"/*\n    Copyright 2022 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst FeeDelegatedValueTransfer = require('../valueTransfer/feeDelegatedValueTransfer');\n/**\n * Represents a fee delegated value transfer transaction wrapper.\n * @class\n * @hideconstructor\n */\n\n\nclass FeeDelegatedValueTransferWrapper {\n  /**\n   * Creates a fee delegated value transfer transaction wrapper.\n   * The wrapper plays an intermediate role for calling static functions of each transaction type in `caver.transaction`.\n   * @constructor\n   * @param {object} _klaytnCall - An object includes klay rpc calls.\n   */\n  constructor(klaytnCall) {\n    this.klaytnCall = klaytnCall;\n  }\n  /**\n   * Calls `FeeDelegatedValueTransfer.create`.\n   *\n   * @param {object} obj - An object defines fields to create a tx.\n   * @return {string} An RLP-encoded transaction string.\n   */\n\n\n  create(obj) {\n    return FeeDelegatedValueTransfer.create(obj, this.klaytnCall);\n  }\n  /**\n   * Calls `FeeDelegatedValueTransferMemo.decode`.\n   *\n   * @param {string} encoded - RLP-encoded string.\n   * @return {string} FeeDelegatedValueTransferMemo instance.\n   */\n\n\n  decode(encoded) {\n    return FeeDelegatedValueTransfer.decode(encoded, this.klaytnCall);\n  }\n\n}\n\nmodule.exports = FeeDelegatedValueTransferWrapper;","map":{"version":3,"names":["FeeDelegatedValueTransfer","require","FeeDelegatedValueTransferWrapper","constructor","klaytnCall","create","obj","decode","encoded","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/wrappers/feeDelegatedValueTransferWrapper.js"],"sourcesContent":["/*\n    Copyright 2022 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst FeeDelegatedValueTransfer = require('../valueTransfer/feeDelegatedValueTransfer')\n\n/**\n * Represents a fee delegated value transfer transaction wrapper.\n * @class\n * @hideconstructor\n */\nclass FeeDelegatedValueTransferWrapper {\n    /**\n     * Creates a fee delegated value transfer transaction wrapper.\n     * The wrapper plays an intermediate role for calling static functions of each transaction type in `caver.transaction`.\n     * @constructor\n     * @param {object} _klaytnCall - An object includes klay rpc calls.\n     */\n    constructor(klaytnCall) {\n        this.klaytnCall = klaytnCall\n    }\n\n    /**\n     * Calls `FeeDelegatedValueTransfer.create`.\n     *\n     * @param {object} obj - An object defines fields to create a tx.\n     * @return {string} An RLP-encoded transaction string.\n     */\n    create(obj) {\n        return FeeDelegatedValueTransfer.create(obj, this.klaytnCall)\n    }\n\n    /**\n     * Calls `FeeDelegatedValueTransferMemo.decode`.\n     *\n     * @param {string} encoded - RLP-encoded string.\n     * @return {string} FeeDelegatedValueTransferMemo instance.\n     */\n    decode(encoded) {\n        return FeeDelegatedValueTransfer.decode(encoded, this.klaytnCall)\n    }\n}\n\nmodule.exports = FeeDelegatedValueTransferWrapper\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,yBAAyB,GAAGC,OAAO,CAAC,4CAAD,CAAzC;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,gCAAN,CAAuC;EACnC;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,UAAD,EAAa;IACpB,KAAKA,UAAL,GAAkBA,UAAlB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIC,MAAM,CAACC,GAAD,EAAM;IACR,OAAON,yBAAyB,CAACK,MAA1B,CAAiCC,GAAjC,EAAsC,KAAKF,UAA3C,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIG,MAAM,CAACC,OAAD,EAAU;IACZ,OAAOR,yBAAyB,CAACO,MAA1B,CAAiCC,OAAjC,EAA0C,KAAKJ,UAA/C,CAAP;EACH;;AA7BkC;;AAgCvCK,MAAM,CAACC,OAAP,GAAiBR,gCAAjB"},"metadata":{},"sourceType":"script"}