{"ast":null,"code":"'use strict';\n\nconst sha3 = require('js-sha3'); // @ts-ignore - no types available\n\n\nconst mur = require('murmurhash3js-revisited');\n\nconst {\n  factory: sha\n} = require('./sha');\n\nconst {\n  fromNumberTo32BitBuf\n} = require('./utils');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string'); // Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n\n/**\n * @param {string} algorithm\n * @returns {import('./types').Digest}\n */\n\n\nconst hash = algorithm => async data => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return new Uint8Array(sha3.sha3_224.arrayBuffer(data));\n\n    case 'sha3-256':\n      return new Uint8Array(sha3.sha3_256.arrayBuffer(data));\n\n    case 'sha3-384':\n      return new Uint8Array(sha3.sha3_384.arrayBuffer(data));\n\n    case 'sha3-512':\n      return new Uint8Array(sha3.sha3_512.arrayBuffer(data));\n\n    case 'shake-128':\n      return new Uint8Array(sha3.shake128.create(128).update(data).arrayBuffer());\n\n    case 'shake-256':\n      return new Uint8Array(sha3.shake256.create(256).update(data).arrayBuffer());\n\n    case 'keccak-224':\n      return new Uint8Array(sha3.keccak224.arrayBuffer(data));\n\n    case 'keccak-256':\n      return new Uint8Array(sha3.keccak256.arrayBuffer(data));\n\n    case 'keccak-384':\n      return new Uint8Array(sha3.keccak384.arrayBuffer(data));\n\n    case 'keccak-512':\n      return new Uint8Array(sha3.keccak512.arrayBuffer(data));\n\n    case 'murmur3-128':\n      return uint8ArrayFromString(mur.x64.hash128(data), 'base16');\n\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data));\n\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`);\n  }\n};\n/** @type {import('./types').Digest} */\n\n\nconst identity = data => data;\n\nmodule.exports = {\n  identity,\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n};","map":{"version":3,"names":["sha3","require","mur","factory","sha","fromNumberTo32BitBuf","fromString","uint8ArrayFromString","hash","algorithm","data","Uint8Array","sha3_224","arrayBuffer","sha3_256","sha3_384","sha3_512","shake128","create","update","shake256","keccak224","keccak256","keccak384","keccak512","x64","hash128","x86","hash32","TypeError","identity","module","exports","sha1","sha2256","sha2512","dblSha2256","sha3224","sha3256","sha3384","sha3512","murmur3128","murmur332","addBlake"],"sources":["C:/Users/acer/node_modules/multihashing-async/src/crypto.js"],"sourcesContent":["'use strict'\n\nconst sha3 = require('js-sha3')\n// @ts-ignore - no types available\nconst mur = require('murmurhash3js-revisited')\nconst { factory: sha } = require('./sha')\nconst { fromNumberTo32BitBuf } = require('./utils')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\n// eslint-disable-next-line\n/**\n * @param {string} algorithm\n * @returns {import('./types').Digest}\n */\nconst hash = (algorithm) => async (data) => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return new Uint8Array(sha3.sha3_224.arrayBuffer(data))\n    case 'sha3-256':\n      return new Uint8Array(sha3.sha3_256.arrayBuffer(data))\n    case 'sha3-384':\n      return new Uint8Array(sha3.sha3_384.arrayBuffer(data))\n    case 'sha3-512':\n      return new Uint8Array(sha3.sha3_512.arrayBuffer(data))\n    case 'shake-128':\n      return new Uint8Array(sha3.shake128.create(128).update(data).arrayBuffer())\n    case 'shake-256':\n      return new Uint8Array(sha3.shake256.create(256).update(data).arrayBuffer())\n    case 'keccak-224':\n      return new Uint8Array(sha3.keccak224.arrayBuffer(data))\n    case 'keccak-256':\n      return new Uint8Array(sha3.keccak256.arrayBuffer(data))\n    case 'keccak-384':\n      return new Uint8Array(sha3.keccak384.arrayBuffer(data))\n    case 'keccak-512':\n      return new Uint8Array(sha3.keccak512.arrayBuffer(data))\n    case 'murmur3-128':\n      return uint8ArrayFromString(mur.x64.hash128(data), 'base16')\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data))\n\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`)\n  }\n}\n\n/** @type {import('./types').Digest} */\nconst identity = data => data\n\nmodule.exports = {\n  identity,\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}