{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.btcGetTransaction = exports.btcGetTxForAccount = exports.btcGetUTXO = exports.btcGetBlockHash = exports.btcGetBlock = exports.btcGetBalance = exports.btcGetCurrentBlock = exports.btcBroadcast = void 0;\n\nconst tatum_1 = require(\"../connector/tatum\");\n/**\n * Broadcasts signed transaction to the Btc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BtcBroadcast\" target=\"_blank\">Tatum API documentation</a>\n */\n\n\nconst btcBroadcast = async (txData, signatureId) => tatum_1.post(`/v3/bitcoin/broadcast`, {\n  txData,\n  signatureId\n});\n\nexports.btcBroadcast = btcBroadcast;\n/**\n * Returns information about Btc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BtcGetBlockChainInfo\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst btcGetCurrentBlock = async () => tatum_1.get('/v3/bitcoin/info');\n\nexports.btcGetCurrentBlock = btcGetCurrentBlock;\n/**\n * Returns balance on address from Btc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BtcGetBalanceOfAddress\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst btcGetBalance = async address => tatum_1.get(`/v3/bitcoin/address/balance/${address}`);\n\nexports.btcGetBalance = btcGetBalance;\n/**\n * Returns block by its hash from Btc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BtcGetBlock\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst btcGetBlock = async hash => tatum_1.get(`/v3/bitcoin/block/${hash}`);\n\nexports.btcGetBlock = btcGetBlock;\n/**\n * Returns block hash by index from Btc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BtcGetBlockHash\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst btcGetBlockHash = async i => tatum_1.get(`/v3/bitcoin/block/hash/${i}`);\n\nexports.btcGetBlockHash = btcGetBlockHash;\n/**\n * Returns the UTXO of given transaction and output index from Btc blockchain. <br>\n *\n * UTXO means Unspent Transaction Output, which in blockchain terminology means assets that a user has received at a specific address and has not yet spent.\n * In bitcoin-like blockchains (BTC, LTC, DOGE, BCH), every transaction is built from a list of previously unspent transactions connected to the address.\n * If a user owns address A, and receives 10 BTC in transaction T1, they can spend a UTXO T1 with a total value of 10 BTC in the next transaction.\n * The user can spend multiple UTXOs from different addresses in one transaction.\n *\n * @param hash Transaction hash.\n * @param i Index of tx output to check if it has been spent or not.\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BtcGetUTXO\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst btcGetUTXO = async (hash, i) => tatum_1.get(`/v3/bitcoin/utxo/${hash}/${i}`);\n\nexports.btcGetUTXO = btcGetUTXO;\n/**\n * Returns transactions by address from Btc blockchain. <br>\n *\n * @param address For which address will be transactions returned.\n * @param pageSize How many transactions will be returned. Max number of transactions per page is 50.\n * @param offset Offset to obtain the next page of data.\n *\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BtcGetTxByAddress\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst btcGetTxForAccount = async function (address) {\n  let pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return tatum_1.get(`/v3/bitcoin/transaction/address/${address}?pageSize=${pageSize}&offset=${offset}`);\n};\n\nexports.btcGetTxForAccount = btcGetTxForAccount;\n/**\n * Returns transaction by hash from Btc blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BtcGetRawTransaction\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst btcGetTransaction = async hash => tatum_1.get(`/v3/bitcoin/transaction/${hash}`);\n\nexports.btcGetTransaction = btcGetTransaction;","map":{"version":3,"mappings":";;;;;;;AAAA;AAGA;;;;;;AAIO,MAAMA,YAAY,GAAG,OAAOC,MAAP,EAAuBC,WAAvB,KAC1BC,aAAK,uBAAL,EAA8B;EAAEF,MAAF;EAAUC;AAAV,CAA9B,CADK;;AAAME,uBAAYJ,YAAZ;AAGb;;;;;AAIO,MAAMK,kBAAkB,GAAG,YAA8BF,YAAI,kBAAJ,CAAzD;;AAAMC,6BAAkBC,kBAAlB;AAEb;;;;;AAIO,MAAMC,aAAa,GAAG,MAAOC,OAAP,IAA4EJ,YAAI,+BAA+BI,OAAO,EAA1C,CAAlG;;AAAMH,wBAAaE,aAAb;AAEb;;;;;AAIO,MAAME,WAAW,GAAG,MAAOC,IAAP,IAA2CN,YAAI,qBAAqBM,IAAI,EAA7B,CAA/D;;AAAML,sBAAWI,WAAX;AAEb;;;;;AAIO,MAAME,eAAe,GAAG,MAAOC,CAAP,IAAyCR,YAAI,0BAA0BQ,CAAC,EAA/B,CAAjE;;AAAMP,0BAAeM,eAAf;AAEb;;;;;;;;;;;;;AAYO,MAAME,UAAU,GAAG,OAAOH,IAAP,EAAqBE,CAArB,KAAqDR,YAAI,oBAAoBM,IAAI,IAAIE,CAAC,EAAjC,CAAxE;;AAAMP,qBAAUQ,UAAV;AAEb;;;;;;;;;;AASO,MAAMC,kBAAkB,GAAG,gBAAON,OAAP;EAAA,IAAwBO,QAAxB,uEAAmC,EAAnC;EAAA,IAAuCC,MAAvC,uEAAgD,CAAhD;EAAA,OAChCZ,YAAI,mCAAmCI,OAAO,aAAaO,QAAQ,WAAWC,MAAM,EAApF,CADgC;AAAA,CAA3B;;AAAMX,6BAAkBS,kBAAlB;AAGb;;;;;AAIO,MAAMG,iBAAiB,GAAG,MAAOP,IAAP,IAAwCN,YAAI,2BAA2BM,IAAI,EAAnC,CAAlE;;AAAML,4BAAiBY,iBAAjB","names":["btcBroadcast","txData","signatureId","tatum_1","exports","btcGetCurrentBlock","btcGetBalance","address","btcGetBlock","hash","btcGetBlockHash","i","btcGetUTXO","btcGetTxForAccount","pageSize","offset","btcGetTransaction"],"sourceRoot":"","sources":["../../../src/blockchain/bitcoin.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}