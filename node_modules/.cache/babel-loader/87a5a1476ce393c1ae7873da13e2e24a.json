{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar BigNumber = require('bignumber.js');\n/*\nThe quality, as stored in the last 64 bits of a directory index, is stored as\nthe quotient of TakerPays/TakerGets. It uses drops (1e-6 XRP) for XRP values.\n*/\n\n\nfunction adjustQualityForXRP(quality, takerGetsCurrency, takerPaysCurrency) {\n  var numeratorShift = takerPaysCurrency === 'XRP' ? -6 : 0;\n  var denominatorShift = takerGetsCurrency === 'XRP' ? -6 : 0;\n  var shift = numeratorShift - denominatorShift;\n  return shift === 0 ? new BigNumber(quality).toString() : new BigNumber(quality).shiftedBy(shift).toString();\n}\n\nfunction parseQuality(qualityHex, takerGetsCurrency, takerPaysCurrency) {\n  assert(qualityHex.length === 16);\n  var mantissa = new BigNumber(qualityHex.substring(2), 16);\n  var offset = parseInt(qualityHex.substring(0, 2), 16) - 100;\n  var quality = mantissa.toString() + 'e' + offset.toString();\n  return adjustQualityForXRP(quality, takerGetsCurrency, takerPaysCurrency);\n}\n\nmodule.exports = parseQuality;","map":{"version":3,"names":["assert","require","BigNumber","adjustQualityForXRP","quality","takerGetsCurrency","takerPaysCurrency","numeratorShift","denominatorShift","shift","toString","shiftedBy","parseQuality","qualityHex","length","mantissa","substring","offset","parseInt","module","exports"],"sources":["C:/Users/acer/node_modules/ripple-lib-transactionparser/src/quality.js"],"sourcesContent":["'use strict'\nvar assert = require('assert')\nvar BigNumber = require('bignumber.js')\n\n/*\nThe quality, as stored in the last 64 bits of a directory index, is stored as\nthe quotient of TakerPays/TakerGets. It uses drops (1e-6 XRP) for XRP values.\n*/\n\nfunction adjustQualityForXRP(quality, takerGetsCurrency, takerPaysCurrency) {\n  var numeratorShift = (takerPaysCurrency === 'XRP' ? -6 : 0)\n  var denominatorShift = (takerGetsCurrency === 'XRP' ? -6 : 0)\n  var shift = numeratorShift - denominatorShift\n  return shift === 0 ? (new BigNumber(quality)).toString() :\n    (new BigNumber(quality)).shiftedBy(shift).toString()\n}\n\nfunction parseQuality(qualityHex, takerGetsCurrency, takerPaysCurrency) {\n  assert(qualityHex.length === 16)\n  var mantissa = new BigNumber(qualityHex.substring(2), 16)\n  var offset = parseInt(qualityHex.substring(0, 2), 16) - 100\n  var quality = mantissa.toString() + 'e' + offset.toString()\n  return adjustQualityForXRP(quality, takerGetsCurrency, takerPaysCurrency)\n}\n\nmodule.exports = parseQuality\n"],"mappings":"AAAA;;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AAEA,SAASE,mBAAT,CAA6BC,OAA7B,EAAsCC,iBAAtC,EAAyDC,iBAAzD,EAA4E;EAC1E,IAAIC,cAAc,GAAID,iBAAiB,KAAK,KAAtB,GAA8B,CAAC,CAA/B,GAAmC,CAAzD;EACA,IAAIE,gBAAgB,GAAIH,iBAAiB,KAAK,KAAtB,GAA8B,CAAC,CAA/B,GAAmC,CAA3D;EACA,IAAII,KAAK,GAAGF,cAAc,GAAGC,gBAA7B;EACA,OAAOC,KAAK,KAAK,CAAV,GAAe,IAAIP,SAAJ,CAAcE,OAAd,CAAD,CAAyBM,QAAzB,EAAd,GACJ,IAAIR,SAAJ,CAAcE,OAAd,CAAD,CAAyBO,SAAzB,CAAmCF,KAAnC,EAA0CC,QAA1C,EADF;AAED;;AAED,SAASE,YAAT,CAAsBC,UAAtB,EAAkCR,iBAAlC,EAAqDC,iBAArD,EAAwE;EACtEN,MAAM,CAACa,UAAU,CAACC,MAAX,KAAsB,EAAvB,CAAN;EACA,IAAIC,QAAQ,GAAG,IAAIb,SAAJ,CAAcW,UAAU,CAACG,SAAX,CAAqB,CAArB,CAAd,EAAuC,EAAvC,CAAf;EACA,IAAIC,MAAM,GAAGC,QAAQ,CAACL,UAAU,CAACG,SAAX,CAAqB,CAArB,EAAwB,CAAxB,CAAD,EAA6B,EAA7B,CAAR,GAA2C,GAAxD;EACA,IAAIZ,OAAO,GAAGW,QAAQ,CAACL,QAAT,KAAsB,GAAtB,GAA4BO,MAAM,CAACP,QAAP,EAA1C;EACA,OAAOP,mBAAmB,CAACC,OAAD,EAAUC,iBAAV,EAA6BC,iBAA7B,CAA1B;AACD;;AAEDa,MAAM,CAACC,OAAP,GAAiBR,YAAjB"},"metadata":{},"sourceType":"script"}