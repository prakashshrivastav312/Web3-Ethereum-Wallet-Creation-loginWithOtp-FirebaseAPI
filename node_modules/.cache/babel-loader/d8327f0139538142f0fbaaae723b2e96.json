{"ast":null,"code":"/*\n Modifications copyright 2018 The caver-js Authors\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n This file is derived from web3.js/packages/web3-utils/src/index.js (2019/06/12).\n Modified and improved for the caver-js development.\n */\n\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nconst _ = require('lodash');\n\nconst ethjsUnit = require('ethjs-unit');\n\nconst Account = require('eth-lib/lib/account');\n\nconst utils = require('./utils');\n\nconst soliditySha3 = require('./soliditySha3');\n\nconst randomHex = require('../randomhex');\n\nconst promiEvent = require('../promievent');\n\nconst Iban = require('../iban');\n\nconst SignatureData = require('../../caver-wallet/src/keyring/signatureData');\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @ignore\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\n\n\nconst _fireError = function (error, emitter, reject, callback) {\n  // add data if given\n  if (_.isObject(error) && !(error instanceof Error) && error.data) {\n    if (_.isObject(error.data) || _.isArray(error.data)) {\n      error.data = JSON.stringify(error.data, null, 2);\n    }\n\n    error = `${error.message}\\n${error.data}`;\n  }\n\n  if (_.isString(error)) {\n    error = new Error(error);\n  }\n\n  if (_.isFunction(callback)) {\n    callback(error);\n  }\n\n  if (_.isFunction(reject)) {\n    // suppress uncatched error if an error listener is present\n    // OR suppress uncatched error if an callback listener is present\n    if (emitter && _.isFunction(emitter.listeners) && emitter.listeners('error').length || _.isFunction(callback)) {\n      emitter.catch(function () {});\n    } // reject later, to be able to return emitter\n\n\n    setTimeout(function () {\n      reject(error);\n    }, 1);\n  }\n\n  if (emitter && _.isFunction(emitter.emit)) {\n    // emit later, to be able to return emitter\n    setTimeout(function () {\n      emitter.emit('error', error);\n      emitter.removeAllListeners();\n    }, 1);\n  }\n\n  return emitter;\n};\n/**\n * Should be used to create full function/event name from json abi\n *\n * @ignore\n * @param {Object} json\n * @return {String} full function/event name\n */\n\n\nconst _jsonInterfaceMethodToString = function (json) {\n  if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n    return json.name;\n  }\n\n  return `${json.name}(${_flattenTypes(false, json.inputs).join(',')})`;\n};\n/**\n * Returns the ASCII string representation of a given HEX value.\n *\n * @example\n * const result = caver.utils.hexToAscii('0x4920686176652031303021') // 'I have 100!'\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} hex A HEX string to convert to an ASCII string.\n * @returns {string} The ASCII string.\n */\n\n\nconst hexToAscii = function (hex) {\n  if (!utils.isHexStrict(hex)) {\n    throw new Error('The parameter must be a valid HEX string.');\n  }\n\n  let str = '';\n  let i = 0;\n  const l = hex.length;\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    const code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n\n  return str;\n};\n/**\n * Returns the HEX representation of a given ASCII string.\n *\n * @example\n * const result = caver.utils.asciiToHex('I have 100!') // '0x4920686176652031303021'\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} str An ASCII string to convert to a HEX string.\n * @returns {string} The HEX string.\n */\n\n\nconst asciiToHex = function (str) {\n  if (!str) {\n    return '0x00';\n  }\n\n  let hex = '';\n\n  for (let i = 0; i < str.length; i++) {\n    const code = str.charCodeAt(i);\n    const n = code.toString(16);\n    hex += n.length < 2 ? `0${n}` : n;\n  }\n\n  return `0x${hex}`;\n};\n/**\n * Returns value of unit in Wei\n *\n * @ignore\n * @param {string} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\n\n\nconst getUnitValue = function (unit) {\n  unit = unit ? unit.toLowerCase() : 'ether';\n\n  if (!ethjsUnit.unitMap[unit]) {\n    throw new Error(`This unit \"${unit}\" doesn't exist, please use the one of the following units${JSON.stringify(ethjsUnit.unitMap, null, 2)}`);\n  }\n\n  return unit;\n};\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @ignore\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\n\n\nconst fromWei = function (number, unit) {\n  unit = getUnitValue(unit);\n\n  if (!utils.isBN(number) && !_.isString(number)) {\n    throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n  }\n\n  return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);\n};\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @ignore\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\n\n\nconst toWei = function (number, unit) {\n  unit = getUnitValue(unit);\n\n  if (!utils.isBN(number) && !_.isString(number)) {\n    throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n  }\n\n  return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n}; // For Klay unit\n\n/**\n * Shows all possible KLAY values and their amount in peb.\n *\n * @example\n * caver.utils.unitMap\n *\n * @alias unitMap\n * @memberof module:utils\n * @inner\n *\n * @type {Map<string,string>}\n */\n\n\nconst unitKlayMap = {\n  peb: '1',\n  kpeb: '1000',\n  Mpeb: '1000000',\n  Gpeb: '1000000000',\n  Ston: '1000000000',\n  ston: '1000000000',\n  uKLAY: '1000000000000',\n  mKLAY: '1000000000000000',\n  KLAY: '1000000000000000000',\n  kKLAY: '1000000000000000000000',\n  MKLAY: '1000000000000000000000000',\n  GKLAY: '1000000000000000000000000000',\n  TKLAY: '1000000000000000000000000000000'\n};\n/**\n * @example\n * { unit: 'peb', pebFactor: 0 }\n *\n * @typedef {object} module:utils.Unit\n * @property {string} unit - The unit string.\n * @property {number} pebFactor - The peb factor.\n */\n\n/**\n * Shows all KLAY units.\n *\n * @example\n * caver.utils.klayUnit\n *\n * @alias klayUnit\n * @memberof module:utils\n * @inner\n *\n * @type {Map<string,module:utils.Unit>}\n */\n\nconst KlayUnit = {\n  peb: {\n    unit: 'peb',\n    pebFactor: 0\n  },\n  kpeb: {\n    unit: 'kpeb',\n    pebFactor: 3\n  },\n  Mpeb: {\n    unit: 'Mpeb',\n    pebFactor: 6\n  },\n  Gpeb: {\n    unit: 'Gpeb',\n    pebFactor: 9\n  },\n  ston: {\n    unit: 'ston',\n    pebFactor: 9\n  },\n  uKLAY: {\n    unit: 'uKLAY',\n    pebFactor: 12\n  },\n  mKLAY: {\n    unit: 'mKLAY',\n    pebFactor: 15\n  },\n  KLAY: {\n    unit: 'KLAY',\n    pebFactor: 18\n  },\n  kKLAY: {\n    unit: 'kKLAY',\n    pebFactor: 21\n  },\n  MKLAY: {\n    unit: 'MKLAY',\n    pebFactor: 24\n  },\n  GKLAY: {\n    unit: 'GKLAY',\n    pebFactor: 27\n  },\n  TKLAY: {\n    unit: 'TKLAY',\n    pebFactor: 30\n  }\n};\nconst unitKlayToEthMap = {\n  peb: 'wei',\n  kpeb: 'kwei',\n  Mpeb: 'mwei',\n  Gpeb: 'gwei',\n  Ston: 'gwei',\n  ston: 'gwei',\n  uKLAY: 'microether',\n  mKLAY: 'milliether',\n  KLAY: 'ether',\n  kKLAY: 'kether',\n  MKLAY: 'mether',\n  GKLAY: 'gether',\n  TKLAY: 'tether'\n};\n\nconst getKlayUnitValue = function (u) {\n  let unit = u || 'KLAY';\n  if (_.isObject(u) && u.unit) unit = u.unit;\n\n  if (!unitKlayMap[unit]) {\n    throw new Error(`This unit \"${unit}\" doesn't exist, please use the one of the following units${JSON.stringify(unitKlayMap, null, 2)}`);\n  }\n\n  if (u && u.pebFactor !== undefined && KlayUnit[u.unit].pebFactor !== u.pebFactor) {\n    throw new Error(`peb factor does not match with given unit`);\n  }\n\n  return unit;\n};\n\nconst fromPeb = function (number, unit) {\n  // kaly unit to eth unit\n  unit = getKlayUnitValue(unit);\n  unit = unitKlayToEthMap[unit];\n  unit = getUnitValue(unit);\n\n  if (!utils.isBN(number) && !_.isString(number)) {\n    number = tryNumberToString(number);\n  }\n\n  return ethjsUnit.fromWei(number, unit);\n};\n\nconst toPeb = function (number, unit) {\n  // kaly unit to eth unit\n  unit = getKlayUnitValue(unit);\n  unit = unitKlayToEthMap[unit];\n  unit = getUnitValue(unit); // BigNumber can support decimal points but BN does not support.\n  // So if BigNumber type number is came as a parameter,\n  // use `toString` function of BigNumber to prevent error while converting BigNumber to BN.\n\n  if (utils.isBigNumber(number)) number = number.toString();\n\n  if (!utils.isBN(number) && !_.isString(number)) {\n    number = tryNumberToString(number);\n  }\n\n  return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);\n};\n/**\n * Converts `peb` amount to specific unit amount.\n * Please note that \"peb\" is the smallest KLAY unit, and you should always use \"peb\" as the unit of KLAY.\n * Convert to \"KLAY\" only for display reasons.\n *\n * @example\n * const result = caver.utils.convertFromPeb('1', 'KLAY') // '0.000000000000000001'\n * const result = caver.utils.convertFromPeb(1, 'KLAY') // '0.000000000000000001'\n * const result = caver.utils.convertFromPeb(1, caver.utils.klayUnit.KLAY) // '0.000000000000000001'\n *\n * @memberof module:utils\n * @inner\n *\n * @param {number|string|BN|BigNumber} amount The value in peb.\n * @param {string|KlayUnit} [unitString] (default, `'KLAY'`) The unit of KLAY to convert your \"peb\" into. `number` will be divided by one of the following denominators for the unit provided:<br>- `peb`: '1' <br> - `kpeb`: '1000' <br> - `Mpeb`: '1000000' <br> - `Gpeb`: '1000000000' <br> - `Ston`: '1000000000' <br> - `uKLAY`: '1000000000000' <br> - `mKLAY`: '1000000000000000' <br> - `KLAY`: '1000000000000000000' <br> - `kKLAY`: '1000000000000000000000' <br> - `MKLAY`: '1000000000000000000000000' <br> - `GKLAY`: '1000000000000000000000000000' <br>\n * @return {string} The string number.\n */\n\n\nconst convertFromPeb = function (amount, unitString) {\n  const converted = fromPeb(amount, unitString);\n  return utils.isBN(converted) ? converted.toString(10) : converted;\n};\n/**\n * Converts any KLAY value into peb.\n * Please note that \"peb\" is the smallest KLAY unit, and you should always use \"peb\" as the unit of KLAY.\n *\n * @example\n * const result = caver.utils.convertToPeb('1', 'KLAY') // '1000000000000000000'\n * const result = caver.utils.convertToPeb(1, 'KLAY') // '1000000000000000000'\n * const result = caver.utils.convertToPeb(1, caver.utils.klayUnit.KLAY) // '1000000000000000000'\n *\n * @memberof module:utils\n * @inner\n *\n * @param {number|string|BN|BigNumber} amount the amount to convert\n * @param {string|KlayUnit} [unitString] (default, `'KLAY'`) The unit of KLAY to convert from. `number` will be divided by one of the following denominators for the unit provided:<br>- `peb`: '1' <br> - `kpeb`: '1000' <br> - `Mpeb`: '1000000' <br> - `Gpeb`: '1000000000' <br> - `Ston`: '1000000000' <br> - `uKLAY`: '1000000000000' <br> - `mKLAY`: '1000000000000000' <br> - `KLAY`: '1000000000000000000' <br> - `kKLAY`: '1000000000000000000000' <br> - `MKLAY`: '1000000000000000000000000' <br> - `GKLAY`: '1000000000000000000000000000' <br>\n * @return {string|BN}\n */\n\n\nconst convertToPeb = function (number, unitString) {\n  const converted = toPeb(number, unitString);\n  return utils.isBN(converted) ? converted.toString(10) : converted;\n};\n\nfunction tryNumberToString(number) {\n  try {\n    return utils.toBN(number).toString(10);\n  } catch (e) {\n    throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n  }\n}\n/**\n * Converts an upper or lowercase Klaytn address to a checksum address.\n *\n * @example\n * const result = caver.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d') // '0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d'\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} address An address string.\n * @return {string} The checksum address.\n */\n\n\nconst toChecksumAddress = function (address) {\n  if (typeof address === 'undefined') return '';\n\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    throw new Error(`Given address \"${address}\" is not a valid Klaytn address.`);\n  }\n\n  address = address.toLowerCase().replace(/^0x/i, '');\n  const addressHash = utils.sha3(address).replace(/^0x/i, '');\n  let checksumAddress = '0x';\n\n  for (let i = 0; i < address.length; i++) {\n    // If ith character is 9 to f then make it uppercase\n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += address[i].toUpperCase();\n    } else {\n      checksumAddress += address[i];\n    }\n  }\n\n  return checksumAddress;\n};\n\nconst isHexParameter = a => {\n  if (!_.isString(a) || !a.match(/^0x[0-9A-Fa-f]*$/)) return false;\n  return true;\n};\n/**\n * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings\n *\n * @ignore\n * @param {bool} includeTuple\n * @param {Object} puts\n * @return {Array} parameters as strings\n */\n\n\nfunction _flattenTypes(includeTuple, puts) {\n  const types = [];\n  puts.forEach(function (param) {\n    if (typeof param.components === 'object') {\n      if (param.type.substring(0, 5) !== 'tuple') {\n        throw new Error('components found but type is not tuple; report on GitHub');\n      }\n\n      let suffix = '';\n      const arrayBracket = param.type.indexOf('[');\n\n      if (arrayBracket >= 0) {\n        suffix = param.type.substring(arrayBracket);\n      }\n\n      const result = _flattenTypes(includeTuple, param.components);\n\n      if (_.isArray(result) && includeTuple) {\n        types.push(`tuple(${result.join(',')})${suffix}`);\n      } else if (!includeTuple) {\n        types.push(`(${result.join(',')})${suffix}`);\n      } else {\n        types.push(`(${result})`);\n      }\n    } else {\n      types.push(param.type);\n    }\n  });\n  return types;\n}\n/**\n * Returns `true` if the input is a 0x-prefixed hex string, otherwise it returns `false`.\n *\n * @example\n * const result = caver.utils.isHexPrefixed('0xa5b0cd8c87e77879d64cc064ee239ed6f71cacf9')\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} string The value to be determined if the parameter is 0x-prefixed hex string or not.\n * @return {boolean} `true` means the input is 0x-prefixed hex string.\n */\n\n\nconst isHexPrefixed = function (str) {\n  if (typeof str !== 'string') return false;\n  return str.slice(0, 2) === '0x' || str.slice(0, 2) === '0X';\n};\n/**\n * Returns a 0x-prefixed hex string.\n * If the input is already 0x-prefixed or a non-hex string, the input value is returned as-is.\n *\n * @example\n * const result = caver.utils.addHexPrefix('a5b0cd8c87e77879d64cc064ee239ed6f71cacf9')\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} string string value to be prefixed with 0x.\n * @return {string} 0x-prefixed hex string is returned.\n */\n\n\nconst addHexPrefix = function (str) {\n  if (typeof str !== 'string') return str;\n  return isHexPrefixed(str) ? `0x${str.slice(2)}` : `0x${str}`;\n};\n/**\n * Returns the result with 0x prefix stripped from input.\n *\n * @example\n * const result = caver.utils.stripHexPrefix('0xa5b0cd8c87e77879d64cc064ee239ed6f71cacf9')\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} string string to remove 0x prefix.\n * @return {string} A string stripped of 0x is returned.\n */\n\n\nconst stripHexPrefix = function (str) {\n  if (typeof str !== 'string') return str;\n  return isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\n * Decodes a raw signature data that composed of R(32 byte) + S(32 byte) + V(1byte).\n *\n * @example\n * const decoded = caver.utils.decodeSignature('0xb9146...')\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} signature The signature string to decode. It composed of R(32 byte) + S(32 byte) + V(1byte).\n * @return {SignatureData}\n */\n\n\nconst decodeSignature = signature => {\n  if (Buffer.byteLength(stripHexPrefix(signature), 'hex') !== 65) throw new Error(`Invalid signature: The length of raw signature must be 65 byte.`);\n  const ret = Account.decodeSignature(signature).map(sig => utils.makeEven(utils.trimLeadingZero(sig)));\n  return new SignatureData(ret);\n};\n/**\n * The util module.\n * @module utils\n *\n * @example\n * caver.utils\n */\n\n\nmodule.exports = {\n  _fireError: _fireError,\n  _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n  _flattenTypes: _flattenTypes,\n  // extractDisplayName: extractDisplayName,\n  // extractTypeName: extractTypeName,\n  randomHex: randomHex,\n  _: _,\n  soliditySha3: soliditySha3,\n  toChecksumAddress: toChecksumAddress,\n  hexToAscii: hexToAscii,\n  toAscii: hexToAscii,\n  asciiToHex: asciiToHex,\n  fromAscii: asciiToHex,\n  unitMap: unitKlayMap,\n  klayUnit: KlayUnit,\n  toWei: toWei,\n  fromWei: fromWei,\n  // For Klay unit\n  unitKlayMap: unitKlayMap,\n  toPeb: toPeb,\n  fromPeb: fromPeb,\n  convertFromPeb: convertFromPeb,\n  convertToPeb: convertToPeb,\n  BN: utils.BN,\n  isBN: utils.isBN,\n  BigNumber: utils.BigNumber,\n  isBigNumber: utils.isBigNumber,\n  isHex: utils.isHex,\n  isHexStrict: utils.isHexStrict,\n  sha3: utils.sha3,\n  keccak256: utils.sha3,\n  isAddress: utils.isAddress,\n  checkAddressChecksum: utils.checkAddressChecksum,\n  toHex: utils.toHex,\n  toBN: utils.toBN,\n  toBuffer: utils.toBuffer,\n  numberToBuffer: utils.numberToBuffer,\n  bufferToHex: utils.bufferToHex,\n  bytesToHex: utils.bytesToHex,\n  hexToBytes: utils.hexToBytes,\n  hexToNumberString: utils.hexToNumberString,\n  hexToNumber: utils.hexToNumber,\n  toDecimal: utils.hexToNumber,\n  // alias\n  numberToHex: utils.numberToHex,\n  fromDecimal: utils.numberToHex,\n  // alias\n  hexToUtf8: utils.hexToUtf8,\n  hexToString: utils.hexToUtf8,\n  toUtf8: utils.hexToUtf8,\n  utf8ToHex: utils.utf8ToHex,\n  stringToHex: utils.utf8ToHex,\n  fromUtf8: utils.utf8ToHex,\n  padLeft: utils.leftPad,\n  leftPad: utils.leftPad,\n  padRight: utils.rightPad,\n  rightPad: utils.rightPad,\n  toTwosComplement: utils.toTwosComplement,\n  isTxHash: utils.isTxHash,\n  isTxHashStrict: utils.isTxHashStrict,\n  isValidHash: utils.isValidHash,\n  isValidHashStrict: utils.isValidHashStrict,\n  // Moved promiEvent to utils,\n\n  /** @type {typeof PromiEvent} */\n  promiEvent: promiEvent,\n  Iban: Iban,\n  // Newly added for supporting rpc.js\n  isHexParameter: isHexParameter,\n  isHexPrefixed: isHexPrefixed,\n  addHexPrefix: addHexPrefix,\n  stripHexPrefix: stripHexPrefix,\n  // Newly added for supporting of setting default block.\n  parsePredefinedBlockNumber: utils.parsePredefinedBlockNumber,\n  isPredefinedBlockNumber: utils.isPredefinedBlockNumber,\n  isValidBlockNumberCandidate: utils.isValidBlockNumberCandidate,\n  isValidPrivateKey: utils.isValidPrivateKey,\n  isValidNSHSN: utils.isValidNSHSN,\n  parsePrivateKey: utils.parsePrivateKey,\n  parseKlaytnWalletKey: utils.parseKlaytnWalletKey,\n  isKlaytnWalletKey: utils.isKlaytnWalletKey,\n  isContractDeployment: utils.isContractDeployment,\n  // RLP\n  rlpEncode: utils.rlpEncode,\n  rlpDecode: utils.rlpDecode,\n  xyPointFromPublicKey: utils.xyPointFromPublicKey,\n  resolveSignature: utils.resolveSignature,\n  transformSignaturesToObject: utils.transformSignaturesToObject,\n  getTxTypeStringFromRawTransaction: utils.getTxTypeStringFromRawTransaction,\n  txTypeToString: utils.txTypeToString,\n  trimLeadingZero: utils.trimLeadingZero,\n  makeEven: utils.makeEven,\n  isValidPublicKey: utils.isValidPublicKey,\n  isCompressedPublicKey: utils.isCompressedPublicKey,\n  compressPublicKey: utils.compressPublicKey,\n  decompressPublicKey: utils.decompressPublicKey,\n  // For account key\n  isValidRole: utils.isValidRole,\n  isEmptySig: utils.isEmptySig,\n  hashMessage: utils.hashMessage,\n  recover: utils.recover,\n  recoverPublicKey: utils.recoverPublicKey,\n  publicKeyToAddress: utils.publicKeyToAddress,\n  decodeSignature: decodeSignature,\n  isBloom: utils.isBloom,\n  isTopic: utils.isTopic\n};","map":{"version":3,"names":["_","require","ethjsUnit","Account","utils","soliditySha3","randomHex","promiEvent","Iban","SignatureData","_fireError","error","emitter","reject","callback","isObject","Error","data","isArray","JSON","stringify","message","isString","isFunction","listeners","length","catch","setTimeout","emit","removeAllListeners","_jsonInterfaceMethodToString","json","name","indexOf","_flattenTypes","inputs","join","hexToAscii","hex","isHexStrict","str","i","l","substring","code","parseInt","substr","String","fromCharCode","asciiToHex","charCodeAt","n","toString","getUnitValue","unit","toLowerCase","unitMap","fromWei","number","isBN","toWei","unitKlayMap","peb","kpeb","Mpeb","Gpeb","Ston","ston","uKLAY","mKLAY","KLAY","kKLAY","MKLAY","GKLAY","TKLAY","KlayUnit","pebFactor","unitKlayToEthMap","getKlayUnitValue","u","undefined","fromPeb","tryNumberToString","toPeb","isBigNumber","convertFromPeb","amount","unitString","converted","convertToPeb","toBN","e","toChecksumAddress","address","test","replace","addressHash","sha3","checksumAddress","toUpperCase","isHexParameter","a","match","includeTuple","puts","types","forEach","param","components","type","suffix","arrayBracket","result","push","isHexPrefixed","slice","addHexPrefix","stripHexPrefix","decodeSignature","signature","Buffer","byteLength","ret","map","sig","makeEven","trimLeadingZero","module","exports","toAscii","fromAscii","klayUnit","BN","BigNumber","isHex","keccak256","isAddress","checkAddressChecksum","toHex","toBuffer","numberToBuffer","bufferToHex","bytesToHex","hexToBytes","hexToNumberString","hexToNumber","toDecimal","numberToHex","fromDecimal","hexToUtf8","hexToString","toUtf8","utf8ToHex","stringToHex","fromUtf8","padLeft","leftPad","padRight","rightPad","toTwosComplement","isTxHash","isTxHashStrict","isValidHash","isValidHashStrict","parsePredefinedBlockNumber","isPredefinedBlockNumber","isValidBlockNumberCandidate","isValidPrivateKey","isValidNSHSN","parsePrivateKey","parseKlaytnWalletKey","isKlaytnWalletKey","isContractDeployment","rlpEncode","rlpDecode","xyPointFromPublicKey","resolveSignature","transformSignaturesToObject","getTxTypeStringFromRawTransaction","txTypeToString","isValidPublicKey","isCompressedPublicKey","compressPublicKey","decompressPublicKey","isValidRole","isEmptySig","hashMessage","recover","recoverPublicKey","publicKeyToAddress","isBloom","isTopic"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-utils/src/index.js"],"sourcesContent":["/*\n Modifications copyright 2018 The caver-js Authors\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n This file is derived from web3.js/packages/web3-utils/src/index.js (2019/06/12).\n Modified and improved for the caver-js development.\n */\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nconst _ = require('lodash')\nconst ethjsUnit = require('ethjs-unit')\nconst Account = require('eth-lib/lib/account')\nconst utils = require('./utils')\nconst soliditySha3 = require('./soliditySha3')\nconst randomHex = require('../randomhex')\nconst promiEvent = require('../promievent')\nconst Iban = require('../iban')\nconst SignatureData = require('../../caver-wallet/src/keyring/signatureData')\n\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @ignore\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\nconst _fireError = function(error, emitter, reject, callback) {\n    // add data if given\n    if (_.isObject(error) && !(error instanceof Error) && error.data) {\n        if (_.isObject(error.data) || _.isArray(error.data)) {\n            error.data = JSON.stringify(error.data, null, 2)\n        }\n\n        error = `${error.message}\\n${error.data}`\n    }\n\n    if (_.isString(error)) {\n        error = new Error(error)\n    }\n\n    if (_.isFunction(callback)) {\n        callback(error)\n    }\n    if (_.isFunction(reject)) {\n        // suppress uncatched error if an error listener is present\n        // OR suppress uncatched error if an callback listener is present\n        if ((emitter && (_.isFunction(emitter.listeners) && emitter.listeners('error').length)) || _.isFunction(callback)) {\n            emitter.catch(function() {})\n        }\n        // reject later, to be able to return emitter\n        setTimeout(function() {\n            reject(error)\n        }, 1)\n    }\n\n    if (emitter && _.isFunction(emitter.emit)) {\n        // emit later, to be able to return emitter\n        setTimeout(function() {\n            emitter.emit('error', error)\n            emitter.removeAllListeners()\n        }, 1)\n    }\n\n    return emitter\n}\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @ignore\n * @param {Object} json\n * @return {String} full function/event name\n */\nconst _jsonInterfaceMethodToString = function(json) {\n    if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n        return json.name\n    }\n\n    return `${json.name}(${_flattenTypes(false, json.inputs).join(',')})`\n}\n\n/**\n * Returns the ASCII string representation of a given HEX value.\n *\n * @example\n * const result = caver.utils.hexToAscii('0x4920686176652031303021') // 'I have 100!'\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} hex A HEX string to convert to an ASCII string.\n * @returns {string} The ASCII string.\n */\nconst hexToAscii = function(hex) {\n    if (!utils.isHexStrict(hex)) {\n        throw new Error('The parameter must be a valid HEX string.')\n    }\n\n    let str = ''\n    let i = 0\n    const l = hex.length\n    if (hex.substring(0, 2) === '0x') {\n        i = 2\n    }\n    for (; i < l; i += 2) {\n        const code = parseInt(hex.substr(i, 2), 16)\n        str += String.fromCharCode(code)\n    }\n\n    return str\n}\n\n/**\n * Returns the HEX representation of a given ASCII string.\n *\n * @example\n * const result = caver.utils.asciiToHex('I have 100!') // '0x4920686176652031303021'\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} str An ASCII string to convert to a HEX string.\n * @returns {string} The HEX string.\n */\nconst asciiToHex = function(str) {\n    if (!str) {\n        return '0x00'\n    }\n    let hex = ''\n    for (let i = 0; i < str.length; i++) {\n        const code = str.charCodeAt(i)\n        const n = code.toString(16)\n        hex += n.length < 2 ? `0${n}` : n\n    }\n\n    return `0x${hex}`\n}\n\n/**\n * Returns value of unit in Wei\n *\n * @ignore\n * @param {string} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nconst getUnitValue = function(unit) {\n    unit = unit ? unit.toLowerCase() : 'ether'\n    if (!ethjsUnit.unitMap[unit]) {\n        throw new Error(\n            `This unit \"${unit}\" doesn't exist, please use the one of the following units${JSON.stringify(ethjsUnit.unitMap, null, 2)}`\n        )\n    }\n    return unit\n}\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @ignore\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nconst fromWei = function(number, unit) {\n    unit = getUnitValue(unit)\n\n    if (!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.')\n    }\n\n    return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10)\n}\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @ignore\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\nconst toWei = function(number, unit) {\n    unit = getUnitValue(unit)\n\n    if (!utils.isBN(number) && !_.isString(number)) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.')\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10)\n}\n\n// For Klay unit\n/**\n * Shows all possible KLAY values and their amount in peb.\n *\n * @example\n * caver.utils.unitMap\n *\n * @alias unitMap\n * @memberof module:utils\n * @inner\n *\n * @type {Map<string,string>}\n */\nconst unitKlayMap = {\n    peb: '1',\n    kpeb: '1000',\n    Mpeb: '1000000',\n    Gpeb: '1000000000',\n    Ston: '1000000000',\n    ston: '1000000000',\n    uKLAY: '1000000000000',\n    mKLAY: '1000000000000000',\n    KLAY: '1000000000000000000',\n    kKLAY: '1000000000000000000000',\n    MKLAY: '1000000000000000000000000',\n    GKLAY: '1000000000000000000000000000',\n    TKLAY: '1000000000000000000000000000000',\n}\n\n/**\n * @example\n * { unit: 'peb', pebFactor: 0 }\n *\n * @typedef {object} module:utils.Unit\n * @property {string} unit - The unit string.\n * @property {number} pebFactor - The peb factor.\n */\n/**\n * Shows all KLAY units.\n *\n * @example\n * caver.utils.klayUnit\n *\n * @alias klayUnit\n * @memberof module:utils\n * @inner\n *\n * @type {Map<string,module:utils.Unit>}\n */\nconst KlayUnit = {\n    peb: { unit: 'peb', pebFactor: 0 },\n    kpeb: { unit: 'kpeb', pebFactor: 3 },\n    Mpeb: { unit: 'Mpeb', pebFactor: 6 },\n    Gpeb: { unit: 'Gpeb', pebFactor: 9 },\n    ston: { unit: 'ston', pebFactor: 9 },\n    uKLAY: { unit: 'uKLAY', pebFactor: 12 },\n    mKLAY: { unit: 'mKLAY', pebFactor: 15 },\n    KLAY: { unit: 'KLAY', pebFactor: 18 },\n    kKLAY: { unit: 'kKLAY', pebFactor: 21 },\n    MKLAY: { unit: 'MKLAY', pebFactor: 24 },\n    GKLAY: { unit: 'GKLAY', pebFactor: 27 },\n    TKLAY: { unit: 'TKLAY', pebFactor: 30 },\n}\n\nconst unitKlayToEthMap = {\n    peb: 'wei',\n    kpeb: 'kwei',\n    Mpeb: 'mwei',\n    Gpeb: 'gwei',\n    Ston: 'gwei',\n    ston: 'gwei',\n    uKLAY: 'microether',\n    mKLAY: 'milliether',\n    KLAY: 'ether',\n    kKLAY: 'kether',\n    MKLAY: 'mether',\n    GKLAY: 'gether',\n    TKLAY: 'tether',\n}\n\nconst getKlayUnitValue = function(u) {\n    let unit = u || 'KLAY'\n\n    if (_.isObject(u) && u.unit) unit = u.unit\n\n    if (!unitKlayMap[unit]) {\n        throw new Error(\n            `This unit \"${unit}\" doesn't exist, please use the one of the following units${JSON.stringify(unitKlayMap, null, 2)}`\n        )\n    }\n\n    if (u && u.pebFactor !== undefined && KlayUnit[u.unit].pebFactor !== u.pebFactor) {\n        throw new Error(`peb factor does not match with given unit`)\n    }\n\n    return unit\n}\n\nconst fromPeb = function(number, unit) {\n    // kaly unit to eth unit\n    unit = getKlayUnitValue(unit)\n    unit = unitKlayToEthMap[unit]\n\n    unit = getUnitValue(unit)\n\n    if (!utils.isBN(number) && !_.isString(number)) {\n        number = tryNumberToString(number)\n    }\n\n    return ethjsUnit.fromWei(number, unit)\n}\n\nconst toPeb = function(number, unit) {\n    // kaly unit to eth unit\n    unit = getKlayUnitValue(unit)\n    unit = unitKlayToEthMap[unit]\n\n    unit = getUnitValue(unit)\n\n    // BigNumber can support decimal points but BN does not support.\n    // So if BigNumber type number is came as a parameter,\n    // use `toString` function of BigNumber to prevent error while converting BigNumber to BN.\n    if (utils.isBigNumber(number)) number = number.toString()\n    if (!utils.isBN(number) && !_.isString(number)) {\n        number = tryNumberToString(number)\n    }\n\n    return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10)\n}\n\n/**\n * Converts `peb` amount to specific unit amount.\n * Please note that \"peb\" is the smallest KLAY unit, and you should always use \"peb\" as the unit of KLAY.\n * Convert to \"KLAY\" only for display reasons.\n *\n * @example\n * const result = caver.utils.convertFromPeb('1', 'KLAY') // '0.000000000000000001'\n * const result = caver.utils.convertFromPeb(1, 'KLAY') // '0.000000000000000001'\n * const result = caver.utils.convertFromPeb(1, caver.utils.klayUnit.KLAY) // '0.000000000000000001'\n *\n * @memberof module:utils\n * @inner\n *\n * @param {number|string|BN|BigNumber} amount The value in peb.\n * @param {string|KlayUnit} [unitString] (default, `'KLAY'`) The unit of KLAY to convert your \"peb\" into. `number` will be divided by one of the following denominators for the unit provided:<br>- `peb`: '1' <br> - `kpeb`: '1000' <br> - `Mpeb`: '1000000' <br> - `Gpeb`: '1000000000' <br> - `Ston`: '1000000000' <br> - `uKLAY`: '1000000000000' <br> - `mKLAY`: '1000000000000000' <br> - `KLAY`: '1000000000000000000' <br> - `kKLAY`: '1000000000000000000000' <br> - `MKLAY`: '1000000000000000000000000' <br> - `GKLAY`: '1000000000000000000000000000' <br>\n * @return {string} The string number.\n */\nconst convertFromPeb = function(amount, unitString) {\n    const converted = fromPeb(amount, unitString)\n    return utils.isBN(converted) ? converted.toString(10) : converted\n}\n\n/**\n * Converts any KLAY value into peb.\n * Please note that \"peb\" is the smallest KLAY unit, and you should always use \"peb\" as the unit of KLAY.\n *\n * @example\n * const result = caver.utils.convertToPeb('1', 'KLAY') // '1000000000000000000'\n * const result = caver.utils.convertToPeb(1, 'KLAY') // '1000000000000000000'\n * const result = caver.utils.convertToPeb(1, caver.utils.klayUnit.KLAY) // '1000000000000000000'\n *\n * @memberof module:utils\n * @inner\n *\n * @param {number|string|BN|BigNumber} amount the amount to convert\n * @param {string|KlayUnit} [unitString] (default, `'KLAY'`) The unit of KLAY to convert from. `number` will be divided by one of the following denominators for the unit provided:<br>- `peb`: '1' <br> - `kpeb`: '1000' <br> - `Mpeb`: '1000000' <br> - `Gpeb`: '1000000000' <br> - `Ston`: '1000000000' <br> - `uKLAY`: '1000000000000' <br> - `mKLAY`: '1000000000000000' <br> - `KLAY`: '1000000000000000000' <br> - `kKLAY`: '1000000000000000000000' <br> - `MKLAY`: '1000000000000000000000000' <br> - `GKLAY`: '1000000000000000000000000000' <br>\n * @return {string|BN}\n */\nconst convertToPeb = function(number, unitString) {\n    const converted = toPeb(number, unitString)\n    return utils.isBN(converted) ? converted.toString(10) : converted\n}\n\nfunction tryNumberToString(number) {\n    try {\n        return utils.toBN(number).toString(10)\n    } catch (e) {\n        throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.')\n    }\n}\n\n/**\n * Converts an upper or lowercase Klaytn address to a checksum address.\n *\n * @example\n * const result = caver.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d') // '0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d'\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} address An address string.\n * @return {string} The checksum address.\n */\nconst toChecksumAddress = function(address) {\n    if (typeof address === 'undefined') return ''\n\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        throw new Error(`Given address \"${address}\" is not a valid Klaytn address.`)\n    }\n\n    address = address.toLowerCase().replace(/^0x/i, '')\n    const addressHash = utils.sha3(address).replace(/^0x/i, '')\n    let checksumAddress = '0x'\n\n    for (let i = 0; i < address.length; i++) {\n        // If ith character is 9 to f then make it uppercase\n        if (parseInt(addressHash[i], 16) > 7) {\n            checksumAddress += address[i].toUpperCase()\n        } else {\n            checksumAddress += address[i]\n        }\n    }\n    return checksumAddress\n}\n\nconst isHexParameter = a => {\n    if (!_.isString(a) || !a.match(/^0x[0-9A-Fa-f]*$/)) return false\n    return true\n}\n\n/**\n * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings\n *\n * @ignore\n * @param {bool} includeTuple\n * @param {Object} puts\n * @return {Array} parameters as strings\n */\nfunction _flattenTypes(includeTuple, puts) {\n    const types = []\n    puts.forEach(function(param) {\n        if (typeof param.components === 'object') {\n            if (param.type.substring(0, 5) !== 'tuple') {\n                throw new Error('components found but type is not tuple; report on GitHub')\n            }\n            let suffix = ''\n            const arrayBracket = param.type.indexOf('[')\n            if (arrayBracket >= 0) {\n                suffix = param.type.substring(arrayBracket)\n            }\n            const result = _flattenTypes(includeTuple, param.components)\n\n            if (_.isArray(result) && includeTuple) {\n                types.push(`tuple(${result.join(',')})${suffix}`)\n            } else if (!includeTuple) {\n                types.push(`(${result.join(',')})${suffix}`)\n            } else {\n                types.push(`(${result})`)\n            }\n        } else {\n            types.push(param.type)\n        }\n    })\n    return types\n}\n\n/**\n * Returns `true` if the input is a 0x-prefixed hex string, otherwise it returns `false`.\n *\n * @example\n * const result = caver.utils.isHexPrefixed('0xa5b0cd8c87e77879d64cc064ee239ed6f71cacf9')\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} string The value to be determined if the parameter is 0x-prefixed hex string or not.\n * @return {boolean} `true` means the input is 0x-prefixed hex string.\n */\nconst isHexPrefixed = function(str) {\n    if (typeof str !== 'string') return false\n    return str.slice(0, 2) === '0x' || str.slice(0, 2) === '0X'\n}\n\n/**\n * Returns a 0x-prefixed hex string.\n * If the input is already 0x-prefixed or a non-hex string, the input value is returned as-is.\n *\n * @example\n * const result = caver.utils.addHexPrefix('a5b0cd8c87e77879d64cc064ee239ed6f71cacf9')\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} string string value to be prefixed with 0x.\n * @return {string} 0x-prefixed hex string is returned.\n */\nconst addHexPrefix = function(str) {\n    if (typeof str !== 'string') return str\n\n    return isHexPrefixed(str) ? `0x${str.slice(2)}` : `0x${str}`\n}\n\n/**\n * Returns the result with 0x prefix stripped from input.\n *\n * @example\n * const result = caver.utils.stripHexPrefix('0xa5b0cd8c87e77879d64cc064ee239ed6f71cacf9')\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} string string to remove 0x prefix.\n * @return {string} A string stripped of 0x is returned.\n */\nconst stripHexPrefix = function(str) {\n    if (typeof str !== 'string') return str\n\n    return isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/**\n * Decodes a raw signature data that composed of R(32 byte) + S(32 byte) + V(1byte).\n *\n * @example\n * const decoded = caver.utils.decodeSignature('0xb9146...')\n *\n * @memberof module:utils\n * @inner\n *\n * @param {string} signature The signature string to decode. It composed of R(32 byte) + S(32 byte) + V(1byte).\n * @return {SignatureData}\n */\nconst decodeSignature = signature => {\n    if (Buffer.byteLength(stripHexPrefix(signature), 'hex') !== 65)\n        throw new Error(`Invalid signature: The length of raw signature must be 65 byte.`)\n\n    const ret = Account.decodeSignature(signature).map(sig => utils.makeEven(utils.trimLeadingZero(sig)))\n    return new SignatureData(ret)\n}\n\n/**\n * The util module.\n * @module utils\n *\n * @example\n * caver.utils\n */\nmodule.exports = {\n    _fireError: _fireError,\n    _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n    _flattenTypes: _flattenTypes,\n    // extractDisplayName: extractDisplayName,\n    // extractTypeName: extractTypeName,\n    randomHex: randomHex,\n    _: _,\n    soliditySha3: soliditySha3,\n    toChecksumAddress: toChecksumAddress,\n    hexToAscii: hexToAscii,\n    toAscii: hexToAscii,\n    asciiToHex: asciiToHex,\n    fromAscii: asciiToHex,\n\n    unitMap: unitKlayMap,\n    klayUnit: KlayUnit,\n    toWei: toWei,\n    fromWei: fromWei,\n\n    // For Klay unit\n    unitKlayMap: unitKlayMap,\n    toPeb: toPeb,\n    fromPeb: fromPeb,\n    convertFromPeb: convertFromPeb,\n    convertToPeb: convertToPeb,\n\n    BN: utils.BN,\n    isBN: utils.isBN,\n    BigNumber: utils.BigNumber,\n    isBigNumber: utils.isBigNumber,\n    isHex: utils.isHex,\n    isHexStrict: utils.isHexStrict,\n    sha3: utils.sha3,\n    keccak256: utils.sha3,\n    isAddress: utils.isAddress,\n    checkAddressChecksum: utils.checkAddressChecksum,\n    toHex: utils.toHex,\n    toBN: utils.toBN,\n\n    toBuffer: utils.toBuffer,\n    numberToBuffer: utils.numberToBuffer,\n    bufferToHex: utils.bufferToHex,\n\n    bytesToHex: utils.bytesToHex,\n    hexToBytes: utils.hexToBytes,\n\n    hexToNumberString: utils.hexToNumberString,\n\n    hexToNumber: utils.hexToNumber,\n    toDecimal: utils.hexToNumber, // alias\n\n    numberToHex: utils.numberToHex,\n    fromDecimal: utils.numberToHex, // alias\n\n    hexToUtf8: utils.hexToUtf8,\n    hexToString: utils.hexToUtf8,\n    toUtf8: utils.hexToUtf8,\n\n    utf8ToHex: utils.utf8ToHex,\n    stringToHex: utils.utf8ToHex,\n    fromUtf8: utils.utf8ToHex,\n    padLeft: utils.leftPad,\n    leftPad: utils.leftPad,\n    padRight: utils.rightPad,\n    rightPad: utils.rightPad,\n    toTwosComplement: utils.toTwosComplement,\n    isTxHash: utils.isTxHash,\n    isTxHashStrict: utils.isTxHashStrict,\n    isValidHash: utils.isValidHash,\n    isValidHashStrict: utils.isValidHashStrict,\n\n    // Moved promiEvent to utils,\n    /** @type {typeof PromiEvent} */\n    promiEvent: promiEvent,\n    Iban: Iban,\n    // Newly added for supporting rpc.js\n    isHexParameter: isHexParameter,\n    isHexPrefixed: isHexPrefixed,\n    addHexPrefix: addHexPrefix,\n    stripHexPrefix: stripHexPrefix,\n\n    // Newly added for supporting of setting default block.\n    parsePredefinedBlockNumber: utils.parsePredefinedBlockNumber,\n    isPredefinedBlockNumber: utils.isPredefinedBlockNumber,\n    isValidBlockNumberCandidate: utils.isValidBlockNumberCandidate,\n    isValidPrivateKey: utils.isValidPrivateKey,\n    isValidNSHSN: utils.isValidNSHSN,\n    parsePrivateKey: utils.parsePrivateKey,\n    parseKlaytnWalletKey: utils.parseKlaytnWalletKey,\n    isKlaytnWalletKey: utils.isKlaytnWalletKey,\n    isContractDeployment: utils.isContractDeployment,\n    // RLP\n    rlpEncode: utils.rlpEncode,\n    rlpDecode: utils.rlpDecode,\n    xyPointFromPublicKey: utils.xyPointFromPublicKey,\n    resolveSignature: utils.resolveSignature,\n    transformSignaturesToObject: utils.transformSignaturesToObject,\n    getTxTypeStringFromRawTransaction: utils.getTxTypeStringFromRawTransaction,\n    txTypeToString: utils.txTypeToString,\n    trimLeadingZero: utils.trimLeadingZero,\n    makeEven: utils.makeEven,\n    isValidPublicKey: utils.isValidPublicKey,\n    isCompressedPublicKey: utils.isCompressedPublicKey,\n    compressPublicKey: utils.compressPublicKey,\n    decompressPublicKey: utils.decompressPublicKey,\n\n    // For account key\n    isValidRole: utils.isValidRole,\n\n    isEmptySig: utils.isEmptySig,\n\n    hashMessage: utils.hashMessage,\n    recover: utils.recover,\n    recoverPublicKey: utils.recoverPublicKey,\n    publicKeyToAddress: utils.publicKeyToAddress,\n\n    decodeSignature: decodeSignature,\n\n    isBloom: utils.isBloom,\n    isTopic: utils.isTopic,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}