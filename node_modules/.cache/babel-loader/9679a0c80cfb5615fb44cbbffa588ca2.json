{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransferBtcBasedBlockchain = exports.To = exports.FromUTXO = exports.FromAddress = void 0;\n\nconst class_transformer_1 = require(\"class-transformer\");\n\nconst class_validator_1 = require(\"class-validator\");\n\nconst SignatureIdValidator_1 = require(\"../validation/SignatureIdValidator\");\n\nconst TransferBtcValidator_1 = require(\"../validation/TransferBtcValidator\");\n\nclass PrivateKeyOrSignatureIdBtcBased {}\n\n__decorate([class_validator_1.ValidateIf(o => o.privateKey || !o.signatureId), class_validator_1.IsNotEmpty(), class_validator_1.Length(52, 256), __metadata(\"design:type\", String)], PrivateKeyOrSignatureIdBtcBased.prototype, \"privateKey\", void 0);\n\n__decorate([class_validator_1.ValidateIf(o => o.signatureId || !o.privateKey), class_validator_1.Validate(SignatureIdValidator_1.SignatureIdValidator), class_validator_1.IsNotEmpty(), class_validator_1.Length(36, 36), class_validator_1.IsUUID('4'), __metadata(\"design:type\", String)], PrivateKeyOrSignatureIdBtcBased.prototype, \"signatureId\", void 0);\n\nclass FromAddress extends PrivateKeyOrSignatureIdBtcBased {}\n\n__decorate([class_validator_1.IsNotEmpty(), class_validator_1.Length(30, 110), __metadata(\"design:type\", String)], FromAddress.prototype, \"address\", void 0);\n\nexports.FromAddress = FromAddress;\n\nclass FromUTXO extends PrivateKeyOrSignatureIdBtcBased {}\n\n__decorate([class_validator_1.IsNotEmpty(), class_validator_1.Length(64, 64), __metadata(\"design:type\", String)], FromUTXO.prototype, \"txHash\", void 0);\n\n__decorate([class_validator_1.IsNotEmpty(), class_validator_1.Min(0), class_validator_1.Max(4294967295), __metadata(\"design:type\", Number)], FromUTXO.prototype, \"index\", void 0);\n\nexports.FromUTXO = FromUTXO;\n\nclass To {}\n\n__decorate([class_validator_1.IsNotEmpty(), class_validator_1.Length(30, 110), __metadata(\"design:type\", String)], To.prototype, \"address\", void 0);\n\n__decorate([class_validator_1.IsNotEmpty(), class_validator_1.Min(0), __metadata(\"design:type\", Number)], To.prototype, \"value\", void 0);\n\nexports.To = To;\n/**\n * Transfer BTC based blockchain.\n *\n * This class is used for transferring assets of all BTC based blockchains.\n */\n\nclass TransferBtcBasedBlockchain {}\n\n__decorate([class_validator_1.ValidateIf(o => o.fromUTXO && o.fromAddress || !o.fromUTXO), class_validator_1.Validate(TransferBtcValidator_1.TransferBtcValidator), class_validator_1.IsNotEmpty(), class_validator_1.ValidateNested({\n  each: true\n}), class_transformer_1.Type(() => FromAddress), __metadata(\"design:type\", Array)], TransferBtcBasedBlockchain.prototype, \"fromAddress\", void 0);\n\n__decorate([class_validator_1.ValidateIf(o => o.fromUTXO && o.fromAddress || !o.fromAddress), class_validator_1.Validate(TransferBtcValidator_1.TransferBtcValidator), class_validator_1.IsNotEmpty(), class_validator_1.ValidateNested({\n  each: true\n}), class_transformer_1.Type(() => FromUTXO), __metadata(\"design:type\", Array)], TransferBtcBasedBlockchain.prototype, \"fromUTXO\", void 0);\n\n__decorate([class_validator_1.ArrayNotEmpty(), class_validator_1.ValidateNested({\n  each: true\n}), class_transformer_1.Type(() => To), __metadata(\"design:type\", Array)], TransferBtcBasedBlockchain.prototype, \"to\", void 0);\n\nexports.TransferBtcBasedBlockchain = TransferBtcBasedBlockchain;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAUA;;AACA;;AAEA,MAAMA,+BAAN,CAAqC;;AAOjCC,YAHCC,6BAAWC,CAAC,IAAIA,CAAC,CAACC,UAAF,IAAgB,CAACD,CAAC,CAACE,WAAnC,CAGD,EAFCH,8BAED,EADCA,yBAAO,EAAP,EAAW,GAAX,CACD;;AAUAD,YALCC,6BAAWC,CAAC,IAAIA,CAAC,CAACE,WAAF,IAAiB,CAACF,CAAC,CAACC,UAApC,CAKD,EAJCF,2BAASI,2CAAT,CAID,EAHCJ,8BAGD,EAFCA,yBAAO,EAAP,EAAW,EAAX,CAED,EADCA,yBAAO,GAAP,CACD;;AAGJ,MAAaK,WAAb,SAAiCP,+BAAjC,CAAgE;;AAM5DC,YAFCC,8BAED,EADCA,yBAAO,EAAP,EAAW,GAAX,CACD;;AANJM;;AASA,MAAaC,QAAb,SAA8BT,+BAA9B,CAA6D;;AAOzDC,YAFCC,8BAED,EADCA,yBAAO,EAAP,EAAW,EAAX,CACD;;AAQAD,YAHCC,8BAGD,EAFCA,sBAAI,CAAJ,CAED,EADCA,sBAAI,UAAJ,CACD;;AAfJM;;AAkBA,MAAaE,EAAb,CAAe;;AAMXT,YAFCC,8BAED,EADCA,yBAAO,EAAP,EAAW,GAAX,CACD;;AAOAD,YAFCC,8BAED,EADCA,sBAAI,CAAJ,CACD;;AAbJM;AAgBA;;;;;;AAKA,MAAaG,0BAAb,CAAuC;;AAYnCV,YALCC,6BAAWC,CAAC,IAAKA,CAAC,CAACS,QAAF,IAAcT,CAAC,CAACU,WAAjB,IAAiC,CAACV,CAAC,CAACS,QAApD,CAKD,EAJCV,2BAASY,2CAAT,CAID,EAHCZ,8BAGD,EAFCA,iCAAe;EAAEa,IAAI,EAAE;AAAR,CAAf,CAED,EADCC,yBAAK,MAAMT,WAAX,CACD;;AAYAN,YALCC,6BAAWC,CAAC,IAAKA,CAAC,CAACS,QAAF,IAAcT,CAAC,CAACU,WAAjB,IAAiC,CAACV,CAAC,CAACU,WAApD,CAKD,EAJCX,2BAASY,2CAAT,CAID,EAHCZ,8BAGD,EAFCA,iCAAe;EAAEa,IAAI,EAAE;AAAR,CAAf,CAED,EADCC,yBAAK,MAAMP,QAAX,CACD;;AAQAR,YAHCC,iCAGD,EAFCA,iCAAe;EAAEa,IAAI,EAAE;AAAR,CAAf,CAED,EADCC,yBAAK,MAAMN,EAAX,CACD;;AAhCJF","names":["PrivateKeyOrSignatureIdBtcBased","__decorate","class_validator_1","o","privateKey","signatureId","SignatureIdValidator_1","FromAddress","exports","FromUTXO","To","TransferBtcBasedBlockchain","fromUTXO","fromAddress","TransferBtcValidator_1","each","class_transformer_1"],"sourceRoot":"","sources":["../../../../src/model/request/TransferBtcBasedBlockchain.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}