{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-method/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\nconst _ = require('lodash');\n\nconst errors = require('../../caver-core-helpers').errors;\n\nconst formatters = require('../../caver-core-helpers').formatters;\n\nconst utils = require('../../caver-utils');\n\nconst Subscriptions = require('../../caver-core-subscriptions').subscriptions;\n\nconst validateParams = require('../../caver-core-helpers').validateFunction.validateParams;\n\nconst TIMEOUTBLOCK = 50;\nconst AVERAGE_BLOCK_TIME = 1; // 1s\n\nconst POLLINGTIMEOUT = AVERAGE_BLOCK_TIME * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK\n\nconst TransactionDecoder = require('../../caver-transaction/src/transactionDecoder/transactionDecoder');\n\nconst {\n  TX_TYPE_STRING\n} = require('../../caver-transaction/src/transactionHelper/transactionHelper');\n\nconst {\n  resolveRawKeyToAccountKey\n} = require('../../caver-klay/caver-klay-accounts/src/transactionType/account');\n\nfunction Method(options) {\n  // call, name should be existed to create a method.\n  if (!options.call || !options.name) throw errors.needNameCallPropertyToCreateMethod;\n  this.name = options.name;\n  this.call = options.call;\n  this.hexCall = options.hexCall;\n  this.params = options.params || 0;\n  this.inputFormatter = options.inputFormatter || [];\n  this.outputFormatter = options.outputFormatter;\n  this.transformPayload = options.transformPayload;\n  this.extraFormatters = options.extraFormatters;\n  this.requestManager = options.requestManager; // reference to klay.accounts\n\n  this.accounts = options.accounts;\n  this.defaultBlock = options.defaultBlock || 'latest';\n  this.defaultAccount = options.defaultAccount || null;\n  this.outputFormatterDisable = options.outputFormatterDisable;\n}\n\nMethod.prototype.setRequestManager = setRequestManager;\nMethod.prototype.createFunction = createFunction;\nMethod.prototype.attachToObject = attachToObject;\nMethod.prototype.getCall = getCall;\nMethod.prototype.extractCallback = extractCallback;\nMethod.prototype.validateArgs = validateArgs;\nMethod.prototype.formatInput = formatInput;\nMethod.prototype.formatOutput = formatOutput;\nMethod.prototype.toPayload = toPayload;\nMethod.prototype.buildCall = buildCall;\nMethod.prototype._confirmTransaction = _confirmTransaction;\nMethod.prototype.request = request;\n/**\n * Set requestManager for rpc calling.\n * If it has accounts parameter also, set it.\n * @method setRequestManager\n * @param  {Object} requestManager\n * @param  {Object} accounts\n */\n\nfunction setRequestManager(requestManager, accounts) {\n  this.requestManager = requestManager; // reference to klay.accounts\n\n  if (accounts) this.accounts = accounts;\n}\n/**\n * createFunction through 'this' context (= instance by created through new Method(...))\n * @method createFunction\n * @param  {Object} requestManager\n * @param  {Object} accounts\n * @return {Function} it will be used for sending RPC call.\n */\n\n\nfunction createFunction(requestManager, accounts) {\n  // set requestManager for method individulally.\n  this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts); // this.buildCall() returns function `send = function() { ... }`\n\n  const func = this.buildCall(); // call is directly used for rpc calling,\n  // ex) 'klay_sendTransaction'\n\n  func.call = this.call;\n  return func;\n}\n/**\n * attach buildCalled method to 'obj' object,\n * by adding a property name through this.name\n * @method attachToObject\n * @param  {Object} obj\n */\n\n\nfunction attachToObject(obj) {\n  const func = this.buildCall();\n  func.call = this.call;\n  const [callName, optionalName] = this.name.split('.');\n\n  if (optionalName) {\n    obj[callName] = obj[callName] || {};\n    obj[callName][optionalName] = func;\n\n    obj[callName][optionalName].getMethod = () => this;\n  } else {\n    obj[callName] = func;\n\n    obj[callName].getMethod = () => this;\n  }\n}\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\n\n\nfunction getCall(args) {\n  // If hexCall is defined, args[0] type is truly hexParameter, return this.hexCall\n  // If not, return this.call\n  // 'this.call', 'this.hexCall' are defined in rpc.json\n  return this.hexCall && utils.isHexParameter(args[0]) ? this.hexCall : this.call;\n}\n/**\n * Should be used to extract callback from array of arguments.\n * (caution) It modifies input param.\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\n\nfunction extractCallback(args) {\n  if (_.isFunction(args[args.length - 1])) {\n    return args.pop(); // 'pop' method modifies the original args array!\n  }\n}\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\n\nfunction validateArgs(args) {\n  if (args.length !== this.params) {\n    throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n  }\n}\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\n\nfunction formatInput(args) {\n  const _this = this; // If inputFormatter is not defined, or empty just return original args.\n\n\n  if (!this.inputFormatter || _.isEmpty(this.inputFormatter)) {\n    return args;\n  } // If inputFormatter is defined, map original args by calling formatter.\n\n\n  return this.inputFormatter.map((formatter, index) => {\n    // bind this for defaultBlock, and defaultAccount\n    let formattedInput = args[index];\n\n    if (formatter) {\n      formattedInput = formatter.call(_this, args[index]);\n    }\n\n    return formattedInput;\n  });\n}\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\n\n\nfunction formatOutput(result) {\n  const _this = this; // If outputFormatter is defined, calling outputFormatter,\n  // If not, just return original res.\n\n\n  const _formatOutput = res => typeof _this.outputFormatter === 'function' ? _this.outputFormatter(res) : res; // If result is array, map it through calling _formatOuput\n  // If result is single, just calling _formatOutput.\n\n\n  return _.isArray(result) ? result.map(_formatOutput) : _formatOutput(result);\n}\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\n\n\nfunction toPayload(args) {\n  const call = this.getCall(args);\n  const callback = this.extractCallback(args);\n  const inputParams = this.formatInput(args);\n  this.validateArgs(inputParams);\n  const payload = {\n    method: call,\n    params: inputParams,\n    callback\n  }; // If payload transform option is existing, apply it.\n  // If not, just return payload.\n\n  return this.transformPayload && this.transformPayload(payload) || payload;\n}\n\nconst buildSendTxCallbackFunc = (defer, method, payload, isSendTx) => (err, result) => {\n  try {\n    result = method.formatOutput(result);\n  } catch (e) {\n    if (!err) err = e;\n  }\n\n  err = result instanceof Error && result || err; // If err exists, fireError\n\n  if (err) {\n    return utils._fireError(err.error || err, // sometimes, err.error property exists, in case, fire it instead 'err'\n    defer.eventEmitter, defer.reject, payload.callback);\n  } // fire callback\n\n\n  if (payload.callback) payload.callback(null, result); // return PROMISE\n\n  if (!isSendTx) {\n    defer.resolve(result);\n  } else {\n    defer.eventEmitter.emit('transactionHash', result);\n\n    method._confirmTransaction(defer, result, payload);\n  }\n};\n\nconst buildSendSignedTxFunc = (method, payload, sendTxCallback) => signed => {\n  const rawTransaction = signed.rawTransaction ? signed.rawTransaction : signed;\n\n  const signedPayload = _.extend({}, payload, {\n    method: 'klay_sendRawTransaction',\n    params: [rawTransaction]\n  });\n\n  method.requestManager.send(signedPayload, sendTxCallback);\n};\n\nconst buildSendRequestFunc = (defer, sendSignedTx, sendTxCallback) => (payload, method) => {\n  const methodName = payload.method; // Logic for handling multiple cases of parameters in sendSignedTransaction.\n  // 1. Object containing rawTransaction\n  //    : call 'klay_sendRawTransaction' with RLP encoded transaction(rawTransaction) in object\n  // 2. A transaction object containing signatures or feePayerSignatures\n  //    : call 'getRawTransactionWithSignatures', then call 'klay_sendRawTransaction' with result of getRawTransactionWithSignatures\n\n  if (method && methodName === 'klay_sendRawTransaction') {\n    // The existence of accounts in the method means the implementation before the common architecture.\n    if (method.accounts) {\n      const transaction = payload.params[0];\n\n      if (typeof transaction !== 'string' && _.isObject(transaction)) {\n        if (transaction.rawTransaction) {\n          return sendSignedTx(transaction);\n        }\n\n        return method.accounts.getRawTransactionWithSignatures(transaction).then(sendSignedTx).catch(e => {\n          sendTxCallback(e);\n        });\n      }\n    } else {\n      const transaction = payload.params[0];\n\n      if (!_.isString(transaction) && _.isObject(transaction) && _.isFunction(transaction.getRLPEncoding)) {\n        return sendSignedTx(transaction.getRLPEncoding());\n      }\n    }\n  } // In the previous implementation of common architecture,\n  // if there was an account in the in-memory wallet before requesting to send or sign a transaction to the node,\n  // it was handled by using it.\n\n\n  if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n    switch (methodName) {\n      case 'klay_sendTransaction':\n        {\n          const tx = payload.params[0];\n          let error;\n\n          if (!_.isObject(tx)) {\n            sendTxCallback(new Error('The transaction must be defined as an object.'));\n            return;\n          }\n\n          let addressToUse = tx.from;\n\n          if (tx.senderRawTransaction && tx.feePayer) {\n            addressToUse = tx.feePayer;\n\n            if (tx.from) {\n              console.log('\"from\" is ignored for a fee-delegated transaction.');\n              delete tx.from;\n            }\n          }\n\n          let wallet;\n\n          try {\n            wallet = method.accounts.wallet.getAccount(addressToUse);\n          } catch (e) {\n            sendTxCallback(e);\n            return;\n          }\n\n          if (wallet && wallet.privateKey) {\n            const privateKey = method.accounts._getRoleKey(tx, wallet); // If wallet was found, sign tx, and send using sendRawTransaction\n\n\n            return method.accounts.signTransaction(tx, privateKey).then(sendSignedTx).catch(e => {\n              sendTxCallback(e);\n            });\n          }\n\n          if (tx.signatures) {\n            // If signatures is defined inside of the transaction object,\n            // get rawTransaction string from signed transaction object and send to network\n            return method.accounts.getRawTransactionWithSignatures(tx).then(sendSignedTx).catch(e => {\n              sendTxCallback(e);\n            });\n          } // If wallet was not found in caver-js wallet, then it has to use wallet in Node.\n          // Signing to transaction using wallet in Node supports only LEGACY transaction, so if transaction is not LEGACY, return error.\n\n\n          if (tx.feePayer !== undefined || tx.type !== undefined && tx.type !== 'LEGACY') {\n            error = new Error(`No private key found in the caver-js wallet. Trying to use the Klaytn node's wallet, but it only supports legacy transactions. Please add private key of ${addressToUse} to the caver-js wallet.`);\n            sendTxCallback(error);\n            return;\n          }\n\n          error = validateParams(tx);\n\n          if (error) {\n            sendTxCallback(error);\n            return;\n          }\n\n          break;\n        }\n\n      case 'klay_sign':\n        {\n          const data = payload.params[1];\n          const wallet = method.accounts.wallet.getAccount(payload.params[0]);\n\n          if (wallet && wallet.privateKey) {\n            // If wallet was found, sign tx, and send using sendRawTransaction\n            const sign = method.accounts.sign(data, wallet.privateKey);\n            if (payload.callback) payload.callback(null, sign.signature);\n            defer.resolve(sign.signature);\n            return;\n          }\n\n          break;\n        }\n    }\n  } // When sending a request to send or sign a transaction using a key stored in a Klaytn node,\n  // the variable names inside the transaction must be properly formatted.\n  // { _from: '0x..', _signatures: ['0x..', '0x..', '0x..'] } -> { from: '0x..', signatures: { V: '0x..', R: '0x..', S: '0x..'} }\n\n\n  if (methodName.includes('sendTransaction') || methodName.includes('signTransaction')) {\n    const tx = {};\n    Object.keys(payload.params[0]).map(k => {\n      let key = k;\n      if (key.startsWith('_')) key = key.slice(1);\n\n      if (key === 'signatures' || key === 'feePayerSignatures') {\n        if (!utils.isEmptySig(payload.params[0][key])) {\n          tx[key] = utils.transformSignaturesToObject(payload.params[0][key]);\n\n          if (key === 'signatures' && (methodName === 'klay_signTransaction' || methodName === 'klay_sendTransaction')) {\n            console.warn(`When sign/send a transaction using the Node API, existing 'signatures' can be initialized.`);\n          }\n\n          if (key === 'feePayerSignatures' && (methodName === 'klay_signTransactionAsFeePayer' || methodName === 'klay_sendTransactionAsFeePayer')) {\n            console.warn(`When sign/send a transaction using the Node API, existing 'feePayerSignatures' can be initialized.`);\n          }\n        }\n      } else if (key === 'codeFormat') {\n        tx[key] = utils.hexToNumber(payload.params[0][key]);\n      } else if (key === 'key' && _.isObject(payload.params[0][key])) {\n        // If key field is `AccountForUpdate`, resolve this to raw encoded account key string.\n        tx.key = resolveRawKeyToAccountKey(payload.params[0]);\n      } else if (key === 'account') {\n        tx.key = payload.params[0][key].getRLPEncodingAccountKey();\n      } else if (key === 'chainId') {\n        if (payload.params[0].type !== undefined && payload.params[0].type.includes('Ethereum')) {\n          tx[key] = payload.params[0][key];\n        }\n      } else if (key === 'accessList') {\n        tx[key] = payload.params[0][key].toObject();\n      } else if (payload.params[0][key] !== '0x') {\n        tx[key] = payload.params[0][key];\n      }\n    });\n    payload.params[0] = tx;\n  }\n\n  return method.requestManager.send(payload, sendTxCallback);\n};\n\nconst buildSendFunc = (method, isSendTx) => function () {\n  const defer = utils.promiEvent(!isSendTx);\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const payload = method.toPayload(args);\n  const sendTxCallback = buildSendTxCallbackFunc(defer, method, payload, isSendTx);\n  const sendSignedTx = buildSendSignedTxFunc(method, payload, sendTxCallback);\n  const sendRequest = buildSendRequestFunc(defer, sendSignedTx, sendTxCallback);\n  const isGasPriceInputMissing = isSendTx && _.isObject(payload.params[0]) && payload.params[0].gasPrice === undefined; // If gasPrice input is missing, call getGasPrice rpc\n\n  if (!isGasPriceInputMissing) {\n    sendRequest(payload, method);\n    return defer.eventEmitter;\n  }\n\n  const getGasPrice = new Method({\n    name: 'getGasPrice',\n    call: 'klay_gasPrice',\n    params: 0\n  }).createFunction(method.requestManager);\n  getGasPrice((err, gasPrice) => {\n    // The TxTypeEthereumDynamicFee transaction does not use the gasPrice field,\n    // so the gas price default is not set for TxTypeEthereumDynamicFee.\n    if (payload.params[0].type !== TX_TYPE_STRING.TxTypeEthereumDynamicFee) {\n      payload.params[0].gasPrice = gasPrice || payload.params[0].gasPrice;\n    }\n\n    sendRequest(payload, method);\n  });\n  /**\n   * attaching `.on('receipt')` is possible by returning defer.eventEmitter\n   */\n\n  return defer.eventEmitter;\n};\n\nfunction buildCall() {\n  const method = this;\n  const isSendTx = method.call === 'klay_sendTransaction' || method.call === 'klay_sendTransactionAsFeePayer' || method.call === 'klay_sendRawTransaction' || method.call === 'personal_sendTransaction' || method.call === 'personal_sendValueTransfer' || method.call === 'personal_sendAccountUpdate';\n  const send = buildSendFunc(method, isSendTx); // necessary to attach things to the method\n\n  send.method = method; // necessary for batch requests\n\n  send.request = this.request.bind(this);\n  return send;\n}\n\nfunction _confirmTransaction(defer, result, payload) {\n  let payloadTxObject = payload.params && _.isObject(payload.params[0]) && payload.params[0] || {}; // If payload.params[0] is RLP-encoded string, decode RLP-encoded string to Transaction instance.\n\n  if (_.isString(payload.params[0])) payloadTxObject = TransactionDecoder.decode(payload.params[0]); // mutableConfirmationPack will be used in\n  // 1) checkConfirmation,\n  // 2) startWatching functions\n  // It is * mutable *, both functions can affect properties mutably.\n\n  const mutableConfirmationPack = {\n    method: this,\n    promiseResolved: false,\n    canUnsubscribe: true,\n    timeoutCount: 0,\n    intervalId: null,\n    gasProvided: payloadTxObject.gas || null,\n    isContractDeployment: utils.isContractDeployment(payloadTxObject),\n    defer,\n    result,\n    _klaytnCall: {}\n  };\n  addCustomSendMethod(mutableConfirmationPack);\n  kickoffConfirmation(mutableConfirmationPack);\n}\n\nconst addCustomSendMethod = mutableConfirmationPack => {\n  const customSendMethods = [new Method({\n    name: 'getTransactionReceipt',\n    call: 'klay_getTransactionReceipt',\n    params: 1,\n    outputFormatter: !mutableConfirmationPack.method.outputFormatterDisable ? formatters.outputTransactionReceiptFormatter : undefined\n  }), new Method({\n    name: 'getCode',\n    call: 'klay_getCode',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n  }), new Subscriptions({\n    name: 'subscribe',\n    type: 'klay',\n    subscriptions: {\n      newBlockHeaders: {\n        subscriptionName: 'newHeads',\n        // replace subscription with this name\n        params: 0,\n        outputFormatter: formatters.outputBlockFormatter\n      }\n    }\n  })]; // add custom send Methods\n\n  _.each(customSendMethods, mthd => {\n    // attach methods to _klaytnCall\n    mthd.attachToObject(mutableConfirmationPack._klaytnCall); // assign rather than call setRequestManager()\n\n    mthd.requestManager = mutableConfirmationPack.method.requestManager;\n  });\n};\n\nconst kickoffConfirmation = mutableConfirmationPack => {\n  // eslint-disable-next-line no-unused-vars\n  const {\n    defer,\n    promiseResolved,\n    result,\n    _klaytnCall\n  } = mutableConfirmationPack; // first check if we already have a confirmed transaction\n\n  _klaytnCall.getTransactionReceipt(result).then(receipt => {\n    if (receipt && receipt.blockHash) {\n      // `isPolling` is false in default.\n      checkConfirmation(mutableConfirmationPack, receipt, false);\n    } else if (!promiseResolved) startWatching(mutableConfirmationPack, receipt);\n  }).catch(() => {\n    if (!promiseResolved) startWatching(mutableConfirmationPack);\n  });\n}; // start watching for confirmation depending on the support features of the provider\n\n\nconst startWatching = function (mutableConfirmationPack, existingReceipt) {\n  // eslint-disable-next-line no-unused-vars\n  const {\n    _klaytnCall,\n    intervalId,\n    method\n  } = mutableConfirmationPack; // if provider allows PUB/SUB\n\n  if (method.requestManager.provider.supportsSubscriptions()) {\n    _klaytnCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, mutableConfirmationPack, existingReceipt, false));\n  } else {\n    mutableConfirmationPack.intervalId = setInterval(checkConfirmation.bind(null, mutableConfirmationPack, existingReceipt, true), 1000);\n  }\n}; // fire \"receipt\" and confirmation events and resolve after\n\n\nconst checkConfirmation = function (mutableConfirmationPack, existingReceipt, isPolling, err, blockHeader, sub) {\n  const {\n    // L1\n    intervalId,\n    // eslint-disable-line no-unused-vars\n    defer,\n    method,\n    canUnsubscribe,\n    // eslint-disable-line no-unused-vars\n    _klaytnCall,\n    // L2\n    isContractDeployment,\n    promiseResolved,\n    // eslint-disable-line no-unused-vars\n    timeoutCount,\n    // eslint-disable-line no-unused-vars\n    result\n  } = mutableConfirmationPack;\n\n  if (err) {\n    sub.unsubscribe();\n    mutableConfirmationPack.promiseResolved = true;\n\n    utils._fireError({\n      message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n      data: err\n    }, defer.eventEmitter, defer.reject);\n\n    return;\n  } // create fake unsubscribe\n\n\n  sub = sub || {\n    unsubscribe: () => clearInterval(mutableConfirmationPack.intervalId)\n  }; // if we have a valid receipt we don't need to send a request\n\n  return (existingReceipt && utils.promiEvent.resolve(existingReceipt) || _klaytnCall.getTransactionReceipt(result) // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n  ).then(receipt => {\n    checkIsReceiptInBlock(receipt);\n    const formattedReceipt = formatReceipt(receipt, method);\n    if (mutableConfirmationPack.promiseResolved) return;\n    return isContractDeployment ? checkForContractDeployment(mutableConfirmationPack, formattedReceipt, sub) : checkForNormalTx(mutableConfirmationPack, formattedReceipt, sub);\n  }).catch(countTimeout);\n};\n\nconst checkIsReceiptInBlock = receipt => {\n  if (receipt && !receipt.blockHash) throw errors.blockHashNull;\n};\n\nconst formatReceipt = (receipt, method) => {\n  if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n    receipt = method.extraFormatters.receiptFormatter(receipt);\n  }\n\n  return receipt;\n};\n\nconst countTimeout = (mutableConfirmationPack, isPolling, sub) => {\n  // eslint-disable-next-line no-unused-vars\n  const {\n    defer,\n    timeoutCount,\n    promiseResolved\n  } = mutableConfirmationPack; // time out the transaction if not mined after 50 blocks\n\n  mutableConfirmationPack.timeoutCount++; // check to see if we are http polling\n\n  if (isPolling) {\n    // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n    if (mutableConfirmationPack.timeoutCount - 1 >= POLLINGTIMEOUT) {\n      sub.unsubscribe();\n      mutableConfirmationPack.promiseResolved = true;\n\n      utils._fireError(new Error(`Transaction was not mined within${POLLINGTIMEOUT} seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!`), defer.eventEmitter, defer.reject);\n    }\n  } else if (mutableConfirmationPack.timeoutCount - 1 >= TIMEOUTBLOCK) {\n    sub.unsubscribe();\n    mutableConfirmationPack.promiseResolved = true;\n\n    utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n  }\n};\n\nconst checkForContractDeployment = (mutableConfirmationPack, receipt, sub) => {\n  // eslint-disable-next-line no-unused-vars\n  const {\n    defer,\n    method,\n    canUnsubscribe,\n    _klaytnCall,\n    promiseResolved\n  } = mutableConfirmationPack; // If contract address doesn't exist, fire error.\n\n  if (!receipt.contractAddress) {\n    if (canUnsubscribe) {\n      sub.unsubscribe();\n      mutableConfirmationPack.promiseResolved = true;\n    }\n\n    utils._fireError(errors.receiptDidntContainContractAddress, defer.eventEmitter, defer.reject);\n\n    return;\n  }\n\n  if (!receipt.status && receipt.txError) {\n    const receiptJSON = JSON.stringify(receipt, null, 2);\n\n    utils._fireError(new Error(`${errors.txErrorTable[receipt.txError]}\\n ${receiptJSON}`), defer.eventEmitter, defer.reject);\n  }\n\n  _klaytnCall.getCode(receipt.contractAddress, (e, code) => {\n    if (!code) return;\n    defer.eventEmitter.emit('receipt', receipt); // if contract, return instance instead of receipt\n\n    defer.resolve(method.extraFormatters && method.extraFormatters.contractDeployFormatter && method.extraFormatters.contractDeployFormatter(receipt) || receipt); // need to remove listeners, as they aren't removed automatically when succesfull\n\n    if (canUnsubscribe) defer.eventEmitter.removeAllListeners();\n    if (canUnsubscribe) sub.unsubscribe();\n    mutableConfirmationPack.promiseResolved = true;\n  });\n\n  return receipt;\n};\n\nconst checkForNormalTx = (mutableConfirmationPack, receipt, sub) => {\n  // eslint-disable-next-line no-unused-vars\n  const {\n    defer,\n    canUnsubscribe,\n    promiseResolved,\n    gasProvided\n  } = mutableConfirmationPack;\n\n  if (receipt && !receipt.outOfGas && (!gasProvided || gasProvided !== receipt.gasUsed) && (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n    // Happy case: transaction is processed well. A.K.A 'well-done receipt'.\n    try {\n      mutableConfirmationPack.defer.eventEmitter.emit('receipt', receipt);\n      mutableConfirmationPack.defer.resolve(receipt);\n    } catch (e) {\n      console.log('receipt error', e);\n    } // need to remove listeners, as they aren't removed automatically when succesfull\n\n\n    if (canUnsubscribe) {\n      mutableConfirmationPack.defer.eventEmitter.removeAllListeners();\n    }\n  } else {\n    // Unhappy case: trasaction has error. A.K.A 'bad receipt'.\n    if (!receipt) return;\n    const receiptJSON = JSON.stringify(receipt, null, 2);\n    const {\n      txError\n    } = receipt;\n\n    if (txError && errors.txErrorTable[txError]) {\n      utils._fireError(new Error(`${errors.txErrorTable[txError]}\\n ${receiptJSON}`), mutableConfirmationPack.defer.eventEmitter, mutableConfirmationPack.defer.reject);\n    } else if (receipt.status === false || receipt.status === '0x0') {\n      utils._fireError(errors.transactionReverted(receiptJSON), mutableConfirmationPack.defer.eventEmitter, mutableConfirmationPack.defer.reject);\n    } else if (receipt.gasUsed >= gasProvided) {\n      utils._fireError(errors.transactionRanOutOfGas(receiptJSON), mutableConfirmationPack.defer.eventEmitter, mutableConfirmationPack.defer.reject);\n    } else {\n      utils._fireError(errors.transactionRanOutOfGas(receiptJSON), mutableConfirmationPack.defer.eventEmitter, mutableConfirmationPack.defer.reject);\n    }\n  }\n\n  if (canUnsubscribe) sub.unsubscribe();\n  mutableConfirmationPack.promiseResolved = true;\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\n\n\nfunction request() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  const payload = this.toPayload(args);\n  payload.format = this.formatOutput.bind(this);\n  return payload;\n}\n\nmodule.exports = Method;","map":{"version":3,"names":["_","require","errors","formatters","utils","Subscriptions","subscriptions","validateParams","validateFunction","TIMEOUTBLOCK","AVERAGE_BLOCK_TIME","POLLINGTIMEOUT","TransactionDecoder","TX_TYPE_STRING","resolveRawKeyToAccountKey","Method","options","call","name","needNameCallPropertyToCreateMethod","hexCall","params","inputFormatter","outputFormatter","transformPayload","extraFormatters","requestManager","accounts","defaultBlock","defaultAccount","outputFormatterDisable","prototype","setRequestManager","createFunction","attachToObject","getCall","extractCallback","validateArgs","formatInput","formatOutput","toPayload","buildCall","_confirmTransaction","request","func","obj","callName","optionalName","split","getMethod","args","isHexParameter","isFunction","length","pop","InvalidNumberOfParams","_this","isEmpty","map","formatter","index","formattedInput","result","_formatOutput","res","isArray","callback","inputParams","payload","method","buildSendTxCallbackFunc","defer","isSendTx","err","e","Error","_fireError","error","eventEmitter","reject","resolve","emit","buildSendSignedTxFunc","sendTxCallback","signed","rawTransaction","signedPayload","extend","send","buildSendRequestFunc","sendSignedTx","methodName","transaction","isObject","getRawTransactionWithSignatures","then","catch","isString","getRLPEncoding","wallet","tx","addressToUse","from","senderRawTransaction","feePayer","console","log","getAccount","privateKey","_getRoleKey","signTransaction","signatures","undefined","type","data","sign","signature","includes","Object","keys","k","key","startsWith","slice","isEmptySig","transformSignaturesToObject","warn","hexToNumber","getRLPEncodingAccountKey","toObject","buildSendFunc","promiEvent","sendRequest","isGasPriceInputMissing","gasPrice","getGasPrice","TxTypeEthereumDynamicFee","bind","payloadTxObject","decode","mutableConfirmationPack","promiseResolved","canUnsubscribe","timeoutCount","intervalId","gasProvided","gas","isContractDeployment","_klaytnCall","addCustomSendMethod","kickoffConfirmation","customSendMethods","outputTransactionReceiptFormatter","inputAddressFormatter","inputDefaultBlockNumberFormatter","newBlockHeaders","subscriptionName","outputBlockFormatter","each","mthd","getTransactionReceipt","receipt","blockHash","checkConfirmation","startWatching","existingReceipt","provider","supportsSubscriptions","subscribe","setInterval","isPolling","blockHeader","sub","unsubscribe","message","clearInterval","checkIsReceiptInBlock","formattedReceipt","formatReceipt","checkForContractDeployment","checkForNormalTx","countTimeout","blockHashNull","receiptFormatter","contractAddress","receiptDidntContainContractAddress","status","txError","receiptJSON","JSON","stringify","txErrorTable","getCode","code","contractDeployFormatter","removeAllListeners","outOfGas","gasUsed","transactionReverted","transactionRanOutOfGas","format","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-core-method/src/index.js"],"sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-method/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\nconst _ = require('lodash')\nconst errors = require('../../caver-core-helpers').errors\nconst formatters = require('../../caver-core-helpers').formatters\nconst utils = require('../../caver-utils')\nconst Subscriptions = require('../../caver-core-subscriptions').subscriptions\nconst validateParams = require('../../caver-core-helpers').validateFunction.validateParams\n\nconst TIMEOUTBLOCK = 50\nconst AVERAGE_BLOCK_TIME = 1 // 1s\nconst POLLINGTIMEOUT = AVERAGE_BLOCK_TIME * TIMEOUTBLOCK // ~average block time (seconds) * TIMEOUTBLOCK\n\nconst TransactionDecoder = require('../../caver-transaction/src/transactionDecoder/transactionDecoder')\nconst { TX_TYPE_STRING } = require('../../caver-transaction/src/transactionHelper/transactionHelper')\nconst { resolveRawKeyToAccountKey } = require('../../caver-klay/caver-klay-accounts/src/transactionType/account')\n\nfunction Method(options) {\n    // call, name should be existed to create a method.\n    if (!options.call || !options.name) throw errors.needNameCallPropertyToCreateMethod\n\n    this.name = options.name\n    this.call = options.call\n    this.hexCall = options.hexCall\n    this.params = options.params || 0\n    this.inputFormatter = options.inputFormatter || []\n    this.outputFormatter = options.outputFormatter\n    this.transformPayload = options.transformPayload\n    this.extraFormatters = options.extraFormatters\n\n    this.requestManager = options.requestManager\n\n    // reference to klay.accounts\n    this.accounts = options.accounts\n\n    this.defaultBlock = options.defaultBlock || 'latest'\n    this.defaultAccount = options.defaultAccount || null\n\n    this.outputFormatterDisable = options.outputFormatterDisable\n}\n\nMethod.prototype.setRequestManager = setRequestManager\nMethod.prototype.createFunction = createFunction\nMethod.prototype.attachToObject = attachToObject\nMethod.prototype.getCall = getCall\nMethod.prototype.extractCallback = extractCallback\nMethod.prototype.validateArgs = validateArgs\nMethod.prototype.formatInput = formatInput\nMethod.prototype.formatOutput = formatOutput\nMethod.prototype.toPayload = toPayload\nMethod.prototype.buildCall = buildCall\nMethod.prototype._confirmTransaction = _confirmTransaction\nMethod.prototype.request = request\n\n/**\n * Set requestManager for rpc calling.\n * If it has accounts parameter also, set it.\n * @method setRequestManager\n * @param  {Object} requestManager\n * @param  {Object} accounts\n */\nfunction setRequestManager(requestManager, accounts) {\n    this.requestManager = requestManager\n\n    // reference to klay.accounts\n    if (accounts) this.accounts = accounts\n}\n\n/**\n * createFunction through 'this' context (= instance by created through new Method(...))\n * @method createFunction\n * @param  {Object} requestManager\n * @param  {Object} accounts\n * @return {Function} it will be used for sending RPC call.\n */\nfunction createFunction(requestManager, accounts) {\n    // set requestManager for method individulally.\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts)\n\n    // this.buildCall() returns function `send = function() { ... }`\n    const func = this.buildCall()\n\n    // call is directly used for rpc calling,\n    // ex) 'klay_sendTransaction'\n    func.call = this.call\n\n    return func\n}\n\n/**\n * attach buildCalled method to 'obj' object,\n * by adding a property name through this.name\n * @method attachToObject\n * @param  {Object} obj\n */\nfunction attachToObject(obj) {\n    const func = this.buildCall()\n    func.call = this.call\n    const [callName, optionalName] = this.name.split('.')\n\n    if (optionalName) {\n        obj[callName] = obj[callName] || {}\n        obj[callName][optionalName] = func\n        obj[callName][optionalName].getMethod = () => this\n    } else {\n        obj[callName] = func\n        obj[callName].getMethod = () => this\n    }\n}\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nfunction getCall(args) {\n    // If hexCall is defined, args[0] type is truly hexParameter, return this.hexCall\n    // If not, return this.call\n    // 'this.call', 'this.hexCall' are defined in rpc.json\n    return this.hexCall && utils.isHexParameter(args[0]) ? this.hexCall : this.call\n}\n\n/**\n * Should be used to extract callback from array of arguments.\n * (caution) It modifies input param.\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nfunction extractCallback(args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop() // 'pop' method modifies the original args array!\n    }\n}\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nfunction validateArgs(args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name)\n    }\n}\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nfunction formatInput(args) {\n    const _this = this\n\n    // If inputFormatter is not defined, or empty just return original args.\n    if (!this.inputFormatter || _.isEmpty(this.inputFormatter)) {\n        return args\n    }\n\n    // If inputFormatter is defined, map original args by calling formatter.\n    return this.inputFormatter.map((formatter, index) => {\n        // bind this for defaultBlock, and defaultAccount\n        let formattedInput = args[index]\n        if (formatter) {\n            formattedInput = formatter.call(_this, args[index])\n        }\n        return formattedInput\n    })\n}\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nfunction formatOutput(result) {\n    const _this = this\n\n    // If outputFormatter is defined, calling outputFormatter,\n    // If not, just return original res.\n    const _formatOutput = res => (typeof _this.outputFormatter === 'function' ? _this.outputFormatter(res) : res)\n\n    // If result is array, map it through calling _formatOuput\n    // If result is single, just calling _formatOutput.\n    return _.isArray(result) ? result.map(_formatOutput) : _formatOutput(result)\n}\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nfunction toPayload(args) {\n    const call = this.getCall(args)\n    const callback = this.extractCallback(args)\n    const inputParams = this.formatInput(args)\n    this.validateArgs(inputParams)\n\n    const payload = {\n        method: call,\n        params: inputParams,\n        callback,\n    }\n\n    // If payload transform option is existing, apply it.\n    // If not, just return payload.\n    return (this.transformPayload && this.transformPayload(payload)) || payload\n}\n\nconst buildSendTxCallbackFunc = (defer, method, payload, isSendTx) => (err, result) => {\n    try {\n        result = method.formatOutput(result)\n    } catch (e) {\n        if (!err) err = e\n    }\n\n    err = (result instanceof Error && result) || err\n\n    // If err exists, fireError\n    if (err) {\n        return utils._fireError(\n            err.error || err, // sometimes, err.error property exists, in case, fire it instead 'err'\n            defer.eventEmitter,\n            defer.reject,\n            payload.callback\n        )\n    }\n\n    // fire callback\n    if (payload.callback) payload.callback(null, result)\n\n    // return PROMISE\n    if (!isSendTx) {\n        defer.resolve(result)\n    } else {\n        defer.eventEmitter.emit('transactionHash', result)\n        method._confirmTransaction(defer, result, payload)\n    }\n}\n\nconst buildSendSignedTxFunc = (method, payload, sendTxCallback) => signed => {\n    const rawTransaction = signed.rawTransaction ? signed.rawTransaction : signed\n    const signedPayload = _.extend({}, payload, {\n        method: 'klay_sendRawTransaction',\n        params: [rawTransaction],\n    })\n\n    method.requestManager.send(signedPayload, sendTxCallback)\n}\n\nconst buildSendRequestFunc = (defer, sendSignedTx, sendTxCallback) => (payload, method) => {\n    const methodName = payload.method\n    // Logic for handling multiple cases of parameters in sendSignedTransaction.\n    // 1. Object containing rawTransaction\n    //    : call 'klay_sendRawTransaction' with RLP encoded transaction(rawTransaction) in object\n    // 2. A transaction object containing signatures or feePayerSignatures\n    //    : call 'getRawTransactionWithSignatures', then call 'klay_sendRawTransaction' with result of getRawTransactionWithSignatures\n    if (method && methodName === 'klay_sendRawTransaction') {\n        // The existence of accounts in the method means the implementation before the common architecture.\n        if (method.accounts) {\n            const transaction = payload.params[0]\n            if (typeof transaction !== 'string' && _.isObject(transaction)) {\n                if (transaction.rawTransaction) {\n                    return sendSignedTx(transaction)\n                }\n                return method.accounts\n                    .getRawTransactionWithSignatures(transaction)\n                    .then(sendSignedTx)\n                    .catch(e => {\n                        sendTxCallback(e)\n                    })\n            }\n        } else {\n            const transaction = payload.params[0]\n            if (!_.isString(transaction) && _.isObject(transaction) && _.isFunction(transaction.getRLPEncoding)) {\n                return sendSignedTx(transaction.getRLPEncoding())\n            }\n        }\n    }\n\n    // In the previous implementation of common architecture,\n    // if there was an account in the in-memory wallet before requesting to send or sign a transaction to the node,\n    // it was handled by using it.\n    if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n        switch (methodName) {\n            case 'klay_sendTransaction': {\n                const tx = payload.params[0]\n\n                let error\n                if (!_.isObject(tx)) {\n                    sendTxCallback(new Error('The transaction must be defined as an object.'))\n                    return\n                }\n\n                let addressToUse = tx.from\n\n                if (tx.senderRawTransaction && tx.feePayer) {\n                    addressToUse = tx.feePayer\n                    if (tx.from) {\n                        console.log('\"from\" is ignored for a fee-delegated transaction.')\n                        delete tx.from\n                    }\n                }\n\n                let wallet\n\n                try {\n                    wallet = method.accounts.wallet.getAccount(addressToUse)\n                } catch (e) {\n                    sendTxCallback(e)\n                    return\n                }\n\n                if (wallet && wallet.privateKey) {\n                    const privateKey = method.accounts._getRoleKey(tx, wallet)\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    return method.accounts\n                        .signTransaction(tx, privateKey)\n                        .then(sendSignedTx)\n                        .catch(e => {\n                            sendTxCallback(e)\n                        })\n                }\n                if (tx.signatures) {\n                    // If signatures is defined inside of the transaction object,\n                    // get rawTransaction string from signed transaction object and send to network\n                    return method.accounts\n                        .getRawTransactionWithSignatures(tx)\n                        .then(sendSignedTx)\n                        .catch(e => {\n                            sendTxCallback(e)\n                        })\n                }\n\n                // If wallet was not found in caver-js wallet, then it has to use wallet in Node.\n                // Signing to transaction using wallet in Node supports only LEGACY transaction, so if transaction is not LEGACY, return error.\n                if (tx.feePayer !== undefined || (tx.type !== undefined && tx.type !== 'LEGACY')) {\n                    error = new Error(\n                        `No private key found in the caver-js wallet. Trying to use the Klaytn node's wallet, but it only supports legacy transactions. Please add private key of ${addressToUse} to the caver-js wallet.`\n                    )\n                    sendTxCallback(error)\n                    return\n                }\n\n                error = validateParams(tx)\n                if (error) {\n                    sendTxCallback(error)\n                    return\n                }\n                break\n            }\n            case 'klay_sign': {\n                const data = payload.params[1]\n                const wallet = method.accounts.wallet.getAccount(payload.params[0])\n\n                if (wallet && wallet.privateKey) {\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    const sign = method.accounts.sign(data, wallet.privateKey)\n\n                    if (payload.callback) payload.callback(null, sign.signature)\n\n                    defer.resolve(sign.signature)\n                    return\n                }\n                break\n            }\n        }\n    }\n\n    // When sending a request to send or sign a transaction using a key stored in a Klaytn node,\n    // the variable names inside the transaction must be properly formatted.\n    // { _from: '0x..', _signatures: ['0x..', '0x..', '0x..'] } -> { from: '0x..', signatures: { V: '0x..', R: '0x..', S: '0x..'} }\n    if (methodName.includes('sendTransaction') || methodName.includes('signTransaction')) {\n        const tx = {}\n        Object.keys(payload.params[0]).map(k => {\n            let key = k\n            if (key.startsWith('_')) key = key.slice(1)\n            if (key === 'signatures' || key === 'feePayerSignatures') {\n                if (!utils.isEmptySig(payload.params[0][key])) {\n                    tx[key] = utils.transformSignaturesToObject(payload.params[0][key])\n\n                    if (key === 'signatures' && (methodName === 'klay_signTransaction' || methodName === 'klay_sendTransaction')) {\n                        console.warn(`When sign/send a transaction using the Node API, existing 'signatures' can be initialized.`)\n                    }\n\n                    if (\n                        key === 'feePayerSignatures' &&\n                        (methodName === 'klay_signTransactionAsFeePayer' || methodName === 'klay_sendTransactionAsFeePayer')\n                    ) {\n                        console.warn(`When sign/send a transaction using the Node API, existing 'feePayerSignatures' can be initialized.`)\n                    }\n                }\n            } else if (key === 'codeFormat') {\n                tx[key] = utils.hexToNumber(payload.params[0][key])\n            } else if (key === 'key' && _.isObject(payload.params[0][key])) {\n                // If key field is `AccountForUpdate`, resolve this to raw encoded account key string.\n                tx.key = resolveRawKeyToAccountKey(payload.params[0])\n            } else if (key === 'account') {\n                tx.key = payload.params[0][key].getRLPEncodingAccountKey()\n            } else if (key === 'chainId') {\n                if (payload.params[0].type !== undefined && payload.params[0].type.includes('Ethereum')) {\n                    tx[key] = payload.params[0][key]\n                }\n            } else if (key === 'accessList') {\n                tx[key] = payload.params[0][key].toObject()\n            } else if (payload.params[0][key] !== '0x') {\n                tx[key] = payload.params[0][key]\n            }\n        })\n        payload.params[0] = tx\n    }\n\n    return method.requestManager.send(payload, sendTxCallback)\n}\n\nconst buildSendFunc = (method, isSendTx) => (...args) => {\n    const defer = utils.promiEvent(!isSendTx)\n    const payload = method.toPayload(args)\n\n    const sendTxCallback = buildSendTxCallbackFunc(defer, method, payload, isSendTx)\n    const sendSignedTx = buildSendSignedTxFunc(method, payload, sendTxCallback)\n    const sendRequest = buildSendRequestFunc(defer, sendSignedTx, sendTxCallback)\n\n    const isGasPriceInputMissing = isSendTx && _.isObject(payload.params[0]) && payload.params[0].gasPrice === undefined\n\n    // If gasPrice input is missing, call getGasPrice rpc\n    if (!isGasPriceInputMissing) {\n        sendRequest(payload, method)\n        return defer.eventEmitter\n    }\n\n    const getGasPrice = new Method({\n        name: 'getGasPrice',\n        call: 'klay_gasPrice',\n        params: 0,\n    }).createFunction(method.requestManager)\n\n    getGasPrice((err, gasPrice) => {\n        // The TxTypeEthereumDynamicFee transaction does not use the gasPrice field,\n        // so the gas price default is not set for TxTypeEthereumDynamicFee.\n        if (payload.params[0].type !== TX_TYPE_STRING.TxTypeEthereumDynamicFee) {\n            payload.params[0].gasPrice = gasPrice || payload.params[0].gasPrice\n        }\n        sendRequest(payload, method)\n    })\n\n    /**\n     * attaching `.on('receipt')` is possible by returning defer.eventEmitter\n     */\n    return defer.eventEmitter\n}\n\nfunction buildCall() {\n    const method = this\n    const isSendTx =\n        method.call === 'klay_sendTransaction' ||\n        method.call === 'klay_sendTransactionAsFeePayer' ||\n        method.call === 'klay_sendRawTransaction' ||\n        method.call === 'personal_sendTransaction' ||\n        method.call === 'personal_sendValueTransfer' ||\n        method.call === 'personal_sendAccountUpdate'\n\n    const send = buildSendFunc(method, isSendTx)\n    // necessary to attach things to the method\n    send.method = method\n    // necessary for batch requests\n    send.request = this.request.bind(this)\n    return send\n}\n\nfunction _confirmTransaction(defer, result, payload) {\n    let payloadTxObject = (payload.params && _.isObject(payload.params[0]) && payload.params[0]) || {}\n\n    // If payload.params[0] is RLP-encoded string, decode RLP-encoded string to Transaction instance.\n    if (_.isString(payload.params[0])) payloadTxObject = TransactionDecoder.decode(payload.params[0])\n\n    // mutableConfirmationPack will be used in\n    // 1) checkConfirmation,\n    // 2) startWatching functions\n    // It is * mutable *, both functions can affect properties mutably.\n    const mutableConfirmationPack = {\n        method: this,\n        promiseResolved: false,\n        canUnsubscribe: true,\n        timeoutCount: 0,\n        intervalId: null,\n        gasProvided: payloadTxObject.gas || null,\n        isContractDeployment: utils.isContractDeployment(payloadTxObject),\n        defer,\n        result,\n        _klaytnCall: {},\n    }\n\n    addCustomSendMethod(mutableConfirmationPack)\n\n    kickoffConfirmation(mutableConfirmationPack)\n}\n\nconst addCustomSendMethod = mutableConfirmationPack => {\n    const customSendMethods = [\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'klay_getTransactionReceipt',\n            params: 1,\n            outputFormatter: !mutableConfirmationPack.method.outputFormatterDisable\n                ? formatters.outputTransactionReceiptFormatter\n                : undefined,\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'klay_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'klay',\n            subscriptions: {\n                newBlockHeaders: {\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter,\n                },\n            },\n        }),\n    ]\n\n    // add custom send Methods\n    _.each(customSendMethods, mthd => {\n        // attach methods to _klaytnCall\n        mthd.attachToObject(mutableConfirmationPack._klaytnCall)\n        // assign rather than call setRequestManager()\n        mthd.requestManager = mutableConfirmationPack.method.requestManager\n    })\n}\n\nconst kickoffConfirmation = mutableConfirmationPack => {\n    // eslint-disable-next-line no-unused-vars\n    const { defer, promiseResolved, result, _klaytnCall } = mutableConfirmationPack\n    // first check if we already have a confirmed transaction\n\n    _klaytnCall\n        .getTransactionReceipt(result)\n        .then(receipt => {\n            if (receipt && receipt.blockHash) {\n                // `isPolling` is false in default.\n                checkConfirmation(mutableConfirmationPack, receipt, false)\n            } else if (!promiseResolved) startWatching(mutableConfirmationPack, receipt)\n        })\n        .catch(() => {\n            if (!promiseResolved) startWatching(mutableConfirmationPack)\n        })\n}\n\n// start watching for confirmation depending on the support features of the provider\nconst startWatching = function(mutableConfirmationPack, existingReceipt) {\n    // eslint-disable-next-line no-unused-vars\n    const { _klaytnCall, intervalId, method } = mutableConfirmationPack\n    // if provider allows PUB/SUB\n    if (method.requestManager.provider.supportsSubscriptions()) {\n        _klaytnCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, mutableConfirmationPack, existingReceipt, false))\n    } else {\n        mutableConfirmationPack.intervalId = setInterval(checkConfirmation.bind(null, mutableConfirmationPack, existingReceipt, true), 1000)\n    }\n}\n\n// fire \"receipt\" and confirmation events and resolve after\n\nconst checkConfirmation = function(mutableConfirmationPack, existingReceipt, isPolling, err, blockHeader, sub) {\n    const {\n        // L1\n        intervalId, // eslint-disable-line no-unused-vars\n        defer,\n        method,\n        canUnsubscribe, // eslint-disable-line no-unused-vars\n        _klaytnCall,\n        // L2\n        isContractDeployment,\n        promiseResolved, // eslint-disable-line no-unused-vars\n        timeoutCount, // eslint-disable-line no-unused-vars\n        result,\n    } = mutableConfirmationPack\n\n    if (err) {\n        sub.unsubscribe()\n        mutableConfirmationPack.promiseResolved = true\n        utils._fireError(\n            {\n                message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n                data: err,\n            },\n            defer.eventEmitter,\n            defer.reject\n        )\n        return\n    }\n\n    // create fake unsubscribe\n    sub = sub || {\n        unsubscribe: () => clearInterval(mutableConfirmationPack.intervalId),\n    }\n\n    // if we have a valid receipt we don't need to send a request\n    return (\n        ((existingReceipt && utils.promiEvent.resolve(existingReceipt)) || _klaytnCall.getTransactionReceipt(result))\n            // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n            .then(receipt => {\n                checkIsReceiptInBlock(receipt)\n\n                const formattedReceipt = formatReceipt(receipt, method)\n\n                if (mutableConfirmationPack.promiseResolved) return\n\n                return isContractDeployment\n                    ? checkForContractDeployment(mutableConfirmationPack, formattedReceipt, sub)\n                    : checkForNormalTx(mutableConfirmationPack, formattedReceipt, sub)\n            })\n            .catch(countTimeout)\n    )\n}\n\nconst checkIsReceiptInBlock = receipt => {\n    if (receipt && !receipt.blockHash) throw errors.blockHashNull\n}\n\nconst formatReceipt = (receipt, method) => {\n    if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n        receipt = method.extraFormatters.receiptFormatter(receipt)\n    }\n    return receipt\n}\n\nconst countTimeout = (mutableConfirmationPack, isPolling, sub) => {\n    // eslint-disable-next-line no-unused-vars\n    const { defer, timeoutCount, promiseResolved } = mutableConfirmationPack\n    // time out the transaction if not mined after 50 blocks\n    mutableConfirmationPack.timeoutCount++\n\n    // check to see if we are http polling\n    if (isPolling) {\n        // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n        if (mutableConfirmationPack.timeoutCount - 1 >= POLLINGTIMEOUT) {\n            sub.unsubscribe()\n            mutableConfirmationPack.promiseResolved = true\n            utils._fireError(\n                new Error(\n                    `Transaction was not mined within${POLLINGTIMEOUT} seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!`\n                ),\n                defer.eventEmitter,\n                defer.reject\n            )\n        }\n    } else if (mutableConfirmationPack.timeoutCount - 1 >= TIMEOUTBLOCK) {\n        sub.unsubscribe()\n        mutableConfirmationPack.promiseResolved = true\n        utils._fireError(\n            new Error(\n                'Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'\n            ),\n            defer.eventEmitter,\n            defer.reject\n        )\n    }\n}\n\nconst checkForContractDeployment = (mutableConfirmationPack, receipt, sub) => {\n    // eslint-disable-next-line no-unused-vars\n    const { defer, method, canUnsubscribe, _klaytnCall, promiseResolved } = mutableConfirmationPack\n\n    // If contract address doesn't exist, fire error.\n    if (!receipt.contractAddress) {\n        if (canUnsubscribe) {\n            sub.unsubscribe()\n            mutableConfirmationPack.promiseResolved = true\n        }\n\n        utils._fireError(errors.receiptDidntContainContractAddress, defer.eventEmitter, defer.reject)\n        return\n    }\n\n    if (!receipt.status && receipt.txError) {\n        const receiptJSON = JSON.stringify(receipt, null, 2)\n        utils._fireError(new Error(`${errors.txErrorTable[receipt.txError]}\\n ${receiptJSON}`), defer.eventEmitter, defer.reject)\n    }\n\n    _klaytnCall.getCode(receipt.contractAddress, (e, code) => {\n        if (!code) return\n\n        defer.eventEmitter.emit('receipt', receipt)\n\n        // if contract, return instance instead of receipt\n        defer.resolve(\n            (method.extraFormatters &&\n                method.extraFormatters.contractDeployFormatter &&\n                method.extraFormatters.contractDeployFormatter(receipt)) ||\n                receipt\n        )\n\n        // need to remove listeners, as they aren't removed automatically when succesfull\n        if (canUnsubscribe) defer.eventEmitter.removeAllListeners()\n\n        if (canUnsubscribe) sub.unsubscribe()\n        mutableConfirmationPack.promiseResolved = true\n    })\n\n    return receipt\n}\n\nconst checkForNormalTx = (mutableConfirmationPack, receipt, sub) => {\n    // eslint-disable-next-line no-unused-vars\n    const { defer, canUnsubscribe, promiseResolved, gasProvided } = mutableConfirmationPack\n\n    if (\n        receipt &&\n        !receipt.outOfGas &&\n        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')\n    ) {\n        // Happy case: transaction is processed well. A.K.A 'well-done receipt'.\n        try {\n            mutableConfirmationPack.defer.eventEmitter.emit('receipt', receipt)\n            mutableConfirmationPack.defer.resolve(receipt)\n        } catch (e) {\n            console.log('receipt error', e)\n        }\n\n        // need to remove listeners, as they aren't removed automatically when succesfull\n        if (canUnsubscribe) {\n            mutableConfirmationPack.defer.eventEmitter.removeAllListeners()\n        }\n    } else {\n        // Unhappy case: trasaction has error. A.K.A 'bad receipt'.\n        if (!receipt) return\n        const receiptJSON = JSON.stringify(receipt, null, 2)\n\n        const { txError } = receipt\n        if (txError && errors.txErrorTable[txError]) {\n            utils._fireError(\n                new Error(`${errors.txErrorTable[txError]}\\n ${receiptJSON}`),\n                mutableConfirmationPack.defer.eventEmitter,\n                mutableConfirmationPack.defer.reject\n            )\n        } else if (receipt.status === false || receipt.status === '0x0') {\n            utils._fireError(\n                errors.transactionReverted(receiptJSON),\n                mutableConfirmationPack.defer.eventEmitter,\n                mutableConfirmationPack.defer.reject\n            )\n        } else if (receipt.gasUsed >= gasProvided) {\n            utils._fireError(\n                errors.transactionRanOutOfGas(receiptJSON),\n                mutableConfirmationPack.defer.eventEmitter,\n                mutableConfirmationPack.defer.reject\n            )\n        } else {\n            utils._fireError(\n                errors.transactionRanOutOfGas(receiptJSON),\n                mutableConfirmationPack.defer.eventEmitter,\n                mutableConfirmationPack.defer.reject\n            )\n        }\n    }\n\n    if (canUnsubscribe) sub.unsubscribe()\n    mutableConfirmationPack.promiseResolved = true\n}\n\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nfunction request(...args) {\n    const payload = this.toPayload(args)\n    payload.format = this.formatOutput.bind(this)\n    return payload\n}\n\nmodule.exports = Method\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}