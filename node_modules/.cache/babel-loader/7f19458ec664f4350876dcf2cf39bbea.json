{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = exports.parseValidatorKeys = exports.parseValidatorKey = exports.parseUserKeys = exports.parseUserKey = void 0;\n\nconst errors = __importStar(require(\"../errors\"));\n\nconst userKeys_1 = require(\"./userKeys\");\n\nconst validatorKeys_1 = require(\"./validatorKeys\");\n\nfunction parseUserKey(text) {\n  let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let keys = parseUserKeys(text);\n  return keys[index];\n}\n\nexports.parseUserKey = parseUserKey;\n\nfunction parseUserKeys(text) {\n  // The user PEM files encode both the seed and the pubkey in their payloads.\n  let buffers = parse(text, userKeys_1.USER_SEED_LENGTH + userKeys_1.USER_PUBKEY_LENGTH);\n  return buffers.map(buffer => new userKeys_1.UserSecretKey(buffer.slice(0, userKeys_1.USER_SEED_LENGTH)));\n}\n\nexports.parseUserKeys = parseUserKeys;\n\nfunction parseValidatorKey(text) {\n  let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let keys = parseValidatorKeys(text);\n  return keys[index];\n}\n\nexports.parseValidatorKey = parseValidatorKey;\n\nfunction parseValidatorKeys(text) {\n  let buffers = parse(text, validatorKeys_1.VALIDATOR_SECRETKEY_LENGTH);\n  return buffers.map(buffer => new validatorKeys_1.ValidatorSecretKey(buffer));\n}\n\nexports.parseValidatorKeys = parseValidatorKeys;\n\nfunction parse(text, expectedLength) {\n  // Split by newlines, trim whitespace, then discard remaining empty lines.\n  let lines = text.split(/\\r?\\n/).map(line => line.trim()).filter(line => line.length > 0);\n  let buffers = [];\n  let linesAccumulator = [];\n\n  for (const line of lines) {\n    if (line.startsWith(\"-----BEGIN\")) {\n      linesAccumulator = [];\n    } else if (line.startsWith(\"-----END\")) {\n      let asBase64 = linesAccumulator.join(\"\");\n      let asHex = Buffer.from(asBase64, \"base64\").toString();\n      let asBytes = Buffer.from(asHex, \"hex\");\n\n      if (asBytes.length != expectedLength) {\n        throw new errors.ErrBadPEM(`incorrect key length: expected ${expectedLength}, found ${asBytes.length}`);\n      }\n\n      buffers.push(asBytes);\n      linesAccumulator = [];\n    } else {\n      linesAccumulator.push(line);\n    }\n  }\n\n  if (linesAccumulator.length != 0) {\n    throw new errors.ErrBadPEM(\"incorrect file structure\");\n  }\n\n  return buffers;\n}\n\nexports.parse = parse;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,SAAgBA,YAAhB,CAA6BC,IAA7B,EAA4D;EAAA,IAAjBC,KAAiB,uEAAD,CAAC;EACxD,IAAIC,IAAI,GAAGC,aAAa,CAACH,IAAD,CAAxB;EACA,OAAOE,IAAI,CAACD,KAAD,CAAX;AACH;;AAHDG;;AAKA,SAAgBD,aAAhB,CAA8BH,IAA9B,EAA0C;EACtC;EACA,IAAIK,OAAO,GAAGC,KAAK,CAACN,IAAD,EAAOO,8BAAmBA,6BAA1B,CAAnB;EACA,OAAOF,OAAO,CAACG,GAAR,CAAYC,MAAM,IAAI,IAAIF,wBAAJ,CAAkBE,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgBH,2BAAhB,CAAlB,CAAtB,CAAP;AACH;;AAJDH;;AAMA,SAAgBO,iBAAhB,CAAkCX,IAAlC,EAAiE;EAAA,IAAjBC,KAAiB,uEAAD,CAAC;EAC7D,IAAIC,IAAI,GAAGU,kBAAkB,CAACZ,IAAD,CAA7B;EACA,OAAOE,IAAI,CAACD,KAAD,CAAX;AACH;;AAHDG;;AAKA,SAAgBQ,kBAAhB,CAAmCZ,IAAnC,EAA+C;EAC3C,IAAIK,OAAO,GAAGC,KAAK,CAACN,IAAD,EAAOa,0CAAP,CAAnB;EACA,OAAOR,OAAO,CAACG,GAAR,CAAYC,MAAM,IAAI,IAAII,kCAAJ,CAAuBJ,MAAvB,CAAtB,CAAP;AACH;;AAHDL;;AAKA,SAAgBE,KAAhB,CAAsBN,IAAtB,EAAoCc,cAApC,EAA0D;EACtD;EACA,IAAIC,KAAK,GAAGf,IAAI,CAACgB,KAAL,CAAW,OAAX,EAAoBR,GAApB,CAAwBS,IAAI,IAAIA,IAAI,CAACC,IAAL,EAAhC,EAA6CC,MAA7C,CAAoDF,IAAI,IAAIA,IAAI,CAACG,MAAL,GAAc,CAA1E,CAAZ;EACA,IAAIf,OAAO,GAAa,EAAxB;EACA,IAAIgB,gBAAgB,GAAa,EAAjC;;EAEA,KAAK,MAAMJ,IAAX,IAAmBF,KAAnB,EAA0B;IACtB,IAAIE,IAAI,CAACK,UAAL,CAAgB,YAAhB,CAAJ,EAAmC;MAC/BD,gBAAgB,GAAG,EAAnB;IACH,CAFD,MAEO,IAAIJ,IAAI,CAACK,UAAL,CAAgB,UAAhB,CAAJ,EAAiC;MACpC,IAAIC,QAAQ,GAAGF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,CAAf;MACA,IAAIC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsB,QAAtB,EAAgCK,QAAhC,EAAZ;MACA,IAAIC,OAAO,GAAGH,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmB,KAAnB,CAAd;;MAEA,IAAII,OAAO,CAACT,MAAR,IAAkBN,cAAtB,EAAsC;QAClC,MAAM,IAAIgB,MAAM,CAACC,SAAX,CAAqB,kCAAkCjB,cAAc,WAAWe,OAAO,CAACT,MAAM,EAA9F,CAAN;MACH;;MAEDf,OAAO,CAAC2B,IAAR,CAAaH,OAAb;MACAR,gBAAgB,GAAG,EAAnB;IACH,CAXM,MAWA;MACHA,gBAAgB,CAACW,IAAjB,CAAsBf,IAAtB;IACH;EACJ;;EAED,IAAII,gBAAgB,CAACD,MAAjB,IAA2B,CAA/B,EAAkC;IAC9B,MAAM,IAAIU,MAAM,CAACC,SAAX,CAAqB,0BAArB,CAAN;EACH;;EAED,OAAO1B,OAAP;AACH;;AA9BDD","names":["parseUserKey","text","index","keys","parseUserKeys","exports","buffers","parse","userKeys_1","map","buffer","slice","parseValidatorKey","parseValidatorKeys","validatorKeys_1","expectedLength","lines","split","line","trim","filter","length","linesAccumulator","startsWith","asBase64","join","asHex","Buffer","from","toString","asBytes","errors","ErrBadPEM","push"],"sourceRoot":"","sources":["../../src/walletcore/pem.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}