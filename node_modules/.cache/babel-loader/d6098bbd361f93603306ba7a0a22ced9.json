{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkConfig = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst networkParams_1 = require(\"./networkParams\");\n/**\n * An object holding Network configuration parameters.\n */\n\n\nclass NetworkConfig {\n  constructor() {\n    this.ChainID = new networkParams_1.ChainID(\"T\");\n    this.GasPerDataByte = 1500;\n    this.TopUpFactor = 0;\n    this.RoundDuration = 0;\n    this.RoundsPerEpoch = 0;\n    this.TopUpRewardsGradientPoint = new bignumber_js_1.default(0);\n    this.MinGasLimit = new networkParams_1.GasLimit(50000);\n    this.MinGasPrice = new networkParams_1.GasPrice(1000000000);\n    this.GasPriceModifier = new networkParams_1.GasPriceModifier(1);\n    this.MinTransactionVersion = new networkParams_1.TransactionVersion(1);\n  }\n  /**\n   * Gets the default configuration object (think of the Singleton pattern).\n   */\n\n\n  static getDefault() {\n    if (!NetworkConfig.default) {\n      NetworkConfig.default = new NetworkConfig();\n    }\n\n    return NetworkConfig.default;\n  }\n  /**\n   * Synchronizes a configuration object by querying the Network, through a {@link IProvider}.\n   * @param provider The provider to use\n   */\n\n\n  sync(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let fresh = yield provider.getNetworkConfig();\n      Object.assign(this, fresh);\n    });\n  }\n  /**\n   * Constructs a configuration object from a HTTP response (as returned by the provider).\n   */\n\n\n  static fromHttpResponse(payload) {\n    let networkConfig = new NetworkConfig();\n    networkConfig.ChainID = new networkParams_1.ChainID(payload[\"erd_chain_id\"]);\n    networkConfig.GasPerDataByte = Number(payload[\"erd_gas_per_data_byte\"]);\n    networkConfig.TopUpFactor = Number(payload[\"erd_top_up_factor\"]);\n    networkConfig.RoundDuration = Number(payload[\"erd_round_duration\"]);\n    networkConfig.RoundsPerEpoch = Number(payload[\"erd_rounds_per_epoch\"]);\n    networkConfig.TopUpRewardsGradientPoint = new bignumber_js_1.default(payload[\"erd_rewards_top_up_gradient_point\"]);\n    networkConfig.MinGasLimit = new networkParams_1.GasLimit(payload[\"erd_min_gas_limit\"]);\n    networkConfig.MinGasPrice = new networkParams_1.GasPrice(payload[\"erd_min_gas_price\"]);\n    networkConfig.MinTransactionVersion = new networkParams_1.TransactionVersion(payload[\"erd_min_transaction_version\"]);\n    networkConfig.GasPriceModifier = new networkParams_1.GasPriceModifier(payload[\"erd_gas_price_modifier\"]);\n    return networkConfig;\n  }\n\n}\n\nexports.NetworkConfig = NetworkConfig;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AAEA;;;;;AAGA,MAAaA,aAAb,CAA0B;EAmDtBC;IACI,KAAKC,OAAL,GAAe,IAAIC,uBAAJ,CAAY,GAAZ,CAAf;IACA,KAAKC,cAAL,GAAsB,IAAtB;IACA,KAAKC,WAAL,GAAmB,CAAnB;IACA,KAAKC,aAAL,GAAqB,CAArB;IACA,KAAKC,cAAL,GAAsB,CAAtB;IACA,KAAKC,yBAAL,GAAiC,IAAIC,sBAAJ,CAAc,CAAd,CAAjC;IACA,KAAKC,WAAL,GAAmB,IAAIP,wBAAJ,CAAa,KAAb,CAAnB;IACA,KAAKQ,WAAL,GAAmB,IAAIR,wBAAJ,CAAa,UAAb,CAAnB;IACA,KAAKS,gBAAL,GAAwB,IAAIT,gCAAJ,CAAqB,CAArB,CAAxB;IACA,KAAKU,qBAAL,GAA6B,IAAIV,kCAAJ,CAAuB,CAAvB,CAA7B;EACH;EAED;;;;;EAGiB,OAAVW,UAAU;IACb,IAAI,CAACd,aAAa,CAACe,OAAnB,EAA4B;MACxBf,aAAa,CAACe,OAAd,GAAwB,IAAIf,aAAJ,EAAxB;IACH;;IAED,OAAOA,aAAa,CAACe,OAArB;EACH;EAED;;;;;;EAIMC,IAAI,CAACC,QAAD,EAAoB;;MAC1B,IAAIC,KAAK,GAAkB,MAAMD,QAAQ,CAACE,gBAAT,EAAjC;MACAC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBH,KAApB;IACH;EAAA;EAED;;;;;EAGuB,OAAhBI,gBAAgB,CAACC,OAAD,EAAa;IAChC,IAAIC,aAAa,GAAG,IAAIxB,aAAJ,EAApB;IAEAwB,aAAa,CAACtB,OAAd,GAAwB,IAAIC,uBAAJ,CAAYoB,OAAO,CAAC,cAAD,CAAnB,CAAxB;IACAC,aAAa,CAACpB,cAAd,GAA+BqB,MAAM,CAACF,OAAO,CAAC,uBAAD,CAAR,CAArC;IACAC,aAAa,CAACnB,WAAd,GAA4BoB,MAAM,CAACF,OAAO,CAAC,mBAAD,CAAR,CAAlC;IACAC,aAAa,CAAClB,aAAd,GAA8BmB,MAAM,CAACF,OAAO,CAAC,oBAAD,CAAR,CAApC;IACAC,aAAa,CAACjB,cAAd,GAA+BkB,MAAM,CAACF,OAAO,CAAC,sBAAD,CAAR,CAArC;IACAC,aAAa,CAAChB,yBAAd,GAA0C,IAAIC,sBAAJ,CAAcc,OAAO,CAAC,mCAAD,CAArB,CAA1C;IACAC,aAAa,CAACd,WAAd,GAA4B,IAAIP,wBAAJ,CAAaoB,OAAO,CAAC,mBAAD,CAApB,CAA5B;IACAC,aAAa,CAACb,WAAd,GAA4B,IAAIR,wBAAJ,CAAaoB,OAAO,CAAC,mBAAD,CAApB,CAA5B;IACAC,aAAa,CAACX,qBAAd,GAAsC,IAAIV,kCAAJ,CAAuBoB,OAAO,CAAC,6BAAD,CAA9B,CAAtC;IACAC,aAAa,CAACZ,gBAAd,GAAiC,IAAIT,gCAAJ,CAAqBoB,OAAO,CAAC,wBAAD,CAA5B,CAAjC;IAEA,OAAOC,aAAP;EACH;;AAtGqB;;AAA1BE","names":["NetworkConfig","constructor","ChainID","networkParams_1","GasPerDataByte","TopUpFactor","RoundDuration","RoundsPerEpoch","TopUpRewardsGradientPoint","bignumber_js_1","MinGasLimit","MinGasPrice","GasPriceModifier","MinTransactionVersion","getDefault","default","sync","provider","fresh","getNetworkConfig","Object","assign","fromHttpResponse","payload","networkConfig","Number","exports"],"sourceRoot":"","sources":["../src/networkConfig.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}