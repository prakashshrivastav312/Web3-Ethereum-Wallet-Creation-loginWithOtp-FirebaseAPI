{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst varuint = require('../varint');\n\nconst bip32Derivation = require('./bip32Derivation');\n\nconst isValidBIP340Key = pubkey => pubkey.length === 32;\n\nfunction makeConverter(TYPE_BYTE) {\n  const parent = bip32Derivation.makeConverter(TYPE_BYTE, isValidBIP340Key);\n\n  function decode(keyVal) {\n    const nHashes = varuint.decode(keyVal.value);\n    const nHashesLen = varuint.encodingLength(nHashes);\n    const base = parent.decode({\n      key: keyVal.key,\n      value: keyVal.value.slice(nHashesLen + nHashes * 32)\n    });\n    const leafHashes = new Array(nHashes);\n\n    for (let i = 0, _offset = nHashesLen; i < nHashes; i++, _offset += 32) {\n      leafHashes[i] = keyVal.value.slice(_offset, _offset + 32);\n    }\n\n    return Object.assign({}, base, {\n      leafHashes\n    });\n  }\n\n  function encode(data) {\n    const base = parent.encode(data);\n    const nHashesLen = varuint.encodingLength(data.leafHashes.length);\n    const nHashesBuf = Buffer.allocUnsafe(nHashesLen);\n    varuint.encode(data.leafHashes.length, nHashesBuf);\n    const value = Buffer.concat([nHashesBuf, ...data.leafHashes, base.value]);\n    return Object.assign({}, base, {\n      value\n    });\n  }\n\n  const expected = '{ ' + 'masterFingerprint: Buffer; ' + 'pubkey: Buffer; ' + 'path: string; ' + 'leafHashes: Buffer[]; ' + '}';\n\n  function check(data) {\n    return Array.isArray(data.leafHashes) && data.leafHashes.every(leafHash => Buffer.isBuffer(leafHash) && leafHash.length === 32) && parent.check(data);\n  }\n\n  return {\n    decode,\n    encode,\n    check,\n    expected,\n    canAddToArray: parent.canAddToArray\n  };\n}\n\nexports.makeConverter = makeConverter;","map":{"version":3,"names":["Object","defineProperty","exports","value","varuint","require","bip32Derivation","isValidBIP340Key","pubkey","length","makeConverter","TYPE_BYTE","parent","decode","keyVal","nHashes","nHashesLen","encodingLength","base","key","slice","leafHashes","Array","i","_offset","assign","encode","data","nHashesBuf","Buffer","allocUnsafe","concat","expected","check","isArray","every","leafHash","isBuffer","canAddToArray"],"sources":["C:/Users/acer/node_modules/bip174/src/lib/converter/shared/tapBip32Derivation.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst varuint = require('../varint');\nconst bip32Derivation = require('./bip32Derivation');\nconst isValidBIP340Key = pubkey => pubkey.length === 32;\nfunction makeConverter(TYPE_BYTE) {\n  const parent = bip32Derivation.makeConverter(TYPE_BYTE, isValidBIP340Key);\n  function decode(keyVal) {\n    const nHashes = varuint.decode(keyVal.value);\n    const nHashesLen = varuint.encodingLength(nHashes);\n    const base = parent.decode({\n      key: keyVal.key,\n      value: keyVal.value.slice(nHashesLen + nHashes * 32),\n    });\n    const leafHashes = new Array(nHashes);\n    for (let i = 0, _offset = nHashesLen; i < nHashes; i++, _offset += 32) {\n      leafHashes[i] = keyVal.value.slice(_offset, _offset + 32);\n    }\n    return Object.assign({}, base, { leafHashes });\n  }\n  function encode(data) {\n    const base = parent.encode(data);\n    const nHashesLen = varuint.encodingLength(data.leafHashes.length);\n    const nHashesBuf = Buffer.allocUnsafe(nHashesLen);\n    varuint.encode(data.leafHashes.length, nHashesBuf);\n    const value = Buffer.concat([nHashesBuf, ...data.leafHashes, base.value]);\n    return Object.assign({}, base, { value });\n  }\n  const expected =\n    '{ ' +\n    'masterFingerprint: Buffer; ' +\n    'pubkey: Buffer; ' +\n    'path: string; ' +\n    'leafHashes: Buffer[]; ' +\n    '}';\n  function check(data) {\n    return (\n      Array.isArray(data.leafHashes) &&\n      data.leafHashes.every(\n        leafHash => Buffer.isBuffer(leafHash) && leafHash.length === 32,\n      ) &&\n      parent.check(data)\n    );\n  }\n  return {\n    decode,\n    encode,\n    check,\n    expected,\n    canAddToArray: parent.canAddToArray,\n  };\n}\nexports.makeConverter = makeConverter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}