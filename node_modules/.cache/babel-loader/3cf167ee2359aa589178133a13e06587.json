{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encryptor = void 0;\n\nconst crypto_1 = __importDefault(require(\"crypto\"));\n\nconst randomness_1 = require(\"./randomness\");\n\nconst derivationParams_1 = require(\"./derivationParams\");\n\nconst constants_1 = require(\"./constants\");\n\nconst encryptedData_1 = require(\"./encryptedData\");\n\nclass Encryptor {\n  static encrypt(data, password) {\n    let randomness = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new randomness_1.Randomness();\n    const kdParams = new derivationParams_1.ScryptKeyDerivationParams();\n    const derivedKey = kdParams.generateDerivedKey(Buffer.from(password), randomness.salt);\n    const derivedKeyFirstHalf = derivedKey.slice(0, 16);\n    const derivedKeySecondHalf = derivedKey.slice(16, 32);\n    const cipher = crypto_1.default.createCipheriv(constants_1.CipherAlgorithm, derivedKeyFirstHalf, randomness.iv);\n    const ciphertext = Buffer.concat([cipher.update(data), cipher.final()]);\n    const mac = crypto_1.default.createHmac(constants_1.DigestAlgorithm, derivedKeySecondHalf).update(ciphertext).digest();\n    return new encryptedData_1.EncryptedData({\n      version: constants_1.Version,\n      id: randomness.id,\n      ciphertext: ciphertext.toString('hex'),\n      iv: randomness.iv.toString('hex'),\n      cipher: constants_1.CipherAlgorithm,\n      kdf: constants_1.KeyDerivationFunction,\n      kdfparams: kdParams,\n      mac: mac.toString('hex'),\n      salt: randomness.salt.toString('hex')\n    });\n  }\n\n}\n\nexports.Encryptor = Encryptor;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAaA,SAAb,CAAsB;EACC,OAAPC,OAAO,CAACC,IAAD,EAAeC,QAAf,EAA0E;IAAA,IAAzCC,UAAyC,uEAAhB,IAAIC,uBAAJ,EAAgB;IAC7F,MAAMC,QAAQ,GAAG,IAAIC,4CAAJ,EAAjB;IACA,MAAMC,UAAU,GAAGF,QAAQ,CAACG,kBAAT,CAA4BC,MAAM,CAACC,IAAP,CAAYR,QAAZ,CAA5B,EAAmDC,UAAU,CAACQ,IAA9D,CAAnB;IACA,MAAMC,mBAAmB,GAAGL,UAAU,CAACM,KAAX,CAAiB,CAAjB,EAAoB,EAApB,CAA5B;IACA,MAAMC,oBAAoB,GAAGP,UAAU,CAACM,KAAX,CAAiB,EAAjB,EAAqB,EAArB,CAA7B;IACA,MAAME,MAAM,GAAGC,iBAAOC,cAAP,CAAsBC,2BAAtB,EAAuCN,mBAAvC,EAA4DT,UAAU,CAACgB,EAAvE,CAAf;IAEA,MAAMC,UAAU,GAAGX,MAAM,CAACY,MAAP,CAAc,CAACN,MAAM,CAACO,MAAP,CAAcrB,IAAd,CAAD,EAAsBc,MAAM,CAACQ,KAAP,EAAtB,CAAd,CAAnB;IACA,MAAMC,GAAG,GAAGR,iBAAOS,UAAP,CAAkBP,2BAAlB,EAAmCJ,oBAAnC,EAAyDQ,MAAzD,CAAgEF,UAAhE,EAA4EM,MAA5E,EAAZ;IAEA,OAAO,IAAIC,6BAAJ,CAAkB;MACvBC,OAAO,EAAEV,mBADc;MAEvBW,EAAE,EAAE1B,UAAU,CAAC0B,EAFQ;MAGvBT,UAAU,EAAEA,UAAU,CAACU,QAAX,CAAoB,KAApB,CAHW;MAIvBX,EAAE,EAAEhB,UAAU,CAACgB,EAAX,CAAcW,QAAd,CAAuB,KAAvB,CAJmB;MAKvBf,MAAM,EAAEG,2BALe;MAMvBa,GAAG,EAAEb,iCANkB;MAOvBc,SAAS,EAAE3B,QAPY;MAQvBmB,GAAG,EAAEA,GAAG,CAACM,QAAJ,CAAa,KAAb,CARkB;MASvBnB,IAAI,EAAER,UAAU,CAACQ,IAAX,CAAgBmB,QAAhB,CAAyB,KAAzB;IATiB,CAAlB,CAAP;EAWD;;AAtBmB;;AAAtBG","names":["Encryptor","encrypt","data","password","randomness","randomness_1","kdParams","derivationParams_1","derivedKey","generateDerivedKey","Buffer","from","salt","derivedKeyFirstHalf","slice","derivedKeySecondHalf","cipher","crypto_1","createCipheriv","constants_1","iv","ciphertext","concat","update","final","mac","createHmac","digest","encryptedData_1","version","id","toString","kdf","kdfparams","exports"],"sourceRoot":"","sources":["../../src/crypto/encryptor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}