{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multihash = require('multihashes');\n\nconst configure = require('../lib/configure');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nconst multicodec = require('multicodec');\n\nconst loadFormat = require('../lib/ipld-formats');\n\nmodule.exports = configure((api, opts) => {\n  const load = loadFormat(opts.ipld);\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/put')>}\n   */\n\n  const put = async function (dagNode) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n    }\n\n    let encodingOptions;\n\n    if (options.cid) {\n      const cid = new CID(options.cid);\n      encodingOptions = { ...options,\n        format: multicodec.getName(cid.code),\n        hashAlg: multihash.decode(cid.multihash).name\n      };\n      delete options.cid;\n    } else {\n      encodingOptions = options;\n    }\n\n    const settings = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...encodingOptions\n    };\n    const format = await load(settings.format);\n    const serialized = format.util.serialize(dagNode); // allow aborting requests on body errors\n\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, settings.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n    const res = await api.post('dag/put', {\n      timeout: settings.timeout,\n      signal,\n      searchParams: toUrlSearchParams(settings),\n      ...(await multipartRequest(serialized, controller, settings.headers))\n    });\n    const data = await res.json();\n    return new CID(data.Cid['/']);\n  };\n\n  return put;\n});","map":{"version":3,"names":["CID","require","multihash","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","multicodec","loadFormat","module","exports","api","opts","load","ipld","put","dagNode","options","cid","format","hashAlg","Error","encodingOptions","getName","code","decode","name","settings","inputEnc","serialized","util","serialize","controller","signal","res","post","timeout","searchParams","headers","data","json","Cid"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/dag/put.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nconst multicodec = require('multicodec')\nconst loadFormat = require('../lib/ipld-formats')\n\nmodule.exports = configure((api, opts) => {\n  const load = loadFormat(opts.ipld)\n\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/put')>}\n   */\n  const put = async (dagNode, options = {}) => {\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options')\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options')\n    }\n\n    let encodingOptions\n    if (options.cid) {\n      const cid = new CID(options.cid)\n      encodingOptions = {\n        ...options,\n        format: multicodec.getName(cid.code),\n        hashAlg: multihash.decode(cid.multihash).name\n      }\n      delete options.cid\n    } else {\n      encodingOptions = options\n    }\n\n    const settings = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...encodingOptions\n    }\n\n    const format = await load(settings.format)\n    const serialized = format.util.serialize(dagNode)\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, settings.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('dag/put', {\n      timeout: settings.timeout,\n      signal,\n      searchParams: toUrlSearchParams(settings),\n      ...(\n        await multipartRequest(serialized, controller, settings.headers)\n      )\n    })\n    const data = await res.json()\n\n    return new CID(data.Cid['/'])\n  }\n\n  return put\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}