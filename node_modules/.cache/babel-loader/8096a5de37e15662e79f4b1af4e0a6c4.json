{"ast":null,"code":"import * as HD from '@vechain/ethers/utils/hdnode';\nimport { randomBytes } from 'crypto';\nimport { HDNode } from './hdnode';\nexport var mnemonic;\n\n(function (mnemonic) {\n  /**\n   * generate BIP39 mnemonic words\n   * @param rng the optional random number generator, which generates 16~32 (step 4) random bytes.\n   * Every 4 bytes produce 3 words.\n   */\n  function generate(rng) {\n    rng = rng || (() => randomBytes(128 / 8));\n\n    return HD.entropyToMnemonic(rng()).split(' ');\n  }\n\n  mnemonic.generate = generate;\n  /**\n   * check if the given mnemonic words have valid checksum\n   * @param words mnemonic words\n   */\n\n  function validate(words) {\n    return HD.isValidMnemonic(words.join(' '));\n  }\n\n  mnemonic.validate = validate;\n  /**\n   * derive private key at index 0 from mnemonic words according to BIP32.\n   * the derivation path is defined at https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n   */\n\n  function derivePrivateKey(words) {\n    return HDNode.fromMnemonic(words).derive(0).privateKey;\n  }\n\n  mnemonic.derivePrivateKey = derivePrivateKey;\n})(mnemonic || (mnemonic = {}));","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,8BAApB;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,OAAM,IAAWC,QAAX;;AAAN,WAAiBA,QAAjB,EAAyB;EACrB;;;;;EAKA,SAAgBC,QAAhB,CAAyBC,GAAzB,EAA2C;IACvCA,GAAG,GAAGA,GAAG,KAAK,MAAMJ,WAAW,CAAC,MAAM,CAAP,CAAtB,CAAT;;IACA,OAAOD,EAAE,CAACM,iBAAH,CAAqBD,GAAG,EAAxB,EAA4BE,KAA5B,CAAkC,GAAlC,CAAP;EACH;;EAHeJ,oBAAQC,QAAR;EAKhB;;;;;EAIA,SAAgBI,QAAhB,CAAyBC,KAAzB,EAAwC;IACpC,OAAOT,EAAE,CAACU,eAAH,CAAmBD,KAAK,CAACE,IAAN,CAAW,GAAX,CAAnB,CAAP;EACH;;EAFeR,oBAAQK,QAAR;EAIhB;;;;;EAIA,SAAgBI,gBAAhB,CAAiCH,KAAjC,EAAgD;IAC5C,OAAOP,MAAM,CAACW,YAAP,CAAoBJ,KAApB,EAA2BK,MAA3B,CAAkC,CAAlC,EAAqCC,UAA5C;EACH;;EAFeZ,4BAAgBS,gBAAhB;AAGnB,CA1BD,EAAiBT,QAAQ,KAARA,QAAQ,MAAzB","names":["HD","randomBytes","HDNode","mnemonic","generate","rng","entropyToMnemonic","split","validate","words","isValidMnemonic","join","derivePrivateKey","fromMnemonic","derive","privateKey"],"sourceRoot":"","sources":["../../src/cry/mnemonic.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}