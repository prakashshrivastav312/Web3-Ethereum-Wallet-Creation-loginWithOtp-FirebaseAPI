{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendAlgoBurnFTSignedTransaction = exports.prepareAlgoBurnFTSignedTransaction = exports.sendAlgoTransferFTSignedTransaction = exports.prepareAlgoTransferFTSignedTransaction = exports.sendAlgoCreateFTSignedTransaction = exports.prepareAlgoCreateFTSignedTransaction = exports.sendAlgoBurnFractionalNFTSignedTransaction = exports.prepareAlgoBurnFractionalNFTSignedTransaction = exports.sendAlgoTransferFractionalNFTSignedTransaction = exports.prepareAlgoTransferFractionalNFTSignedTransaction = exports.sendAlgoCreateFractionalNFTSignedTransaction = exports.prepareAlgoCreateFractionalNFTSignedTransaction = exports.sendAlgoBurnNFTSignedTransaction = exports.prepareAlgoBurnNFTSignedTransaction = exports.sendAlgoReceiveNFTSignedTransaction = exports.sendAlgoTransferNFTSignedTransaction = exports.prepareAlgoReceiveNFTSignedTransaction = exports.prepareAlgoTransferNFTSignedTransaction = exports.sendAlgoCreateNFTSignedTransaction = exports.prepareAlgoCreateNFTSignedTransaction = exports.signAlgoKMSTransaction = exports.sendAlgoSignedTransaction = exports.prepareAlgoSignedTransaction = exports.getAlgoIndexerClient = exports.getAlgoClient = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst util_1 = require(\"util\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst model_1 = require(\"../model\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst algosdk = require('algosdk');\n\nconst base32 = require('base32.js');\n\nconst Url = require('url-parse');\n/**\n * Algod V2 Client\n * @param testnet if the algorand node is testnet or not\n * @param provider url of the algorand server endpoint\n * @returns algorand Client\n */\n\n\nconst getAlgoClient = (testnet, provider) => {\n  if (provider) {\n    return new algosdk.Algodv2(`${(testnet ? process.env.TATUM_ALGORAND_TESTNET_TOKEN : process.env.TATUM_ALGORAND_MAINNET_TOKEN) || 'DUMMYTOKEN'}`, provider, Url(provider).port);\n  } else {\n    return new algosdk.Algodv2({\n      'X-API-Key': testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_KEY}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_KEY}`\n    }, testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_ALGOD_URL}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_ALGOD_URL}`, '');\n  }\n};\n\nexports.getAlgoClient = getAlgoClient;\n/**\n * Algo Indexer Client\n * @param testnet if the algorand node is testnet or not\n * @param provider url of the algorand server endpoint\n * @returns algorand Indexer Client\n */\n\nconst getAlgoIndexerClient = (testnet, provider) => {\n  if (provider) {\n    return new algosdk.Indexer(`${(testnet ? process.env.TATUM_ALGORAND_TESTNET_TOKEN : process.env.TATUM_ALGORAND_MAINNET_TOKEN) || 'DUMMYTOKEN'}`, provider, Url(provider).port);\n  } else {\n    return new algosdk.Indexer({\n      'X-API-Key': testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_KEY}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_KEY}`\n    }, testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_INDEXER_URL}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_INDEXER_URL}`, '');\n  }\n};\n\nexports.getAlgoIndexerClient = getAlgoIndexerClient;\n/**\n * Algorand transaction signing\n * @param testnet if the algorand node is testnet or not\n * @param tx content of the transaction to broadcast\n * @param provider url of the algorand server endpoint for purestake.io restapi\n * @returns transaction data to be broadcast to blockchain\n */\n\nconst prepareAlgoSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const enc = new util_1.TextEncoder();\n  const note = enc.encode(tx.note ? tx.note : '');\n  const txn = algosdk.makePaymentTxnWithSuggestedParams(tx.from, tx.to, new bignumber_js_1.default(tx.amount).multipliedBy(1000000).toNumber(), undefined, note, Object.assign(Object.assign({}, params), {\n    fee: new bignumber_js_1.default(tx.fee).multipliedBy(1000000).toNumber(),\n    flatFee: true\n  }));\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoSignedTransaction = prepareAlgoSignedTransaction;\n/**\n * Send Algorand transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendAlgoSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoSignedTransaction = sendAlgoSignedTransaction;\n/**\n * Sign Algorand pending transaction from Tatum KMS\n * @param tx pendding transaction from Tatum KMS\n * @param fromPrivateKey private key to sign transaction with\n * @param testnet mainnet or testnet version\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signAlgoKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {\n  if (tx.chain !== model_1.Currency.ALGO) {\n    throw Error('Unsupported chain.');\n  }\n\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = JSON.parse(tx.serializedTransaction);\n  txn.from = algosdk.encodeAddress(new Uint8Array(Object.values(txn.from.publicKey)));\n  txn.to = algosdk.encodeAddress(new Uint8Array(Object.values(txn.to.publicKey)));\n  txn.note = new Uint8Array(Object.values(txn.note || ''));\n  txn.lease = undefined;\n\n  if (txn.tag) {\n    if (txn.tag.data) {\n      txn.tag = Buffer.from(txn.tag.data);\n    }\n  }\n\n  txn.genesisHash = Buffer.from(txn.genesisHash.data);\n\n  if (txn.assetManager) {\n    txn.assetManager = algosdk.encodeAddress(new Uint8Array(Object.values(txn.assetManager.publicKey)));\n  }\n\n  if (txn.assetReserve) {\n    txn.assetReserve = undefined;\n  }\n\n  if (txn.assetFreeze) {\n    txn.assetFreeze = undefined;\n  }\n\n  if (txn.assetClawback) {\n    txn.assetClawback = undefined;\n  }\n\n  if (txn.assetRevocationTarget) {\n    txn.assetRevocationTarget = undefined;\n  }\n\n  if (txn.reKeyTo) {\n    txn.reKeyTo = undefined;\n  }\n\n  if (txn.assetMetadataHash) {\n    txn.assetMetadataHash = new Uint8Array(Object.values(txn.assetMetadataHash));\n  }\n\n  const _txn = new algosdk.Transaction(txn);\n\n  const secretKey = new Uint8Array(decoder.write(fromPrivateKey).buf);\n  return Buffer.from(_txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.signAlgoKMSTransaction = signAlgoKMSTransaction;\n/**\n * Sign Algorand create NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain\n */\n\nconst prepareAlgoCreateNFTSignedTransaction = async (testnet, tx, provider) => {\n  var _a, _b, _c, _d, _e;\n\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetCreateTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, 1, 0, false, (_a = tx.attr) === null || _a === void 0 ? void 0 : _a.manager, (_b = tx.attr) === null || _b === void 0 ? void 0 : _b.reserve, (_c = tx.attr) === null || _c === void 0 ? void 0 : _c.freeze, (_d = tx.attr) === null || _d === void 0 ? void 0 : _d.clawback, (_e = tx.attr) === null || _e === void 0 ? void 0 : _e.assetUnit, tx.name, tx.url, undefined, params);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoCreateNFTSignedTransaction = prepareAlgoCreateNFTSignedTransaction;\n/**\n * Send Algorand create NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendAlgoCreateNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoCreateNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoCreateNFTSignedTransaction = sendAlgoCreateNFTSignedTransaction;\n/**\n * Sign Algorand transfer NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoTransferNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, tx.to, undefined, undefined, 1, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoTransferNFTSignedTransaction = prepareAlgoTransferNFTSignedTransaction;\n/**\n * Sign Algorand receive NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoReceiveNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const from = tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from;\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(from, from, undefined, undefined, 0, undefined, tx.assetId, params);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoReceiveNFTSignedTransaction = prepareAlgoReceiveNFTSignedTransaction;\n/**\n * Send Algorand Transfer NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoTransferNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoTransferNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoTransferNFTSignedTransaction = sendAlgoTransferNFTSignedTransaction;\n/**\n * Send Algorand Receive NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoReceiveNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoReceiveNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoReceiveNFTSignedTransaction = sendAlgoReceiveNFTSignedTransaction;\n/**\n * Sign Algorand burn NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoBurnNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetDestroyTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoBurnNFTSignedTransaction = prepareAlgoBurnNFTSignedTransaction;\n/**\n * Send Algorand burn NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoBurnNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoBurnNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoBurnNFTSignedTransaction = sendAlgoBurnNFTSignedTransaction;\n/**\n * Sign Algorand create Fractional NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoCreateFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const v = Math.floor(Math.log10(new bignumber_js_1.default(tx.amount).toNumber()));\n  const txn = algosdk.makeAssetCreateTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(10).pow(v).toNumber(), v, false, tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, undefined, undefined, tx.tokenId, tx.contractAddress, tx.url, undefined, params);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoCreateFractionalNFTSignedTransaction = prepareAlgoCreateFractionalNFTSignedTransaction;\n/**\n * Send Algorand create Fractinoal NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoCreateFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoCreateFractionalNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoCreateFractionalNFTSignedTransaction = sendAlgoCreateFractionalNFTSignedTransaction;\n/**\n * Sign Algorand transfer Fractional NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoTransferFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, tx.to, undefined, undefined, new bignumber_js_1.default(tx.amount).toNumber(), undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoTransferFractionalNFTSignedTransaction = prepareAlgoTransferFractionalNFTSignedTransaction;\n/**\n * Send Algorand transfer Fractinoal NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoTransferFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoTransferFractionalNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoTransferFractionalNFTSignedTransaction = sendAlgoTransferFractionalNFTSignedTransaction;\n/**\n * Sign Algorand burn Fracational NFT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connecto to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoBurnFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetDestroyTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoBurnFractionalNFTSignedTransaction = prepareAlgoBurnFractionalNFTSignedTransaction;\n/**\n * Send Algorand burn Fractional NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoBurnFractionalNFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoBurnFractionalNFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoBurnFractionalNFTSignedTransaction = sendAlgoBurnFractionalNFTSignedTransaction;\n/**\n * Sign Algorand create FT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connnect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoCreateFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetCreateTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.supply).shiftedBy(new bignumber_js_1.default(tx.digits).toNumber()).toNumber(), new bignumber_js_1.default(tx.digits).toNumber(), false, tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, undefined, undefined, tx.symbol, tx.name, tx.url, undefined, params);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoCreateFTSignedTransaction = prepareAlgoCreateFTSignedTransaction;\n/**\n * Send Algorand create FT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoCreateFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoCreateFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoCreateFTSignedTransaction = sendAlgoCreateFTSignedTransaction;\n/**\n * Sign Algorand transfer FT transaction with private kwy locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoTransferFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, tx.to, undefined, undefined, new bignumber_js_1.default(tx.amount).shiftedBy(tx.digits || 1).toNumber(), undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoTransferFTSignedTransaction = prepareAlgoTransferFTSignedTransaction;\n/**\n * Send Algorand transfer FT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoTransferFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoTransferFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoTransferFTSignedTransaction = sendAlgoTransferFTSignedTransaction;\n/**\n * Sign ALgorand burn FT transaction with private key locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareAlgoBurnFTSignedTransaction = async (testnet, tx, provider) => {\n  const algodClient = exports.getAlgoClient(testnet, provider);\n  const params = await algodClient.getTransactionParams().do();\n  const decoder = new base32.Decoder({\n    type: 'rfc4648'\n  });\n  const txn = algosdk.makeAssetDestroyTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);\n\n  if (tx.signatureId) {\n    return JSON.stringify(txn);\n  }\n\n  const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);\n  return Buffer.from(txn.signTxn(secretKey)).toString('hex');\n};\n\nexports.prepareAlgoBurnFTSignedTransaction = prepareAlgoBurnFTSignedTransaction;\n/**\n * Sned Algorand burn FT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * @param testnet mainnet or testnet version\n * @param tx content of the transaction to broadcast\n * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain.\n */\n\nconst sendAlgoBurnFTSignedTransaction = async (testnet, tx, provider) => {\n  return await blockchain_1.algorandBroadcast(await exports.prepareAlgoBurnFTSignedTransaction(testnet, tx, provider));\n};\n\nexports.sendAlgoBurnFTSignedTransaction = sendAlgoBurnFTSignedTransaction;","map":{"version":3,"mappings":"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","names":["algosdk","require","base32","Url","getAlgoClient","testnet","provider","Algodv2","process","env","TATUM_ALGORAND_TESTNET_TOKEN","TATUM_ALGORAND_MAINNET_TOKEN","port","TATUM_ALGORAND_TESTNET_THIRD_API_KEY","TATUM_ALGORAND_MAINNET_THIRD_API_KEY","TATUM_ALGORAND_TESTNET_THIRD_API_ALGOD_URL","TATUM_ALGORAND_MAINNET_THIRD_API_ALGOD_URL","exports","getAlgoIndexerClient","Indexer","TATUM_ALGORAND_TESTNET_THIRD_API_INDEXER_URL","TATUM_ALGORAND_MAINNET_THIRD_API_INDEXER_URL","prepareAlgoSignedTransaction","tx","algodClient","params","getTransactionParams","do","decoder","Decoder","type","enc","util_1","note","encode","txn","makePaymentTxnWithSuggestedParams","from","to","bignumber_js_1","amount","multipliedBy","toNumber","undefined","Object","fee","flatFee","signatureId","JSON","stringify","secretKey","Uint8Array","write","fromPrivateKey","buf","Buffer","signTxn","toString","sendAlgoSignedTransaction","blockchain_1","signAlgoKMSTransaction","chain","model_1","ALGO","Error","parse","serializedTransaction","encodeAddress","values","publicKey","lease","tag","data","genesisHash","assetManager","assetReserve","assetFreeze","assetClawback","assetRevocationTarget","reKeyTo","assetMetadataHash","_txn","Transaction","prepareAlgoCreateNFTSignedTransaction","makeAssetCreateTxnWithSuggestedParams","wallet_1","attr","_a","manager","_b","reserve","_c","freeze","_d","clawback","_e","assetUnit","name","url","sendAlgoCreateNFTSignedTransaction","prepareAlgoTransferNFTSignedTransaction","makeAssetTransferTxnWithSuggestedParams","contractAddress","prepareAlgoReceiveNFTSignedTransaction","assetId","sendAlgoTransferNFTSignedTransaction","sendAlgoReceiveNFTSignedTransaction","prepareAlgoBurnNFTSignedTransaction","makeAssetDestroyTxnWithSuggestedParams","sendAlgoBurnNFTSignedTransaction","prepareAlgoCreateFractionalNFTSignedTransaction","v","Math","floor","log10","pow","tokenId","sendAlgoCreateFractionalNFTSignedTransaction","prepareAlgoTransferFractionalNFTSignedTransaction","sendAlgoTransferFractionalNFTSignedTransaction","prepareAlgoBurnFractionalNFTSignedTransaction","sendAlgoBurnFractionalNFTSignedTransaction","prepareAlgoCreateFTSignedTransaction","supply","shiftedBy","digits","symbol","sendAlgoCreateFTSignedTransaction","prepareAlgoTransferFTSignedTransaction","sendAlgoTransferFTSignedTransaction","prepareAlgoBurnFTSignedTransaction","sendAlgoBurnFTSignedTransaction"],"sourceRoot":"","sources":["../../../src/transaction/algo.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}