{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateAddress = exports.generatePubKey = exports.hexStr2byteArray = void 0;\n/* tslint:disable:no-bitwise */\n\nconst elliptic_1 = require(\"elliptic\");\n\nconst js_sha3_1 = require(\"js-sha3\");\n\nconst hexChar2byte = c => {\n  let d = 0;\n  if (c >= 'A' && c <= 'F') d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;else if (c >= 'a' && c <= 'f') d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;else if (c >= '0' && c <= '9') d = c.charCodeAt(0) - '0'.charCodeAt(0);\n  return d;\n};\n\nconst isHexChar = c => {\n  if (c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f' || c >= '0' && c <= '9') {\n    return 1;\n  }\n\n  return 0;\n};\n\nconst hexStr2byteArray = str => {\n  const byteArray = [];\n  let d = 0;\n  let j = 0;\n  let k = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charAt(i);\n\n    if (isHexChar(c)) {\n      d <<= 4;\n      d += hexChar2byte(c);\n      j++;\n\n      if (0 === j % 2) {\n        byteArray[k++] = d;\n        d = 0;\n      }\n    }\n  }\n\n  return byteArray;\n};\n\nexports.hexStr2byteArray = hexStr2byteArray; // @ts-ignore\n\nconst byte2hexStr = byte => {\n  const hexByteMap = '0123456789ABCDEF';\n  let str = '';\n  str += hexByteMap.charAt(byte >> 4);\n  str += hexByteMap.charAt(byte & 0x0f);\n  return str;\n};\n\nconst byteArray2hexStr = byteArray => {\n  let str = '';\n\n  for (let i = 0; i < byteArray.length; i++) str += byte2hexStr(byteArray[i]);\n\n  return str;\n};\n\nconst computeAddress = pubBytes => {\n  if (pubBytes.length === 65) pubBytes = pubBytes.slice(1);\n  const hash = js_sha3_1.keccak_256(pubBytes).toString();\n  const addressHex = '41' + hash.substring(24);\n  return exports.hexStr2byteArray(addressHex);\n};\n\nconst generatePubKey = bytes => {\n  const ec = new elliptic_1.ec('secp256k1');\n  const key = ec.keyFromPublic(bytes, 'bytes');\n  const pubkey = key.getPublic();\n  const x = pubkey.getX();\n  const y = pubkey.getY();\n  let xHex = x.toString('hex');\n\n  while (xHex.length < 64) {\n    xHex = '0' + xHex;\n  }\n\n  let yHex = y.toString('hex');\n\n  while (yHex.length < 64) {\n    yHex = '0' + yHex;\n  }\n\n  return '04' + xHex + yHex;\n};\n\nexports.generatePubKey = generatePubKey; // @ts-ignore\n\nconst generateAddress = publicKey => byteArray2hexStr(computeAddress(exports.hexStr2byteArray(exports.generatePubKey(publicKey))));\n\nexports.generateAddress = generateAddress;","map":{"version":3,"mappings":"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","names":["hexChar2byte","c","d","charCodeAt","isHexChar","hexStr2byteArray","str","byteArray","j","k","i","length","charAt","exports","byte2hexStr","byte","hexByteMap","byteArray2hexStr","computeAddress","pubBytes","slice","hash","js_sha3_1","toString","addressHex","substring","generatePubKey","bytes","ec","elliptic_1","key","keyFromPublic","pubkey","getPublic","x","getX","y","getY","xHex","yHex","generateAddress","publicKey"],"sourceRoot":"","sources":["../../../src/wallet/tron.crypto.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}