{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar secp256k1 = __importStar(require(\"secp256k1\"));\n\nfunction privateKeyVerify(privateKey) {\n  return secp256k1.privateKeyVerify(privateKey);\n}\n\nexports.privateKeyVerify = privateKeyVerify;\n\nfunction publicKeyCreate(privateKey, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n\n  return Buffer.from(secp256k1.publicKeyCreate(privateKey, compressed));\n}\n\nexports.publicKeyCreate = publicKeyCreate;\n\nfunction publicKeyVerify(publicKey) {\n  return secp256k1.publicKeyVerify(publicKey);\n}\n\nexports.publicKeyVerify = publicKeyVerify;\n\nfunction publicKeyConvert(publicKey, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n\n  return Buffer.from(secp256k1.publicKeyConvert(publicKey, compressed));\n}\n\nexports.publicKeyConvert = publicKeyConvert;\n\nfunction privateKeyTweakAdd(publicKey, tweak) {\n  return Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(publicKey), tweak));\n}\n\nexports.privateKeyTweakAdd = privateKeyTweakAdd;\n\nfunction publicKeyTweakAdd(publicKey, tweak, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n\n  return Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(publicKey), tweak, compressed));\n}\n\nexports.publicKeyTweakAdd = publicKeyTweakAdd;\n\nfunction sign(message, privateKey) {\n  var ret = secp256k1.ecdsaSign(message, privateKey);\n  return {\n    signature: Buffer.from(ret.signature),\n    recovery: ret.recid\n  };\n}\n\nexports.sign = sign;\n\nfunction verify(message, signature, publicKey) {\n  return secp256k1.ecdsaVerify(signature, message, publicKey);\n}\n\nexports.verify = verify;","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;;AAEA,SAAgBA,gBAAhB,CAAiCC,UAAjC,EAAmD;EACjD,OAAOC,SAAS,CAACF,gBAAV,CAA2BC,UAA3B,CAAP;AACD;;AAFDE;;AAIA,SAAgBC,eAAhB,CAAgCH,UAAhC,EAAoDI,UAApD,EAAqE;EAAjB;IAAAA;EAAiB;;EACnE,OAAOC,MAAM,CAACC,IAAP,CAAYL,SAAS,CAACE,eAAV,CAA0BH,UAA1B,EAAsCI,UAAtC,CAAZ,CAAP;AACD;;AAFDF;;AAIA,SAAgBK,eAAhB,CAAgCC,SAAhC,EAAiD;EAC/C,OAAOP,SAAS,CAACM,eAAV,CAA0BC,SAA1B,CAAP;AACD;;AAFDN;;AAIA,SAAgBO,gBAAhB,CAAiCD,SAAjC,EAAoDJ,UAApD,EAAqE;EAAjB;IAAAA;EAAiB;;EACnE,OAAOC,MAAM,CAACC,IAAP,CAAYL,SAAS,CAACQ,gBAAV,CAA2BD,SAA3B,EAAsCJ,UAAtC,CAAZ,CAAP;AACD;;AAFDF;;AAIA,SAAgBQ,kBAAhB,CAAmCF,SAAnC,EAAsDG,KAAtD,EAAmE;EACjE,OAAON,MAAM,CAACC,IAAP,CACLL,SAAS,CAACS,kBAAV,CAA6BL,MAAM,CAACC,IAAP,CAAYE,SAAZ,CAA7B,EAAqDG,KAArD,CADK,CAAP;AAGD;;AAJDT;;AAMA,SAAgBU,iBAAhB,CACEJ,SADF,EAEEG,KAFF,EAGEP,UAHF,EAGmB;EAAjB;IAAAA;EAAiB;;EAEjB,OAAOC,MAAM,CAACC,IAAP,CACLL,SAAS,CAACW,iBAAV,CAA4BP,MAAM,CAACC,IAAP,CAAYE,SAAZ,CAA5B,EAAoDG,KAApD,EAA2DP,UAA3D,CADK,CAAP;AAGD;;AARDF;;AAUA,SAAgBW,IAAhB,CACEC,OADF,EAEEd,UAFF,EAEoB;EAElB,IAAMe,GAAG,GAAGd,SAAS,CAACe,SAAV,CAAoBF,OAApB,EAA6Bd,UAA7B,CAAZ;EACA,OAAO;IAAEiB,SAAS,EAAEZ,MAAM,CAACC,IAAP,CAAYS,GAAG,CAACE,SAAhB,CAAb;IAAyCC,QAAQ,EAAEH,GAAG,CAACI;EAAvD,CAAP;AACD;;AANDjB;;AAQA,SAAgBkB,MAAhB,CACEN,OADF,EAEEG,SAFF,EAGET,SAHF,EAGmB;EAEjB,OAAOP,SAAS,CAACoB,WAAV,CAAsBJ,SAAtB,EAAiCH,OAAjC,EAA0CN,SAA1C,CAAP;AACD;;AANDN","names":["privateKeyVerify","privateKey","secp256k1","exports","publicKeyCreate","compressed","Buffer","from","publicKeyVerify","publicKey","publicKeyConvert","privateKeyTweakAdd","tweak","publicKeyTweakAdd","sign","message","ret","ecdsaSign","signature","recovery","recid","verify","ecdsaVerify"],"sourceRoot":"","sources":["../src/shims/hdkey-secp256k1v3.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}