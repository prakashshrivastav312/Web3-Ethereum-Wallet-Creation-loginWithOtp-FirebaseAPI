{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst _ = require('lodash');\n\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  isNot\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedValueTransfer)) throw new Error(`Cannot decode to FeeDelegatedValueTransfer. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedValueTransfer}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, to, value, from, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    from,\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated value transfer transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedvaluetransfer|FeeDelegatedValueTransfer} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractFeeDelegatedTransaction\n */\n\n\nclass FeeDelegatedValueTransfer extends AbstractFeeDelegatedTransaction {\n  /**\n   * Creates a fee delegated value transfer transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {FeeDelegatedValueTransfer}\n   */\n  static create(createTxObj, klaytnCall) {\n    return new FeeDelegatedValueTransfer(createTxObj, klaytnCall);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a FeeDelegatedValueTransfer transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded fee delegated value transfer transaction.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {FeeDelegatedValueTransfer}\n   */\n\n\n  static decode(rlpEncoded, klaytnCall) {\n    return new FeeDelegatedValueTransfer(_decode(rlpEncoded), klaytnCall);\n  }\n  /**\n   * Creates a fee delegated value transfer transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   */\n\n\n  constructor(createTxObj, klaytnCall) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer, createTxObj, klaytnCall);\n    this.to = createTxObj.to;\n    this.value = createTxObj.value;\n    if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get gasPrice() {\n    return this._gasPrice;\n  }\n\n  set gasPrice(g) {\n    this._gasPrice = utils.numberToHex(g);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`);\n    this._to = address.toLowerCase();\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   *\n   * @example\n   * const result = tx.getRLPEncoding()\n   *\n   * @return {string} An RLP-encoded transaction string.\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedValueTransfer + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * This method has to be overrided in classes which extends AbstractTransaction.\n   * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n   *\n   * @example\n   * const result = tx.getCommonRLPEncodingForSignature()\n   *\n   * @return {string} An RLP-encoded transaction string without signature.\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedValueTransfer, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase()]);\n  }\n  /**\n   * Fills in the optional variables in transaction.\n   *\n   * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n   * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n   *\n   * @example\n   * await tx.fillTransaction()\n   */\n\n\n  async fillTransaction() {\n    const [chainId, gasPrice, nonce] = await Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce]);\n    this.chainId = chainId;\n    this.gasPrice = gasPrice;\n    this.nonce = nonce;\n  }\n  /**\n   * Checks that member variables that can be defined by the user are defined.\n   * If there is an undefined variable, an error occurs.\n   *\n   * @ignore\n   */\n\n\n  validateOptionalValues() {\n    super.validateOptionalValues();\n    if (this.gasPrice === undefined) throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`);\n  }\n\n}\n\nmodule.exports = FeeDelegatedValueTransfer;","map":{"version":3,"names":["RLP","require","Bytes","_","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","isNot","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedValueTransfer","Error","typeDettached","slice","nonce","gasPrice","gas","to","value","from","signatures","feePayer","feePayerSignatures","decode","trimLeadingZero","FeeDelegatedValueTransfer","create","createTxObj","klaytnCall","constructor","isString","undefined","_gasPrice","g","numberToHex","_to","address","isAddress","toLowerCase","_value","val","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","getCommonRLPEncodingForSignature","fillTransaction","chainId","Promise","all","getChainId","getGasPrice","getNonce","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/valueTransfer/feeDelegatedValueTransfer.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst _ = require('lodash')\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG, isNot } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedValueTransfer))\n        throw new Error(\n            `Cannot decode to FeeDelegatedValueTransfer. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedValueTransfer}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, to, value, from, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        to,\n        value: utils.trimLeadingZero(value),\n        from,\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated value transfer transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedvaluetransfer|FeeDelegatedValueTransfer} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractFeeDelegatedTransaction\n */\nclass FeeDelegatedValueTransfer extends AbstractFeeDelegatedTransaction {\n    /**\n     * Creates a fee delegated value transfer transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {FeeDelegatedValueTransfer}\n     */\n    static create(createTxObj, klaytnCall) {\n        return new FeeDelegatedValueTransfer(createTxObj, klaytnCall)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedValueTransfer transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated value transfer transaction.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {FeeDelegatedValueTransfer}\n     */\n    static decode(rlpEncoded, klaytnCall) {\n        return new FeeDelegatedValueTransfer(_decode(rlpEncoded), klaytnCall)\n    }\n\n    /**\n     * Creates a fee delegated value transfer transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     */\n    constructor(createTxObj, klaytnCall) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer, createTxObj, klaytnCall)\n        this.to = createTxObj.to\n        this.value = createTxObj.value\n\n        if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice\n    }\n\n    /**\n     * @type {string}\n     */\n    get gasPrice() {\n        return this._gasPrice\n    }\n\n    set gasPrice(g) {\n        this._gasPrice = utils.numberToHex(g)\n    }\n\n    /**\n     * @type {string}\n     */\n    get to() {\n        return this._to\n    }\n\n    set to(address) {\n        if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`)\n        this._to = address.toLowerCase()\n    }\n\n    /**\n     * @type {string}\n     */\n    get value() {\n        return this._value\n    }\n\n    set value(val) {\n        this._value = utils.numberToHex(val)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     *\n     * @example\n     * const result = tx.getRLPEncoding()\n     *\n     * @return {string} An RLP-encoded transaction string.\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedValueTransfer +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.to.toLowerCase(),\n                Bytes.fromNat(this.value),\n                this.from.toLowerCase(),\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * This method has to be overrided in classes which extends AbstractTransaction.\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n     *\n     * @example\n     * const result = tx.getCommonRLPEncodingForSignature()\n     *\n     * @return {string} An RLP-encoded transaction string without signature.\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedValueTransfer,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.from.toLowerCase(),\n        ])\n    }\n\n    /**\n     * Fills in the optional variables in transaction.\n     *\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n     *\n     * @example\n     * await tx.fillTransaction()\n     */\n    async fillTransaction() {\n        const [chainId, gasPrice, nonce] = await Promise.all([\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\n            isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice,\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\n        ])\n\n        this.chainId = chainId\n        this.gasPrice = gasPrice\n        this.nonce = nonce\n    }\n\n    /**\n     * Checks that member variables that can be defined by the user are defined.\n     * If there is an undefined variable, an error occurs.\n     *\n     * @ignore\n     */\n    validateOptionalValues() {\n        super.validateOptionalValues()\n        if (this.gasPrice === undefined)\n            throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`)\n    }\n}\n\nmodule.exports = FeeDelegatedValueTransfer\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}