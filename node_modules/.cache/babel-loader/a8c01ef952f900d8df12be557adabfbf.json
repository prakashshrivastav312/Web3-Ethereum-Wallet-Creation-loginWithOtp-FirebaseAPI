{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'put', import('ipfs-core/src/components/dht')>}\n   */\n  async function* put(key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n    const res = await api.post('dht/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      ...(await multipartRequest(value, controller, options.headers))\n    });\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      message.id = new CID(message.id);\n\n      if (message.responses) {\n        message.responses = message.responses.map(_ref => {\n          let {\n            ID,\n            Addrs\n          } = _ref;\n          return {\n            id: ID,\n            addrs: (Addrs || []).map(a => multiaddr(a))\n          };\n        });\n      }\n\n      yield message;\n    }\n  }\n\n  return put;\n});","map":{"version":3,"names":["CID","require","multiaddr","toCamel","configure","toUrlSearchParams","multipartRequest","abortSignal","AbortController","module","exports","api","put","key","value","options","controller","signal","res","post","timeout","searchParams","arg","headers","message","ndjson","id","responses","map","ID","Addrs","addrs","a"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/dht/put.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'put', import('ipfs-core/src/components/dht')>}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('dht/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      ...(\n        await multipartRequest(value, controller, options.headers)\n      )\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      if (message.responses) {\n        message.responses = message.responses.map(({ ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }))\n      }\n      yield message\n    }\n  }\n\n  return put\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;EAAEO;AAAF,IAAsBP,OAAO,CAAC,yBAAD,CAAnC;;AACAQ,MAAM,CAACC,OAAP,GAAiBN,SAAS,CAACO,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,GAAjB,CAAsBC,GAAtB,EAA2BC,KAA3B,EAAgD;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC9C;IACA,MAAMC,UAAU,GAAG,IAAIR,eAAJ,EAAnB;IACA,MAAMS,MAAM,GAAGV,WAAW,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B,CAH8C,CAK9C;;IACA,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,SAAT,EAAoB;MACpCC,OAAO,EAAEL,OAAO,CAACK,OADmB;MAEpCH,MAFoC;MAGpCI,YAAY,EAAEhB,iBAAiB,CAAC;QAC9BiB,GAAG,EAAET,GADyB;QAE9B,GAAGE;MAF2B,CAAD,CAHK;MAOpC,IACE,MAAMT,gBAAgB,CAACQ,KAAD,EAAQE,UAAR,EAAoBD,OAAO,CAACQ,OAA5B,CADxB;IAPoC,CAApB,CAAlB;;IAYA,WAAW,IAAIC,OAAf,IAA0BN,GAAG,CAACO,MAAJ,EAA1B,EAAwC;MACtCD,OAAO,GAAGrB,OAAO,CAACqB,OAAD,CAAjB;MACAA,OAAO,CAACE,EAAR,GAAa,IAAI1B,GAAJ,CAAQwB,OAAO,CAACE,EAAhB,CAAb;;MACA,IAAIF,OAAO,CAACG,SAAZ,EAAuB;QACrBH,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB;UAAA,IAAC;YAAEC,EAAF;YAAMC;UAAN,CAAD;UAAA,OAAoB;YAC5DJ,EAAE,EAAEG,EADwD;YAE5DE,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBI,CAAC,IAAI9B,SAAS,CAAC8B,CAAD,CAAhC;UAFqD,CAApB;QAAA,CAAtB,CAApB;MAID;;MACD,MAAMR,OAAN;IACD;EACF;;EAED,OAAOZ,GAAP;AACD,CApCyB,CAA1B"},"metadata":{},"sourceType":"script"}