{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumericalBinaryCodec = void 0;\n\nconst typesystem_1 = require(\"../typesystem\");\n\nconst utils_1 = require(\"./utils\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst constants_1 = require(\"./constants\");\n/**\n * Encodes and decodes \"NumericalValue\" objects\n * with respect to: {@link https://docs.elrond.com/developers/developer-reference/elrond-serialization-format/ | The Elrond Serialization Format}.\n */\n\n\nclass NumericalBinaryCodec {\n  decodeNested(buffer, type) {\n    let offset = 0;\n    let length = type.sizeInBytes;\n\n    if (!length) {\n      // Size of type is not known: arbitrary-size big integer.\n      // Therefore, we must read the length from the header.\n      offset = constants_1.SizeOfU32;\n      length = buffer.readUInt32BE();\n    }\n\n    let payload = buffer.slice(offset, offset + length);\n    let result = this.decodeTopLevel(payload, type);\n    let decodedLength = length + offset;\n    return [result, decodedLength];\n  }\n\n  decodeTopLevel(buffer, type) {\n    let payload = utils_1.cloneBuffer(buffer);\n    let empty = buffer.length == 0;\n\n    if (empty) {\n      return new typesystem_1.NumericalValue(type, new bignumber_js_1.default(0));\n    }\n\n    let isPositive = !type.withSign || utils_1.isMsbZero(payload);\n\n    if (isPositive) {\n      let value = utils_1.bufferToBigInt(payload);\n      return new typesystem_1.NumericalValue(type, value);\n    } // Also see: https://github.com/ElrondNetwork/big-int-util/blob/master/twos-complement/twos2bigint.go\n\n\n    utils_1.flipBufferBitsInPlace(payload);\n    let value = utils_1.bufferToBigInt(payload);\n    let negativeValue = value.multipliedBy(new bignumber_js_1.default(-1));\n    let negativeValueMinusOne = negativeValue.minus(new bignumber_js_1.default(1));\n    return new typesystem_1.NumericalValue(type, negativeValueMinusOne);\n  }\n\n  encodeNested(primitive) {\n    if (primitive.sizeInBytes) {\n      return this.encodeNestedFixedSize(primitive, primitive.sizeInBytes);\n    } // Size is not known: arbitrary-size big integer. Therefore, we must emit the length (as U32) before the actual payload.\n\n\n    let buffer = this.encodeTopLevel(primitive);\n    let length = Buffer.alloc(constants_1.SizeOfU32);\n    length.writeUInt32BE(buffer.length);\n    return Buffer.concat([length, buffer]);\n  }\n\n  encodeNestedFixedSize(primitive, size) {\n    if (primitive.value.isZero()) {\n      return Buffer.alloc(size, 0x00);\n    }\n\n    if (!primitive.withSign) {\n      const buffer = utils_1.bigIntToBuffer(primitive.value);\n      const paddingBytes = Buffer.alloc(size - buffer.length, 0x00);\n      return Buffer.concat([paddingBytes, buffer]);\n    }\n\n    if (primitive.value.isPositive()) {\n      let buffer = utils_1.bigIntToBuffer(primitive.value); // Fix ambiguity if any\n\n      if (utils_1.isMsbOne(buffer)) {\n        buffer = utils_1.prependByteToBuffer(buffer, 0x00);\n      }\n\n      const paddingBytes = Buffer.alloc(size - buffer.length, 0x00);\n      return Buffer.concat([paddingBytes, buffer]);\n    } // Negative:\n    // Also see: https://github.com/ElrondNetwork/big-int-util/blob/master/twos-complement/bigint2twos.go\n\n\n    let valuePlusOne = primitive.value.plus(new bignumber_js_1.default(1));\n    let buffer = utils_1.bigIntToBuffer(valuePlusOne);\n    utils_1.flipBufferBitsInPlace(buffer); // Fix ambiguity if any\n\n    if (utils_1.isMsbZero(buffer)) {\n      buffer = utils_1.prependByteToBuffer(buffer, 0xFF);\n    }\n\n    const paddingBytes = Buffer.alloc(size - buffer.length, 0xff);\n    return Buffer.concat([paddingBytes, buffer]);\n  }\n\n  encodeTopLevel(primitive) {\n    let withSign = primitive.withSign; // Nothing or Zero:\n\n    if (primitive.value.isZero()) {\n      return Buffer.alloc(0);\n    } // I don't care about the sign:\n\n\n    if (!withSign) {\n      return utils_1.bigIntToBuffer(primitive.value);\n    }\n\n    return this.encodePrimitive(primitive);\n  }\n\n  encodePrimitive(primitive) {\n    // Positive:\n    if (primitive.value.isPositive()) {\n      let buffer = utils_1.bigIntToBuffer(primitive.value); // Fix ambiguity if any\n\n      if (utils_1.isMsbOne(buffer)) {\n        buffer = utils_1.prependByteToBuffer(buffer, 0x00);\n      }\n\n      return buffer;\n    } // Negative:\n    // Also see: https://github.com/ElrondNetwork/big-int-util/blob/master/twos-complement/bigint2twos.go\n\n\n    let valuePlusOne = primitive.value.plus(new bignumber_js_1.default(1));\n    let buffer = utils_1.bigIntToBuffer(valuePlusOne);\n    utils_1.flipBufferBitsInPlace(buffer); // Fix ambiguity if any\n\n    if (utils_1.isMsbZero(buffer)) {\n      buffer = utils_1.prependByteToBuffer(buffer, 0xFF);\n    }\n\n    return buffer;\n  }\n\n}\n\nexports.NumericalBinaryCodec = NumericalBinaryCodec;","map":{"version":3,"mappings":"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","names":["NumericalBinaryCodec","decodeNested","buffer","type","offset","length","sizeInBytes","constants_1","readUInt32BE","payload","slice","result","decodeTopLevel","decodedLength","utils_1","empty","typesystem_1","bignumber_js_1","isPositive","withSign","value","negativeValue","multipliedBy","negativeValueMinusOne","minus","encodeNested","primitive","encodeNestedFixedSize","encodeTopLevel","Buffer","alloc","writeUInt32BE","concat","size","isZero","paddingBytes","valuePlusOne","plus","encodePrimitive","exports"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/numerical.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}