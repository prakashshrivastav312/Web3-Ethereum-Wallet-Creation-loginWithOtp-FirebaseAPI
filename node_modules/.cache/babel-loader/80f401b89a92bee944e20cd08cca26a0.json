{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\n\nvar JSUtil = require('./util/js');\n\nvar networks = [];\nvar networkMaps = {};\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each litecoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\n\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\n\n\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n\n    var containsArg = function (key) {\n      return networks[index][key] === arg;\n    };\n\n    for (var index in networks) {\n      if (_.some(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n\n    return undefined;\n  }\n\n  return networkMaps[arg];\n}\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {string} data.bech32prefix - The native segwit prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\n\n\nfunction addNetwork(data) {\n  var network = new Network();\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    scripthash2: data.scripthash2,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n    networkMaps[network.networkMagic.toString('hex')] = network;\n  }\n\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n\n  if (data.bech32prefix) {\n    JSUtil.defineImmutable(network, {\n      bech32prefix: data.bech32prefix\n    });\n  }\n\n  _.each(network, function (value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      networkMaps[value] = network;\n    }\n  });\n\n  networks.push(network);\n  return network;\n}\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\n\n\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n\n  for (var key in networkMaps) {\n    if (networkMaps[key] === network) {\n      delete networkMaps[key];\n    }\n  }\n}\n\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x30,\n  // 48\n  privatekey: 0xb0,\n  // 176\n  scripthash: 0x32,\n  // 50\n  scripthash2: 0x05,\n  // 5\n  bech32prefix: 'ltc',\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xfbc0b6db,\n  port: 9333,\n  dnsSeeds: ['dnsseed.litecointools.com', 'dnsseed.litecoinpool.org', 'dnsseed.ltc.xurious.com', 'dnsseed.koin-project.com', 'seed-a.litecoin.loshan.co.uk', 'dnsseed.thrasher.io']\n});\n/**\n * @instance\n * @member Networks#livenet\n */\n\nvar livenet = get('livenet');\naddNetwork({\n  name: 'testnet',\n  alias: 'regtest',\n  pubkeyhash: 0x6f,\n  // 111\n  privatekey: 0xef,\n  // 239\n  scripthash: 0x3a,\n  // 58\n  scripthash2: 0xc4,\n  // 196\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394\n});\n/**\n * @instance\n * @member Networks#testnet\n */\n\nvar testnet = get('testnet'); // Add configurable values for testnet/regtest\n\nvar TESTNET = {\n  PORT: 19335,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfdd2c8f1),\n  DNS_SEEDS: ['testnet-seed.litecointools.com', 'seed-b.litecoin.loshan.co.uk'],\n  BECH32_PREFIX: 'tltc'\n};\n\nfor (var key in TESTNET) {\n  if (!_.isObject(TESTNET[key])) {\n    networkMaps[TESTNET[key]] = testnet;\n  }\n}\n\nnetworkMaps[TESTNET.NETWORK_MAGIC.toString('hex')] = testnet;\nvar REGTEST = {\n  PORT: 19444,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfabfb5da),\n  DNS_SEEDS: [],\n  BECH32_PREFIX: 'rltc'\n};\n\nfor (var key in REGTEST) {\n  if (!_.isObject(REGTEST[key])) {\n    networkMaps[REGTEST[key]] = testnet;\n  }\n}\n\nnetworkMaps[REGTEST.NETWORK_MAGIC.toString('hex')] = testnet;\nObject.defineProperty(testnet, 'port', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    if (this.regtestEnabled) {\n      return REGTEST.PORT;\n    } else {\n      return TESTNET.PORT;\n    }\n  }\n});\nObject.defineProperty(testnet, 'networkMagic', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    if (this.regtestEnabled) {\n      return REGTEST.NETWORK_MAGIC;\n    } else {\n      return TESTNET.NETWORK_MAGIC;\n    }\n  }\n});\nObject.defineProperty(testnet, 'dnsSeeds', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    if (this.regtestEnabled) {\n      return REGTEST.DNS_SEEDS;\n    } else {\n      return TESTNET.DNS_SEEDS;\n    }\n  }\n});\nObject.defineProperty(testnet, 'bech32prefix', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    if (this.regtestEnabled) {\n      return REGTEST.BECH32_PREFIX;\n    } else {\n      return TESTNET.BECH32_PREFIX;\n    }\n  }\n});\n/**\n * @function\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\n\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n/**\n * @function\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\n\n\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n/**\n * @namespace Networks\n */\n\n\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};","map":{"version":3,"names":["_","require","BufferUtil","JSUtil","networks","networkMaps","Network","prototype","toString","name","get","arg","keys","indexOf","isArray","containsArg","key","index","some","undefined","addNetwork","data","network","defineImmutable","alias","pubkeyhash","privatekey","scripthash","scripthash2","xpubkey","xprivkey","networkMagic","integerAsBuffer","port","dnsSeeds","bech32prefix","each","value","isUndefined","isObject","push","removeNetwork","i","length","splice","livenet","testnet","TESTNET","PORT","NETWORK_MAGIC","DNS_SEEDS","BECH32_PREFIX","REGTEST","Object","defineProperty","enumerable","configurable","regtestEnabled","enableRegtest","disableRegtest","module","exports","add","remove","defaultNetwork","mainnet"],"sources":["C:/Users/acer/node_modules/bitcore-lib-ltc/lib/networks.js"],"sourcesContent":["'use strict';\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\nvar JSUtil = require('./util/js');\nvar networks = [];\nvar networkMaps = {};\n\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each litecoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n    var containsArg = function(key) {\n      return networks[index][key] === arg;\n    };\n    for (var index in networks) {\n      if (_.some(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n    return undefined;\n  }\n  return networkMaps[arg];\n}\n\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {string} data.bech32prefix - The native segwit prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\nfunction addNetwork(data) {\n\n  var network = new Network();\n\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    scripthash2: data.scripthash2,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n    networkMaps[network.networkMagic.toString('hex')] = network;\n  }\n\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n\n  if (data.bech32prefix) {\n    JSUtil.defineImmutable(network, {\n      bech32prefix: data.bech32prefix\n    });\n  }\n\n  _.each(network, function(value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      networkMaps[value] = network;\n    }\n  });\n\n  networks.push(network);\n\n  return network;\n\n}\n\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n  for (var key in networkMaps) {\n    if (networkMaps[key] === network) {\n      delete networkMaps[key];\n    }\n  }\n}\n\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x30, // 48\n  privatekey: 0xb0, // 176\n  scripthash: 0x32, // 50\n  scripthash2: 0x05, // 5\n  bech32prefix: 'ltc',\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xfbc0b6db,\n  port: 9333,\n  dnsSeeds: [\n    'dnsseed.litecointools.com',\n    'dnsseed.litecoinpool.org',\n    'dnsseed.ltc.xurious.com',\n    'dnsseed.koin-project.com',\n    'seed-a.litecoin.loshan.co.uk',\n    'dnsseed.thrasher.io'\n  ]\n});\n\n/**\n * @instance\n * @member Networks#livenet\n */\nvar livenet = get('livenet');\n\naddNetwork({\n  name: 'testnet',\n  alias: 'regtest',\n  pubkeyhash: 0x6f, // 111\n  privatekey: 0xef, // 239\n  scripthash: 0x3a, // 58\n  scripthash2: 0xc4, // 196\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394\n});\n\n/**\n * @instance\n * @member Networks#testnet\n */\nvar testnet = get('testnet');\n\n// Add configurable values for testnet/regtest\n\nvar TESTNET = {\n  PORT: 19335,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfdd2c8f1),\n  DNS_SEEDS: [\n    'testnet-seed.litecointools.com',\n    'seed-b.litecoin.loshan.co.uk'\n  ],\n  BECH32_PREFIX: 'tltc'\n};\n\nfor (var key in TESTNET) {\n  if (!_.isObject(TESTNET[key])) {\n    networkMaps[TESTNET[key]] = testnet;\n  }\n}\nnetworkMaps[TESTNET.NETWORK_MAGIC.toString('hex')] = testnet;\n\nvar REGTEST = {\n  PORT: 19444,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfabfb5da),\n  DNS_SEEDS: [],\n  BECH32_PREFIX: 'rltc'\n};\n\nfor (var key in REGTEST) {\n  if (!_.isObject(REGTEST[key])) {\n    networkMaps[REGTEST[key]] = testnet;\n  }\n}\nnetworkMaps[REGTEST.NETWORK_MAGIC.toString('hex')] = testnet;\n\nObject.defineProperty(testnet, 'port', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.PORT;\n    } else {\n      return TESTNET.PORT;\n    }\n  }\n});\n\nObject.defineProperty(testnet, 'networkMagic', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.NETWORK_MAGIC;\n    } else {\n      return TESTNET.NETWORK_MAGIC;\n    }\n  }\n});\n\nObject.defineProperty(testnet, 'dnsSeeds', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.DNS_SEEDS;\n    } else {\n      return TESTNET.DNS_SEEDS;\n    }\n  }\n});\n\nObject.defineProperty(testnet, 'bech32prefix', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.BECH32_PREFIX\n    } else {\n      return TESTNET.BECH32_PREFIX\n    }\n  }\n})\n\n/**\n * @function\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n\n/**\n * @function\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n\n/**\n * @namespace Networks\n */\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}