{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-unused-vars */\nconst LegacyTransaction = require('./transactionTypes/legacyTransaction/legacyTransaction');\n\nconst EthereumAccessList = require('./transactionTypes/ethereumTypedTransaction/ethereumAccessList');\n\nconst EthereumDynamicFee = require('./transactionTypes/ethereumTypedTransaction/ethereumDynamicFee');\n\nconst ValueTransfer = require('./transactionTypes/valueTransfer/valueTransfer');\n\nconst FeeDelegatedValueTransfer = require('./transactionTypes/valueTransfer/feeDelegatedValueTransfer');\n\nconst FeeDelegatedValueTransferWithRatio = require('./transactionTypes/valueTransfer/feeDelegatedValueTransferWithRatio');\n\nconst ValueTransferMemo = require('./transactionTypes/valueTransferMemo/valueTransferMemo');\n\nconst FeeDelegatedValueTransferMemo = require('./transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemo');\n\nconst FeeDelegatedValueTransferMemoWithRatio = require('./transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemoWithRatio');\n\nconst AccountUpdate = require('./transactionTypes/accountUpdate/accountUpdate');\n\nconst FeeDelegatedAccountUpdate = require('./transactionTypes/accountUpdate/feeDelegatedAccountUpdate');\n\nconst FeeDelegatedAccountUpdateWithRatio = require('./transactionTypes/accountUpdate/feeDelegatedAccountUpdateWithRatio');\n\nconst SmartContractDeploy = require('./transactionTypes/smartContractDeploy/smartContractDeploy');\n\nconst FeeDelegatedSmartContractDeploy = require('./transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeploy');\n\nconst FeeDelegatedSmartContractDeployWithRatio = require('./transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeployWithRatio');\n\nconst SmartContractExecution = require('./transactionTypes/smartContractExecution/smartContractExecution');\n\nconst FeeDelegatedSmartContractExecution = require('./transactionTypes/smartContractExecution/feeDelegatedSmartContractExecution');\n\nconst FeeDelegatedSmartContractExecutionWithRatio = require('./transactionTypes/smartContractExecution/feeDelegatedSmartContractExecutionWithRatio');\n\nconst Cancel = require('./transactionTypes/cancel/cancel');\n\nconst FeeDelegatedCancel = require('./transactionTypes/cancel/feeDelegatedCancel');\n\nconst FeeDelegatedCancelWithRatio = require('./transactionTypes/cancel/feeDelegatedCancelWithRatio');\n\nconst ChainDataAnchoring = require('./transactionTypes/chainDataAnchoring/chainDataAnchoring');\n\nconst FeeDelegatedChainDataAnchoring = require('./transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoring');\n\nconst FeeDelegatedChainDataAnchoringWithRatio = require('./transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoringWithRatio');\n\nconst LegacyTransactionWrapper = require('./transactionTypes/wrappers/legacyTransactionWrapper');\n\nconst EthereumAccessListWrapper = require('./transactionTypes/wrappers/ethereumAccessListWrapper');\n\nconst EthereumDynamicFeeWrapper = require('./transactionTypes/wrappers/ethereumDynamicFeeWrapper');\n\nconst ValueTransferWrapper = require('./transactionTypes/wrappers/valueTransferWrapper');\n\nconst FeeDelegatedValueTransferWrapper = require('./transactionTypes/wrappers/feeDelegatedValueTransferWrapper');\n\nconst FeeDelegatedValueTransferWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedValueTransferWithRatioWrapper');\n\nconst ValueTransferMemoWrapper = require('./transactionTypes/wrappers/valueTransferMemoWrapper');\n\nconst FeeDelegatedValueTransferMemoWrapper = require('./transactionTypes/wrappers/feeDelegatedValueTransferMemoWrapper');\n\nconst FeeDelegatedValueTransferMemoWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedValueTransferMemoWithRatioWrapper');\n\nconst AccountUpdateWrapper = require('./transactionTypes/wrappers/accountUpdateWrapper');\n\nconst FeeDelegatedAccountUpdateWrapper = require('./transactionTypes/wrappers/feeDelegatedAccountUpdateWrapper');\n\nconst FeeDelegatedAccountUpdateWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedAccountUpdateWithRatioWrapper');\n\nconst SmartContractDeployWrapper = require('./transactionTypes/wrappers/smartContractDeployWrapper');\n\nconst FeeDelegatedSmartContractDeployWrapper = require('./transactionTypes/wrappers/feeDelegatedSmartContractDeployWrapper');\n\nconst FeeDelegatedSmartContractDeployWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedSmartContractDeployWithRatioWrapper');\n\nconst SmartContractExecutionWrapper = require('./transactionTypes/wrappers/smartContractExecutionWrapper');\n\nconst FeeDelegatedSmartContractExecutionWrapper = require('./transactionTypes/wrappers/feeDelegatedSmartContractExecutionWrapper');\n\nconst FeeDelegatedSmartContractExecutionWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedSmartContractExecutionWithRatioWrapper');\n\nconst CancelWrapper = require('./transactionTypes/wrappers/cancelWrapper');\n\nconst FeeDelegatedCancelWrapper = require('./transactionTypes/wrappers/feeDelegatedCancelWrapper');\n\nconst FeeDelegatedCancelWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedCancelWithRatioWrapper');\n\nconst ChainDataAnchoringWrapper = require('./transactionTypes/wrappers/chainDataAnchoringWrapper');\n\nconst FeeDelegatedChainDataAnchoringWrapper = require('./transactionTypes/wrappers/feeDelegatedChainDataAnchoringWrapper');\n\nconst FeeDelegatedChainDataAnchoringWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedChainDataAnchoringWithRatioWrapper');\n\nconst TransactionDecoder = require('./transactionDecoder/transactionDecoder');\n\nconst AbstractTransaction = require('./transactionTypes/abstractTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG\n} = require('./transactionHelper/transactionHelper');\n\nconst Account = require('../../caver-account');\n\nconst AbstractFeeDelegatedTransaction = require('./transactionTypes/abstractFeeDelegatedTransaction');\n\nconst AccessList = require('./utils/accessList');\n\nconst AccessTuple = require('./utils/accessTuple');\n/**\n * @typedef {LegacyTransaction|ValueTransfer|FeeDelegatedValueTransfer|FeeDelegatedValueTransferWithRatio|ValueTransferMemo|FeeDelegatedValueTransferMemo|FeeDelegatedValueTransferMemoWithRatio|AccountUpdate|FeeDelegatedAccountUpdate|FeeDelegatedAccountUpdateWithRatio|SmartContractDeploy|FeeDelegatedSmartContractDeploy|FeeDelegatedSmartContractDeployWithRatio|SmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecutionWithRatio|Cancel|FeeDelegatedCancel|FeeDelegatedCancelWithRatio|ChainDataAnchoring|FeeDelegatedChainDataAnchoring|FeeDelegatedChainDataAnchoringWithRatio|EthereumAccessList|EthereumDynamicFee} module:Transaction.Transaction\n */\n\n/**\n * @typedef {FeeDelegatedValueTransfer|FeeDelegatedValueTransferWithRatio|FeeDelegatedValueTransferMemo|FeeDelegatedValueTransferMemoWithRatio|FeeDelegatedAccountUpdate|FeeDelegatedAccountUpdateWithRatio|FeeDelegatedSmartContractDeploy|FeeDelegatedSmartContractDeployWithRatio|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecutionWithRatio|FeeDelegatedCancel|FeeDelegatedCancelWithRatio|FeeDelegatedChainDataAnchoring|FeeDelegatedChainDataAnchoringWithRatio} module:Transaction.FeeDelegatedTransaction\n */\n\n/**\n * A class that manages instances of the transaction wrapper and other functions provided by the transaction module.\n * @class\n * @hideconstructor\n */\n\n\nclass TransactionModule {\n  /**\n   * Creates a TransactionModule.\n   *\n   * @constructor\n   * @param {object} klaytnCall - An object includes klay rpc calls.\n   */\n  constructor(klaytnCall) {\n    if (!klaytnCall) throw new Error(`Invalid constructor parameter: klaytnCall is undefined.`);\n    this.klaytnCall = klaytnCall;\n    this.legacyTransaction = new LegacyTransactionWrapper(this.klaytnCall);\n    this.ethereumAccessList = new EthereumAccessListWrapper(this.klaytnCall);\n    this.ethereumDynamicFee = new EthereumDynamicFeeWrapper(this.klaytnCall);\n    this.valueTransfer = new ValueTransferWrapper(this.klaytnCall);\n    this.feeDelegatedValueTransfer = new FeeDelegatedValueTransferWrapper(this.klaytnCall);\n    this.feeDelegatedValueTransferWithRatio = new FeeDelegatedValueTransferWithRatioWrapper(this.klaytnCall);\n    this.valueTransferMemo = new ValueTransferMemoWrapper(this.klaytnCall);\n    this.feeDelegatedValueTransferMemo = new FeeDelegatedValueTransferMemoWrapper(this.klaytnCall);\n    this.feeDelegatedValueTransferMemoWithRatio = new FeeDelegatedValueTransferMemoWithRatioWrapper(this.klaytnCall);\n    this.accountUpdate = new AccountUpdateWrapper(this.klaytnCall);\n    this.feeDelegatedAccountUpdate = new FeeDelegatedAccountUpdateWrapper(this.klaytnCall);\n    this.feeDelegatedAccountUpdateWithRatio = new FeeDelegatedAccountUpdateWithRatioWrapper(this.klaytnCall);\n    this.smartContractDeploy = new SmartContractDeployWrapper(this.klaytnCall);\n    this.feeDelegatedSmartContractDeploy = new FeeDelegatedSmartContractDeployWrapper(this.klaytnCall);\n    this.feeDelegatedSmartContractDeployWithRatio = new FeeDelegatedSmartContractDeployWithRatioWrapper(this.klaytnCall);\n    this.smartContractExecution = new SmartContractExecutionWrapper(this.klaytnCall);\n    this.feeDelegatedSmartContractExecution = new FeeDelegatedSmartContractExecutionWrapper(this.klaytnCall);\n    this.feeDelegatedSmartContractExecutionWithRatio = new FeeDelegatedSmartContractExecutionWithRatioWrapper(this.klaytnCall);\n    this.cancel = new CancelWrapper(this.klaytnCall);\n    this.feeDelegatedCancel = new FeeDelegatedCancelWrapper(this.klaytnCall);\n    this.feeDelegatedCancelWithRatio = new FeeDelegatedCancelWithRatioWrapper(this.klaytnCall);\n    this.chainDataAnchoring = new ChainDataAnchoringWrapper(this.klaytnCall);\n    this.feeDelegatedChainDataAnchoring = new FeeDelegatedChainDataAnchoringWrapper(this.klaytnCall);\n    this.feeDelegatedChainDataAnchoringWithRatio = new FeeDelegatedChainDataAnchoringWithRatioWrapper(this.klaytnCall);\n    this.type = TX_TYPE_STRING;\n    this.tag = TX_TYPE_TAG;\n    this.utils = {\n      accessList: AccessList,\n      accessTuple: AccessTuple\n    };\n  }\n  /**\n   * @type {object}\n   */\n\n\n  get klaytnCall() {\n    return this._klaytnCall;\n  }\n\n  set klaytnCall(c) {\n    this._klaytnCall = c;\n  }\n  /**\n   * Querys transaction from Klaytn and converts to a caver transaction instance.\n   * If it fails to receive a transaction from Klaytn, an error is thrown.\n   *\n   * @example\n   * const txObject = await caver.transaction.getTransactionByHash('0x{transaction hash}')\n   *\n   * @method getTransactionByHash\n   * @param  {string} transactionHash The transaction hash string to query from Klaytn.\n   * @return {Promise<AbstractTransaction>}\n   */\n\n\n  async getTransactionByHash(transactionHash) {\n    let txObject = await this.klaytnCall.getTransactionByHash(transactionHash);\n    if (txObject === null) throw new Error(`Failed to get transaction from Klaytn with '${transactionHash}'.`); // AccountUpdate transaction received from Klaytn defines encodedAccountKey string in `key` field.\n    // This needs to be formatted according to the caver transaction format (`account` field).\n\n    if (txObject.key) {\n      const account = Account.createFromRLPEncoding(txObject.from, txObject.key);\n      txObject.account = account;\n      delete txObject.key;\n    }\n\n    switch (txObject.type) {\n      case 'TxTypeLegacyTransaction':\n        txObject = this.legacyTransaction.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeValueTransfer':\n        txObject = this.valueTransfer.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedValueTransfer':\n        txObject = this.feeDelegatedValueTransfer.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedValueTransferWithRatio':\n        txObject = this.feeDelegatedValueTransferWithRatio.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeValueTransferMemo':\n        txObject = this.valueTransferMemo.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedValueTransferMemo':\n        txObject = this.feeDelegatedValueTransferMemo.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedValueTransferMemoWithRatio':\n        txObject = this.feeDelegatedValueTransferMemoWithRatio.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeAccountUpdate':\n        txObject = this.accountUpdate.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedAccountUpdate':\n        txObject = this.feeDelegatedAccountUpdate.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedAccountUpdateWithRatio':\n        txObject = this.feeDelegatedAccountUpdateWithRatio.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeSmartContractDeploy':\n        txObject = this.smartContractDeploy.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedSmartContractDeploy':\n        txObject = this.feeDelegatedSmartContractDeploy.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedSmartContractDeployWithRatio':\n        txObject = this.feeDelegatedSmartContractDeployWithRatio.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeSmartContractExecution':\n        txObject = this.smartContractExecution.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedSmartContractExecution':\n        txObject = this.feeDelegatedSmartContractExecution.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedSmartContractExecutionWithRatio':\n        txObject = this.feeDelegatedSmartContractExecutionWithRatio.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeCancel':\n        txObject = this.cancel.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedCancel':\n        txObject = this.feeDelegatedCancel.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedCancelWithRatio':\n        txObject = this.feeDelegatedCancelWithRatio.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeChainDataAnchoring':\n        txObject = this.chainDataAnchoring.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedChainDataAnchoring':\n        txObject = this.feeDelegatedChainDataAnchoring.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeFeeDelegatedChainDataAnchoringWithRatio':\n        txObject = this.feeDelegatedChainDataAnchoringWithRatio.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeEthereumAccessList':\n        txObject = this.ethereumAccessList.create(txObject, this.klaytnCall);\n        break;\n\n      case 'TxTypeEthereumDynamicFee':\n        txObject = this.ethereumDynamicFee.create(txObject, this.klaytnCall);\n        break;\n    }\n\n    return txObject;\n  }\n  /**\n   * Recovers the public key strings from `signatures` field.\n   * If you want to derive an address from public key, please use `caver.utils.publicKeyToAddress`.\n   *\n   * @example\n   * const publicKey = caver.transaction.recoverPublicKeys('0x{RLP-encoded transaction string}')\n   *\n   * @method recoverPublicKeys\n   * @param  {string} rawTx The RLP-encoded transaction string to recover public keys from `signatures`.\n   * @return {Array.<string>}\n   */\n\n\n  recoverPublicKeys(rawTx) {\n    const tx = TransactionDecoder.decode(rawTx);\n    return tx.recoverPublicKeys();\n  }\n  /**\n   * Recovers the public key strings from `feePayerSignatures` field.\n   * If you want to derive an address from public key, please use `caver.utils.publicKeyToAddress`.\n   *\n   * @example\n   * const publicKey = caver.transaction.recoverFeePayerPublicKeys()\n   *\n   * @method recoverFeePayerPublicKeys\n   * @param  {string} rawTx The RLP-encoded transaction string to recover public keys from `feePayerSignatures`.\n   * @return {Array.<string>}\n   */\n\n\n  recoverFeePayerPublicKeys(rawTx) {\n    const tx = TransactionDecoder.decode(rawTx);\n    if (!(tx instanceof AbstractFeeDelegatedTransaction)) throw new Error('The `caver.transaction.recoverFeePayerPublicKeys` function can only use with fee delegation transaction. For basic transactions, use `caver.transaction.recoverPublicKeys`.');\n    return tx.recoverFeePayerPublicKeys();\n  }\n  /**\n   * Decodes RLP-encoded transaction string and returns a Transaction instance.\n   *\n   * @example\n   * const tx = caver.transaction.decode('0x{RLP-encoded transaction string}')\n   *\n   * @param {string} rlpEncoded - An RLP-encoded transaction string to decode.\n   * @return {module:Transaction.Transaction}\n   */\n\n\n  decode(encoded) {\n    return TransactionDecoder.decode(encoded);\n  }\n\n}\n\nmodule.exports = TransactionModule;","map":{"version":3,"names":["LegacyTransaction","require","EthereumAccessList","EthereumDynamicFee","ValueTransfer","FeeDelegatedValueTransfer","FeeDelegatedValueTransferWithRatio","ValueTransferMemo","FeeDelegatedValueTransferMemo","FeeDelegatedValueTransferMemoWithRatio","AccountUpdate","FeeDelegatedAccountUpdate","FeeDelegatedAccountUpdateWithRatio","SmartContractDeploy","FeeDelegatedSmartContractDeploy","FeeDelegatedSmartContractDeployWithRatio","SmartContractExecution","FeeDelegatedSmartContractExecution","FeeDelegatedSmartContractExecutionWithRatio","Cancel","FeeDelegatedCancel","FeeDelegatedCancelWithRatio","ChainDataAnchoring","FeeDelegatedChainDataAnchoring","FeeDelegatedChainDataAnchoringWithRatio","LegacyTransactionWrapper","EthereumAccessListWrapper","EthereumDynamicFeeWrapper","ValueTransferWrapper","FeeDelegatedValueTransferWrapper","FeeDelegatedValueTransferWithRatioWrapper","ValueTransferMemoWrapper","FeeDelegatedValueTransferMemoWrapper","FeeDelegatedValueTransferMemoWithRatioWrapper","AccountUpdateWrapper","FeeDelegatedAccountUpdateWrapper","FeeDelegatedAccountUpdateWithRatioWrapper","SmartContractDeployWrapper","FeeDelegatedSmartContractDeployWrapper","FeeDelegatedSmartContractDeployWithRatioWrapper","SmartContractExecutionWrapper","FeeDelegatedSmartContractExecutionWrapper","FeeDelegatedSmartContractExecutionWithRatioWrapper","CancelWrapper","FeeDelegatedCancelWrapper","FeeDelegatedCancelWithRatioWrapper","ChainDataAnchoringWrapper","FeeDelegatedChainDataAnchoringWrapper","FeeDelegatedChainDataAnchoringWithRatioWrapper","TransactionDecoder","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","Account","AbstractFeeDelegatedTransaction","AccessList","AccessTuple","TransactionModule","constructor","klaytnCall","Error","legacyTransaction","ethereumAccessList","ethereumDynamicFee","valueTransfer","feeDelegatedValueTransfer","feeDelegatedValueTransferWithRatio","valueTransferMemo","feeDelegatedValueTransferMemo","feeDelegatedValueTransferMemoWithRatio","accountUpdate","feeDelegatedAccountUpdate","feeDelegatedAccountUpdateWithRatio","smartContractDeploy","feeDelegatedSmartContractDeploy","feeDelegatedSmartContractDeployWithRatio","smartContractExecution","feeDelegatedSmartContractExecution","feeDelegatedSmartContractExecutionWithRatio","cancel","feeDelegatedCancel","feeDelegatedCancelWithRatio","chainDataAnchoring","feeDelegatedChainDataAnchoring","feeDelegatedChainDataAnchoringWithRatio","type","tag","utils","accessList","accessTuple","_klaytnCall","c","getTransactionByHash","transactionHash","txObject","key","account","createFromRLPEncoding","from","create","recoverPublicKeys","rawTx","tx","decode","recoverFeePayerPublicKeys","encoded","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-transaction/src/index.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable no-unused-vars */\nconst LegacyTransaction = require('./transactionTypes/legacyTransaction/legacyTransaction')\nconst EthereumAccessList = require('./transactionTypes/ethereumTypedTransaction/ethereumAccessList')\nconst EthereumDynamicFee = require('./transactionTypes/ethereumTypedTransaction/ethereumDynamicFee')\nconst ValueTransfer = require('./transactionTypes/valueTransfer/valueTransfer')\nconst FeeDelegatedValueTransfer = require('./transactionTypes/valueTransfer/feeDelegatedValueTransfer')\nconst FeeDelegatedValueTransferWithRatio = require('./transactionTypes/valueTransfer/feeDelegatedValueTransferWithRatio')\nconst ValueTransferMemo = require('./transactionTypes/valueTransferMemo/valueTransferMemo')\nconst FeeDelegatedValueTransferMemo = require('./transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemo')\nconst FeeDelegatedValueTransferMemoWithRatio = require('./transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemoWithRatio')\nconst AccountUpdate = require('./transactionTypes/accountUpdate/accountUpdate')\nconst FeeDelegatedAccountUpdate = require('./transactionTypes/accountUpdate/feeDelegatedAccountUpdate')\nconst FeeDelegatedAccountUpdateWithRatio = require('./transactionTypes/accountUpdate/feeDelegatedAccountUpdateWithRatio')\nconst SmartContractDeploy = require('./transactionTypes/smartContractDeploy/smartContractDeploy')\nconst FeeDelegatedSmartContractDeploy = require('./transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeploy')\nconst FeeDelegatedSmartContractDeployWithRatio = require('./transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeployWithRatio')\nconst SmartContractExecution = require('./transactionTypes/smartContractExecution/smartContractExecution')\nconst FeeDelegatedSmartContractExecution = require('./transactionTypes/smartContractExecution/feeDelegatedSmartContractExecution')\nconst FeeDelegatedSmartContractExecutionWithRatio = require('./transactionTypes/smartContractExecution/feeDelegatedSmartContractExecutionWithRatio')\nconst Cancel = require('./transactionTypes/cancel/cancel')\nconst FeeDelegatedCancel = require('./transactionTypes/cancel/feeDelegatedCancel')\nconst FeeDelegatedCancelWithRatio = require('./transactionTypes/cancel/feeDelegatedCancelWithRatio')\nconst ChainDataAnchoring = require('./transactionTypes/chainDataAnchoring/chainDataAnchoring')\nconst FeeDelegatedChainDataAnchoring = require('./transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoring')\nconst FeeDelegatedChainDataAnchoringWithRatio = require('./transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoringWithRatio')\nconst LegacyTransactionWrapper = require('./transactionTypes/wrappers/legacyTransactionWrapper')\nconst EthereumAccessListWrapper = require('./transactionTypes/wrappers/ethereumAccessListWrapper')\nconst EthereumDynamicFeeWrapper = require('./transactionTypes/wrappers/ethereumDynamicFeeWrapper')\nconst ValueTransferWrapper = require('./transactionTypes/wrappers/valueTransferWrapper')\nconst FeeDelegatedValueTransferWrapper = require('./transactionTypes/wrappers/feeDelegatedValueTransferWrapper')\nconst FeeDelegatedValueTransferWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedValueTransferWithRatioWrapper')\nconst ValueTransferMemoWrapper = require('./transactionTypes/wrappers/valueTransferMemoWrapper')\nconst FeeDelegatedValueTransferMemoWrapper = require('./transactionTypes/wrappers/feeDelegatedValueTransferMemoWrapper')\nconst FeeDelegatedValueTransferMemoWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedValueTransferMemoWithRatioWrapper')\nconst AccountUpdateWrapper = require('./transactionTypes/wrappers/accountUpdateWrapper')\nconst FeeDelegatedAccountUpdateWrapper = require('./transactionTypes/wrappers/feeDelegatedAccountUpdateWrapper')\nconst FeeDelegatedAccountUpdateWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedAccountUpdateWithRatioWrapper')\nconst SmartContractDeployWrapper = require('./transactionTypes/wrappers/smartContractDeployWrapper')\nconst FeeDelegatedSmartContractDeployWrapper = require('./transactionTypes/wrappers/feeDelegatedSmartContractDeployWrapper')\nconst FeeDelegatedSmartContractDeployWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedSmartContractDeployWithRatioWrapper')\nconst SmartContractExecutionWrapper = require('./transactionTypes/wrappers/smartContractExecutionWrapper')\nconst FeeDelegatedSmartContractExecutionWrapper = require('./transactionTypes/wrappers/feeDelegatedSmartContractExecutionWrapper')\nconst FeeDelegatedSmartContractExecutionWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedSmartContractExecutionWithRatioWrapper')\nconst CancelWrapper = require('./transactionTypes/wrappers/cancelWrapper')\nconst FeeDelegatedCancelWrapper = require('./transactionTypes/wrappers/feeDelegatedCancelWrapper')\nconst FeeDelegatedCancelWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedCancelWithRatioWrapper')\nconst ChainDataAnchoringWrapper = require('./transactionTypes/wrappers/chainDataAnchoringWrapper')\nconst FeeDelegatedChainDataAnchoringWrapper = require('./transactionTypes/wrappers/feeDelegatedChainDataAnchoringWrapper')\nconst FeeDelegatedChainDataAnchoringWithRatioWrapper = require('./transactionTypes/wrappers/feeDelegatedChainDataAnchoringWithRatioWrapper')\nconst TransactionDecoder = require('./transactionDecoder/transactionDecoder')\nconst AbstractTransaction = require('./transactionTypes/abstractTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('./transactionHelper/transactionHelper')\nconst Account = require('../../caver-account')\nconst AbstractFeeDelegatedTransaction = require('./transactionTypes/abstractFeeDelegatedTransaction')\nconst AccessList = require('./utils/accessList')\nconst AccessTuple = require('./utils/accessTuple')\n\n/**\n * @typedef {LegacyTransaction|ValueTransfer|FeeDelegatedValueTransfer|FeeDelegatedValueTransferWithRatio|ValueTransferMemo|FeeDelegatedValueTransferMemo|FeeDelegatedValueTransferMemoWithRatio|AccountUpdate|FeeDelegatedAccountUpdate|FeeDelegatedAccountUpdateWithRatio|SmartContractDeploy|FeeDelegatedSmartContractDeploy|FeeDelegatedSmartContractDeployWithRatio|SmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecutionWithRatio|Cancel|FeeDelegatedCancel|FeeDelegatedCancelWithRatio|ChainDataAnchoring|FeeDelegatedChainDataAnchoring|FeeDelegatedChainDataAnchoringWithRatio|EthereumAccessList|EthereumDynamicFee} module:Transaction.Transaction\n */\n/**\n * @typedef {FeeDelegatedValueTransfer|FeeDelegatedValueTransferWithRatio|FeeDelegatedValueTransferMemo|FeeDelegatedValueTransferMemoWithRatio|FeeDelegatedAccountUpdate|FeeDelegatedAccountUpdateWithRatio|FeeDelegatedSmartContractDeploy|FeeDelegatedSmartContractDeployWithRatio|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecutionWithRatio|FeeDelegatedCancel|FeeDelegatedCancelWithRatio|FeeDelegatedChainDataAnchoring|FeeDelegatedChainDataAnchoringWithRatio} module:Transaction.FeeDelegatedTransaction\n */\n\n/**\n * A class that manages instances of the transaction wrapper and other functions provided by the transaction module.\n * @class\n * @hideconstructor\n */\nclass TransactionModule {\n    /**\n     * Creates a TransactionModule.\n     *\n     * @constructor\n     * @param {object} klaytnCall - An object includes klay rpc calls.\n     */\n    constructor(klaytnCall) {\n        if (!klaytnCall) throw new Error(`Invalid constructor parameter: klaytnCall is undefined.`)\n\n        this.klaytnCall = klaytnCall\n        this.legacyTransaction = new LegacyTransactionWrapper(this.klaytnCall)\n        this.ethereumAccessList = new EthereumAccessListWrapper(this.klaytnCall)\n        this.ethereumDynamicFee = new EthereumDynamicFeeWrapper(this.klaytnCall)\n        this.valueTransfer = new ValueTransferWrapper(this.klaytnCall)\n        this.feeDelegatedValueTransfer = new FeeDelegatedValueTransferWrapper(this.klaytnCall)\n        this.feeDelegatedValueTransferWithRatio = new FeeDelegatedValueTransferWithRatioWrapper(this.klaytnCall)\n        this.valueTransferMemo = new ValueTransferMemoWrapper(this.klaytnCall)\n        this.feeDelegatedValueTransferMemo = new FeeDelegatedValueTransferMemoWrapper(this.klaytnCall)\n        this.feeDelegatedValueTransferMemoWithRatio = new FeeDelegatedValueTransferMemoWithRatioWrapper(this.klaytnCall)\n        this.accountUpdate = new AccountUpdateWrapper(this.klaytnCall)\n        this.feeDelegatedAccountUpdate = new FeeDelegatedAccountUpdateWrapper(this.klaytnCall)\n        this.feeDelegatedAccountUpdateWithRatio = new FeeDelegatedAccountUpdateWithRatioWrapper(this.klaytnCall)\n        this.smartContractDeploy = new SmartContractDeployWrapper(this.klaytnCall)\n        this.feeDelegatedSmartContractDeploy = new FeeDelegatedSmartContractDeployWrapper(this.klaytnCall)\n        this.feeDelegatedSmartContractDeployWithRatio = new FeeDelegatedSmartContractDeployWithRatioWrapper(this.klaytnCall)\n        this.smartContractExecution = new SmartContractExecutionWrapper(this.klaytnCall)\n        this.feeDelegatedSmartContractExecution = new FeeDelegatedSmartContractExecutionWrapper(this.klaytnCall)\n        this.feeDelegatedSmartContractExecutionWithRatio = new FeeDelegatedSmartContractExecutionWithRatioWrapper(this.klaytnCall)\n        this.cancel = new CancelWrapper(this.klaytnCall)\n        this.feeDelegatedCancel = new FeeDelegatedCancelWrapper(this.klaytnCall)\n        this.feeDelegatedCancelWithRatio = new FeeDelegatedCancelWithRatioWrapper(this.klaytnCall)\n        this.chainDataAnchoring = new ChainDataAnchoringWrapper(this.klaytnCall)\n        this.feeDelegatedChainDataAnchoring = new FeeDelegatedChainDataAnchoringWrapper(this.klaytnCall)\n        this.feeDelegatedChainDataAnchoringWithRatio = new FeeDelegatedChainDataAnchoringWithRatioWrapper(this.klaytnCall)\n\n        this.type = TX_TYPE_STRING\n        this.tag = TX_TYPE_TAG\n\n        this.utils = {\n            accessList: AccessList,\n            accessTuple: AccessTuple,\n        }\n    }\n\n    /**\n     * @type {object}\n     */\n    get klaytnCall() {\n        return this._klaytnCall\n    }\n\n    set klaytnCall(c) {\n        this._klaytnCall = c\n    }\n\n    /**\n     * Querys transaction from Klaytn and converts to a caver transaction instance.\n     * If it fails to receive a transaction from Klaytn, an error is thrown.\n     *\n     * @example\n     * const txObject = await caver.transaction.getTransactionByHash('0x{transaction hash}')\n     *\n     * @method getTransactionByHash\n     * @param  {string} transactionHash The transaction hash string to query from Klaytn.\n     * @return {Promise<AbstractTransaction>}\n     */\n    async getTransactionByHash(transactionHash) {\n        let txObject = await this.klaytnCall.getTransactionByHash(transactionHash)\n        if (txObject === null) throw new Error(`Failed to get transaction from Klaytn with '${transactionHash}'.`)\n\n        // AccountUpdate transaction received from Klaytn defines encodedAccountKey string in `key` field.\n        // This needs to be formatted according to the caver transaction format (`account` field).\n        if (txObject.key) {\n            const account = Account.createFromRLPEncoding(txObject.from, txObject.key)\n            txObject.account = account\n            delete txObject.key\n        }\n\n        switch (txObject.type) {\n            case 'TxTypeLegacyTransaction':\n                txObject = this.legacyTransaction.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeValueTransfer':\n                txObject = this.valueTransfer.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedValueTransfer':\n                txObject = this.feeDelegatedValueTransfer.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedValueTransferWithRatio':\n                txObject = this.feeDelegatedValueTransferWithRatio.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeValueTransferMemo':\n                txObject = this.valueTransferMemo.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedValueTransferMemo':\n                txObject = this.feeDelegatedValueTransferMemo.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedValueTransferMemoWithRatio':\n                txObject = this.feeDelegatedValueTransferMemoWithRatio.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeAccountUpdate':\n                txObject = this.accountUpdate.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedAccountUpdate':\n                txObject = this.feeDelegatedAccountUpdate.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedAccountUpdateWithRatio':\n                txObject = this.feeDelegatedAccountUpdateWithRatio.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeSmartContractDeploy':\n                txObject = this.smartContractDeploy.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedSmartContractDeploy':\n                txObject = this.feeDelegatedSmartContractDeploy.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedSmartContractDeployWithRatio':\n                txObject = this.feeDelegatedSmartContractDeployWithRatio.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeSmartContractExecution':\n                txObject = this.smartContractExecution.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedSmartContractExecution':\n                txObject = this.feeDelegatedSmartContractExecution.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedSmartContractExecutionWithRatio':\n                txObject = this.feeDelegatedSmartContractExecutionWithRatio.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeCancel':\n                txObject = this.cancel.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedCancel':\n                txObject = this.feeDelegatedCancel.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedCancelWithRatio':\n                txObject = this.feeDelegatedCancelWithRatio.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeChainDataAnchoring':\n                txObject = this.chainDataAnchoring.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedChainDataAnchoring':\n                txObject = this.feeDelegatedChainDataAnchoring.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeFeeDelegatedChainDataAnchoringWithRatio':\n                txObject = this.feeDelegatedChainDataAnchoringWithRatio.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeEthereumAccessList':\n                txObject = this.ethereumAccessList.create(txObject, this.klaytnCall)\n                break\n            case 'TxTypeEthereumDynamicFee':\n                txObject = this.ethereumDynamicFee.create(txObject, this.klaytnCall)\n                break\n        }\n        return txObject\n    }\n\n    /**\n     * Recovers the public key strings from `signatures` field.\n     * If you want to derive an address from public key, please use `caver.utils.publicKeyToAddress`.\n     *\n     * @example\n     * const publicKey = caver.transaction.recoverPublicKeys('0x{RLP-encoded transaction string}')\n     *\n     * @method recoverPublicKeys\n     * @param  {string} rawTx The RLP-encoded transaction string to recover public keys from `signatures`.\n     * @return {Array.<string>}\n     */\n    recoverPublicKeys(rawTx) {\n        const tx = TransactionDecoder.decode(rawTx)\n        return tx.recoverPublicKeys()\n    }\n\n    /**\n     * Recovers the public key strings from `feePayerSignatures` field.\n     * If you want to derive an address from public key, please use `caver.utils.publicKeyToAddress`.\n     *\n     * @example\n     * const publicKey = caver.transaction.recoverFeePayerPublicKeys()\n     *\n     * @method recoverFeePayerPublicKeys\n     * @param  {string} rawTx The RLP-encoded transaction string to recover public keys from `feePayerSignatures`.\n     * @return {Array.<string>}\n     */\n    recoverFeePayerPublicKeys(rawTx) {\n        const tx = TransactionDecoder.decode(rawTx)\n        if (!(tx instanceof AbstractFeeDelegatedTransaction))\n            throw new Error(\n                'The `caver.transaction.recoverFeePayerPublicKeys` function can only use with fee delegation transaction. For basic transactions, use `caver.transaction.recoverPublicKeys`.'\n            )\n        return tx.recoverFeePayerPublicKeys()\n    }\n\n    /**\n     * Decodes RLP-encoded transaction string and returns a Transaction instance.\n     *\n     * @example\n     * const tx = caver.transaction.decode('0x{RLP-encoded transaction string}')\n     *\n     * @param {string} rlpEncoded - An RLP-encoded transaction string to decode.\n     * @return {module:Transaction.Transaction}\n     */\n    decode(encoded) {\n        return TransactionDecoder.decode(encoded)\n    }\n}\n\nmodule.exports = TransactionModule\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}