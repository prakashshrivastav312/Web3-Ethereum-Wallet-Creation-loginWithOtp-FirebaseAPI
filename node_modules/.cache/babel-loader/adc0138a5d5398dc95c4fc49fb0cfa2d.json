{"ast":null,"code":"\"use strict\";\n/**\n * Codec class\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidClassicAddress = exports.decodeAccountPublic = exports.encodeAccountPublic = exports.encodeNodePublic = exports.decodeNodePublic = exports.decodeAddress = exports.decodeAccountID = exports.encodeAddress = exports.encodeAccountID = exports.decodeSeed = exports.encodeSeed = exports.codec = void 0;\n\nconst baseCodec = require(\"base-x\");\n\nconst createHash = require(\"create-hash\");\n\nconst utils_1 = require(\"./utils\");\n\nclass Codec {\n  constructor(options) {\n    this._sha256 = options.sha256;\n    this._alphabet = options.alphabet;\n    this._codec = baseCodec(this._alphabet);\n  }\n  /**\n   * Encoder.\n   *\n   * @param bytes - Buffer of data to encode.\n   * @param opts - Options object including the version bytes and the expected length of the data to encode.\n   */\n\n\n  encode(bytes, opts) {\n    const versions = opts.versions;\n    return this._encodeVersioned(bytes, versions, opts.expectedLength);\n  }\n  /**\n   * Decoder.\n   *\n   * @param base58string - Base58Check-encoded string to decode.\n   * @param opts - Options object including the version byte(s) and the expected length of the data after decoding.\n   */\n\n  /* eslint-disable max-lines-per-function --\n   * TODO refactor */\n\n\n  decode(base58string, opts) {\n    var _a;\n\n    const versions = opts.versions;\n    const types = opts.versionTypes;\n    const withoutSum = this.decodeChecked(base58string);\n\n    if (versions.length > 1 && !opts.expectedLength) {\n      throw new Error('expectedLength is required because there are >= 2 possible versions');\n    }\n\n    const versionLengthGuess = typeof versions[0] === 'number' ? 1 : versions[0].length;\n    const payloadLength = (_a = opts.expectedLength) !== null && _a !== void 0 ? _a : withoutSum.length - versionLengthGuess;\n    const versionBytes = withoutSum.slice(0, -payloadLength);\n    const payload = withoutSum.slice(-payloadLength);\n\n    for (let i = 0; i < versions.length; i++) {\n      /* eslint-disable @typescript-eslint/consistent-type-assertions --\n       * TODO refactor */\n      const version = Array.isArray(versions[i]) ? versions[i] : [versions[i]];\n\n      if ((0, utils_1.seqEqual)(versionBytes, version)) {\n        return {\n          version,\n          bytes: payload,\n          type: types ? types[i] : null\n        };\n      }\n      /* eslint-enable @typescript-eslint/consistent-type-assertions */\n\n    }\n\n    throw new Error('version_invalid: version bytes do not match any of the provided version(s)');\n  }\n\n  encodeChecked(buffer) {\n    const check = this._sha256(this._sha256(buffer)).slice(0, 4);\n\n    return this._encodeRaw(Buffer.from((0, utils_1.concatArgs)(buffer, check)));\n  }\n\n  decodeChecked(base58string) {\n    const buffer = this._decodeRaw(base58string);\n\n    if (buffer.length < 5) {\n      throw new Error('invalid_input_size: decoded data must have length >= 5');\n    }\n\n    if (!this._verifyCheckSum(buffer)) {\n      throw new Error('checksum_invalid');\n    }\n\n    return buffer.slice(0, -4);\n  }\n\n  _encodeVersioned(bytes, versions, expectedLength) {\n    if (expectedLength && bytes.length !== expectedLength) {\n      throw new Error('unexpected_payload_length: bytes.length does not match expectedLength.' + ' Ensure that the bytes are a Buffer.');\n    }\n\n    return this.encodeChecked(Buffer.from((0, utils_1.concatArgs)(versions, bytes)));\n  }\n\n  _encodeRaw(bytes) {\n    return this._codec.encode(bytes);\n  }\n  /* eslint-enable max-lines-per-function */\n\n\n  _decodeRaw(base58string) {\n    return this._codec.decode(base58string);\n  }\n\n  _verifyCheckSum(bytes) {\n    const computed = this._sha256(this._sha256(bytes.slice(0, -4))).slice(0, 4);\n\n    const checksum = bytes.slice(-4);\n    return (0, utils_1.seqEqual)(computed, checksum);\n  }\n\n}\n/**\n * XRP codec\n */\n// base58 encodings: https://xrpl.org/base58-encodings.html\n// Account address (20 bytes)\n\n\nconst ACCOUNT_ID = 0; // Account public key (33 bytes)\n\nconst ACCOUNT_PUBLIC_KEY = 0x23; // 33; Seed value (for secret keys) (16 bytes)\n\nconst FAMILY_SEED = 0x21; // 28; Validation public key (33 bytes)\n\nconst NODE_PUBLIC = 0x1c; // [1, 225, 75]\n\nconst ED25519_SEED = [0x01, 0xe1, 0x4b];\nconst codecOptions = {\n  sha256(bytes) {\n    return createHash('sha256').update(Buffer.from(bytes)).digest();\n  },\n\n  alphabet: 'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'\n};\nconst codecWithXrpAlphabet = new Codec(codecOptions);\nexports.codec = codecWithXrpAlphabet; // entropy is a Buffer of size 16\n// type is 'ed25519' or 'secp256k1'\n\nfunction encodeSeed(entropy, type) {\n  if (entropy.length !== 16) {\n    throw new Error('entropy must have length 16');\n  }\n\n  const opts = {\n    expectedLength: 16,\n    // for secp256k1, use `FAMILY_SEED`\n    versions: type === 'ed25519' ? ED25519_SEED : [FAMILY_SEED]\n  }; // prefixes entropy with version bytes\n\n  return codecWithXrpAlphabet.encode(entropy, opts);\n}\n\nexports.encodeSeed = encodeSeed;\n\nfunction decodeSeed(seed) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    versionTypes: ['ed25519', 'secp256k1'],\n    versions: [ED25519_SEED, FAMILY_SEED],\n    expectedLength: 16\n  };\n  return codecWithXrpAlphabet.decode(seed, opts);\n}\n\nexports.decodeSeed = decodeSeed;\n\nfunction encodeAccountID(bytes) {\n  const opts = {\n    versions: [ACCOUNT_ID],\n    expectedLength: 20\n  };\n  return codecWithXrpAlphabet.encode(bytes, opts);\n}\n\nexports.encodeAccountID = encodeAccountID;\n/* eslint-disable import/no-unused-modules ---\n * unclear why this is aliased but we should keep it in case someone else is\n * importing it with the aliased name */\n\nexports.encodeAddress = encodeAccountID;\n/* eslint-enable import/no-unused-modules */\n\nfunction decodeAccountID(accountId) {\n  const opts = {\n    versions: [ACCOUNT_ID],\n    expectedLength: 20\n  };\n  return codecWithXrpAlphabet.decode(accountId, opts).bytes;\n}\n\nexports.decodeAccountID = decodeAccountID;\n/* eslint-disable import/no-unused-modules ---\n * unclear why this is aliased but we should keep it in case someone else is\n * importing it with the aliased name */\n\nexports.decodeAddress = decodeAccountID;\n/* eslint-enable import/no-unused-modules */\n\nfunction decodeNodePublic(base58string) {\n  const opts = {\n    versions: [NODE_PUBLIC],\n    expectedLength: 33\n  };\n  return codecWithXrpAlphabet.decode(base58string, opts).bytes;\n}\n\nexports.decodeNodePublic = decodeNodePublic;\n\nfunction encodeNodePublic(bytes) {\n  const opts = {\n    versions: [NODE_PUBLIC],\n    expectedLength: 33\n  };\n  return codecWithXrpAlphabet.encode(bytes, opts);\n}\n\nexports.encodeNodePublic = encodeNodePublic;\n\nfunction encodeAccountPublic(bytes) {\n  const opts = {\n    versions: [ACCOUNT_PUBLIC_KEY],\n    expectedLength: 33\n  };\n  return codecWithXrpAlphabet.encode(bytes, opts);\n}\n\nexports.encodeAccountPublic = encodeAccountPublic;\n\nfunction decodeAccountPublic(base58string) {\n  const opts = {\n    versions: [ACCOUNT_PUBLIC_KEY],\n    expectedLength: 33\n  };\n  return codecWithXrpAlphabet.decode(base58string, opts).bytes;\n}\n\nexports.decodeAccountPublic = decodeAccountPublic;\n\nfunction isValidClassicAddress(address) {\n  try {\n    decodeAccountID(address);\n  } catch (_error) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isValidClassicAddress = isValidClassicAddress;","map":{"version":3,"mappings":";AAAA;;;;;;;;;AAIA;;AACA;;AAEA;;AAEA,MAAMA,KAAN,CAAW;EAKTC,YAAmBC,OAAnB,EAGC;IACC,KAAKC,OAAL,GAAeD,OAAO,CAACE,MAAvB;IACA,KAAKC,SAAL,GAAiBH,OAAO,CAACI,QAAzB;IACA,KAAKC,MAAL,GAAcC,SAAS,CAAC,KAAKH,SAAN,CAAvB;EACD;EAED;;;;;;;;EAMOI,MAAM,CACXC,KADW,EAEXC,IAFW,EAKV;IAED,MAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB;IACA,OAAO,KAAKC,gBAAL,CAAsBH,KAAtB,EAA6BE,QAA7B,EAAuCD,IAAI,CAACG,cAA5C,CAAP;EACD;EAED;;;;;;;EAMA;;;;EAEOC,MAAM,CACXC,YADW,EAEXL,IAFW,EAMV;;;IAMD,MAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB;IACA,MAAMK,KAAK,GAAGN,IAAI,CAACO,YAAnB;IAEA,MAAMC,UAAU,GAAG,KAAKC,aAAL,CAAmBJ,YAAnB,CAAnB;;IAEA,IAAIJ,QAAQ,CAACS,MAAT,GAAkB,CAAlB,IAAuB,CAACV,IAAI,CAACG,cAAjC,EAAiD;MAC/C,MAAM,IAAIQ,KAAJ,CACJ,qEADI,CAAN;IAGD;;IACD,MAAMC,kBAAkB,GACtB,OAAOX,QAAQ,CAAC,CAAD,CAAf,KAAuB,QAAvB,GAAkC,CAAlC,GAAsCA,QAAQ,CAAC,CAAD,CAAR,CAAYS,MADpD;IAEA,MAAMG,aAAa,GACjB,UAAI,CAACV,cAAL,MAAmB,IAAnB,IAAmBW,aAAnB,GAAmBA,EAAnB,GAAuBN,UAAU,CAACE,MAAX,GAAoBE,kBAD7C;IAEA,MAAMG,YAAY,GAAGP,UAAU,CAACQ,KAAX,CAAiB,CAAjB,EAAoB,CAACH,aAArB,CAArB;IACA,MAAMI,OAAO,GAAGT,UAAU,CAACQ,KAAX,CAAiB,CAACH,aAAlB,CAAhB;;IAEA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,QAAQ,CAACS,MAA7B,EAAqCQ,CAAC,EAAtC,EAA0C;MACxC;;MAEA,MAAMC,OAAO,GAAaC,KAAK,CAACC,OAAN,CAAcpB,QAAQ,CAACiB,CAAD,CAAtB,IACrBjB,QAAQ,CAACiB,CAAD,CADa,GAEtB,CAACjB,QAAQ,CAACiB,CAAD,CAAT,CAFJ;;MAGA,IAAI,sBAASH,YAAT,EAAuBI,OAAvB,CAAJ,EAAqC;QACnC,OAAO;UACLA,OADK;UAELpB,KAAK,EAAEkB,OAFF;UAGLK,IAAI,EAAEhB,KAAK,GAAGA,KAAK,CAACY,CAAD,CAAR,GAAc;QAHpB,CAAP;MAKD;MACD;;IACD;;IAED,MAAM,IAAIP,KAAJ,CACJ,4EADI,CAAN;EAGD;;EAEMY,aAAa,CAACC,MAAD,EAAe;IACjC,MAAMC,KAAK,GAAG,KAAKjC,OAAL,CAAa,KAAKA,OAAL,CAAagC,MAAb,CAAb,EAAmCR,KAAnC,CAAyC,CAAzC,EAA4C,CAA5C,CAAd;;IACA,OAAO,KAAKU,UAAL,CAAgBC,MAAM,CAACC,IAAP,CAAY,wBAAWJ,MAAX,EAAmBC,KAAnB,CAAZ,CAAhB,CAAP;EACD;;EAEMhB,aAAa,CAACJ,YAAD,EAAqB;IACvC,MAAMmB,MAAM,GAAG,KAAKK,UAAL,CAAgBxB,YAAhB,CAAf;;IACA,IAAImB,MAAM,CAACd,MAAP,GAAgB,CAApB,EAAuB;MACrB,MAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;IACD;;IACD,IAAI,CAAC,KAAKmB,eAAL,CAAqBN,MAArB,CAAL,EAAmC;MACjC,MAAM,IAAIb,KAAJ,CAAU,kBAAV,CAAN;IACD;;IACD,OAAOa,MAAM,CAACR,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAP;EACD;;EAEOd,gBAAgB,CACtBH,KADsB,EAEtBE,QAFsB,EAGtBE,cAHsB,EAGA;IAEtB,IAAIA,cAAc,IAAIJ,KAAK,CAACW,MAAN,KAAiBP,cAAvC,EAAuD;MACrD,MAAM,IAAIQ,KAAJ,CACJ,2EACE,sCAFE,CAAN;IAID;;IACD,OAAO,KAAKY,aAAL,CAAmBI,MAAM,CAACC,IAAP,CAAY,wBAAW3B,QAAX,EAAqBF,KAArB,CAAZ,CAAnB,CAAP;EACD;;EAEO2B,UAAU,CAAC3B,KAAD,EAAc;IAC9B,OAAO,KAAKH,MAAL,CAAYE,MAAZ,CAAmBC,KAAnB,CAAP;EACD;EACD;;;EAEQ8B,UAAU,CAACxB,YAAD,EAAqB;IACrC,OAAO,KAAKT,MAAL,CAAYQ,MAAZ,CAAmBC,YAAnB,CAAP;EACD;;EAEOyB,eAAe,CAAC/B,KAAD,EAAc;IACnC,MAAMgC,QAAQ,GAAG,KAAKvC,OAAL,CAAa,KAAKA,OAAL,CAAaO,KAAK,CAACiB,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAb,CAAb,EAA+CA,KAA/C,CAAqD,CAArD,EAAwD,CAAxD,CAAjB;;IACA,MAAMgB,QAAQ,GAAGjC,KAAK,CAACiB,KAAN,CAAY,CAAC,CAAb,CAAjB;IACA,OAAO,sBAASe,QAAT,EAAmBC,QAAnB,CAAP;EACD;;AApIQ;AAuIX;;;AAIA;AACA;;;AACA,MAAMC,UAAU,GAAG,CAAnB,C,CACA;;AACA,MAAMC,kBAAkB,GAAG,IAA3B,C,CACA;;AACA,MAAMC,WAAW,GAAG,IAApB,C,CACA;;AACA,MAAMC,WAAW,GAAG,IAApB,C,CAEA;;AACA,MAAMC,YAAY,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAArB;AAEA,MAAMC,YAAY,GAAG;EACnB7C,MAAM,CAACM,KAAD,EAAkB;IACtB,OAAOwC,UAAU,CAAC,QAAD,CAAV,CAAqBC,MAArB,CAA4Bb,MAAM,CAACC,IAAP,CAAY7B,KAAZ,CAA5B,EAAgD0C,MAAhD,EAAP;EACD,CAHkB;;EAInB9C,QAAQ,EAAE;AAJS,CAArB;AAOA,MAAM+C,oBAAoB,GAAG,IAAIrD,KAAJ,CAAUiD,YAAV,CAA7B;AAEaK,gBAAQD,oBAAR,C,CAEb;AACA;;AACA,SAAgBE,UAAhB,CACEC,OADF,EAEEvB,IAFF,EAE+B;EAE7B,IAAIuB,OAAO,CAACnC,MAAR,KAAmB,EAAvB,EAA2B;IACzB,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;EACD;;EACD,MAAMX,IAAI,GAAG;IACXG,cAAc,EAAE,EADL;IAGX;IACAF,QAAQ,EAAEqB,IAAI,KAAK,SAAT,GAAqBe,YAArB,GAAoC,CAACF,WAAD;EAJnC,CAAb,CAL6B,CAY7B;;EACA,OAAOO,oBAAoB,CAAC5C,MAArB,CAA4B+C,OAA5B,EAAqC7C,IAArC,CAAP;AACD;;AAhBD2C;;AAkBA,SAAgBG,UAAhB,CACEC,IADF,EAUG;EAAA,IARD/C,IAQC,uEAJG;IACFO,YAAY,EAAE,CAAC,SAAD,EAAY,WAAZ,CADZ;IAEFN,QAAQ,EAAE,CAACoC,YAAD,EAAeF,WAAf,CAFR;IAGFhC,cAAc,EAAE;EAHd,CAIH;EAMD,OAAOuC,oBAAoB,CAACtC,MAArB,CAA4B2C,IAA5B,EAAkC/C,IAAlC,CAAP;AACD;;AAjBD2C;;AAmBA,SAAgBK,eAAhB,CAAgCjD,KAAhC,EAA6C;EAC3C,MAAMC,IAAI,GAAG;IAAEC,QAAQ,EAAE,CAACgC,UAAD,CAAZ;IAA0B9B,cAAc,EAAE;EAA1C,CAAb;EACA,OAAOuC,oBAAoB,CAAC5C,MAArB,CAA4BC,KAA5B,EAAmCC,IAAnC,CAAP;AACD;;AAHD2C;AAKA;;;;AAGaA,wBAAgBK,eAAhB;AACb;;AAEA,SAAgBC,eAAhB,CAAgCC,SAAhC,EAAiD;EAC/C,MAAMlD,IAAI,GAAG;IAAEC,QAAQ,EAAE,CAACgC,UAAD,CAAZ;IAA0B9B,cAAc,EAAE;EAA1C,CAAb;EACA,OAAOuC,oBAAoB,CAACtC,MAArB,CAA4B8C,SAA5B,EAAuClD,IAAvC,EAA6CD,KAApD;AACD;;AAHD4C;AAKA;;;;AAGaA,wBAAgBM,eAAhB;AACb;;AAEA,SAAgBE,gBAAhB,CAAiC9C,YAAjC,EAAqD;EACnD,MAAML,IAAI,GAAG;IAAEC,QAAQ,EAAE,CAACmC,WAAD,CAAZ;IAA2BjC,cAAc,EAAE;EAA3C,CAAb;EACA,OAAOuC,oBAAoB,CAACtC,MAArB,CAA4BC,YAA5B,EAA0CL,IAA1C,EAAgDD,KAAvD;AACD;;AAHD4C;;AAKA,SAAgBS,gBAAhB,CAAiCrD,KAAjC,EAA8C;EAC5C,MAAMC,IAAI,GAAG;IAAEC,QAAQ,EAAE,CAACmC,WAAD,CAAZ;IAA2BjC,cAAc,EAAE;EAA3C,CAAb;EACA,OAAOuC,oBAAoB,CAAC5C,MAArB,CAA4BC,KAA5B,EAAmCC,IAAnC,CAAP;AACD;;AAHD2C;;AAKA,SAAgBU,mBAAhB,CAAoCtD,KAApC,EAAiD;EAC/C,MAAMC,IAAI,GAAG;IAAEC,QAAQ,EAAE,CAACiC,kBAAD,CAAZ;IAAkC/B,cAAc,EAAE;EAAlD,CAAb;EACA,OAAOuC,oBAAoB,CAAC5C,MAArB,CAA4BC,KAA5B,EAAmCC,IAAnC,CAAP;AACD;;AAHD2C;;AAKA,SAAgBW,mBAAhB,CAAoCjD,YAApC,EAAwD;EACtD,MAAML,IAAI,GAAG;IAAEC,QAAQ,EAAE,CAACiC,kBAAD,CAAZ;IAAkC/B,cAAc,EAAE;EAAlD,CAAb;EACA,OAAOuC,oBAAoB,CAACtC,MAArB,CAA4BC,YAA5B,EAA0CL,IAA1C,EAAgDD,KAAvD;AACD;;AAHD4C;;AAKA,SAAgBY,qBAAhB,CAAsCC,OAAtC,EAAqD;EACnD,IAAI;IACFP,eAAe,CAACO,OAAD,CAAf;EACD,CAFD,CAEE,OAAOC,MAAP,EAAe;IACf,OAAO,KAAP;EACD;;EACD,OAAO,IAAP;AACD;;AAPDd","names":["Codec","constructor","options","_sha256","sha256","_alphabet","alphabet","_codec","baseCodec","encode","bytes","opts","versions","_encodeVersioned","expectedLength","decode","base58string","types","versionTypes","withoutSum","decodeChecked","length","Error","versionLengthGuess","payloadLength","_a","versionBytes","slice","payload","i","version","Array","isArray","type","encodeChecked","buffer","check","_encodeRaw","Buffer","from","_decodeRaw","_verifyCheckSum","computed","checksum","ACCOUNT_ID","ACCOUNT_PUBLIC_KEY","FAMILY_SEED","NODE_PUBLIC","ED25519_SEED","codecOptions","createHash","update","digest","codecWithXrpAlphabet","exports","encodeSeed","entropy","decodeSeed","seed","encodeAccountID","decodeAccountID","accountId","decodeNodePublic","encodeNodePublic","encodeAccountPublic","decodeAccountPublic","isValidClassicAddress","address","_error"],"sourceRoot":"","sources":["../src/xrp-codec.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}