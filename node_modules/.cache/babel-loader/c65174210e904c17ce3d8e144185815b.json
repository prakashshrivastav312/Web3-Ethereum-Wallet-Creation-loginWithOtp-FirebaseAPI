{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XRPLFaucetError = exports.LedgerVersionError = exports.MissingLedgerHistoryError = exports.PendingLedgerVersionError = exports.NotFoundError = exports.ValidationError = exports.ResponseFormatError = exports.TimeoutError = exports.RippledNotInitializedError = exports.DisconnectedError = exports.NotConnectedError = exports.RippledError = exports.ConnectionError = exports.UnexpectedError = exports.RippleError = void 0;\n\nconst util_1 = require(\"util\");\n\nconst browserHacks = __importStar(require(\"./browser-hacks\"));\n\nclass RippleError extends Error {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let data = arguments.length > 1 ? arguments[1] : undefined;\n    super(message);\n    this.name = browserHacks.getConstructorName(this);\n    this.message = message;\n    this.data = data;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  toString() {\n    let result = '[' + this.name + '(' + this.message;\n\n    if (this.data) {\n      result += ', ' + util_1.inspect(this.data);\n    }\n\n    result += ')]';\n    return result;\n  }\n\n  inspect() {\n    return this.toString();\n  }\n\n}\n\nexports.RippleError = RippleError;\n\nclass RippledError extends RippleError {}\n\nexports.RippledError = RippledError;\n\nclass UnexpectedError extends RippleError {}\n\nexports.UnexpectedError = UnexpectedError;\n\nclass LedgerVersionError extends RippleError {}\n\nexports.LedgerVersionError = LedgerVersionError;\n\nclass ConnectionError extends RippleError {}\n\nexports.ConnectionError = ConnectionError;\n\nclass NotConnectedError extends ConnectionError {}\n\nexports.NotConnectedError = NotConnectedError;\n\nclass DisconnectedError extends ConnectionError {}\n\nexports.DisconnectedError = DisconnectedError;\n\nclass RippledNotInitializedError extends ConnectionError {}\n\nexports.RippledNotInitializedError = RippledNotInitializedError;\n\nclass TimeoutError extends ConnectionError {}\n\nexports.TimeoutError = TimeoutError;\n\nclass ResponseFormatError extends ConnectionError {}\n\nexports.ResponseFormatError = ResponseFormatError;\n\nclass ValidationError extends RippleError {}\n\nexports.ValidationError = ValidationError;\n\nclass XRPLFaucetError extends RippleError {}\n\nexports.XRPLFaucetError = XRPLFaucetError;\n\nclass NotFoundError extends RippleError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Not found';\n    super(message);\n  }\n\n}\n\nexports.NotFoundError = NotFoundError;\n\nclass MissingLedgerHistoryError extends RippleError {\n  constructor(message) {\n    super(message || 'Server is missing ledger history in the specified range');\n  }\n\n}\n\nexports.MissingLedgerHistoryError = MissingLedgerHistoryError;\n\nclass PendingLedgerVersionError extends RippleError {\n  constructor(message) {\n    super(message || \"maxLedgerVersion is greater than server's most recent\" + ' validated ledger');\n  }\n\n}\n\nexports.PendingLedgerVersionError = PendingLedgerVersionError;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA,MAAMA,WAAN,SAA0BC,KAA1B,CAA+B;EAK7BC,cAAoC;IAAA,IAAxBC,OAAwB,uEAAd,EAAc;IAAA,IAAVC,IAAU;IAClC,MAAMD,OAAN;IAEA,KAAKE,IAAL,GAAYC,YAAY,CAACC,kBAAb,CAAgC,IAAhC,CAAZ;IACA,KAAKJ,OAAL,GAAeA,OAAf;IACA,KAAKC,IAAL,GAAYA,IAAZ;;IACA,IAAIH,KAAK,CAACO,iBAAV,EAA6B;MAC3BP,KAAK,CAACO,iBAAN,CAAwB,IAAxB,EAA8B,KAAKN,WAAnC;IACD;EACF;;EAEDO,QAAQ;IACN,IAAIC,MAAM,GAAG,MAAM,KAAKL,IAAX,GAAkB,GAAlB,GAAwB,KAAKF,OAA1C;;IACA,IAAI,KAAKC,IAAT,EAAe;MACbM,MAAM,IAAI,OAAOC,eAAQ,KAAKP,IAAb,CAAjB;IACD;;IACDM,MAAM,IAAI,IAAV;IACA,OAAOA,MAAP;EACD;;EAKDE,OAAO;IACL,OAAO,KAAKH,QAAL,EAAP;EACD;;AA9B4B;;AA8E7BI;;AA7CF,MAAMC,YAAN,SAA2Bd,WAA3B,CAAsC;;AAgDpCa;;AA9CF,MAAME,eAAN,SAA8Bf,WAA9B,CAAyC;;AA4CvCa;;AA1CF,MAAMG,kBAAN,SAAiChB,WAAjC,CAA4C;;AAsD1Ca;;AApDF,MAAMI,eAAN,SAA8BjB,WAA9B,CAAyC;;AAyCvCa;;AAvCF,MAAMK,iBAAN,SAAgCD,eAAhC,CAA+C;;AAyC7CJ;;AAvCF,MAAMM,iBAAN,SAAgCF,eAAhC,CAA+C;;AAwC7CJ;;AAtCF,MAAMO,0BAAN,SAAyCH,eAAzC,CAAwD;;AAuCtDJ;;AArCF,MAAMQ,YAAN,SAA2BJ,eAA3B,CAA0C;;AAsCxCJ;;AApCF,MAAMS,mBAAN,SAAkCL,eAAlC,CAAiD;;AAqC/CJ;;AAnCF,MAAMU,eAAN,SAA8BvB,WAA9B,CAAyC;;AAoCvCa;;AAlCF,MAAMW,eAAN,SAA8BxB,WAA9B,CAAyC;;AAuCvCa;;AArCF,MAAMY,aAAN,SAA4BzB,WAA5B,CAAuC;EACrCE,cAAiC;IAAA,IAArBC,OAAqB,uEAAX,WAAW;IAC/B,MAAMA,OAAN;EACD;;AAHoC;;AAiCrCU;;AA3BF,MAAMa,yBAAN,SAAwC1B,WAAxC,CAAmD;EACjDE,YAAYC,OAAZ,EAA4B;IAC1B,MAAMA,OAAO,IAAI,yDAAjB;EACD;;AAHgD;;AA6BjDU;;AAvBF,MAAMc,yBAAN,SAAwC3B,WAAxC,CAAmD;EACjDE,YAAYC,OAAZ,EAA4B;IAC1B,MACEA,OAAO,IACL,0DACE,mBAHN;EAKD;;AAPgD;;AAsBjDU","names":["RippleError","Error","constructor","message","data","name","browserHacks","getConstructorName","captureStackTrace","toString","result","util_1","inspect","exports","RippledError","UnexpectedError","LedgerVersionError","ConnectionError","NotConnectedError","DisconnectedError","RippledNotInitializedError","TimeoutError","ResponseFormatError","ValidationError","XRPLFaucetError","NotFoundError","MissingLedgerHistoryError","PendingLedgerVersionError"],"sourceRoot":"","sources":["../../../src/common/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}