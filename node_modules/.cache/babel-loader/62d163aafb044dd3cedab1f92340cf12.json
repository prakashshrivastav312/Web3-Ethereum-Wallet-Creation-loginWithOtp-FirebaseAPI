{"ast":null,"code":"/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\n\n/**\r\n * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/Long.js for details\r\n */\n(function (global, factory) {\n  /* AMD */\n  if (typeof define === 'function' && define[\"amd\"]) define([], factory);\n  /* CommonJS */\n  else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"]) module[\"exports\"] = factory();\n  /* Global */\n  else (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\n})(this, function () {\n  \"use strict\";\n  /**\r\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n   *  See the from* functions below for more convenient ways of constructing Longs.\r\n   * @exports Long\r\n   * @class A Long class for representing a 64 bit two's-complement integer value.\r\n   * @param {number} low The low (signed) 32 bits of the long\r\n   * @param {number} high The high (signed) 32 bits of the long\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @constructor\r\n   */\n\n  function Long(low, high, unsigned) {\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     * @expose\r\n     */\n    this.low = low | 0;\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     * @expose\r\n     */\n\n    this.high = high | 0;\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     * @expose\r\n     */\n\n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n\n  /**\r\n   * An indicator used to reliably determine if an object is a Long or not.\r\n   * @type {boolean}\r\n   * @const\r\n   * @expose\r\n   * @private\r\n   */\n\n\n  Long.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true,\n    enumerable: false,\n    configurable: false\n  });\n  /**\r\n   * Tests if the specified object is a Long.\r\n   * @param {*} obj Object\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n  Long.isLong = function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  };\n  /**\r\n   * A cache of the Long representations of small integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\n\n\n  var INT_CACHE = {};\n  /**\r\n   * A cache of the Long representations of small unsigned integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\n\n  var UINT_CACHE = {};\n  /**\r\n   * Returns a Long representing the given 32 bit integer value.\r\n   * @param {number} value The 32 bit integer in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   * @expose\r\n   */\n\n  Long.fromInt = function fromInt(value, unsigned) {\n    var obj, cachedObj;\n\n    if (!unsigned) {\n      value = value | 0;\n\n      if (-128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n\n      obj = new Long(value, value < 0 ? -1 : 0, false);\n      if (-128 <= value && value < 128) INT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value = value >>> 0;\n\n      if (0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n\n      obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\n      if (0 <= value && value < 256) UINT_CACHE[value] = obj;\n      return obj;\n    }\n  };\n  /**\r\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n   * @param {number} value The number in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   * @expose\r\n   */\n\n\n  Long.fromNumber = function fromNumber(value, unsigned) {\n    unsigned = !!unsigned;\n    if (isNaN(value) || !isFinite(value)) return Long.ZERO;\n    if (!unsigned && value <= -TWO_PWR_63_DBL) return Long.MIN_VALUE;\n    if (!unsigned && value + 1 >= TWO_PWR_63_DBL) return Long.MAX_VALUE;\n    if (unsigned && value >= TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;\n    if (value < 0) return Long.fromNumber(-value, unsigned).negate();\n    return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  };\n  /**\r\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n   *  assumed to use 32 bits.\r\n   * @param {number} lowBits The low 32 bits\r\n   * @param {number} highBits The high 32 bits\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   * @expose\r\n   */\n\n\n  Long.fromBits = function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  };\n  /**\r\n   * Returns a Long representation of the given string, written using the specified radix.\r\n   * @param {string} str The textual representation of the Long\r\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n   * @returns {!Long} The corresponding Long value\r\n   * @expose\r\n   */\n\n\n  Long.fromString = function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('number format error: empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return Long.ZERO;\n    if (typeof unsigned === 'number') // For goog.math.long compatibility\n      radix = unsigned, unsigned = false;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw Error('radix out of range: ' + radix);\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('number format error: interior \"-\" character: ' + str);else if (p === 0) return Long.fromString(str.substring(1), unsigned, radix).negate(); // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n    var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n    var result = Long.ZERO;\n\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i);\n      var value = parseInt(str.substring(i, i + size), radix);\n\n      if (size < 8) {\n        var power = Long.fromNumber(Math.pow(radix, size));\n        result = result.multiply(power).add(Long.fromNumber(value));\n      } else {\n        result = result.multiply(radixToPower);\n        result = result.add(Long.fromNumber(value));\n      }\n    }\n\n    result.unsigned = unsigned;\n    return result;\n  };\n  /**\r\n   * Converts the specified value to a Long.\r\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n   * @returns {!Long}\r\n   * @expose\r\n   */\n\n\n  Long.fromValue = function fromValue(val) {\n    if (val\n    /* is compatible */\n    instanceof Long) return val;\n    if (typeof val === 'number') return Long.fromNumber(val);\n    if (typeof val === 'string') return Long.fromString(val); // Throws for non-objects, converts non-instanceof Long:\n\n    return new Long(val.low, val.high, val.unsigned);\n  }; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n\n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\r\n   * @type {!Long}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\n  /**\r\n   * Signed zero.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n\n  Long.ZERO = Long.fromInt(0);\n  /**\r\n   * Unsigned zero.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n\n  Long.UZERO = Long.fromInt(0, true);\n  /**\r\n   * Signed one.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n\n  Long.ONE = Long.fromInt(1);\n  /**\r\n   * Unsigned one.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n\n  Long.UONE = Long.fromInt(1, true);\n  /**\r\n   * Signed negative one.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n\n  Long.NEG_ONE = Long.fromInt(-1);\n  /**\r\n   * Maximum signed value.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n\n  Long.MAX_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\r\n   * Maximum unsigned value.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n\n  Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\r\n   * Minimum signed value.\r\n   * @type {!Long}\r\n   * @expose\r\n   */\n\n  Long.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n  /**\r\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n   * @returns {number}\r\n   * @expose\r\n   */\n\n  Long.prototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\r\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n   * @returns {number}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.toNumber = function toNumber() {\n    if (this.unsigned) {\n      return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    }\n\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\r\n   * Converts the Long to a string written in the specified radix.\r\n   * @param {number=} radix Radix (2-36), defaults to 10\r\n   * @returns {string}\r\n   * @override\r\n   * @throws {RangeError} If `radix` is out of range\r\n   * @expose\r\n   */\n\n\n  Long.prototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix out of range: ' + radix);\n    if (this.isZero()) return '0';\n    var rem;\n\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.equals(Long.MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = Long.fromNumber(radix);\n        var div = this.divide(radixLong);\n        rem = div.multiply(radixLong).subtract(this);\n        return div.toString(radix) + rem.toInt().toString(radix);\n      } else return '-' + this.negate().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n\n    var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n    rem = this;\n    var result = '';\n\n    while (true) {\n      var remDiv = rem.divide(radixToPower),\n          intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n\n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\r\n   * Gets the high 32 bits as a signed integer.\r\n   * @returns {number} Signed high bits\r\n   * @expose\r\n   */\n\n\n  Long.prototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\r\n   * Gets the high 32 bits as an unsigned integer.\r\n   * @returns {number} Unsigned high bits\r\n   * @expose\r\n   */\n\n\n  Long.prototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\r\n   * Gets the low 32 bits as a signed integer.\r\n   * @returns {number} Signed low bits\r\n   * @expose\r\n   */\n\n\n  Long.prototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\r\n   * Gets the low 32 bits as an unsigned integer.\r\n   * @returns {number} Unsigned low bits\r\n   * @expose\r\n   */\n\n\n  Long.prototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\r\n   * Gets the number of bits needed to represent the absolute value of this Long.\r\n   * @returns {number}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.equals(Long.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n\n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n\n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\r\n   * Tests if this Long's value equals zero.\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\r\n   * Tests if this Long's value is negative.\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\r\n   * Tests if this Long's value is positive.\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\r\n   * Tests if this Long's value is odd.\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\r\n   * Tests if this Long's value is even.\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\r\n   * Tests if this Long's value equals the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.equals = function equals(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\r\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.eq = Long.prototype.equals;\n  /**\r\n   * Tests if this Long's value differs from the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n  Long.prototype.notEquals = function notEquals(other) {\n    return !this.equals(\n    /* validates */\n    other);\n  };\n  /**\r\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.neq = Long.prototype.notEquals;\n  /**\r\n   * Tests if this Long's value is less than the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n  Long.prototype.lessThan = function lessThan(other) {\n    return this.compare(\n    /* validates */\n    other) < 0;\n  };\n  /**\r\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.lt = Long.prototype.lessThan;\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n  Long.prototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.compare(\n    /* validates */\n    other) <= 0;\n  };\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.lte = Long.prototype.lessThanOrEqual;\n  /**\r\n   * Tests if this Long's value is greater than the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n  Long.prototype.greaterThan = function greaterThan(other) {\n    return this.compare(\n    /* validates */\n    other) > 0;\n  };\n  /**\r\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.gt = Long.prototype.greaterThan;\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n  Long.prototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.compare(\n    /* validates */\n    other) >= 0;\n  };\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.gte = Long.prototype.greaterThanOrEqual;\n  /**\r\n   * Compares this Long's value with the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n   *  if the given one is greater\r\n   * @expose\r\n   */\n\n  Long.prototype.compare = function compare(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.equals(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n\n    if (!this.unsigned) return this.subtract(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\r\n   * Negates this Long's value.\r\n   * @returns {!Long} Negated Long\r\n   * @expose\r\n   */\n\n\n  Long.prototype.negate = function negate() {\n    if (!this.unsigned && this.equals(Long.MIN_VALUE)) return Long.MIN_VALUE;\n    return this.not().add(Long.ONE);\n  };\n  /**\r\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n   * @function\r\n   * @returns {!Long} Negated Long\r\n   * @expose\r\n   */\n\n\n  Long.prototype.neg = Long.prototype.negate;\n  /**\r\n   * Returns the sum of this and the specified Long.\r\n   * @param {!Long|number|string} addend Addend\r\n   * @returns {!Long} Sum\r\n   * @expose\r\n   */\n\n  Long.prototype.add = function add(addend) {\n    if (!Long.isLong(addend)) addend = Long.fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\r\n   * Returns the difference of this and the specified Long.\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   * @expose\r\n   */\n\n\n  Long.prototype.subtract = function subtract(subtrahend) {\n    if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);\n    return this.add(subtrahend.negate());\n  };\n  /**\r\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n   * @function\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   * @expose\r\n   */\n\n\n  Long.prototype.sub = Long.prototype.subtract;\n  /**\r\n   * Returns the product of this and the specified Long.\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   * @expose\r\n   */\n\n  Long.prototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return Long.ZERO;\n    if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);\n    if (multiplier.isZero()) return Long.ZERO;\n    if (this.equals(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    if (multiplier.equals(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.negate().multiply(multiplier.negate());else return this.negate().multiply(multiplier).negate();\n    } else if (multiplier.isNegative()) return this.multiply(multiplier.negate()).negate(); // If both longs are small, use float multiplication\n\n\n    if (this.lessThan(TWO_PWR_24) && multiplier.lessThan(TWO_PWR_24)) return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\r\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n   * @function\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   * @expose\r\n   */\n\n\n  Long.prototype.mul = Long.prototype.multiply;\n  /**\r\n   * Returns this Long divided by the specified.\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   * @expose\r\n   */\n\n  Long.prototype.divide = function divide(divisor) {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n    if (divisor.isZero()) throw new Error('division by zero');\n    if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;\n    var approx, rem, res;\n\n    if (this.equals(Long.MIN_VALUE)) {\n      if (divisor.equals(Long.ONE) || divisor.equals(Long.NEG_ONE)) return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.equals(Long.MIN_VALUE)) return Long.ONE;else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shiftRight(1);\n        approx = halfThis.divide(divisor).shiftLeft(1);\n\n        if (approx.equals(Long.ZERO)) {\n          return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n        } else {\n          rem = this.subtract(divisor.multiply(approx));\n          res = approx.add(rem.divide(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.equals(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;\n\n    if (this.isNegative()) {\n      if (divisor.isNegative()) return this.negate().divide(divisor.negate());\n      return this.negate().divide(divisor).negate();\n    } else if (divisor.isNegative()) return this.divide(divisor.negate()).negate(); // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n\n\n    res = Long.ZERO;\n    rem = this;\n\n    while (rem.greaterThanOrEqual(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = Long.fromNumber(approx),\n          approxRem = approxRes.multiply(divisor);\n\n      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n        approx -= delta;\n        approxRes = Long.fromNumber(approx, this.unsigned);\n        approxRem = approxRes.multiply(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n\n\n      if (approxRes.isZero()) approxRes = Long.ONE;\n      res = res.add(approxRes);\n      rem = rem.subtract(approxRem);\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   * @expose\r\n   */\n\n\n  Long.prototype.div = Long.prototype.divide;\n  /**\r\n   * Returns this Long modulo the specified.\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   * @expose\r\n   */\n\n  Long.prototype.modulo = function modulo(divisor) {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n    return this.subtract(this.divide(divisor).multiply(divisor));\n  };\n  /**\r\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   * @expose\r\n   */\n\n\n  Long.prototype.mod = Long.prototype.modulo;\n  /**\r\n   * Returns the bitwise NOT of this Long.\r\n   * @returns {!Long}\r\n   * @expose\r\n   */\n\n  Long.prototype.not = function not() {\n    return Long.fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\r\n   * Returns the bitwise AND of this Long and the specified.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.and = function and(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\r\n   * Returns the bitwise OR of this Long and the specified.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.or = function or(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\r\n   * Returns the bitwise XOR of this Long and the given one.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   * @expose\r\n   */\n\n\n  Long.prototype.xor = function xor(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n\n\n  Long.prototype.shiftLeft = function shiftLeft(numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return Long.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return Long.fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n\n\n  Long.prototype.shl = Long.prototype.shiftLeft;\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n\n  Long.prototype.shiftRight = function shiftRight(numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return Long.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return Long.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n\n\n  Long.prototype.shr = Long.prototype.shiftRight;\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n\n  Long.prototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    numBits &= 63;\n    if (numBits === 0) return this;else {\n      var high = this.high;\n\n      if (numBits < 32) {\n        var low = this.low;\n        return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n      } else if (numBits === 32) return Long.fromBits(high, 0, this.unsigned);else return Long.fromBits(high >>> numBits - 32, 0, this.unsigned);\n    }\n  };\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   * @expose\r\n   */\n\n\n  Long.prototype.shru = Long.prototype.shiftRightUnsigned;\n  /**\r\n   * Converts this Long to signed.\r\n   * @returns {!Long} Signed long\r\n   * @expose\r\n   */\n\n  Long.prototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return new Long(this.low, this.high, false);\n  };\n  /**\r\n   * Converts this Long to unsigned.\r\n   * @returns {!Long} Unsigned long\r\n   * @expose\r\n   */\n\n\n  Long.prototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return new Long(this.low, this.high, true);\n  };\n\n  return Long;\n});","map":{"version":3,"names":["global","factory","define","require","module","Long","low","high","unsigned","__isLong__","Object","defineProperty","prototype","value","enumerable","configurable","isLong","obj","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","isNaN","isFinite","ZERO","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","negate","TWO_PWR_32_DBL","fromBits","lowBits","highBits","fromString","str","radix","length","Error","p","indexOf","substring","radixToPower","Math","pow","result","i","size","min","parseInt","power","multiply","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","UZERO","ONE","UONE","NEG_ONE","toInt","toNumber","toString","RangeError","isZero","rem","isNegative","equals","radixLong","div","divide","subtract","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isPositive","isOdd","isEven","other","eq","notEquals","neq","lessThan","compare","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","thisNeg","otherNeg","not","neg","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtrahend","sub","multiplier","mul","divisor","approx","res","halfThis","shiftRight","shiftLeft","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","and","or","xor","numBits","shl","shr","shiftRightUnsigned","shru","toSigned","toUnsigned"],"sources":["C:/Users/acer/node_modules/js-xdr/node_modules/long/dist/Long.js"],"sourcesContent":["/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/Long.js for details\r\n */\r\n(function(global, factory) {\r\n\r\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\r\n        define([], factory);\r\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\r\n        module[\"exports\"] = factory();\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\r\n\r\n})(this, function() {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n     *  See the from* functions below for more convenient ways of constructing Longs.\r\n     * @exports Long\r\n     * @class A Long class for representing a 64 bit two's-complement integer value.\r\n     * @param {number} low The low (signed) 32 bits of the long\r\n     * @param {number} high The high (signed) 32 bits of the long\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @constructor\r\n     */\r\n    function Long(low, high, unsigned) {\r\n\r\n        /**\r\n         * The low 32 bits as a signed value.\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        this.low = low|0;\r\n\r\n        /**\r\n         * The high 32 bits as a signed value.\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        this.high = high|0;\r\n\r\n        /**\r\n         * Whether unsigned or not.\r\n         * @type {boolean}\r\n         * @expose\r\n         */\r\n        this.unsigned = !!unsigned;\r\n    }\r\n\r\n    // The internal representation of a long is the two given signed, 32-bit values.\r\n    // We use 32-bit pieces because these are the size of integers on which\r\n    // Javascript performs bit-operations.  For operations like addition and\r\n    // multiplication, we split each number into 16 bit pieces, which can easily be\r\n    // multiplied within Javascript's floating-point representation without overflow\r\n    // or change in sign.\r\n    //\r\n    // In the algorithms below, we frequently reduce the negative case to the\r\n    // positive case by negating the input(s) and then post-processing the result.\r\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n    // a positive number, it overflows back into a negative).  Not handling this\r\n    // case would often result in infinite recursion.\r\n    //\r\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n    // methods on which they depend.\r\n\r\n    /**\r\n     * An indicator used to reliably determine if an object is a Long or not.\r\n     * @type {boolean}\r\n     * @const\r\n     * @expose\r\n     * @private\r\n     */\r\n    Long.__isLong__;\r\n\r\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\r\n        value: true,\r\n        enumerable: false,\r\n        configurable: false\r\n    });\r\n\r\n    /**\r\n     * Tests if the specified object is a Long.\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.isLong = function isLong(obj) {\r\n        return (obj && obj[\"__isLong__\"]) === true;\r\n    };\r\n\r\n    /**\r\n     * A cache of the Long representations of small integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var INT_CACHE = {};\r\n\r\n    /**\r\n     * A cache of the Long representations of small unsigned integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var UINT_CACHE = {};\r\n\r\n    /**\r\n     * Returns a Long representing the given 32 bit integer value.\r\n     * @param {number} value The 32 bit integer in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromInt = function fromInt(value, unsigned) {\r\n        var obj, cachedObj;\r\n        if (!unsigned) {\r\n            value = value | 0;\r\n            if (-128 <= value && value < 128) {\r\n                cachedObj = INT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = new Long(value, value < 0 ? -1 : 0, false);\r\n            if (-128 <= value && value < 128)\r\n                INT_CACHE[value] = obj;\r\n            return obj;\r\n        } else {\r\n            value = value >>> 0;\r\n            if (0 <= value && value < 256) {\r\n                cachedObj = UINT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\r\n            if (0 <= value && value < 256)\r\n                UINT_CACHE[value] = obj;\r\n            return obj;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     * @param {number} value The number in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromNumber = function fromNumber(value, unsigned) {\r\n        unsigned = !!unsigned;\r\n        if (isNaN(value) || !isFinite(value))\r\n            return Long.ZERO;\r\n        if (!unsigned && value <= -TWO_PWR_63_DBL)\r\n            return Long.MIN_VALUE;\r\n        if (!unsigned && value + 1 >= TWO_PWR_63_DBL)\r\n            return Long.MAX_VALUE;\r\n        if (unsigned && value >= TWO_PWR_64_DBL)\r\n            return Long.MAX_UNSIGNED_VALUE;\r\n        if (value < 0)\r\n            return Long.fromNumber(-value, unsigned).negate();\r\n        return new Long((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n     *  assumed to use 32 bits.\r\n     * @param {number} lowBits The low 32 bits\r\n     * @param {number} highBits The high 32 bits\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromBits = function fromBits(lowBits, highBits, unsigned) {\r\n        return new Long(lowBits, highBits, unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns a Long representation of the given string, written using the specified radix.\r\n     * @param {string} str The textual representation of the Long\r\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromString = function fromString(str, unsigned, radix) {\r\n        if (str.length === 0)\r\n            throw Error('number format error: empty string');\r\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n            return Long.ZERO;\r\n        if (typeof unsigned === 'number') // For goog.math.long compatibility\r\n            radix = unsigned,\r\n            unsigned = false;\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw Error('radix out of range: ' + radix);\r\n\r\n        var p;\r\n        if ((p = str.indexOf('-')) > 0)\r\n            throw Error('number format error: interior \"-\" character: ' + str);\r\n        else if (p === 0)\r\n            return Long.fromString(str.substring(1), unsigned, radix).negate();\r\n\r\n        // Do several (8) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = Long.fromNumber(Math.pow(radix, 8));\r\n\r\n        var result = Long.ZERO;\r\n        for (var i = 0; i < str.length; i += 8) {\r\n            var size = Math.min(8, str.length - i);\r\n            var value = parseInt(str.substring(i, i + size), radix);\r\n            if (size < 8) {\r\n                var power = Long.fromNumber(Math.pow(radix, size));\r\n                result = result.multiply(power).add(Long.fromNumber(value));\r\n            } else {\r\n                result = result.multiply(radixToPower);\r\n                result = result.add(Long.fromNumber(value));\r\n            }\r\n        }\r\n        result.unsigned = unsigned;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts the specified value to a Long.\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.fromValue = function fromValue(val) {\r\n        if (val /* is compatible */ instanceof Long)\r\n            return val;\r\n        if (typeof val === 'number')\r\n            return Long.fromNumber(val);\r\n        if (typeof val === 'string')\r\n            return Long.fromString(val);\r\n        // Throws for non-objects, converts non-instanceof Long:\r\n        return new Long(val.low, val.high, val.unsigned);\r\n    };\r\n\r\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n    // no runtime penalty for these.\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_16_DBL = 1 << 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24_DBL = 1 << 24;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\r\n\r\n    /**\r\n     * Signed zero.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.ZERO = Long.fromInt(0);\r\n\r\n    /**\r\n     * Unsigned zero.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.UZERO = Long.fromInt(0, true);\r\n\r\n    /**\r\n     * Signed one.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.ONE = Long.fromInt(1);\r\n\r\n    /**\r\n     * Unsigned one.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.UONE = Long.fromInt(1, true);\r\n\r\n    /**\r\n     * Signed negative one.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.NEG_ONE = Long.fromInt(-1);\r\n\r\n    /**\r\n     * Maximum signed value.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.MAX_VALUE = Long.fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n    /**\r\n     * Maximum unsigned value.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n    /**\r\n     * Minimum signed value.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.MIN_VALUE = Long.fromBits(0, 0x80000000|0, false);\r\n\r\n    /**\r\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    Long.prototype.toInt = function toInt() {\r\n        return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    Long.prototype.toNumber = function toNumber() {\r\n        if (this.unsigned) {\r\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n        }\r\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a string written in the specified radix.\r\n     * @param {number=} radix Radix (2-36), defaults to 10\r\n     * @returns {string}\r\n     * @override\r\n     * @throws {RangeError} If `radix` is out of range\r\n     * @expose\r\n     */\r\n    Long.prototype.toString = function toString(radix) {\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix out of range: ' + radix);\r\n        if (this.isZero())\r\n            return '0';\r\n        var rem;\r\n        if (this.isNegative()) { // Unsigned Longs are never negative\r\n            if (this.equals(Long.MIN_VALUE)) {\r\n                // We need to change the Long value before it can be negated, so we remove\r\n                // the bottom-most digit in this base and then recurse to do the rest.\r\n                var radixLong = Long.fromNumber(radix);\r\n                var div = this.divide(radixLong);\r\n                rem = div.multiply(radixLong).subtract(this);\r\n                return div.toString(radix) + rem.toInt().toString(radix);\r\n            } else\r\n                return '-' + this.negate().toString(radix);\r\n        }\r\n\r\n        // Do several (6) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\r\n        rem = this;\r\n        var result = '';\r\n        while (true) {\r\n            var remDiv = rem.divide(radixToPower),\r\n                intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0,\r\n                digits = intval.toString(radix);\r\n            rem = remDiv;\r\n            if (rem.isZero())\r\n                return digits + result;\r\n            else {\r\n                while (digits.length < 6)\r\n                    digits = '0' + digits;\r\n                result = '' + digits + result;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as a signed integer.\r\n     * @returns {number} Signed high bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getHighBits = function getHighBits() {\r\n        return this.high;\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned high bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n        return this.high >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as a signed integer.\r\n     * @returns {number} Signed low bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getLowBits = function getLowBits() {\r\n        return this.low;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned low bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n        return this.low >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the number of bits needed to represent the absolute value of this Long.\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    Long.prototype.getNumBitsAbs = function getNumBitsAbs() {\r\n        if (this.isNegative()) // Unsigned Longs are never negative\r\n            return this.equals(Long.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\r\n        var val = this.high != 0 ? this.high : this.low;\r\n        for (var bit = 31; bit > 0; bit--)\r\n            if ((val & (1 << bit)) != 0)\r\n                break;\r\n        return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals zero.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isZero = function isZero() {\r\n        return this.high === 0 && this.low === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is negative.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isNegative = function isNegative() {\r\n        return !this.unsigned && this.high < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is positive.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isPositive = function isPositive() {\r\n        return this.unsigned || this.high >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is odd.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isOdd = function isOdd() {\r\n        return (this.low & 1) === 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is even.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isEven = function isEven() {\r\n        return (this.low & 1) === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.equals = function equals(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n            return false;\r\n        return this.high === other.high && this.low === other.low;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.eq = Long.prototype.equals;\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.notEquals = function notEquals(other) {\r\n        return !this.equals(/* validates */ other);\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.neq = Long.prototype.notEquals;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.lessThan = function lessThan(other) {\r\n        return this.compare(/* validates */ other) < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.lt = Long.prototype.lessThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n        return this.compare(/* validates */ other) <= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.lte = Long.prototype.lessThanOrEqual;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.greaterThan = function greaterThan(other) {\r\n        return this.compare(/* validates */ other) > 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.gt = Long.prototype.greaterThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n        return this.compare(/* validates */ other) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.gte = Long.prototype.greaterThanOrEqual;\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     * @expose\r\n     */\r\n    Long.prototype.compare = function compare(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        if (this.equals(other))\r\n            return 0;\r\n        var thisNeg = this.isNegative(),\r\n            otherNeg = other.isNegative();\r\n        if (thisNeg && !otherNeg)\r\n            return -1;\r\n        if (!thisNeg && otherNeg)\r\n            return 1;\r\n        // At this point the sign bits are the same\r\n        if (!this.unsigned)\r\n            return this.subtract(other).isNegative() ? -1 : 1;\r\n        // Both are positive if at least one is unsigned\r\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value.\r\n     * @returns {!Long} Negated Long\r\n     * @expose\r\n     */\r\n    Long.prototype.negate = function negate() {\r\n        if (!this.unsigned && this.equals(Long.MIN_VALUE))\r\n            return Long.MIN_VALUE;\r\n        return this.not().add(Long.ONE);\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n     * @function\r\n     * @returns {!Long} Negated Long\r\n     * @expose\r\n     */\r\n    Long.prototype.neg = Long.prototype.negate;\r\n\r\n    /**\r\n     * Returns the sum of this and the specified Long.\r\n     * @param {!Long|number|string} addend Addend\r\n     * @returns {!Long} Sum\r\n     * @expose\r\n     */\r\n    Long.prototype.add = function add(addend) {\r\n        if (!Long.isLong(addend))\r\n            addend = Long.fromValue(addend);\r\n\r\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = addend.high >>> 16;\r\n        var b32 = addend.high & 0xFFFF;\r\n        var b16 = addend.low >>> 16;\r\n        var b00 = addend.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 + b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 + b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 + b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 + b48;\r\n        c48 &= 0xFFFF;\r\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long.\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     * @expose\r\n     */\r\n    Long.prototype.subtract = function subtract(subtrahend) {\r\n        if (!Long.isLong(subtrahend))\r\n            subtrahend = Long.fromValue(subtrahend);\r\n        return this.add(subtrahend.negate());\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n     * @function\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     * @expose\r\n     */\r\n    Long.prototype.sub = Long.prototype.subtract;\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long.\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     * @expose\r\n     */\r\n    Long.prototype.multiply = function multiply(multiplier) {\r\n        if (this.isZero())\r\n            return Long.ZERO;\r\n        if (!Long.isLong(multiplier))\r\n            multiplier = Long.fromValue(multiplier);\r\n        if (multiplier.isZero())\r\n            return Long.ZERO;\r\n        if (this.equals(Long.MIN_VALUE))\r\n            return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\r\n        if (multiplier.equals(Long.MIN_VALUE))\r\n            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\r\n\r\n        if (this.isNegative()) {\r\n            if (multiplier.isNegative())\r\n                return this.negate().multiply(multiplier.negate());\r\n            else\r\n                return this.negate().multiply(multiplier).negate();\r\n        } else if (multiplier.isNegative())\r\n            return this.multiply(multiplier.negate()).negate();\r\n\r\n        // If both longs are small, use float multiplication\r\n        if (this.lessThan(TWO_PWR_24) && multiplier.lessThan(TWO_PWR_24))\r\n            return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n        // We can skip products that would overflow.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = multiplier.high >>> 16;\r\n        var b32 = multiplier.high & 0xFFFF;\r\n        var b16 = multiplier.low >>> 16;\r\n        var b00 = multiplier.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 * b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 * b00;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c16 += a00 * b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 * b00;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a16 * b16;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a00 * b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n        c48 &= 0xFFFF;\r\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n     * @function\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     * @expose\r\n     */\r\n    Long.prototype.mul = Long.prototype.multiply;\r\n\r\n    /**\r\n     * Returns this Long divided by the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     * @expose\r\n     */\r\n    Long.prototype.divide = function divide(divisor) {\r\n        if (!Long.isLong(divisor))\r\n            divisor = Long.fromValue(divisor);\r\n        if (divisor.isZero())\r\n            throw(new Error('division by zero'));\r\n        if (this.isZero())\r\n            return this.unsigned ? Long.UZERO : Long.ZERO;\r\n        var approx, rem, res;\r\n        if (this.equals(Long.MIN_VALUE)) {\r\n            if (divisor.equals(Long.ONE) || divisor.equals(Long.NEG_ONE))\r\n                return Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.equals(Long.MIN_VALUE))\r\n                return Long.ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shiftRight(1);\r\n                approx = halfThis.divide(divisor).shiftLeft(1);\r\n                if (approx.equals(Long.ZERO)) {\r\n                    return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\r\n                } else {\r\n                    rem = this.subtract(divisor.multiply(approx));\r\n                    res = approx.add(rem.divide(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.equals(Long.MIN_VALUE))\r\n            return this.unsigned ? Long.UZERO : Long.ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.negate().divide(divisor.negate());\r\n            return this.negate().divide(divisor).negate();\r\n        } else if (divisor.isNegative())\r\n            return this.divide(divisor.negate()).negate();\r\n\r\n        // Repeat the following until the remainder is less than other:  find a\r\n        // floating-point that approximates remainder / other *from below*, add this\r\n        // into the result, and subtract it from the remainder.  It is critical that\r\n        // the approximate value is less than or equal to the real value so that the\r\n        // remainder never becomes negative.\r\n        res = Long.ZERO;\r\n        rem = this;\r\n        while (rem.greaterThanOrEqual(divisor)) {\r\n            // Approximate the result of division. This may be a little greater or\r\n            // smaller than the actual value.\r\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n            // We will tweak the approximate result by changing it in the 48-th digit or\r\n            // the smallest non-fractional digit, whichever is larger.\r\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n                delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48),\r\n\r\n            // Decrease the approximation until it is smaller than the remainder.  Note\r\n            // that if it is too large, the product overflows and is negative.\r\n                approxRes = Long.fromNumber(approx),\r\n                approxRem = approxRes.multiply(divisor);\r\n            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\r\n                approx -= delta;\r\n                approxRes = Long.fromNumber(approx, this.unsigned);\r\n                approxRem = approxRes.multiply(divisor);\r\n            }\r\n\r\n            // We know the answer can't be zero... and actually, zero would cause\r\n            // infinite recursion since we would make no progress.\r\n            if (approxRes.isZero())\r\n                approxRes = Long.ONE;\r\n\r\n            res = res.add(approxRes);\r\n            rem = rem.subtract(approxRem);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     * @expose\r\n     */\r\n    Long.prototype.div = Long.prototype.divide;\r\n\r\n    /**\r\n     * Returns this Long modulo the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     * @expose\r\n     */\r\n    Long.prototype.modulo = function modulo(divisor) {\r\n        if (!Long.isLong(divisor))\r\n            divisor = Long.fromValue(divisor);\r\n        return this.subtract(this.divide(divisor).multiply(divisor));\r\n    };\r\n\r\n    /**\r\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     * @expose\r\n     */\r\n    Long.prototype.mod = Long.prototype.modulo;\r\n\r\n    /**\r\n     * Returns the bitwise NOT of this Long.\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.not = function not() {\r\n        return Long.fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise AND of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.and = function and(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise OR of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.or = function or(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise XOR of this Long and the given one.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.xor = function xor(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shiftLeft = function shiftLeft(numBits) {\r\n        if (Long.isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return Long.fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n        else\r\n            return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shl = Long.prototype.shiftLeft;\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shiftRight = function shiftRight(numBits) {\r\n        if (Long.isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return Long.fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n        else\r\n            return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shr = Long.prototype.shiftRight;\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n        if (Long.isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits &= 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else {\r\n            var high = this.high;\r\n            if (numBits < 32) {\r\n                var low = this.low;\r\n                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n            } else if (numBits === 32)\r\n                return Long.fromBits(high, 0, this.unsigned);\r\n            else\r\n                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shru = Long.prototype.shiftRightUnsigned;\r\n\r\n    /**\r\n     * Converts this Long to signed.\r\n     * @returns {!Long} Signed long\r\n     * @expose\r\n     */\r\n    Long.prototype.toSigned = function toSigned() {\r\n        if (!this.unsigned)\r\n            return this;\r\n        return new Long(this.low, this.high, false);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to unsigned.\r\n     * @returns {!Long} Unsigned long\r\n     * @expose\r\n     */\r\n    Long.prototype.toUnsigned = function toUnsigned() {\r\n        if (this.unsigned)\r\n            return this;\r\n        return new Long(this.low, this.high, true);\r\n    };\r\n\r\n    return Long;\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}