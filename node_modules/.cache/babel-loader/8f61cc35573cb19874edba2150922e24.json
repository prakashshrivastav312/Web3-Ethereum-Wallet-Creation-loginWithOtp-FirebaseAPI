{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionBase = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nvar _keypair = require('./keypair');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * @ignore\n */\n\n\nvar TransactionBase = exports.TransactionBase = function () {\n  function TransactionBase(tx, signatures, fee, networkPassphrase) {\n    _classCallCheck(this, TransactionBase);\n\n    if (typeof networkPassphrase !== 'string') {\n      throw new Error('Invalid passphrase provided to Transaction: expected a string but got a ' + (typeof networkPassphrase === 'undefined' ? 'undefined' : _typeof(networkPassphrase)));\n    }\n\n    this._networkPassphrase = networkPassphrase;\n    this._tx = tx;\n    this._signatures = signatures;\n    this._fee = fee;\n  }\n  /**\n   * @type {Array.<xdr.DecoratedSignature>}\n   * @readonly\n   */\n\n\n  _createClass(TransactionBase, [{\n    key: 'sign',\n\n    /**\n     * Signs the transaction with the given {@link Keypair}.\n     * @param {...Keypair} keypairs Keypairs of signers\n     * @returns {void}\n     */\n    value: function sign() {\n      var _this = this;\n\n      var txHash = this.hash();\n\n      for (var _len = arguments.length, keypairs = Array(_len), _key = 0; _key < _len; _key++) {\n        keypairs[_key] = arguments[_key];\n      }\n\n      keypairs.forEach(function (kp) {\n        var sig = kp.signDecorated(txHash);\n\n        _this.signatures.push(sig);\n      });\n    }\n    /**\n     * Signs a transaction with the given {@link Keypair}. Useful if someone sends\n     * you a transaction XDR for you to sign and return (see\n     * [addSignature](#addSignature) for more information).\n     *\n     * When you get a transaction XDR to sign....\n     * - Instantiate a `Transaction` object with the XDR\n     * - Use {@link Keypair} to generate a keypair object for your Stellar seed.\n     * - Run `getKeypairSignature` with that keypair\n     * - Send back the signature along with your publicKey (not your secret seed!)\n     *\n     * Example:\n     * ```javascript\n     * // `transactionXDR` is a string from the person generating the transaction\n     * const transaction = new Transaction(transactionXDR, networkPassphrase);\n     * const keypair = Keypair.fromSecret(myStellarSeed);\n     * return transaction.getKeypairSignature(keypair);\n     * ```\n     *\n     * @param {Keypair} keypair Keypair of signer\n     * @returns {string} Signature string\n     */\n\n  }, {\n    key: 'getKeypairSignature',\n    value: function getKeypairSignature(keypair) {\n      return keypair.sign(this.hash()).toString('base64');\n    }\n    /**\n     * Add a signature to the transaction. Useful when a party wants to pre-sign\n     * a transaction but doesn't want to give access to their secret keys.\n     * This will also verify whether the signature is valid.\n     *\n     * Here's how you would use this feature to solicit multiple signatures.\n     * - Use `TransactionBuilder` to build a new transaction.\n     * - Make sure to set a long enough timeout on that transaction to give your\n     * signers enough time to sign!\n     * - Once you build the transaction, use `transaction.toXDR()` to get the\n     * base64-encoded XDR string.\n     * - _Warning!_ Once you've built this transaction, don't submit any other\n     * transactions onto your account! Doing so will invalidate this pre-compiled\n     * transaction!\n     * - Send this XDR string to your other parties. They can use the instructions\n     * for [getKeypairSignature](#getKeypairSignature) to sign the transaction.\n     * - They should send you back their `publicKey` and the `signature` string\n     * from [getKeypairSignature](#getKeypairSignature), both of which you pass to\n     * this function.\n     *\n     * @param {string} publicKey The public key of the signer\n     * @param {string} signature The base64 value of the signature XDR\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addSignature',\n    value: function addSignature() {\n      var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (!signature || typeof signature !== 'string') {\n        throw new Error('Invalid signature');\n      }\n\n      if (!publicKey || typeof publicKey !== 'string') {\n        throw new Error('Invalid publicKey');\n      }\n\n      var keypair = void 0;\n      var hint = void 0;\n      var signatureBuffer = Buffer.from(signature, 'base64');\n\n      try {\n        keypair = _keypair.Keypair.fromPublicKey(publicKey);\n        hint = keypair.signatureHint();\n      } catch (e) {\n        throw new Error('Invalid publicKey');\n      }\n\n      if (!keypair.verify(this.hash(), signatureBuffer)) {\n        throw new Error('Invalid signature');\n      }\n\n      this.signatures.push(new _stellarXdr_generated2.default.DecoratedSignature({\n        hint: hint,\n        signature: signatureBuffer\n      }));\n    }\n    /**\n     * Add `hashX` signer preimage as signature.\n     * @param {Buffer|String} preimage Preimage of hash used as signer\n     * @returns {void}\n     */\n\n  }, {\n    key: 'signHashX',\n    value: function signHashX(preimage) {\n      if (typeof preimage === 'string') {\n        preimage = Buffer.from(preimage, 'hex');\n      }\n\n      if (preimage.length > 64) {\n        throw new Error('preimage cannnot be longer than 64 bytes');\n      }\n\n      var signature = preimage;\n      var hashX = (0, _hashing.hash)(preimage);\n      var hint = hashX.slice(hashX.length - 4);\n      this.signatures.push(new _stellarXdr_generated2.default.DecoratedSignature({\n        hint: hint,\n        signature: signature\n      }));\n    }\n    /**\n     * Returns a hash for this transaction, suitable for signing.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'hash',\n    value: function hash() {\n      return (0, _hashing.hash)(this.signatureBase());\n    }\n  }, {\n    key: 'signatureBase',\n    value: function signatureBase() {\n      throw new Error('Implement in subclass');\n    }\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      throw new Error('Implement in subclass');\n    }\n    /**\n     * Get the transaction envelope as a base64-encoded string\n     * @returns {string} XDR string\n     */\n\n  }, {\n    key: 'toXDR',\n    value: function toXDR() {\n      return this.toEnvelope().toXDR().toString('base64');\n    }\n  }, {\n    key: 'signatures',\n    get: function get() {\n      return this._signatures;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }, {\n    key: 'tx',\n    get: function get() {\n      return this._tx;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'fee',\n    get: function get() {\n      return this._fee;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'networkPassphrase',\n    get: function get() {\n      return this._networkPassphrase;\n    },\n    set: function set(networkPassphrase) {\n      this._networkPassphrase = networkPassphrase;\n    }\n  }]);\n\n  return TransactionBase;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","TransactionBase","undefined","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_hashing","_keypair","__esModule","default","_classCallCheck","instance","TypeError","tx","signatures","fee","networkPassphrase","Error","_networkPassphrase","_tx","_signatures","_fee","sign","_this","txHash","hash","_len","arguments","keypairs","Array","_key","forEach","kp","sig","signDecorated","push","getKeypairSignature","keypair","toString","addSignature","publicKey","signature","hint","signatureBuffer","Buffer","from","Keypair","fromPublicKey","signatureHint","e","verify","DecoratedSignature","signHashX","preimage","hashX","slice","signatureBase","toEnvelope","toXDR","get","set"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/transaction_base.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionBase = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nvar _keypair = require('./keypair');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @ignore\n */\nvar TransactionBase = exports.TransactionBase = function () {\n  function TransactionBase(tx, signatures, fee, networkPassphrase) {\n    _classCallCheck(this, TransactionBase);\n\n    if (typeof networkPassphrase !== 'string') {\n      throw new Error('Invalid passphrase provided to Transaction: expected a string but got a ' + (typeof networkPassphrase === 'undefined' ? 'undefined' : _typeof(networkPassphrase)));\n    }\n\n    this._networkPassphrase = networkPassphrase;\n    this._tx = tx;\n    this._signatures = signatures;\n    this._fee = fee;\n  }\n\n  /**\n   * @type {Array.<xdr.DecoratedSignature>}\n   * @readonly\n   */\n\n\n  _createClass(TransactionBase, [{\n    key: 'sign',\n\n\n    /**\n     * Signs the transaction with the given {@link Keypair}.\n     * @param {...Keypair} keypairs Keypairs of signers\n     * @returns {void}\n     */\n    value: function sign() {\n      var _this = this;\n\n      var txHash = this.hash();\n\n      for (var _len = arguments.length, keypairs = Array(_len), _key = 0; _key < _len; _key++) {\n        keypairs[_key] = arguments[_key];\n      }\n\n      keypairs.forEach(function (kp) {\n        var sig = kp.signDecorated(txHash);\n        _this.signatures.push(sig);\n      });\n    }\n\n    /**\n     * Signs a transaction with the given {@link Keypair}. Useful if someone sends\n     * you a transaction XDR for you to sign and return (see\n     * [addSignature](#addSignature) for more information).\n     *\n     * When you get a transaction XDR to sign....\n     * - Instantiate a `Transaction` object with the XDR\n     * - Use {@link Keypair} to generate a keypair object for your Stellar seed.\n     * - Run `getKeypairSignature` with that keypair\n     * - Send back the signature along with your publicKey (not your secret seed!)\n     *\n     * Example:\n     * ```javascript\n     * // `transactionXDR` is a string from the person generating the transaction\n     * const transaction = new Transaction(transactionXDR, networkPassphrase);\n     * const keypair = Keypair.fromSecret(myStellarSeed);\n     * return transaction.getKeypairSignature(keypair);\n     * ```\n     *\n     * @param {Keypair} keypair Keypair of signer\n     * @returns {string} Signature string\n     */\n\n  }, {\n    key: 'getKeypairSignature',\n    value: function getKeypairSignature(keypair) {\n      return keypair.sign(this.hash()).toString('base64');\n    }\n\n    /**\n     * Add a signature to the transaction. Useful when a party wants to pre-sign\n     * a transaction but doesn't want to give access to their secret keys.\n     * This will also verify whether the signature is valid.\n     *\n     * Here's how you would use this feature to solicit multiple signatures.\n     * - Use `TransactionBuilder` to build a new transaction.\n     * - Make sure to set a long enough timeout on that transaction to give your\n     * signers enough time to sign!\n     * - Once you build the transaction, use `transaction.toXDR()` to get the\n     * base64-encoded XDR string.\n     * - _Warning!_ Once you've built this transaction, don't submit any other\n     * transactions onto your account! Doing so will invalidate this pre-compiled\n     * transaction!\n     * - Send this XDR string to your other parties. They can use the instructions\n     * for [getKeypairSignature](#getKeypairSignature) to sign the transaction.\n     * - They should send you back their `publicKey` and the `signature` string\n     * from [getKeypairSignature](#getKeypairSignature), both of which you pass to\n     * this function.\n     *\n     * @param {string} publicKey The public key of the signer\n     * @param {string} signature The base64 value of the signature XDR\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addSignature',\n    value: function addSignature() {\n      var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (!signature || typeof signature !== 'string') {\n        throw new Error('Invalid signature');\n      }\n\n      if (!publicKey || typeof publicKey !== 'string') {\n        throw new Error('Invalid publicKey');\n      }\n\n      var keypair = void 0;\n      var hint = void 0;\n      var signatureBuffer = Buffer.from(signature, 'base64');\n\n      try {\n        keypair = _keypair.Keypair.fromPublicKey(publicKey);\n        hint = keypair.signatureHint();\n      } catch (e) {\n        throw new Error('Invalid publicKey');\n      }\n\n      if (!keypair.verify(this.hash(), signatureBuffer)) {\n        throw new Error('Invalid signature');\n      }\n\n      this.signatures.push(new _stellarXdr_generated2.default.DecoratedSignature({\n        hint: hint,\n        signature: signatureBuffer\n      }));\n    }\n\n    /**\n     * Add `hashX` signer preimage as signature.\n     * @param {Buffer|String} preimage Preimage of hash used as signer\n     * @returns {void}\n     */\n\n  }, {\n    key: 'signHashX',\n    value: function signHashX(preimage) {\n      if (typeof preimage === 'string') {\n        preimage = Buffer.from(preimage, 'hex');\n      }\n\n      if (preimage.length > 64) {\n        throw new Error('preimage cannnot be longer than 64 bytes');\n      }\n\n      var signature = preimage;\n      var hashX = (0, _hashing.hash)(preimage);\n      var hint = hashX.slice(hashX.length - 4);\n      this.signatures.push(new _stellarXdr_generated2.default.DecoratedSignature({ hint: hint, signature: signature }));\n    }\n\n    /**\n     * Returns a hash for this transaction, suitable for signing.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'hash',\n    value: function hash() {\n      return (0, _hashing.hash)(this.signatureBase());\n    }\n  }, {\n    key: 'signatureBase',\n    value: function signatureBase() {\n      throw new Error('Implement in subclass');\n    }\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      throw new Error('Implement in subclass');\n    }\n\n    /**\n     * Get the transaction envelope as a base64-encoded string\n     * @returns {string} XDR string\n     */\n\n  }, {\n    key: 'toXDR',\n    value: function toXDR() {\n      return this.toEnvelope().toXDR().toString('base64');\n    }\n  }, {\n    key: 'signatures',\n    get: function get() {\n      return this._signatures;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }, {\n    key: 'tx',\n    get: function get() {\n      return this._tx;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'fee',\n    get: function get() {\n      return this._fee;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'networkPassphrase',\n    get: function get() {\n      return this._networkPassphrase;\n    },\n    set: function set(networkPassphrase) {\n      this._networkPassphrase = networkPassphrase;\n    }\n  }]);\n\n  return TransactionBase;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script"}