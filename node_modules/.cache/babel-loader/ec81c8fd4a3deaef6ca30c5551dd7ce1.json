{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Operation = exports.AuthClawbackEnabledFlag = exports.AuthImmutableFlag = exports.AuthRevocableFlag = exports.AuthRequiredFlag = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n/* eslint-disable no-bitwise */\n\n\nvar _jsXdr = require('js-xdr');\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _trimEnd = require('lodash/trimEnd');\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _isNumber = require('lodash/isNumber');\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _isFinite = require('lodash/isFinite');\n\nvar _isFinite2 = _interopRequireDefault(_isFinite);\n\nvar _continued_fraction = require('./util/continued_fraction');\n\nvar _asset = require('./asset');\n\nvar _liquidity_pool_asset = require('./liquidity_pool_asset');\n\nvar _claimant = require('./claimant');\n\nvar _strkey = require('./strkey');\n\nvar _liquidity_pool_id = require('./liquidity_pool_id');\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _index = require('./operations/index');\n\nvar ops = _interopRequireWildcard(_index);\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ONE = 10000000;\nvar MAX_INT64 = '9223372036854775807';\n/**\n * When set using `{@link Operation.setOptions}` option, requires the issuing\n * account to give other accounts permission before they can hold the issuing\n * accountâ€™s credit.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\n\nvar AuthRequiredFlag = exports.AuthRequiredFlag = 1 << 0;\n/**\n * When set using `{@link Operation.setOptions}` option, allows the issuing\n * account to revoke its credit held by other accounts.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\n\nvar AuthRevocableFlag = exports.AuthRevocableFlag = 1 << 1;\n/**\n * When set using `{@link Operation.setOptions}` option, then none of the\n * authorization flags can be set and the account can never be deleted.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\n\nvar AuthImmutableFlag = exports.AuthImmutableFlag = 1 << 2;\n/**\n * When set using `{@link Operation.setOptions}` option, then any trustlines\n * created by this account can have a ClawbackOp operation submitted for the\n * corresponding asset.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\n\nvar AuthClawbackEnabledFlag = exports.AuthClawbackEnabledFlag = 1 << 3;\n/**\n * `Operation` class represents [operations](https://developers.stellar.org/docs/glossary/operations/) in Stellar network.\n * Use one of static methods to create operations:\n * * `{@link Operation.createAccount}`\n * * `{@link Operation.payment}`\n * * `{@link Operation.pathPaymentStrictReceive}`\n * * `{@link Operation.pathPaymentStrictSend}`\n * * `{@link Operation.manageSellOffer}`\n * * `{@link Operation.manageBuyOffer}`\n * * `{@link Operation.createPassiveSellOffer}`\n * * `{@link Operation.setOptions}`\n * * `{@link Operation.changeTrust}`\n * * `{@link Operation.allowTrust}`\n * * `{@link Operation.accountMerge}`\n * * `{@link Operation.inflation}`\n * * `{@link Operation.manageData}`\n * * `{@link Operation.bumpSequence}`\n * * `{@link Operation.createClaimableBalance}`\n * * `{@link Operation.claimClaimableBalance}`\n * * `{@link Operation.beginSponsoringFutureReserves}`\n * * `{@link Operation.endSponsoringFutureReserves}`\n * * `{@link Operation.revokeAccountSponsorship}`\n * * `{@link Operation.revokeTrustlineSponsorship}`\n * * `{@link Operation.revokeOfferSponsorship}`\n * * `{@link Operation.revokeDataSponsorship}`\n * * `{@link Operation.revokeClaimableBalanceSponsorship}`\n * * `{@link Operation.revokeLiquidityPoolSponsorship}`\n * * `{@link Operation.revokeSignerSponsorship}`\n * * `{@link Operation.clawback}`\n * * `{@link Operation.clawbackClaimableBalance}`\n * * `{@link Operation.setTrustLineFlags}`\n * * `{@link Operation.liquidityPoolDeposit}`\n * * `{@link Operation.liquidityPoolWithdraw}`\n *\n * @class Operation\n */\n\nvar Operation = exports.Operation = function () {\n  function Operation() {\n    _classCallCheck(this, Operation);\n  }\n\n  _createClass(Operation, null, [{\n    key: 'setSourceAccount',\n    value: function setSourceAccount(opAttributes, opts) {\n      if (opts.source) {\n        try {\n          opAttributes.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.source, opts.withMuxing);\n        } catch (e) {\n          throw new Error('Source address is invalid');\n        }\n      }\n    }\n    /**\n     * Deconstructs the raw XDR operation object into the structured object that\n     * was used to create the operation (i.e. the `opts` parameter to most ops).\n     *\n     * @param {xdr.Operation}   operation - An XDR Operation.\n     * @param {boolean}         [withMuxing] - Indicates that if the operation\n     *     contains M... addresses, they should be interpreted fully as muxed\n     *     accounts. By default, this option is disabled until muxed accounts are\n     *     mature.\n     *\n     * @return {Operation}\n     */\n\n  }, {\n    key: 'fromXDRObject',\n    value: function fromXDRObject(operation, withMuxing) {\n      var result = {};\n\n      if (operation.sourceAccount()) {\n        result.source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(operation.sourceAccount(), withMuxing);\n      }\n\n      var attrs = operation.body().value();\n      var operationName = operation.body().switch().name;\n\n      switch (operationName) {\n        case 'createAccount':\n          {\n            result.type = 'createAccount';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.startingBalance = this._fromXDRAmount(attrs.startingBalance());\n            break;\n          }\n\n        case 'payment':\n          {\n            result.type = 'payment';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination(), withMuxing);\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            break;\n          }\n\n        case 'pathPaymentStrictReceive':\n          {\n            result.type = 'pathPaymentStrictReceive';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendMax = this._fromXDRAmount(attrs.sendMax());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination(), withMuxing);\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destAmount = this._fromXDRAmount(attrs.destAmount());\n            result.path = [];\n            var path = attrs.path(); // note that Object.values isn't supported by node 6!\n\n            Object.keys(path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(path[pathKey]));\n            });\n            break;\n          }\n\n        case 'pathPaymentStrictSend':\n          {\n            result.type = 'pathPaymentStrictSend';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendAmount = this._fromXDRAmount(attrs.sendAmount());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination(), withMuxing);\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destMin = this._fromXDRAmount(attrs.destMin());\n            result.path = [];\n\n            var _path = attrs.path(); // note that Object.values isn't supported by node 6!\n\n\n            Object.keys(_path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(_path[pathKey]));\n            });\n            break;\n          }\n\n        case 'changeTrust':\n          {\n            result.type = 'changeTrust';\n\n            switch (attrs.line().switch()) {\n              case _stellarXdr_generated2.default.AssetType.assetTypePoolShare():\n                result.line = _liquidity_pool_asset.LiquidityPoolAsset.fromOperation(attrs.line());\n                break;\n\n              default:\n                result.line = _asset.Asset.fromOperation(attrs.line());\n                break;\n            }\n\n            result.limit = this._fromXDRAmount(attrs.limit());\n            break;\n          }\n\n        case 'allowTrust':\n          {\n            result.type = 'allowTrust';\n            result.trustor = accountIdtoAddress(attrs.trustor());\n            result.assetCode = attrs.asset().value().toString();\n            result.assetCode = (0, _trimEnd2.default)(result.assetCode, '\\0');\n            result.authorize = attrs.authorize();\n            break;\n          }\n\n        case 'setOptions':\n          {\n            result.type = 'setOptions';\n\n            if (attrs.inflationDest()) {\n              result.inflationDest = accountIdtoAddress(attrs.inflationDest());\n            }\n\n            result.clearFlags = attrs.clearFlags();\n            result.setFlags = attrs.setFlags();\n            result.masterWeight = attrs.masterWeight();\n            result.lowThreshold = attrs.lowThreshold();\n            result.medThreshold = attrs.medThreshold();\n            result.highThreshold = attrs.highThreshold(); // home_domain is checked by iscntrl in stellar-core\n\n            result.homeDomain = attrs.homeDomain() !== undefined ? attrs.homeDomain().toString('ascii') : undefined;\n\n            if (attrs.signer()) {\n              var signer = {};\n              var arm = attrs.signer().key().arm();\n\n              if (arm === 'ed25519') {\n                signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());\n              } else if (arm === 'preAuthTx') {\n                signer.preAuthTx = attrs.signer().key().preAuthTx();\n              } else if (arm === 'hashX') {\n                signer.sha256Hash = attrs.signer().key().hashX();\n              }\n\n              signer.weight = attrs.signer().weight();\n              result.signer = signer;\n            }\n\n            break;\n          }\n        // the next case intentionally falls through!\n\n        case 'manageOffer':\n        case 'manageSellOffer':\n          {\n            result.type = 'manageSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n\n        case 'manageBuyOffer':\n          {\n            result.type = 'manageBuyOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.buyAmount = this._fromXDRAmount(attrs.buyAmount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        // the next case intentionally falls through!\n\n        case 'createPassiveOffer':\n        case 'createPassiveSellOffer':\n          {\n            result.type = 'createPassiveSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            break;\n          }\n\n        case 'accountMerge':\n          {\n            result.type = 'accountMerge';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs, withMuxing);\n            break;\n          }\n\n        case 'manageData':\n          {\n            result.type = 'manageData'; // manage_data.name is checked by iscntrl in stellar-core\n\n            result.name = attrs.dataName().toString('ascii');\n            result.value = attrs.dataValue();\n            break;\n          }\n\n        case 'inflation':\n          {\n            result.type = 'inflation';\n            break;\n          }\n\n        case 'bumpSequence':\n          {\n            result.type = 'bumpSequence';\n            result.bumpTo = attrs.bumpTo().toString();\n            break;\n          }\n\n        case 'createClaimableBalance':\n          {\n            result.type = 'createClaimableBalance';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.claimants = [];\n            attrs.claimants().forEach(function (claimant) {\n              result.claimants.push(_claimant.Claimant.fromXDR(claimant));\n            });\n            break;\n          }\n\n        case 'claimClaimableBalance':\n          {\n            result.type = 'claimClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n\n        case 'beginSponsoringFutureReserves':\n          {\n            result.type = 'beginSponsoringFutureReserves';\n            result.sponsoredId = accountIdtoAddress(attrs.sponsoredId());\n            break;\n          }\n\n        case 'endSponsoringFutureReserves':\n          {\n            result.type = 'endSponsoringFutureReserves';\n            break;\n          }\n\n        case 'revokeSponsorship':\n          {\n            extractRevokeSponshipDetails(attrs, result);\n            break;\n          }\n\n        case 'clawback':\n          {\n            result.type = 'clawback';\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.from = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.from());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            break;\n          }\n\n        case 'clawbackClaimableBalance':\n          {\n            result.type = 'clawbackClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n\n        case 'setTrustLineFlags':\n          {\n            result.type = 'setTrustLineFlags';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.trustor = accountIdtoAddress(attrs.trustor()); // Convert from the integer-bitwised flag into a sensible object that\n            // indicates true/false for each flag that's on/off.\n\n            var clears = attrs.clearFlags();\n            var sets = attrs.setFlags();\n            var mapping = {\n              authorized: _stellarXdr_generated2.default.TrustLineFlags.authorizedFlag(),\n              authorizedToMaintainLiabilities: _stellarXdr_generated2.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n              clawbackEnabled: _stellarXdr_generated2.default.TrustLineFlags.trustlineClawbackEnabledFlag()\n            };\n\n            var getFlagValue = function getFlagValue(key) {\n              var bit = mapping[key].value;\n\n              if (sets & bit) {\n                return true;\n              }\n\n              if (clears & bit) {\n                return false;\n              }\n\n              return undefined;\n            };\n\n            result.flags = {};\n            Object.keys(mapping).forEach(function (flagName) {\n              result.flags[flagName] = getFlagValue(flagName);\n            });\n            break;\n          }\n\n        case 'liquidityPoolDeposit':\n          {\n            result.type = 'liquidityPoolDeposit';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.maxAmountA = this._fromXDRAmount(attrs.maxAmountA());\n            result.maxAmountB = this._fromXDRAmount(attrs.maxAmountB());\n            result.minPrice = this._fromXDRPrice(attrs.minPrice());\n            result.maxPrice = this._fromXDRPrice(attrs.maxPrice());\n            break;\n          }\n\n        case 'liquidityPoolWithdraw':\n          {\n            result.type = 'liquidityPoolWithdraw';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.minAmountA = this._fromXDRAmount(attrs.minAmountA());\n            result.minAmountB = this._fromXDRAmount(attrs.minAmountB());\n            break;\n          }\n\n        default:\n          {\n            throw new Error('Unknown operation: ' + operationName);\n          }\n      }\n\n      return result;\n    }\n  }, {\n    key: 'isValidAmount',\n    value: function isValidAmount(value) {\n      var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!(0, _isString2.default)(value)) {\n        return false;\n      }\n\n      var amount = void 0;\n\n      try {\n        amount = new _bignumber2.default(value);\n      } catch (e) {\n        return false;\n      }\n\n      if ( // == 0\n      !allowZero && amount.isZero() || // < 0\n      amount.isNegative() || // > Max value\n      amount.times(ONE).greaterThan(new _bignumber2.default(MAX_INT64).toString()) || // Decimal places (max 7)\n      amount.decimalPlaces() > 7 || // NaN or Infinity\n      amount.isNaN() || !amount.isFinite()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'constructAmountRequirementsError',\n    value: function constructAmountRequirementsError(arg) {\n      return arg + ' argument must be of type String, represent a positive number and have at most 7 digits after the decimal';\n    }\n    /**\n     * Returns value converted to uint32 value or undefined.\n     * If `value` is not `Number`, `String` or `Undefined` then throws an error.\n     * Used in {@link Operation.setOptions}.\n     * @private\n     * @param {string} name Name of the property (used in error message only)\n     * @param {*} value Value to check\n     * @param {function(value, name)} isValidFunction Function to check other constraints (the argument will be a `Number`)\n     * @returns {undefined|Number}\n     */\n\n  }, {\n    key: '_checkUnsignedIntValue',\n    value: function _checkUnsignedIntValue(name, value) {\n      var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if ((0, _isUndefined2.default)(value)) {\n        return undefined;\n      }\n\n      if ((0, _isString2.default)(value)) {\n        value = parseFloat(value);\n      }\n\n      switch (true) {\n        case !(0, _isNumber2.default)(value) || !(0, _isFinite2.default)(value) || value % 1 !== 0:\n          throw new Error(name + ' value is invalid');\n\n        case value < 0:\n          throw new Error(name + ' value must be unsigned');\n\n        case !isValidFunction || isValidFunction && isValidFunction(value, name):\n          return value;\n\n        default:\n          throw new Error(name + ' value is invalid');\n      }\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value Value\n     * @returns {Hyper} XDR amount\n     */\n\n  }, {\n    key: '_toXDRAmount',\n    value: function _toXDRAmount(value) {\n      var amount = new _bignumber2.default(value).mul(ONE);\n      return _jsXdr.Hyper.fromString(amount.toString());\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value XDR amount\n     * @returns {BigNumber} Number\n     */\n\n  }, {\n    key: '_fromXDRAmount',\n    value: function _fromXDRAmount(value) {\n      return new _bignumber2.default(value).div(ONE).toFixed(7);\n    }\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {BigNumber} Big string\n     */\n\n  }, {\n    key: '_fromXDRPrice',\n    value: function _fromXDRPrice(price) {\n      var n = new _bignumber2.default(price.n());\n      return n.div(new _bignumber2.default(price.d())).toString();\n    }\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {object} XDR price object\n     */\n\n  }, {\n    key: '_toXDRPrice',\n    value: function _toXDRPrice(price) {\n      var xdrObject = void 0;\n\n      if (price.n && price.d) {\n        xdrObject = new _stellarXdr_generated2.default.Price(price);\n      } else {\n        price = new _bignumber2.default(price);\n        var approx = (0, _continued_fraction.best_r)(price);\n        xdrObject = new _stellarXdr_generated2.default.Price({\n          n: parseInt(approx[0], 10),\n          d: parseInt(approx[1], 10)\n        });\n      }\n\n      if (xdrObject.n() < 0 || xdrObject.d() < 0) {\n        throw new Error('price must be positive');\n      }\n\n      return xdrObject;\n    }\n  }]);\n\n  return Operation;\n}();\n\nfunction extractRevokeSponshipDetails(attrs, result) {\n  switch (attrs.switch().name) {\n    case 'revokeSponsorshipLedgerEntry':\n      {\n        var ledgerKey = attrs.ledgerKey();\n\n        switch (ledgerKey.switch().name) {\n          case _stellarXdr_generated2.default.LedgerEntryType.account().name:\n            {\n              result.type = 'revokeAccountSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.account().accountId());\n              break;\n            }\n\n          case _stellarXdr_generated2.default.LedgerEntryType.trustline().name:\n            {\n              result.type = 'revokeTrustlineSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.trustLine().accountId());\n              var xdrAsset = ledgerKey.trustLine().asset();\n\n              switch (xdrAsset.switch()) {\n                case _stellarXdr_generated2.default.AssetType.assetTypePoolShare():\n                  result.asset = _liquidity_pool_id.LiquidityPoolId.fromOperation(xdrAsset);\n                  break;\n\n                default:\n                  result.asset = _asset.Asset.fromOperation(xdrAsset);\n                  break;\n              }\n\n              break;\n            }\n\n          case _stellarXdr_generated2.default.LedgerEntryType.offer().name:\n            {\n              result.type = 'revokeOfferSponsorship';\n              result.seller = accountIdtoAddress(ledgerKey.offer().sellerId());\n              result.offerId = ledgerKey.offer().offerId().toString();\n              break;\n            }\n\n          case _stellarXdr_generated2.default.LedgerEntryType.data().name:\n            {\n              result.type = 'revokeDataSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.data().accountId());\n              result.name = ledgerKey.data().dataName().toString('ascii');\n              break;\n            }\n\n          case _stellarXdr_generated2.default.LedgerEntryType.claimableBalance().name:\n            {\n              result.type = 'revokeClaimableBalanceSponsorship';\n              result.balanceId = ledgerKey.claimableBalance().balanceId().toXDR('hex');\n              break;\n            }\n\n          case _stellarXdr_generated2.default.LedgerEntryType.liquidityPool().name:\n            {\n              result.type = 'revokeLiquidityPoolSponsorship';\n              result.liquidityPoolId = ledgerKey.liquidityPool().liquidityPoolId().toString('hex');\n              break;\n            }\n\n          default:\n            {\n              throw new Error('Unknown ledgerKey: ' + attrs.switch().name);\n            }\n        }\n\n        break;\n      }\n\n    case 'revokeSponsorshipSigner':\n      {\n        result.type = 'revokeSignerSponsorship';\n        result.account = accountIdtoAddress(attrs.signer().accountId());\n        result.signer = convertXDRSignerKeyToObject(attrs.signer().signerKey());\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unknown revokeSponsorship: ' + attrs.switch().name);\n      }\n  }\n}\n\nfunction convertXDRSignerKeyToObject(signerKey) {\n  var attrs = {};\n\n  switch (signerKey.switch().name) {\n    case _stellarXdr_generated2.default.SignerKeyType.signerKeyTypeEd25519().name:\n      {\n        attrs.ed25519PublicKey = _strkey.StrKey.encodeEd25519PublicKey(signerKey.ed25519());\n        break;\n      }\n\n    case _stellarXdr_generated2.default.SignerKeyType.signerKeyTypePreAuthTx().name:\n      {\n        attrs.preAuthTx = signerKey.preAuthTx().toString('hex');\n        break;\n      }\n\n    case _stellarXdr_generated2.default.SignerKeyType.signerKeyTypeHashX().name:\n      {\n        attrs.sha256Hash = signerKey.hashX().toString('hex');\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unknown signerKey: ' + signerKey.switch().name);\n      }\n  }\n\n  return attrs;\n}\n\nfunction accountIdtoAddress(accountId) {\n  return _strkey.StrKey.encodeEd25519PublicKey(accountId.ed25519());\n} // Attach all imported operations as static methods on the Operation class\n\n\nOperation.accountMerge = ops.accountMerge;\nOperation.allowTrust = ops.allowTrust;\nOperation.bumpSequence = ops.bumpSequence;\nOperation.changeTrust = ops.changeTrust;\nOperation.createAccount = ops.createAccount;\nOperation.createClaimableBalance = ops.createClaimableBalance;\nOperation.claimClaimableBalance = ops.claimClaimableBalance;\nOperation.clawbackClaimableBalance = ops.clawbackClaimableBalance;\nOperation.createPassiveSellOffer = ops.createPassiveSellOffer;\nOperation.inflation = ops.inflation;\nOperation.manageData = ops.manageData;\nOperation.manageSellOffer = ops.manageSellOffer;\nOperation.manageBuyOffer = ops.manageBuyOffer;\nOperation.pathPaymentStrictReceive = ops.pathPaymentStrictReceive;\nOperation.pathPaymentStrictSend = ops.pathPaymentStrictSend;\nOperation.payment = ops.payment;\nOperation.setOptions = ops.setOptions;\nOperation.beginSponsoringFutureReserves = ops.beginSponsoringFutureReserves;\nOperation.endSponsoringFutureReserves = ops.endSponsoringFutureReserves;\nOperation.revokeAccountSponsorship = ops.revokeAccountSponsorship;\nOperation.revokeTrustlineSponsorship = ops.revokeTrustlineSponsorship;\nOperation.revokeOfferSponsorship = ops.revokeOfferSponsorship;\nOperation.revokeDataSponsorship = ops.revokeDataSponsorship;\nOperation.revokeClaimableBalanceSponsorship = ops.revokeClaimableBalanceSponsorship;\nOperation.revokeLiquidityPoolSponsorship = ops.revokeLiquidityPoolSponsorship;\nOperation.revokeSignerSponsorship = ops.revokeSignerSponsorship;\nOperation.clawback = ops.clawback;\nOperation.setTrustLineFlags = ops.setTrustLineFlags;\nOperation.liquidityPoolDeposit = ops.liquidityPoolDeposit;\nOperation.liquidityPoolWithdraw = ops.liquidityPoolWithdraw;","map":{"version":3,"names":["Object","defineProperty","exports","value","Operation","AuthClawbackEnabledFlag","AuthImmutableFlag","AuthRevocableFlag","AuthRequiredFlag","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_jsXdr","require","_bignumber","_bignumber2","_interopRequireDefault","_trimEnd","_trimEnd2","_isUndefined","_isUndefined2","_isString","_isString2","_isNumber","_isNumber2","_isFinite","_isFinite2","_continued_fraction","_asset","_liquidity_pool_asset","_claimant","_strkey","_liquidity_pool_id","_stellarXdr_generated","_stellarXdr_generated2","_index","ops","_interopRequireWildcard","_decode_encode_muxed_account","obj","__esModule","newObj","hasOwnProperty","call","default","_classCallCheck","instance","TypeError","ONE","MAX_INT64","setSourceAccount","opAttributes","opts","source","sourceAccount","decodeAddressToMuxedAccount","withMuxing","e","Error","fromXDRObject","operation","result","encodeMuxedAccountToAddress","attrs","body","operationName","switch","name","type","destination","accountIdtoAddress","startingBalance","_fromXDRAmount","asset","Asset","fromOperation","amount","sendAsset","sendMax","destAsset","destAmount","path","keys","forEach","pathKey","push","sendAmount","destMin","_path","line","AssetType","assetTypePoolShare","LiquidityPoolAsset","limit","trustor","assetCode","toString","authorize","inflationDest","clearFlags","setFlags","masterWeight","lowThreshold","medThreshold","highThreshold","homeDomain","signer","arm","ed25519PublicKey","preAuthTx","sha256Hash","hashX","weight","selling","buying","price","_fromXDRPrice","offerId","buyAmount","dataName","dataValue","bumpTo","claimants","claimant","Claimant","fromXDR","balanceId","toXDR","sponsoredId","extractRevokeSponshipDetails","from","clears","sets","mapping","authorized","TrustLineFlags","authorizedFlag","authorizedToMaintainLiabilities","authorizedToMaintainLiabilitiesFlag","clawbackEnabled","trustlineClawbackEnabledFlag","getFlagValue","bit","flags","flagName","liquidityPoolId","maxAmountA","maxAmountB","minPrice","maxPrice","minAmountA","minAmountB","isValidAmount","allowZero","arguments","isZero","isNegative","times","greaterThan","decimalPlaces","isNaN","isFinite","constructAmountRequirementsError","arg","_checkUnsignedIntValue","isValidFunction","parseFloat","_toXDRAmount","mul","Hyper","fromString","div","toFixed","n","d","_toXDRPrice","xdrObject","Price","approx","best_r","parseInt","ledgerKey","LedgerEntryType","account","accountId","trustline","trustLine","xdrAsset","LiquidityPoolId","offer","seller","sellerId","data","claimableBalance","liquidityPool","convertXDRSignerKeyToObject","signerKey","SignerKeyType","signerKeyTypeEd25519","StrKey","encodeEd25519PublicKey","ed25519","signerKeyTypePreAuthTx","signerKeyTypeHashX","accountMerge","allowTrust","bumpSequence","changeTrust","createAccount","createClaimableBalance","claimClaimableBalance","clawbackClaimableBalance","createPassiveSellOffer","inflation","manageData","manageSellOffer","manageBuyOffer","pathPaymentStrictReceive","pathPaymentStrictSend","payment","setOptions","beginSponsoringFutureReserves","endSponsoringFutureReserves","revokeAccountSponsorship","revokeTrustlineSponsorship","revokeOfferSponsorship","revokeDataSponsorship","revokeClaimableBalanceSponsorship","revokeLiquidityPoolSponsorship","revokeSignerSponsorship","clawback","setTrustLineFlags","liquidityPoolDeposit","liquidityPoolWithdraw"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operation.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Operation = exports.AuthClawbackEnabledFlag = exports.AuthImmutableFlag = exports.AuthRevocableFlag = exports.AuthRequiredFlag = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-bitwise */\n\nvar _jsXdr = require('js-xdr');\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _trimEnd = require('lodash/trimEnd');\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _isNumber = require('lodash/isNumber');\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _isFinite = require('lodash/isFinite');\n\nvar _isFinite2 = _interopRequireDefault(_isFinite);\n\nvar _continued_fraction = require('./util/continued_fraction');\n\nvar _asset = require('./asset');\n\nvar _liquidity_pool_asset = require('./liquidity_pool_asset');\n\nvar _claimant = require('./claimant');\n\nvar _strkey = require('./strkey');\n\nvar _liquidity_pool_id = require('./liquidity_pool_id');\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _index = require('./operations/index');\n\nvar ops = _interopRequireWildcard(_index);\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ONE = 10000000;\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * When set using `{@link Operation.setOptions}` option, requires the issuing\n * account to give other accounts permission before they can hold the issuing\n * accountâ€™s credit.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRequiredFlag = exports.AuthRequiredFlag = 1 << 0;\n/**\n * When set using `{@link Operation.setOptions}` option, allows the issuing\n * account to revoke its credit held by other accounts.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthRevocableFlag = exports.AuthRevocableFlag = 1 << 1;\n/**\n * When set using `{@link Operation.setOptions}` option, then none of the\n * authorization flags can be set and the account can never be deleted.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthImmutableFlag = exports.AuthImmutableFlag = 1 << 2;\n\n/**\n * When set using `{@link Operation.setOptions}` option, then any trustlines\n * created by this account can have a ClawbackOp operation submitted for the\n * corresponding asset.\n *\n * @constant\n * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)\n */\nvar AuthClawbackEnabledFlag = exports.AuthClawbackEnabledFlag = 1 << 3;\n\n/**\n * `Operation` class represents [operations](https://developers.stellar.org/docs/glossary/operations/) in Stellar network.\n * Use one of static methods to create operations:\n * * `{@link Operation.createAccount}`\n * * `{@link Operation.payment}`\n * * `{@link Operation.pathPaymentStrictReceive}`\n * * `{@link Operation.pathPaymentStrictSend}`\n * * `{@link Operation.manageSellOffer}`\n * * `{@link Operation.manageBuyOffer}`\n * * `{@link Operation.createPassiveSellOffer}`\n * * `{@link Operation.setOptions}`\n * * `{@link Operation.changeTrust}`\n * * `{@link Operation.allowTrust}`\n * * `{@link Operation.accountMerge}`\n * * `{@link Operation.inflation}`\n * * `{@link Operation.manageData}`\n * * `{@link Operation.bumpSequence}`\n * * `{@link Operation.createClaimableBalance}`\n * * `{@link Operation.claimClaimableBalance}`\n * * `{@link Operation.beginSponsoringFutureReserves}`\n * * `{@link Operation.endSponsoringFutureReserves}`\n * * `{@link Operation.revokeAccountSponsorship}`\n * * `{@link Operation.revokeTrustlineSponsorship}`\n * * `{@link Operation.revokeOfferSponsorship}`\n * * `{@link Operation.revokeDataSponsorship}`\n * * `{@link Operation.revokeClaimableBalanceSponsorship}`\n * * `{@link Operation.revokeLiquidityPoolSponsorship}`\n * * `{@link Operation.revokeSignerSponsorship}`\n * * `{@link Operation.clawback}`\n * * `{@link Operation.clawbackClaimableBalance}`\n * * `{@link Operation.setTrustLineFlags}`\n * * `{@link Operation.liquidityPoolDeposit}`\n * * `{@link Operation.liquidityPoolWithdraw}`\n *\n * @class Operation\n */\n\nvar Operation = exports.Operation = function () {\n  function Operation() {\n    _classCallCheck(this, Operation);\n  }\n\n  _createClass(Operation, null, [{\n    key: 'setSourceAccount',\n    value: function setSourceAccount(opAttributes, opts) {\n      if (opts.source) {\n        try {\n          opAttributes.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.source, opts.withMuxing);\n        } catch (e) {\n          throw new Error('Source address is invalid');\n        }\n      }\n    }\n\n    /**\n     * Deconstructs the raw XDR operation object into the structured object that\n     * was used to create the operation (i.e. the `opts` parameter to most ops).\n     *\n     * @param {xdr.Operation}   operation - An XDR Operation.\n     * @param {boolean}         [withMuxing] - Indicates that if the operation\n     *     contains M... addresses, they should be interpreted fully as muxed\n     *     accounts. By default, this option is disabled until muxed accounts are\n     *     mature.\n     *\n     * @return {Operation}\n     */\n\n  }, {\n    key: 'fromXDRObject',\n    value: function fromXDRObject(operation, withMuxing) {\n      var result = {};\n      if (operation.sourceAccount()) {\n        result.source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(operation.sourceAccount(), withMuxing);\n      }\n\n      var attrs = operation.body().value();\n      var operationName = operation.body().switch().name;\n\n      switch (operationName) {\n        case 'createAccount':\n          {\n            result.type = 'createAccount';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.startingBalance = this._fromXDRAmount(attrs.startingBalance());\n            break;\n          }\n        case 'payment':\n          {\n            result.type = 'payment';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination(), withMuxing);\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            break;\n          }\n        case 'pathPaymentStrictReceive':\n          {\n            result.type = 'pathPaymentStrictReceive';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendMax = this._fromXDRAmount(attrs.sendMax());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination(), withMuxing);\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destAmount = this._fromXDRAmount(attrs.destAmount());\n            result.path = [];\n\n            var path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(path[pathKey]));\n            });\n            break;\n          }\n        case 'pathPaymentStrictSend':\n          {\n            result.type = 'pathPaymentStrictSend';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendAmount = this._fromXDRAmount(attrs.sendAmount());\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination(), withMuxing);\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destMin = this._fromXDRAmount(attrs.destMin());\n            result.path = [];\n\n            var _path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(_path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(_path[pathKey]));\n            });\n            break;\n          }\n        case 'changeTrust':\n          {\n            result.type = 'changeTrust';\n            switch (attrs.line().switch()) {\n              case _stellarXdr_generated2.default.AssetType.assetTypePoolShare():\n                result.line = _liquidity_pool_asset.LiquidityPoolAsset.fromOperation(attrs.line());\n                break;\n              default:\n                result.line = _asset.Asset.fromOperation(attrs.line());\n                break;\n            }\n            result.limit = this._fromXDRAmount(attrs.limit());\n            break;\n          }\n        case 'allowTrust':\n          {\n            result.type = 'allowTrust';\n            result.trustor = accountIdtoAddress(attrs.trustor());\n            result.assetCode = attrs.asset().value().toString();\n            result.assetCode = (0, _trimEnd2.default)(result.assetCode, '\\0');\n            result.authorize = attrs.authorize();\n            break;\n          }\n        case 'setOptions':\n          {\n            result.type = 'setOptions';\n            if (attrs.inflationDest()) {\n              result.inflationDest = accountIdtoAddress(attrs.inflationDest());\n            }\n\n            result.clearFlags = attrs.clearFlags();\n            result.setFlags = attrs.setFlags();\n            result.masterWeight = attrs.masterWeight();\n            result.lowThreshold = attrs.lowThreshold();\n            result.medThreshold = attrs.medThreshold();\n            result.highThreshold = attrs.highThreshold();\n            // home_domain is checked by iscntrl in stellar-core\n            result.homeDomain = attrs.homeDomain() !== undefined ? attrs.homeDomain().toString('ascii') : undefined;\n\n            if (attrs.signer()) {\n              var signer = {};\n              var arm = attrs.signer().key().arm();\n              if (arm === 'ed25519') {\n                signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());\n              } else if (arm === 'preAuthTx') {\n                signer.preAuthTx = attrs.signer().key().preAuthTx();\n              } else if (arm === 'hashX') {\n                signer.sha256Hash = attrs.signer().key().hashX();\n              }\n\n              signer.weight = attrs.signer().weight();\n              result.signer = signer;\n            }\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'manageOffer':\n        case 'manageSellOffer':\n          {\n            result.type = 'manageSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        case 'manageBuyOffer':\n          {\n            result.type = 'manageBuyOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.buyAmount = this._fromXDRAmount(attrs.buyAmount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'createPassiveOffer':\n        case 'createPassiveSellOffer':\n          {\n            result.type = 'createPassiveSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            break;\n          }\n        case 'accountMerge':\n          {\n            result.type = 'accountMerge';\n            result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs, withMuxing);\n            break;\n          }\n        case 'manageData':\n          {\n            result.type = 'manageData';\n            // manage_data.name is checked by iscntrl in stellar-core\n            result.name = attrs.dataName().toString('ascii');\n            result.value = attrs.dataValue();\n            break;\n          }\n        case 'inflation':\n          {\n            result.type = 'inflation';\n            break;\n          }\n        case 'bumpSequence':\n          {\n            result.type = 'bumpSequence';\n            result.bumpTo = attrs.bumpTo().toString();\n            break;\n          }\n        case 'createClaimableBalance':\n          {\n            result.type = 'createClaimableBalance';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.claimants = [];\n            attrs.claimants().forEach(function (claimant) {\n              result.claimants.push(_claimant.Claimant.fromXDR(claimant));\n            });\n            break;\n          }\n        case 'claimClaimableBalance':\n          {\n            result.type = 'claimClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'beginSponsoringFutureReserves':\n          {\n            result.type = 'beginSponsoringFutureReserves';\n            result.sponsoredId = accountIdtoAddress(attrs.sponsoredId());\n            break;\n          }\n        case 'endSponsoringFutureReserves':\n          {\n            result.type = 'endSponsoringFutureReserves';\n            break;\n          }\n        case 'revokeSponsorship':\n          {\n            extractRevokeSponshipDetails(attrs, result);\n            break;\n          }\n        case 'clawback':\n          {\n            result.type = 'clawback';\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.from = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.from());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            break;\n          }\n        case 'clawbackClaimableBalance':\n          {\n            result.type = 'clawbackClaimableBalance';\n            result.balanceId = attrs.toXDR('hex');\n            break;\n          }\n        case 'setTrustLineFlags':\n          {\n            result.type = 'setTrustLineFlags';\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.trustor = accountIdtoAddress(attrs.trustor());\n\n            // Convert from the integer-bitwised flag into a sensible object that\n            // indicates true/false for each flag that's on/off.\n            var clears = attrs.clearFlags();\n            var sets = attrs.setFlags();\n\n            var mapping = {\n              authorized: _stellarXdr_generated2.default.TrustLineFlags.authorizedFlag(),\n              authorizedToMaintainLiabilities: _stellarXdr_generated2.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),\n              clawbackEnabled: _stellarXdr_generated2.default.TrustLineFlags.trustlineClawbackEnabledFlag()\n            };\n\n            var getFlagValue = function getFlagValue(key) {\n              var bit = mapping[key].value;\n              if (sets & bit) {\n                return true;\n              }\n              if (clears & bit) {\n                return false;\n              }\n              return undefined;\n            };\n\n            result.flags = {};\n            Object.keys(mapping).forEach(function (flagName) {\n              result.flags[flagName] = getFlagValue(flagName);\n            });\n\n            break;\n          }\n        case 'liquidityPoolDeposit':\n          {\n            result.type = 'liquidityPoolDeposit';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.maxAmountA = this._fromXDRAmount(attrs.maxAmountA());\n            result.maxAmountB = this._fromXDRAmount(attrs.maxAmountB());\n            result.minPrice = this._fromXDRPrice(attrs.minPrice());\n            result.maxPrice = this._fromXDRPrice(attrs.maxPrice());\n            break;\n          }\n        case 'liquidityPoolWithdraw':\n          {\n            result.type = 'liquidityPoolWithdraw';\n            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.minAmountA = this._fromXDRAmount(attrs.minAmountA());\n            result.minAmountB = this._fromXDRAmount(attrs.minAmountB());\n            break;\n          }\n        default:\n          {\n            throw new Error('Unknown operation: ' + operationName);\n          }\n      }\n      return result;\n    }\n  }, {\n    key: 'isValidAmount',\n    value: function isValidAmount(value) {\n      var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!(0, _isString2.default)(value)) {\n        return false;\n      }\n\n      var amount = void 0;\n      try {\n        amount = new _bignumber2.default(value);\n      } catch (e) {\n        return false;\n      }\n\n      if (\n      // == 0\n      !allowZero && amount.isZero() ||\n      // < 0\n      amount.isNegative() ||\n      // > Max value\n      amount.times(ONE).greaterThan(new _bignumber2.default(MAX_INT64).toString()) ||\n      // Decimal places (max 7)\n      amount.decimalPlaces() > 7 ||\n      // NaN or Infinity\n      amount.isNaN() || !amount.isFinite()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'constructAmountRequirementsError',\n    value: function constructAmountRequirementsError(arg) {\n      return arg + ' argument must be of type String, represent a positive number and have at most 7 digits after the decimal';\n    }\n\n    /**\n     * Returns value converted to uint32 value or undefined.\n     * If `value` is not `Number`, `String` or `Undefined` then throws an error.\n     * Used in {@link Operation.setOptions}.\n     * @private\n     * @param {string} name Name of the property (used in error message only)\n     * @param {*} value Value to check\n     * @param {function(value, name)} isValidFunction Function to check other constraints (the argument will be a `Number`)\n     * @returns {undefined|Number}\n     */\n\n  }, {\n    key: '_checkUnsignedIntValue',\n    value: function _checkUnsignedIntValue(name, value) {\n      var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if ((0, _isUndefined2.default)(value)) {\n        return undefined;\n      }\n\n      if ((0, _isString2.default)(value)) {\n        value = parseFloat(value);\n      }\n\n      switch (true) {\n        case !(0, _isNumber2.default)(value) || !(0, _isFinite2.default)(value) || value % 1 !== 0:\n          throw new Error(name + ' value is invalid');\n        case value < 0:\n          throw new Error(name + ' value must be unsigned');\n        case !isValidFunction || isValidFunction && isValidFunction(value, name):\n          return value;\n        default:\n          throw new Error(name + ' value is invalid');\n      }\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value Value\n     * @returns {Hyper} XDR amount\n     */\n\n  }, {\n    key: '_toXDRAmount',\n    value: function _toXDRAmount(value) {\n      var amount = new _bignumber2.default(value).mul(ONE);\n      return _jsXdr.Hyper.fromString(amount.toString());\n    }\n\n    /**\n     * @private\n     * @param {string|BigNumber} value XDR amount\n     * @returns {BigNumber} Number\n     */\n\n  }, {\n    key: '_fromXDRAmount',\n    value: function _fromXDRAmount(value) {\n      return new _bignumber2.default(value).div(ONE).toFixed(7);\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {BigNumber} Big string\n     */\n\n  }, {\n    key: '_fromXDRPrice',\n    value: function _fromXDRPrice(price) {\n      var n = new _bignumber2.default(price.n());\n      return n.div(new _bignumber2.default(price.d())).toString();\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {object} XDR price object\n     */\n\n  }, {\n    key: '_toXDRPrice',\n    value: function _toXDRPrice(price) {\n      var xdrObject = void 0;\n      if (price.n && price.d) {\n        xdrObject = new _stellarXdr_generated2.default.Price(price);\n      } else {\n        price = new _bignumber2.default(price);\n        var approx = (0, _continued_fraction.best_r)(price);\n        xdrObject = new _stellarXdr_generated2.default.Price({\n          n: parseInt(approx[0], 10),\n          d: parseInt(approx[1], 10)\n        });\n      }\n\n      if (xdrObject.n() < 0 || xdrObject.d() < 0) {\n        throw new Error('price must be positive');\n      }\n\n      return xdrObject;\n    }\n  }]);\n\n  return Operation;\n}();\n\nfunction extractRevokeSponshipDetails(attrs, result) {\n  switch (attrs.switch().name) {\n    case 'revokeSponsorshipLedgerEntry':\n      {\n        var ledgerKey = attrs.ledgerKey();\n        switch (ledgerKey.switch().name) {\n          case _stellarXdr_generated2.default.LedgerEntryType.account().name:\n            {\n              result.type = 'revokeAccountSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.account().accountId());\n              break;\n            }\n          case _stellarXdr_generated2.default.LedgerEntryType.trustline().name:\n            {\n              result.type = 'revokeTrustlineSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.trustLine().accountId());\n              var xdrAsset = ledgerKey.trustLine().asset();\n              switch (xdrAsset.switch()) {\n                case _stellarXdr_generated2.default.AssetType.assetTypePoolShare():\n                  result.asset = _liquidity_pool_id.LiquidityPoolId.fromOperation(xdrAsset);\n                  break;\n                default:\n                  result.asset = _asset.Asset.fromOperation(xdrAsset);\n                  break;\n              }\n              break;\n            }\n          case _stellarXdr_generated2.default.LedgerEntryType.offer().name:\n            {\n              result.type = 'revokeOfferSponsorship';\n              result.seller = accountIdtoAddress(ledgerKey.offer().sellerId());\n              result.offerId = ledgerKey.offer().offerId().toString();\n              break;\n            }\n          case _stellarXdr_generated2.default.LedgerEntryType.data().name:\n            {\n              result.type = 'revokeDataSponsorship';\n              result.account = accountIdtoAddress(ledgerKey.data().accountId());\n              result.name = ledgerKey.data().dataName().toString('ascii');\n              break;\n            }\n          case _stellarXdr_generated2.default.LedgerEntryType.claimableBalance().name:\n            {\n              result.type = 'revokeClaimableBalanceSponsorship';\n              result.balanceId = ledgerKey.claimableBalance().balanceId().toXDR('hex');\n              break;\n            }\n          case _stellarXdr_generated2.default.LedgerEntryType.liquidityPool().name:\n            {\n              result.type = 'revokeLiquidityPoolSponsorship';\n              result.liquidityPoolId = ledgerKey.liquidityPool().liquidityPoolId().toString('hex');\n              break;\n            }\n          default:\n            {\n              throw new Error('Unknown ledgerKey: ' + attrs.switch().name);\n            }\n        }\n        break;\n      }\n    case 'revokeSponsorshipSigner':\n      {\n        result.type = 'revokeSignerSponsorship';\n        result.account = accountIdtoAddress(attrs.signer().accountId());\n        result.signer = convertXDRSignerKeyToObject(attrs.signer().signerKey());\n        break;\n      }\n    default:\n      {\n        throw new Error('Unknown revokeSponsorship: ' + attrs.switch().name);\n      }\n  }\n}\n\nfunction convertXDRSignerKeyToObject(signerKey) {\n  var attrs = {};\n  switch (signerKey.switch().name) {\n    case _stellarXdr_generated2.default.SignerKeyType.signerKeyTypeEd25519().name:\n      {\n        attrs.ed25519PublicKey = _strkey.StrKey.encodeEd25519PublicKey(signerKey.ed25519());\n        break;\n      }\n    case _stellarXdr_generated2.default.SignerKeyType.signerKeyTypePreAuthTx().name:\n      {\n        attrs.preAuthTx = signerKey.preAuthTx().toString('hex');\n        break;\n      }\n    case _stellarXdr_generated2.default.SignerKeyType.signerKeyTypeHashX().name:\n      {\n        attrs.sha256Hash = signerKey.hashX().toString('hex');\n        break;\n      }\n    default:\n      {\n        throw new Error('Unknown signerKey: ' + signerKey.switch().name);\n      }\n  }\n\n  return attrs;\n}\n\nfunction accountIdtoAddress(accountId) {\n  return _strkey.StrKey.encodeEd25519PublicKey(accountId.ed25519());\n}\n\n// Attach all imported operations as static methods on the Operation class\nOperation.accountMerge = ops.accountMerge;\nOperation.allowTrust = ops.allowTrust;\nOperation.bumpSequence = ops.bumpSequence;\nOperation.changeTrust = ops.changeTrust;\nOperation.createAccount = ops.createAccount;\nOperation.createClaimableBalance = ops.createClaimableBalance;\nOperation.claimClaimableBalance = ops.claimClaimableBalance;\nOperation.clawbackClaimableBalance = ops.clawbackClaimableBalance;\nOperation.createPassiveSellOffer = ops.createPassiveSellOffer;\nOperation.inflation = ops.inflation;\nOperation.manageData = ops.manageData;\nOperation.manageSellOffer = ops.manageSellOffer;\nOperation.manageBuyOffer = ops.manageBuyOffer;\nOperation.pathPaymentStrictReceive = ops.pathPaymentStrictReceive;\nOperation.pathPaymentStrictSend = ops.pathPaymentStrictSend;\nOperation.payment = ops.payment;\nOperation.setOptions = ops.setOptions;\nOperation.beginSponsoringFutureReserves = ops.beginSponsoringFutureReserves;\nOperation.endSponsoringFutureReserves = ops.endSponsoringFutureReserves;\nOperation.revokeAccountSponsorship = ops.revokeAccountSponsorship;\nOperation.revokeTrustlineSponsorship = ops.revokeTrustlineSponsorship;\nOperation.revokeOfferSponsorship = ops.revokeOfferSponsorship;\nOperation.revokeDataSponsorship = ops.revokeDataSponsorship;\nOperation.revokeClaimableBalanceSponsorship = ops.revokeClaimableBalanceSponsorship;\nOperation.revokeLiquidityPoolSponsorship = ops.revokeLiquidityPoolSponsorship;\nOperation.revokeSignerSponsorship = ops.revokeSignerSponsorship;\nOperation.clawback = ops.clawback;\nOperation.setTrustLineFlags = ops.setTrustLineFlags;\nOperation.liquidityPoolDeposit = ops.liquidityPoolDeposit;\nOperation.liquidityPoolWithdraw = ops.liquidityPoolWithdraw;"],"mappings":"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"},"metadata":{},"sourceType":"script"}