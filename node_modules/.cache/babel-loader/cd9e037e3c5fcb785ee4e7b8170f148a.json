{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getErc20Decimals = exports.prepareApproveErc20 = exports.sendApproveErc20 = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst token_abi_1 = __importDefault(require(\"../contracts/erc20/token_abi\"));\n\nconst helpers_1 = require(\"../helpers\");\n\nconst model_1 = require(\"../model\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst caver_js_1 = __importDefault(require(\"caver-js\"));\n/**\n * Approve ERC20 transfer for spender.\n * @param testnet chain to work with\n * @param body request data\n * @param provider optional provider to enter. if not present, Tatum Web3 will be used.\n * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS\n */\n\n\nconst sendApproveErc20 = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareApproveErc20(testnet, body, provider), body.signatureId);\n\nexports.sendApproveErc20 = sendApproveErc20;\n/**\n * Prepare approve ERC20 signed transaction.\n * @param testnet if we are on testnet or not\n * @param body body of the approve operation\n * @param provider optional Web3 provider\n */\n\nconst prepareApproveErc20 = async (testnet, body, provider) => {\n  await tatum_1.validateBody(body, model_1.ApproveErc20);\n  let amount;\n\n  switch (body.chain) {\n    case model_1.Currency.CELO:\n      amount = new bignumber_js_1.default(body.amount).multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getCeloErc20ContractDecimals(testnet, body.contractAddress, provider))).toString(16);\n      break;\n\n    case model_1.Currency.ONE:\n      amount = new bignumber_js_1.default(body.amount).multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getOne20ContractDecimals(testnet, body.contractAddress, provider))).toString(16);\n      break;\n\n    case model_1.Currency.ETH:\n      amount = new bignumber_js_1.default(body.amount).multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getEthErc20ContractDecimals(testnet, body.contractAddress, provider))).toString(16);\n      break;\n\n    case model_1.Currency.BSC:\n      amount = new bignumber_js_1.default(body.amount).multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getBscBep20ContractDecimals(testnet, body.contractAddress, provider))).toString(16);\n      break;\n\n    case model_1.Currency.MATIC:\n      amount = new bignumber_js_1.default(body.amount).multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getPolygonErc20ContractDecimals(testnet, body.contractAddress, provider))).toString(16);\n      break;\n\n    case model_1.Currency.KLAY:\n      amount = new bignumber_js_1.default(body.amount).multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getKlayErc20ContractDecimals(testnet, body.contractAddress, provider))).toString(16);\n      break;\n\n    default:\n      throw new Error('Unsupported combination of inputs.');\n  }\n\n  const params = [body.spender.trim(), `0x${amount}`];\n  body.amount = '0';\n  return await helpers_1.helperPrepareSCCall(testnet, body, model_1.ApproveErc20, 'approve', params, undefined, provider, token_abi_1.default);\n};\n\nexports.prepareApproveErc20 = prepareApproveErc20;\n/**\n * Get Decimals for the ERC20 token\n * @param testnet if we are using testnet or mainnet\n * @param chain chain to query for the token\n * @param contractAddress address of the token\n * @param provider optional provider\n */\n\nconst getErc20Decimals = async (testnet, chain, contractAddress, provider) => {\n  const web3 = helpers_1.helperGetWeb3Client(testnet, chain, provider);\n  const c = web3 instanceof caver_js_1.default ? web3.klay : web3.eth; // @ts-ignore\n\n  return new c.Contract(token_abi_1.default, contractAddress).methods.decimals().call();\n};\n\nexports.getErc20Decimals = getErc20Decimals;","map":{"version":3,"mappings":"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","names":["sendApproveErc20","testnet","body","provider","helpers_1","chain","exports","signatureId","prepareApproveErc20","tatum_1","model_1","amount","CELO","bignumber_js_1","multipliedBy","pow","transaction_1","contractAddress","toString","ONE","ETH","BSC","MATIC","KLAY","Error","params","spender","trim","undefined","token_abi_1","getErc20Decimals","web3","c","caver_js_1","klay","eth","Contract","methods","decimals","call"],"sourceRoot":"","sources":["../../../src/fungible/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}