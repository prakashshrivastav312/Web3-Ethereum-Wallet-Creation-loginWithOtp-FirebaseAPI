{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionBuilder = exports.TimeoutInfinite = exports.BASE_FEE = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.isValidDate = isValidDate;\n\nvar _jsXdr = require('js-xdr');\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _transaction = require('./transaction');\n\nvar _fee_bump_transaction = require('./fee_bump_transaction');\n\nvar _memo = require('./memo');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Minimum base fee for transactions. If this fee is below the network\n * minimum, the transaction will fail. The more operations in the\n * transaction, the greater the required fee. Use {@link\n * Server#fetchBaseFee} to get an accurate value of minimum transaction\n * fee on the network.\n *\n * @constant\n * @see [Fees](https://developers.stellar.org/docs/glossary/fees/)\n */\n\n\nvar BASE_FEE = exports.BASE_FEE = '100'; // Stroops\n\n/**\n * @constant\n * @see {@link TransactionBuilder#setTimeout}\n * @see [Timeout](https://developers.stellar.org/api/resources/transactions/post/)\n */\n\nvar TimeoutInfinite = exports.TimeoutInfinite = 0;\n/**\n * <p>Transaction builder helps constructs a new `{@link Transaction}` using the\n * given {@link Account} as the transaction's \"source account\". The transaction\n * will use the current sequence number of the given account as its sequence\n * number and increment the given account's sequence number by one. The given\n * source account must include a private key for signing the transaction or an\n * error will be thrown.</p>\n *\n * <p>Operations can be added to the transaction via their corresponding builder\n * methods, and each returns the TransactionBuilder object so they can be\n * chained together. After adding the desired operations, call the `build()`\n * method on the `TransactionBuilder` to return a fully constructed `{@link\n * Transaction}` that can be signed. The returned transaction will contain the\n * sequence number of the source account and include the signature from the\n * source account.</p>\n *\n * <p><strong>Be careful about unsubmitted transactions!</strong> When you build\n * a transaction, stellar-sdk automatically increments the source account's\n * sequence number. If you end up not submitting this transaction and submitting\n * another one instead, it'll fail due to the sequence number being wrong. So if\n * you decide not to use a built transaction, make sure to update the source\n * account's sequence number with\n * [Server.loadAccount](https://stellar.github.io/js-stellar-sdk/Server.html#loadAccount)\n * before creating another transaction.</p>\n *\n * <p>The following code example creates a new transaction with {@link\n * Operation.createAccount} and {@link Operation.payment} operations. The\n * Transaction's source account first funds `destinationA`, then sends a payment\n * to `destinationB`. The built transaction is then signed by\n * `sourceKeypair`.</p>\n *\n * ```\n * var transaction = new TransactionBuilder(source, { fee, networkPassphrase: Networks.TESTNET })\n * .addOperation(Operation.createAccount({\n *     destination: destinationA,\n *     startingBalance: \"20\"\n * })) // <- funds and creates destinationA\n * .addOperation(Operation.payment({\n *     destination: destinationB,\n *     amount: \"100\",\n *     asset: Asset.native()\n * })) // <- sends 100 XLM to destinationB\n * .setTimeout(30)\n * .build();\n *\n * transaction.sign(sourceKeypair);\n * ```\n *\n * @constructor\n *\n * @param {Account} sourceAccount - source account for this transaction\n * @param {object}  opts          - Options object\n * @param {string}  opts.fee      - max fee you're willing to pay per\n *     operation in this transaction (**in stroops**)\n *\n * @param {object}              [opts.timebounds] - timebounds for the\n *     validity of this transaction\n * @param {number|string|Date}  [opts.timebounds.minTime] - 64-bit UNIX\n *     timestamp or Date object\n * @param {number|string|Date}  [opts.timebounds.maxTime] - 64-bit UNIX\n *     timestamp or Date object\n * @param {Memo}                [opts.memo] - memo for the transaction\n * @param {string}              [opts.networkPassphrase] passphrase of the\n *     target Stellar network (e.g. \"Public Global Stellar Network ; September\n *     2015\" for the pubnet)\n * @param {bool}                [opts.withMuxing] - Indicates any properties in\n *     this transaction or its underlying operations that use fully-muxed\n *     accounts (i.e. come from an M... address) should be interpreted as such.\n *     By default, this option is disabled until muxed accounts are mature.\n */\n\nvar TransactionBuilder = exports.TransactionBuilder = function () {\n  function TransactionBuilder(sourceAccount) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TransactionBuilder);\n\n    if (!sourceAccount) {\n      throw new Error('must specify source account for the transaction');\n    }\n\n    if ((0, _isUndefined2.default)(opts.fee)) {\n      throw new Error('must specify fee for the transaction (in stroops)');\n    }\n\n    this.source = sourceAccount;\n    this.operations = [];\n    this.baseFee = (0, _isUndefined2.default)(opts.fee) ? BASE_FEE : opts.fee;\n    this.timebounds = (0, _clone2.default)(opts.timebounds) || null;\n    this.memo = opts.memo || _memo.Memo.none();\n    this.networkPassphrase = opts.networkPassphrase || null;\n    this.supportMuxedAccounts = opts.withMuxing || false;\n  }\n  /**\n   * Adds an operation to the transaction.\n   * @param {xdr.Operation} operation The xdr operation object, use {@link Operation} static methods.\n   * @returns {TransactionBuilder}\n   */\n\n\n  _createClass(TransactionBuilder, [{\n    key: 'addOperation',\n    value: function addOperation(operation) {\n      this.operations.push(operation);\n      return this;\n    }\n    /**\n     * Adds a memo to the transaction.\n     * @param {Memo} memo {@link Memo} object\n     * @returns {TransactionBuilder}\n     */\n\n  }, {\n    key: 'addMemo',\n    value: function addMemo(memo) {\n      this.memo = memo;\n      return this;\n    }\n    /**\n     * Because of the distributed nature of the Stellar network it is possible that the status of your transaction\n     * will be determined after a long time if the network is highly congested.\n     * If you want to be sure to receive the status of the transaction within a given period you should set the\n     * {@link TimeBounds} with <code>maxTime</code> on the transaction (this is what <code>setTimeout</code> does\n     * internally; if there's <code>minTime</code> set but no <code>maxTime</code> it will be added).\n     * Call to <code>TransactionBuilder.setTimeout</code> is required if Transaction does not have <code>max_time</code> set.\n     * If you don't want to set timeout, use <code>{@link TimeoutInfinite}</code>. In general you should set\n     * <code>{@link TimeoutInfinite}</code> only in smart contracts.\n     *\n     * Please note that Horizon may still return <code>504 Gateway Timeout</code> error, even for short timeouts.\n     * In such case you need to resubmit the same transaction again without making any changes to receive a status.\n     * This method is using the machine system time (UTC), make sure it is set correctly.\n     * @param {number} timeout Number of seconds the transaction is good. Can't be negative.\n     * If the value is `0`, the transaction is good indefinitely.\n     * @return {TransactionBuilder}\n     * @see TimeoutInfinite\n     */\n\n  }, {\n    key: 'setTimeout',\n    value: function setTimeout(timeout) {\n      if (this.timebounds !== null && this.timebounds.maxTime > 0) {\n        throw new Error('TimeBounds.max_time has been already set - setting timeout would overwrite it.');\n      }\n\n      if (timeout < 0) {\n        throw new Error('timeout cannot be negative');\n      }\n\n      if (timeout > 0) {\n        var timeoutTimestamp = Math.floor(Date.now() / 1000) + timeout;\n\n        if (this.timebounds === null) {\n          this.timebounds = {\n            minTime: 0,\n            maxTime: timeoutTimestamp\n          };\n        } else {\n          this.timebounds = {\n            minTime: this.timebounds.minTime,\n            maxTime: timeoutTimestamp\n          };\n        }\n      } else {\n        this.timebounds = {\n          minTime: 0,\n          maxTime: 0\n        };\n      }\n\n      return this;\n    }\n    /**\n     * Set network nassphrase for the Transaction that will be built.\n     *\n     * @param {string} [networkPassphrase] passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {TransactionBuilder}\n     */\n\n  }, {\n    key: 'setNetworkPassphrase',\n    value: function setNetworkPassphrase(networkPassphrase) {\n      this.networkPassphrase = networkPassphrase;\n      return this;\n    }\n    /**\n     * Enable support for muxed accounts for the Transaction that will be built.\n     * @returns {TransactionBuilder}\n     */\n\n  }, {\n    key: 'enableMuxedAccounts',\n    value: function enableMuxedAccounts() {\n      this.supportMuxedAccounts = true;\n      return this;\n    }\n    /**\n     * This will build the transaction.\n     * It will also increment the source account's sequence number by 1.\n     * @returns {Transaction} This method will return the built {@link Transaction}.\n     */\n\n  }, {\n    key: 'build',\n    value: function build() {\n      var sequenceNumber = new _bignumber2.default(this.source.sequenceNumber()).add(1);\n      var fee = new _bignumber2.default(this.baseFee).mul(this.operations.length).toNumber();\n      var attrs = {\n        fee: fee,\n        seqNum: _stellarXdr_generated2.default.SequenceNumber.fromString(sequenceNumber.toString()),\n        memo: this.memo ? this.memo.toXDRObject() : null\n      };\n\n      if (this.timebounds === null || typeof this.timebounds.minTime === 'undefined' || typeof this.timebounds.maxTime === 'undefined') {\n        throw new Error('TimeBounds has to be set or you must call setTimeout(TimeoutInfinite).');\n      }\n\n      if (isValidDate(this.timebounds.minTime)) {\n        this.timebounds.minTime = this.timebounds.minTime.getTime() / 1000;\n      }\n\n      if (isValidDate(this.timebounds.maxTime)) {\n        this.timebounds.maxTime = this.timebounds.maxTime.getTime() / 1000;\n      }\n\n      this.timebounds.minTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.minTime.toString());\n      this.timebounds.maxTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.maxTime.toString());\n      attrs.timeBounds = new _stellarXdr_generated2.default.TimeBounds(this.timebounds);\n      attrs.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(this.source.accountId(), this.supportMuxedAccounts);\n      attrs.ext = new _stellarXdr_generated2.default.TransactionExt(0);\n      var xtx = new _stellarXdr_generated2.default.Transaction(attrs);\n      xtx.operations(this.operations);\n      var txEnvelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTx(new _stellarXdr_generated2.default.TransactionV1Envelope({\n        tx: xtx\n      }));\n      var tx = new _transaction.Transaction(txEnvelope, this.networkPassphrase, this.supportMuxedAccounts);\n      this.source.incrementSequenceNumber();\n      return tx;\n    }\n    /**\n     * Builds a {@link FeeBumpTransaction}, enabling you to resubmit an existing\n     * transaction with a higher fee.\n     *\n     * @param {Keypair|string}  feeSource - account paying for the transaction,\n     *     in the form of either a Keypair (only the public key is used) or\n     *     an account ID (in G... or M... form, but refer to `withMuxing`)\n     * @param {string}          baseFee   - max fee willing to pay per operation\n     *     in inner transaction (**in stroops**)\n     * @param {Transaction}     innerTx   - {@link Transaction} to be bumped by\n     *     the fee bump transaction\n     * @param {string}          networkPassphrase - passphrase of the target\n     *     Stellar network (e.g. \"Public Global Stellar Network ; September 2015\",\n     *     see {@link Networks})\n     * @param {bool}            [withMuxing] - Indicates any properties in this\n     *     transaction or its underlying operations that use fully-muxed accounts\n     *     (i.e. come from an M... address) should be interpreted as such. By\n     *     default, this option is disabled until muxed accounts are mature.\n     *\n     * @todo Alongside the next major version bump, this type signature can be\n     *       changed to be less awkward: accept a MuxedAccount as the `feeSource`\n     *       rather than a keypair or string.\n     *\n     * @note Your fee-bump amount should be 10x the original fee.\n     * @see  https://developers.stellar.org/docs/glossary/fee-bumps/#replace-by-fee\n     *\n     * @returns {FeeBumpTransaction}\n     */\n\n  }], [{\n    key: 'buildFeeBumpTransaction',\n    value: function buildFeeBumpTransaction(feeSource, baseFee, innerTx, networkPassphrase, withMuxing) {\n      var innerOps = innerTx.operations.length;\n      var innerBaseFeeRate = new _bignumber2.default(innerTx.fee).div(innerOps);\n      var base = new _bignumber2.default(baseFee); // The fee rate for fee bump is at least the fee rate of the inner transaction\n\n      if (base.lessThan(innerBaseFeeRate)) {\n        throw new Error('Invalid baseFee, it should be at least ' + innerBaseFeeRate + ' stroops.');\n      }\n\n      var minBaseFee = new _bignumber2.default(BASE_FEE); // The fee rate is at least the minimum fee\n\n      if (base.lessThan(minBaseFee)) {\n        throw new Error('Invalid baseFee, it should be at least ' + minBaseFee + ' stroops.');\n      }\n\n      var innerTxEnvelope = innerTx.toEnvelope();\n\n      if (innerTxEnvelope.switch() === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0()) {\n        var v0Tx = innerTxEnvelope.v0().tx();\n        var v1Tx = new _stellarXdr_generated2.default.Transaction({\n          sourceAccount: new _stellarXdr_generated2.default.MuxedAccount.keyTypeEd25519(v0Tx.sourceAccountEd25519()),\n          fee: v0Tx.fee(),\n          seqNum: v0Tx.seqNum(),\n          timeBounds: v0Tx.timeBounds(),\n          memo: v0Tx.memo(),\n          operations: v0Tx.operations(),\n          ext: new _stellarXdr_generated2.default.TransactionExt(0)\n        });\n        innerTxEnvelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTx(new _stellarXdr_generated2.default.TransactionV1Envelope({\n          tx: v1Tx,\n          signatures: innerTxEnvelope.v0().signatures()\n        }));\n      }\n\n      var feeSourceAccount = void 0;\n\n      if ((0, _isString2.default)(feeSource)) {\n        feeSourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(feeSource, withMuxing);\n      } else {\n        feeSourceAccount = feeSource.xdrMuxedAccount();\n      }\n\n      var tx = new _stellarXdr_generated2.default.FeeBumpTransaction({\n        feeSource: feeSourceAccount,\n        fee: _stellarXdr_generated2.default.Int64.fromString(base.mul(innerOps + 1).toString()),\n        innerTx: _stellarXdr_generated2.default.FeeBumpTransactionInnerTx.envelopeTypeTx(innerTxEnvelope.v1()),\n        ext: new _stellarXdr_generated2.default.FeeBumpTransactionExt(0)\n      });\n      var feeBumpTxEnvelope = new _stellarXdr_generated2.default.FeeBumpTransactionEnvelope({\n        tx: tx,\n        signatures: []\n      });\n      var envelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTxFeeBump(feeBumpTxEnvelope);\n      return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase, withMuxing);\n    }\n    /**\n     * Build a {@link Transaction} or {@link FeeBumpTransaction} from an\n     * xdr.TransactionEnvelope.\n     *\n     * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope\n     *     object or base64 encoded string.\n     * @param {string} networkPassphrase - The network passphrase of the target\n     *     Stellar network (e.g. \"Public Global Stellar Network ; September\n     *     2015\"), see {@link Networks}.\n     * @param {bool} [withMuxing] - Indicates any properties in this transaction\n     *     or its underlying operations that use fully-muxed accounts (i.e. come\n     *     from an M... address) should be interpreted as such. By default, this\n     *     option is disabled until muxed accounts are mature.\n     *\n     * @returns {Transaction|FeeBumpTransaction}\n     */\n\n  }, {\n    key: 'fromXDR',\n    value: function fromXDR(envelope, networkPassphrase, withMuxing) {\n      if (typeof envelope === 'string') {\n        envelope = _stellarXdr_generated2.default.TransactionEnvelope.fromXDR(envelope, 'base64');\n      }\n\n      if (envelope.switch() === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxFeeBump()) {\n        return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase, withMuxing);\n      }\n\n      return new _transaction.Transaction(envelope, networkPassphrase, withMuxing);\n    }\n  }]);\n\n  return TransactionBuilder;\n}();\n/**\n * Checks whether a provided object is a valid Date.\n * @argument {Date} d date object\n * @returns {boolean}\n */\n\n\nfunction isValidDate(d) {\n  // isnan is okay here because it correctly checks for invalid date objects\n  // eslint-disable-next-line no-restricted-globals\n  return d instanceof Date && !isNaN(d);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","TransactionBuilder","TimeoutInfinite","BASE_FEE","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","isValidDate","_jsXdr","require","_bignumber","_bignumber2","_interopRequireDefault","_clone","_clone2","_isUndefined","_isUndefined2","_isString","_isString2","_stellarXdr_generated","_stellarXdr_generated2","_transaction","_fee_bump_transaction","_memo","_decode_encode_muxed_account","obj","__esModule","default","_classCallCheck","instance","TypeError","sourceAccount","opts","arguments","Error","fee","source","operations","baseFee","timebounds","memo","Memo","none","networkPassphrase","supportMuxedAccounts","withMuxing","addOperation","operation","push","addMemo","setTimeout","timeout","maxTime","timeoutTimestamp","Math","floor","Date","now","minTime","setNetworkPassphrase","enableMuxedAccounts","build","sequenceNumber","add","mul","toNumber","attrs","seqNum","SequenceNumber","fromString","toString","toXDRObject","getTime","UnsignedHyper","timeBounds","TimeBounds","decodeAddressToMuxedAccount","accountId","ext","TransactionExt","xtx","Transaction","txEnvelope","TransactionEnvelope","envelopeTypeTx","TransactionV1Envelope","tx","incrementSequenceNumber","buildFeeBumpTransaction","feeSource","innerTx","innerOps","innerBaseFeeRate","div","base","lessThan","minBaseFee","innerTxEnvelope","toEnvelope","switch","EnvelopeType","envelopeTypeTxV0","v0Tx","v0","v1Tx","MuxedAccount","keyTypeEd25519","sourceAccountEd25519","signatures","feeSourceAccount","xdrMuxedAccount","FeeBumpTransaction","Int64","FeeBumpTransactionInnerTx","v1","FeeBumpTransactionExt","feeBumpTxEnvelope","FeeBumpTransactionEnvelope","envelope","envelopeTypeTxFeeBump","fromXDR","d","isNaN"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/transaction_builder.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionBuilder = exports.TimeoutInfinite = exports.BASE_FEE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.isValidDate = isValidDate;\n\nvar _jsXdr = require('js-xdr');\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _transaction = require('./transaction');\n\nvar _fee_bump_transaction = require('./fee_bump_transaction');\n\nvar _memo = require('./memo');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Minimum base fee for transactions. If this fee is below the network\n * minimum, the transaction will fail. The more operations in the\n * transaction, the greater the required fee. Use {@link\n * Server#fetchBaseFee} to get an accurate value of minimum transaction\n * fee on the network.\n *\n * @constant\n * @see [Fees](https://developers.stellar.org/docs/glossary/fees/)\n */\nvar BASE_FEE = exports.BASE_FEE = '100'; // Stroops\n\n/**\n * @constant\n * @see {@link TransactionBuilder#setTimeout}\n * @see [Timeout](https://developers.stellar.org/api/resources/transactions/post/)\n */\nvar TimeoutInfinite = exports.TimeoutInfinite = 0;\n\n/**\n * <p>Transaction builder helps constructs a new `{@link Transaction}` using the\n * given {@link Account} as the transaction's \"source account\". The transaction\n * will use the current sequence number of the given account as its sequence\n * number and increment the given account's sequence number by one. The given\n * source account must include a private key for signing the transaction or an\n * error will be thrown.</p>\n *\n * <p>Operations can be added to the transaction via their corresponding builder\n * methods, and each returns the TransactionBuilder object so they can be\n * chained together. After adding the desired operations, call the `build()`\n * method on the `TransactionBuilder` to return a fully constructed `{@link\n * Transaction}` that can be signed. The returned transaction will contain the\n * sequence number of the source account and include the signature from the\n * source account.</p>\n *\n * <p><strong>Be careful about unsubmitted transactions!</strong> When you build\n * a transaction, stellar-sdk automatically increments the source account's\n * sequence number. If you end up not submitting this transaction and submitting\n * another one instead, it'll fail due to the sequence number being wrong. So if\n * you decide not to use a built transaction, make sure to update the source\n * account's sequence number with\n * [Server.loadAccount](https://stellar.github.io/js-stellar-sdk/Server.html#loadAccount)\n * before creating another transaction.</p>\n *\n * <p>The following code example creates a new transaction with {@link\n * Operation.createAccount} and {@link Operation.payment} operations. The\n * Transaction's source account first funds `destinationA`, then sends a payment\n * to `destinationB`. The built transaction is then signed by\n * `sourceKeypair`.</p>\n *\n * ```\n * var transaction = new TransactionBuilder(source, { fee, networkPassphrase: Networks.TESTNET })\n * .addOperation(Operation.createAccount({\n *     destination: destinationA,\n *     startingBalance: \"20\"\n * })) // <- funds and creates destinationA\n * .addOperation(Operation.payment({\n *     destination: destinationB,\n *     amount: \"100\",\n *     asset: Asset.native()\n * })) // <- sends 100 XLM to destinationB\n * .setTimeout(30)\n * .build();\n *\n * transaction.sign(sourceKeypair);\n * ```\n *\n * @constructor\n *\n * @param {Account} sourceAccount - source account for this transaction\n * @param {object}  opts          - Options object\n * @param {string}  opts.fee      - max fee you're willing to pay per\n *     operation in this transaction (**in stroops**)\n *\n * @param {object}              [opts.timebounds] - timebounds for the\n *     validity of this transaction\n * @param {number|string|Date}  [opts.timebounds.minTime] - 64-bit UNIX\n *     timestamp or Date object\n * @param {number|string|Date}  [opts.timebounds.maxTime] - 64-bit UNIX\n *     timestamp or Date object\n * @param {Memo}                [opts.memo] - memo for the transaction\n * @param {string}              [opts.networkPassphrase] passphrase of the\n *     target Stellar network (e.g. \"Public Global Stellar Network ; September\n *     2015\" for the pubnet)\n * @param {bool}                [opts.withMuxing] - Indicates any properties in\n *     this transaction or its underlying operations that use fully-muxed\n *     accounts (i.e. come from an M... address) should be interpreted as such.\n *     By default, this option is disabled until muxed accounts are mature.\n */\n\nvar TransactionBuilder = exports.TransactionBuilder = function () {\n  function TransactionBuilder(sourceAccount) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TransactionBuilder);\n\n    if (!sourceAccount) {\n      throw new Error('must specify source account for the transaction');\n    }\n\n    if ((0, _isUndefined2.default)(opts.fee)) {\n      throw new Error('must specify fee for the transaction (in stroops)');\n    }\n\n    this.source = sourceAccount;\n    this.operations = [];\n\n    this.baseFee = (0, _isUndefined2.default)(opts.fee) ? BASE_FEE : opts.fee;\n    this.timebounds = (0, _clone2.default)(opts.timebounds) || null;\n    this.memo = opts.memo || _memo.Memo.none();\n    this.networkPassphrase = opts.networkPassphrase || null;\n    this.supportMuxedAccounts = opts.withMuxing || false;\n  }\n\n  /**\n   * Adds an operation to the transaction.\n   * @param {xdr.Operation} operation The xdr operation object, use {@link Operation} static methods.\n   * @returns {TransactionBuilder}\n   */\n\n\n  _createClass(TransactionBuilder, [{\n    key: 'addOperation',\n    value: function addOperation(operation) {\n      this.operations.push(operation);\n      return this;\n    }\n\n    /**\n     * Adds a memo to the transaction.\n     * @param {Memo} memo {@link Memo} object\n     * @returns {TransactionBuilder}\n     */\n\n  }, {\n    key: 'addMemo',\n    value: function addMemo(memo) {\n      this.memo = memo;\n      return this;\n    }\n\n    /**\n     * Because of the distributed nature of the Stellar network it is possible that the status of your transaction\n     * will be determined after a long time if the network is highly congested.\n     * If you want to be sure to receive the status of the transaction within a given period you should set the\n     * {@link TimeBounds} with <code>maxTime</code> on the transaction (this is what <code>setTimeout</code> does\n     * internally; if there's <code>minTime</code> set but no <code>maxTime</code> it will be added).\n     * Call to <code>TransactionBuilder.setTimeout</code> is required if Transaction does not have <code>max_time</code> set.\n     * If you don't want to set timeout, use <code>{@link TimeoutInfinite}</code>. In general you should set\n     * <code>{@link TimeoutInfinite}</code> only in smart contracts.\n     *\n     * Please note that Horizon may still return <code>504 Gateway Timeout</code> error, even for short timeouts.\n     * In such case you need to resubmit the same transaction again without making any changes to receive a status.\n     * This method is using the machine system time (UTC), make sure it is set correctly.\n     * @param {number} timeout Number of seconds the transaction is good. Can't be negative.\n     * If the value is `0`, the transaction is good indefinitely.\n     * @return {TransactionBuilder}\n     * @see TimeoutInfinite\n     */\n\n  }, {\n    key: 'setTimeout',\n    value: function setTimeout(timeout) {\n      if (this.timebounds !== null && this.timebounds.maxTime > 0) {\n        throw new Error('TimeBounds.max_time has been already set - setting timeout would overwrite it.');\n      }\n\n      if (timeout < 0) {\n        throw new Error('timeout cannot be negative');\n      }\n\n      if (timeout > 0) {\n        var timeoutTimestamp = Math.floor(Date.now() / 1000) + timeout;\n        if (this.timebounds === null) {\n          this.timebounds = { minTime: 0, maxTime: timeoutTimestamp };\n        } else {\n          this.timebounds = {\n            minTime: this.timebounds.minTime,\n            maxTime: timeoutTimestamp\n          };\n        }\n      } else {\n        this.timebounds = {\n          minTime: 0,\n          maxTime: 0\n        };\n      }\n\n      return this;\n    }\n\n    /**\n     * Set network nassphrase for the Transaction that will be built.\n     *\n     * @param {string} [networkPassphrase] passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {TransactionBuilder}\n     */\n\n  }, {\n    key: 'setNetworkPassphrase',\n    value: function setNetworkPassphrase(networkPassphrase) {\n      this.networkPassphrase = networkPassphrase;\n      return this;\n    }\n\n    /**\n     * Enable support for muxed accounts for the Transaction that will be built.\n     * @returns {TransactionBuilder}\n     */\n\n  }, {\n    key: 'enableMuxedAccounts',\n    value: function enableMuxedAccounts() {\n      this.supportMuxedAccounts = true;\n      return this;\n    }\n\n    /**\n     * This will build the transaction.\n     * It will also increment the source account's sequence number by 1.\n     * @returns {Transaction} This method will return the built {@link Transaction}.\n     */\n\n  }, {\n    key: 'build',\n    value: function build() {\n      var sequenceNumber = new _bignumber2.default(this.source.sequenceNumber()).add(1);\n      var fee = new _bignumber2.default(this.baseFee).mul(this.operations.length).toNumber();\n      var attrs = {\n        fee: fee,\n        seqNum: _stellarXdr_generated2.default.SequenceNumber.fromString(sequenceNumber.toString()),\n        memo: this.memo ? this.memo.toXDRObject() : null\n      };\n\n      if (this.timebounds === null || typeof this.timebounds.minTime === 'undefined' || typeof this.timebounds.maxTime === 'undefined') {\n        throw new Error('TimeBounds has to be set or you must call setTimeout(TimeoutInfinite).');\n      }\n\n      if (isValidDate(this.timebounds.minTime)) {\n        this.timebounds.minTime = this.timebounds.minTime.getTime() / 1000;\n      }\n      if (isValidDate(this.timebounds.maxTime)) {\n        this.timebounds.maxTime = this.timebounds.maxTime.getTime() / 1000;\n      }\n\n      this.timebounds.minTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.minTime.toString());\n      this.timebounds.maxTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.maxTime.toString());\n\n      attrs.timeBounds = new _stellarXdr_generated2.default.TimeBounds(this.timebounds);\n      attrs.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(this.source.accountId(), this.supportMuxedAccounts);\n      attrs.ext = new _stellarXdr_generated2.default.TransactionExt(0);\n\n      var xtx = new _stellarXdr_generated2.default.Transaction(attrs);\n      xtx.operations(this.operations);\n      var txEnvelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTx(new _stellarXdr_generated2.default.TransactionV1Envelope({ tx: xtx }));\n\n      var tx = new _transaction.Transaction(txEnvelope, this.networkPassphrase, this.supportMuxedAccounts);\n\n      this.source.incrementSequenceNumber();\n\n      return tx;\n    }\n\n    /**\n     * Builds a {@link FeeBumpTransaction}, enabling you to resubmit an existing\n     * transaction with a higher fee.\n     *\n     * @param {Keypair|string}  feeSource - account paying for the transaction,\n     *     in the form of either a Keypair (only the public key is used) or\n     *     an account ID (in G... or M... form, but refer to `withMuxing`)\n     * @param {string}          baseFee   - max fee willing to pay per operation\n     *     in inner transaction (**in stroops**)\n     * @param {Transaction}     innerTx   - {@link Transaction} to be bumped by\n     *     the fee bump transaction\n     * @param {string}          networkPassphrase - passphrase of the target\n     *     Stellar network (e.g. \"Public Global Stellar Network ; September 2015\",\n     *     see {@link Networks})\n     * @param {bool}            [withMuxing] - Indicates any properties in this\n     *     transaction or its underlying operations that use fully-muxed accounts\n     *     (i.e. come from an M... address) should be interpreted as such. By\n     *     default, this option is disabled until muxed accounts are mature.\n     *\n     * @todo Alongside the next major version bump, this type signature can be\n     *       changed to be less awkward: accept a MuxedAccount as the `feeSource`\n     *       rather than a keypair or string.\n     *\n     * @note Your fee-bump amount should be 10x the original fee.\n     * @see  https://developers.stellar.org/docs/glossary/fee-bumps/#replace-by-fee\n     *\n     * @returns {FeeBumpTransaction}\n     */\n\n  }], [{\n    key: 'buildFeeBumpTransaction',\n    value: function buildFeeBumpTransaction(feeSource, baseFee, innerTx, networkPassphrase, withMuxing) {\n      var innerOps = innerTx.operations.length;\n      var innerBaseFeeRate = new _bignumber2.default(innerTx.fee).div(innerOps);\n      var base = new _bignumber2.default(baseFee);\n\n      // The fee rate for fee bump is at least the fee rate of the inner transaction\n      if (base.lessThan(innerBaseFeeRate)) {\n        throw new Error('Invalid baseFee, it should be at least ' + innerBaseFeeRate + ' stroops.');\n      }\n\n      var minBaseFee = new _bignumber2.default(BASE_FEE);\n\n      // The fee rate is at least the minimum fee\n      if (base.lessThan(minBaseFee)) {\n        throw new Error('Invalid baseFee, it should be at least ' + minBaseFee + ' stroops.');\n      }\n\n      var innerTxEnvelope = innerTx.toEnvelope();\n      if (innerTxEnvelope.switch() === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0()) {\n        var v0Tx = innerTxEnvelope.v0().tx();\n        var v1Tx = new _stellarXdr_generated2.default.Transaction({\n          sourceAccount: new _stellarXdr_generated2.default.MuxedAccount.keyTypeEd25519(v0Tx.sourceAccountEd25519()),\n          fee: v0Tx.fee(),\n          seqNum: v0Tx.seqNum(),\n          timeBounds: v0Tx.timeBounds(),\n          memo: v0Tx.memo(),\n          operations: v0Tx.operations(),\n          ext: new _stellarXdr_generated2.default.TransactionExt(0)\n        });\n        innerTxEnvelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTx(new _stellarXdr_generated2.default.TransactionV1Envelope({\n          tx: v1Tx,\n          signatures: innerTxEnvelope.v0().signatures()\n        }));\n      }\n\n      var feeSourceAccount = void 0;\n      if ((0, _isString2.default)(feeSource)) {\n        feeSourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(feeSource, withMuxing);\n      } else {\n        feeSourceAccount = feeSource.xdrMuxedAccount();\n      }\n\n      var tx = new _stellarXdr_generated2.default.FeeBumpTransaction({\n        feeSource: feeSourceAccount,\n        fee: _stellarXdr_generated2.default.Int64.fromString(base.mul(innerOps + 1).toString()),\n        innerTx: _stellarXdr_generated2.default.FeeBumpTransactionInnerTx.envelopeTypeTx(innerTxEnvelope.v1()),\n        ext: new _stellarXdr_generated2.default.FeeBumpTransactionExt(0)\n      });\n      var feeBumpTxEnvelope = new _stellarXdr_generated2.default.FeeBumpTransactionEnvelope({\n        tx: tx,\n        signatures: []\n      });\n      var envelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTxFeeBump(feeBumpTxEnvelope);\n\n      return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase, withMuxing);\n    }\n\n    /**\n     * Build a {@link Transaction} or {@link FeeBumpTransaction} from an\n     * xdr.TransactionEnvelope.\n     *\n     * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope\n     *     object or base64 encoded string.\n     * @param {string} networkPassphrase - The network passphrase of the target\n     *     Stellar network (e.g. \"Public Global Stellar Network ; September\n     *     2015\"), see {@link Networks}.\n     * @param {bool} [withMuxing] - Indicates any properties in this transaction\n     *     or its underlying operations that use fully-muxed accounts (i.e. come\n     *     from an M... address) should be interpreted as such. By default, this\n     *     option is disabled until muxed accounts are mature.\n     *\n     * @returns {Transaction|FeeBumpTransaction}\n     */\n\n  }, {\n    key: 'fromXDR',\n    value: function fromXDR(envelope, networkPassphrase, withMuxing) {\n      if (typeof envelope === 'string') {\n        envelope = _stellarXdr_generated2.default.TransactionEnvelope.fromXDR(envelope, 'base64');\n      }\n\n      if (envelope.switch() === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxFeeBump()) {\n        return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase, withMuxing);\n      }\n\n      return new _transaction.Transaction(envelope, networkPassphrase, withMuxing);\n    }\n  }]);\n\n  return TransactionBuilder;\n}();\n\n/**\n * Checks whether a provided object is a valid Date.\n * @argument {Date} d date object\n * @returns {boolean}\n */\n\n\nfunction isValidDate(d) {\n  // isnan is okay here because it correctly checks for invalid date objects\n  // eslint-disable-next-line no-restricted-globals\n  return d instanceof Date && !isNaN(d);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}