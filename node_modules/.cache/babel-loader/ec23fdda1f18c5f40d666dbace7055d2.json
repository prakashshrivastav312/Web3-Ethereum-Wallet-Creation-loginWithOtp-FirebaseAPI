{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RippleAPIBroadcast = void 0;\n\nconst api_1 = require(\"./api\");\n\nclass RippleAPIBroadcast extends api_1.RippleAPI {\n  constructor(servers) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(options);\n    this.ledgerVersion = undefined;\n    const apis = servers.map(server => new api_1.RippleAPI(Object.assign({}, options, {\n      server\n    })));\n    this._apis = apis;\n    this.getMethodNames().forEach(name => {\n      this[name] = function () {\n        return Promise.race(apis.map(api => api[name](...arguments)));\n      };\n    });\n\n    this.connect = function () {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield Promise.all(apis.map(api => api.connect()));\n      });\n    };\n\n    this.disconnect = function () {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield Promise.all(apis.map(api => api.disconnect()));\n      });\n    };\n\n    this.isConnected = function () {\n      return apis.map(api => api.isConnected()).every(Boolean);\n    };\n\n    const defaultAPI = apis[0];\n    const syncMethods = ['sign', 'generateAddress', 'computeLedgerHash'];\n    syncMethods.forEach(name => {\n      this[name] = defaultAPI[name].bind(defaultAPI);\n    });\n    apis.forEach(api => {\n      api.on('ledger', this.onLedgerEvent.bind(this));\n      api.on('error', (errorCode, errorMessage, data) => this.emit('error', errorCode, errorMessage, data));\n    });\n  }\n\n  onLedgerEvent(ledger) {\n    if (ledger.ledgerVersion > this.ledgerVersion || this.ledgerVersion == null) {\n      this.ledgerVersion = ledger.ledgerVersion;\n      this.emit('ledger', ledger);\n    }\n  }\n\n  getMethodNames() {\n    const methodNames = [];\n    const rippleAPI = this._apis[0];\n\n    for (const name of Object.getOwnPropertyNames(rippleAPI)) {\n      if (typeof rippleAPI[name] === 'function') {\n        methodNames.push(name);\n      }\n    }\n\n    return methodNames;\n  }\n\n}\n\nexports.RippleAPIBroadcast = RippleAPIBroadcast;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA,MAAMA,kBAAN,SAAiCC,eAAjC,CAA0C;EAIxCC,YAAYC,OAAZ,EAA6C;IAAA,IAAxBC,OAAwB,uEAAF,EAAE;IAC3C,MAAMA,OAAN;IAJF,qBAAoCC,SAApC;IAME,MAAMC,IAAI,GAAgBH,OAAO,CAACI,GAAR,CACvBC,MAAD,IAAY,IAAIP,eAAJ,CAAcQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,OAAlB,EAA2B;MAACI;IAAD,CAA3B,CAAd,CADY,CAA1B;IAKA,KAAKG,KAAL,GAAaL,IAAb;IAEA,KAAKM,cAAL,GAAsBC,OAAtB,CAA+BC,IAAD,IAAS;MACrC,KAAKA,IAAL,IAAa;QAEX,OAAOC,OAAO,CAACC,IAAR,CAAaV,IAAI,CAACC,GAAL,CAAUU,GAAD,IAASA,GAAG,CAACH,IAAD,CAAH,CAAU,GAAGI,SAAb,CAAlB,CAAb,CAAP;MACD,CAHD;IAID,CALD;;IAQA,KAAKC,OAAL,GAAe;;QACb,MAAMJ,OAAO,CAACK,GAAR,CAAYd,IAAI,CAACC,GAAL,CAAUU,GAAD,IAASA,GAAG,CAACE,OAAJ,EAAlB,CAAZ,CAAN;MACD;IAAA,CAFD;;IAGA,KAAKE,UAAL,GAAkB;;QAChB,MAAMN,OAAO,CAACK,GAAR,CAAYd,IAAI,CAACC,GAAL,CAAUU,GAAD,IAASA,GAAG,CAACI,UAAJ,EAAlB,CAAZ,CAAN;MACD;IAAA,CAFD;;IAGA,KAAKC,WAAL,GAAmB;MACjB,OAAOhB,IAAI,CAACC,GAAL,CAAUU,GAAD,IAASA,GAAG,CAACK,WAAJ,EAAlB,EAAqCC,KAArC,CAA2CC,OAA3C,CAAP;IACD,CAFD;;IAKA,MAAMC,UAAU,GAAGnB,IAAI,CAAC,CAAD,CAAvB;IACA,MAAMoB,WAAW,GAAG,CAAC,MAAD,EAAS,iBAAT,EAA4B,mBAA5B,CAApB;IACAA,WAAW,CAACb,OAAZ,CAAqBC,IAAD,IAAS;MAC3B,KAAKA,IAAL,IAAaW,UAAU,CAACX,IAAD,CAAV,CAAiBa,IAAjB,CAAsBF,UAAtB,CAAb;IACD,CAFD;IAIAnB,IAAI,CAACO,OAAL,CAAcI,GAAD,IAAQ;MACnBA,GAAG,CAACW,EAAJ,CAAO,QAAP,EAAiB,KAAKC,aAAL,CAAmBF,IAAnB,CAAwB,IAAxB,CAAjB;MACAV,GAAG,CAACW,EAAJ,CAAO,OAAP,EAAgB,CAACE,SAAD,EAAYC,YAAZ,EAA0BC,IAA1B,KACd,KAAKC,IAAL,CAAU,OAAV,EAAmBH,SAAnB,EAA8BC,YAA9B,EAA4CC,IAA5C,CADF;IAGD,CALD;EAMD;;EAEDH,aAAa,CAACK,MAAD,EAAO;IAClB,IACEA,MAAM,CAACC,aAAP,GAAuB,KAAKA,aAA5B,IACA,KAAKA,aAAL,IAAsB,IAFxB,EAGE;MACA,KAAKA,aAAL,GAAqBD,MAAM,CAACC,aAA5B;MACA,KAAKF,IAAL,CAAU,QAAV,EAAoBC,MAApB;IACD;EACF;;EAEDtB,cAAc;IACZ,MAAMwB,WAAW,GAAa,EAA9B;IACA,MAAMC,SAAS,GAAG,KAAK1B,KAAL,CAAW,CAAX,CAAlB;;IACA,KAAK,MAAMG,IAAX,IAAmBL,MAAM,CAAC6B,mBAAP,CAA2BD,SAA3B,CAAnB,EAA0D;MACxD,IAAI,OAAOA,SAAS,CAACvB,IAAD,CAAhB,KAA2B,UAA/B,EAA2C;QACzCsB,WAAW,CAACG,IAAZ,CAAiBzB,IAAjB;MACD;IACF;;IACD,OAAOsB,WAAP;EACD;;AAlEuC;;AAqElCI","names":["RippleAPIBroadcast","api_1","constructor","servers","options","undefined","apis","map","server","Object","assign","_apis","getMethodNames","forEach","name","Promise","race","api","arguments","connect","all","disconnect","isConnected","every","Boolean","defaultAPI","syncMethods","bind","on","onLedgerEvent","errorCode","errorMessage","data","emit","ledger","ledgerVersion","methodNames","rippleAPI","getOwnPropertyNames","push","exports"],"sourceRoot":"","sources":["../../src/broadcast.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}