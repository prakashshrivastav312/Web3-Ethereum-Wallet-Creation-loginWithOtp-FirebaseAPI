{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pathPaymentStrictReceive = pathPaymentStrictReceive;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Creates a PathPaymentStrictReceive operation.\n *\n * A `PathPaymentStrictReceive` operation sends the specified amount to the\n * destination account. It credits the destination with `destAmount` of\n * `destAsset`, while debiting at most `sendMax` of `sendAsset` from the source.\n * The transfer optionally occurs through a path. XLM payments create the\n * destination account if it does not exist.\n *\n * @function\n * @alias Operation.pathPaymentStrictReceive\n * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-receive\n *\n * @param {object}  opts - Options object\n * @param {Asset}   opts.sendAsset    - asset to pay with\n * @param {string}  opts.sendMax      - maximum amount of sendAsset to send\n * @param {string}  opts.destination  - destination account to send to\n * @param {Asset}   opts.destAsset    - asset the destination will receive\n * @param {string}  opts.destAmount   - amount the destination receives\n * @param {Asset[]} opts.path         - array of Asset objects to use as the path\n * @param {bool}    [opts.withMuxing] - indicates that some parameters in the\n *     operation are M... addresses that should be interpreted fully as a muxed\n *     account. By default, this option is disabled until muxed accounts are\n *     mature.\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   the resulting path payment operation\n *     (xdr.PathPaymentStrictReceiveOp)\n */\n\n\nfunction pathPaymentStrictReceive(opts) {\n  switch (true) {\n    case !opts.sendAsset:\n      throw new Error('Must specify a send asset');\n\n    case !this.isValidAmount(opts.sendMax):\n      throw new TypeError(this.constructAmountRequirementsError('sendMax'));\n\n    case !opts.destAsset:\n      throw new Error('Must provide a destAsset for a payment operation');\n\n    case !this.isValidAmount(opts.destAmount):\n      throw new TypeError(this.constructAmountRequirementsError('destAmount'));\n\n    default:\n      break;\n  }\n\n  var attributes = {};\n  attributes.sendAsset = opts.sendAsset.toXDRObject();\n  attributes.sendMax = this._toXDRAmount(opts.sendMax);\n\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination, opts.withMuxing);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n\n  attributes.destAsset = opts.destAsset.toXDRObject();\n  attributes.destAmount = this._toXDRAmount(opts.destAmount);\n  var path = opts.path ? opts.path : [];\n  attributes.path = path.map(function (x) {\n    return x.toXDRObject();\n  });\n  var payment = new _stellarXdr_generated2.default.PathPaymentStrictReceiveOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.pathPaymentStrictReceive(payment);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","pathPaymentStrictReceive","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_decode_encode_muxed_account","obj","__esModule","default","opts","sendAsset","Error","isValidAmount","sendMax","TypeError","constructAmountRequirementsError","destAsset","destAmount","attributes","toXDRObject","_toXDRAmount","destination","decodeAddressToMuxedAccount","withMuxing","e","path","map","x","payment","PathPaymentStrictReceiveOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operations/path_payment_strict_receive.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pathPaymentStrictReceive = pathPaymentStrictReceive;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _decode_encode_muxed_account = require('../util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a PathPaymentStrictReceive operation.\n *\n * A `PathPaymentStrictReceive` operation sends the specified amount to the\n * destination account. It credits the destination with `destAmount` of\n * `destAsset`, while debiting at most `sendMax` of `sendAsset` from the source.\n * The transfer optionally occurs through a path. XLM payments create the\n * destination account if it does not exist.\n *\n * @function\n * @alias Operation.pathPaymentStrictReceive\n * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-receive\n *\n * @param {object}  opts - Options object\n * @param {Asset}   opts.sendAsset    - asset to pay with\n * @param {string}  opts.sendMax      - maximum amount of sendAsset to send\n * @param {string}  opts.destination  - destination account to send to\n * @param {Asset}   opts.destAsset    - asset the destination will receive\n * @param {string}  opts.destAmount   - amount the destination receives\n * @param {Asset[]} opts.path         - array of Asset objects to use as the path\n * @param {bool}    [opts.withMuxing] - indicates that some parameters in the\n *     operation are M... addresses that should be interpreted fully as a muxed\n *     account. By default, this option is disabled until muxed accounts are\n *     mature.\n * @param {string}  [opts.source]     - The source account for the payment.\n *     Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   the resulting path payment operation\n *     (xdr.PathPaymentStrictReceiveOp)\n */\nfunction pathPaymentStrictReceive(opts) {\n  switch (true) {\n    case !opts.sendAsset:\n      throw new Error('Must specify a send asset');\n    case !this.isValidAmount(opts.sendMax):\n      throw new TypeError(this.constructAmountRequirementsError('sendMax'));\n    case !opts.destAsset:\n      throw new Error('Must provide a destAsset for a payment operation');\n    case !this.isValidAmount(opts.destAmount):\n      throw new TypeError(this.constructAmountRequirementsError('destAmount'));\n    default:\n      break;\n  }\n\n  var attributes = {};\n  attributes.sendAsset = opts.sendAsset.toXDRObject();\n  attributes.sendMax = this._toXDRAmount(opts.sendMax);\n\n  try {\n    attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination, opts.withMuxing);\n  } catch (e) {\n    throw new Error('destination is invalid');\n  }\n\n  attributes.destAsset = opts.destAsset.toXDRObject();\n  attributes.destAmount = this._toXDRAmount(opts.destAmount);\n\n  var path = opts.path ? opts.path : [];\n  attributes.path = path.map(function (x) {\n    return x.toXDRObject();\n  });\n\n  var payment = new _stellarXdr_generated2.default.PathPaymentStrictReceiveOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.pathPaymentStrictReceive(payment);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,oCAAD,CAAnC;;AAEA,IAAIC,sBAAsB,GAAGC,sBAAsB,CAACH,qBAAD,CAAnD;;AAEA,IAAII,4BAA4B,GAAGH,OAAO,CAAC,qCAAD,CAA1C;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEE,OAAO,EAAEF;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASN,wBAAT,CAAkCS,IAAlC,EAAwC;EACtC,QAAQ,IAAR;IACE,KAAK,CAACA,IAAI,CAACC,SAAX;MACE,MAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;;IACF,KAAK,CAAC,KAAKC,aAAL,CAAmBH,IAAI,CAACI,OAAxB,CAAN;MACE,MAAM,IAAIC,SAAJ,CAAc,KAAKC,gCAAL,CAAsC,SAAtC,CAAd,CAAN;;IACF,KAAK,CAACN,IAAI,CAACO,SAAX;MACE,MAAM,IAAIL,KAAJ,CAAU,kDAAV,CAAN;;IACF,KAAK,CAAC,KAAKC,aAAL,CAAmBH,IAAI,CAACQ,UAAxB,CAAN;MACE,MAAM,IAAIH,SAAJ,CAAc,KAAKC,gCAAL,CAAsC,YAAtC,CAAd,CAAN;;IACF;MACE;EAVJ;;EAaA,IAAIG,UAAU,GAAG,EAAjB;EACAA,UAAU,CAACR,SAAX,GAAuBD,IAAI,CAACC,SAAL,CAAeS,WAAf,EAAvB;EACAD,UAAU,CAACL,OAAX,GAAqB,KAAKO,YAAL,CAAkBX,IAAI,CAACI,OAAvB,CAArB;;EAEA,IAAI;IACFK,UAAU,CAACG,WAAX,GAAyB,CAAC,GAAGhB,4BAA4B,CAACiB,2BAAjC,EAA8Db,IAAI,CAACY,WAAnE,EAAgFZ,IAAI,CAACc,UAArF,CAAzB;EACD,CAFD,CAEE,OAAOC,CAAP,EAAU;IACV,MAAM,IAAIb,KAAJ,CAAU,wBAAV,CAAN;EACD;;EAEDO,UAAU,CAACF,SAAX,GAAuBP,IAAI,CAACO,SAAL,CAAeG,WAAf,EAAvB;EACAD,UAAU,CAACD,UAAX,GAAwB,KAAKG,YAAL,CAAkBX,IAAI,CAACQ,UAAvB,CAAxB;EAEA,IAAIQ,IAAI,GAAGhB,IAAI,CAACgB,IAAL,GAAYhB,IAAI,CAACgB,IAAjB,GAAwB,EAAnC;EACAP,UAAU,CAACO,IAAX,GAAkBA,IAAI,CAACC,GAAL,CAAS,UAAUC,CAAV,EAAa;IACtC,OAAOA,CAAC,CAACR,WAAF,EAAP;EACD,CAFiB,CAAlB;EAIA,IAAIS,OAAO,GAAG,IAAIzB,sBAAsB,CAACK,OAAvB,CAA+BqB,0BAAnC,CAA8DX,UAA9D,CAAd;EAEA,IAAIY,YAAY,GAAG,EAAnB;EACAA,YAAY,CAACC,IAAb,GAAoB5B,sBAAsB,CAACK,OAAvB,CAA+BwB,aAA/B,CAA6ChC,wBAA7C,CAAsE4B,OAAtE,CAApB;EACA,KAAKK,gBAAL,CAAsBH,YAAtB,EAAoCrB,IAApC;EAEA,OAAO,IAAIN,sBAAsB,CAACK,OAAvB,CAA+B0B,SAAnC,CAA6CJ,YAA7C,CAAP;AACD"},"metadata":{},"sourceType":"script"}