{"ast":null,"code":"// FIXME: Kind of a weird way to throw exceptions, consider removing\nvar assert = require('assert');\n\nvar BigInteger = require('./bigi');\n/**\n * Turns a byte array into a big integer.\n *\n * This function will interpret a byte array as a big integer in big\n * endian notation.\n */\n\n\nBigInteger.fromByteArrayUnsigned = function (byteArray) {\n  // BigInteger expects a DER integer conformant byte array\n  if (byteArray[0] & 0x80) {\n    return new BigInteger([0].concat(byteArray));\n  }\n\n  return new BigInteger(byteArray);\n};\n/**\n * Returns a byte array representation of the big integer.\n *\n * This returns the absolute of the contained value in big endian\n * form. A value of zero results in an empty array.\n */\n\n\nBigInteger.prototype.toByteArrayUnsigned = function () {\n  var byteArray = this.toByteArray();\n  return byteArray[0] === 0 ? byteArray.slice(1) : byteArray;\n};\n\nBigInteger.fromDERInteger = function (byteArray) {\n  return new BigInteger(byteArray);\n};\n/*\n * Converts BigInteger to a DER integer representation.\n *\n * The format for this value uses the most significant bit as a sign\n * bit.  If the most significant bit is already set and the integer is\n * positive, a 0x00 is prepended.\n *\n * Examples:\n *\n *      0 =>     0x00\n *      1 =>     0x01\n *     -1 =>     0xff\n *    127 =>     0x7f\n *   -127 =>     0x81\n *    128 =>   0x0080\n *   -128 =>     0x80\n *    255 =>   0x00ff\n *   -255 =>   0xff01\n *  16300 =>   0x3fac\n * -16300 =>   0xc054\n *  62300 => 0x00f35c\n * -62300 => 0xff0ca4\n*/\n\n\nBigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray;\n\nBigInteger.fromBuffer = function (buffer) {\n  // BigInteger expects a DER integer conformant byte array\n  if (buffer[0] & 0x80) {\n    var byteArray = Array.prototype.slice.call(buffer);\n    return new BigInteger([0].concat(byteArray));\n  }\n\n  return new BigInteger(buffer);\n};\n\nBigInteger.fromHex = function (hex) {\n  if (hex === '') return BigInteger.ZERO;\n  assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string');\n  assert.equal(hex.length % 2, 0, 'Incomplete hex');\n  return new BigInteger(hex, 16);\n};\n\nBigInteger.prototype.toBuffer = function (size) {\n  var byteArray = this.toByteArrayUnsigned();\n  var zeros = [];\n  var padding = size - byteArray.length;\n\n  while (zeros.length < padding) zeros.push(0);\n\n  return new Buffer(zeros.concat(byteArray));\n};\n\nBigInteger.prototype.toHex = function (size) {\n  return this.toBuffer(size).toString('hex');\n};","map":{"version":3,"names":["assert","require","BigInteger","fromByteArrayUnsigned","byteArray","concat","prototype","toByteArrayUnsigned","toByteArray","slice","fromDERInteger","toDERInteger","fromBuffer","buffer","Array","call","fromHex","hex","ZERO","equal","match","length","toBuffer","size","zeros","padding","push","Buffer","toHex","toString"],"sources":["C:/Users/acer/node_modules/bigi/lib/convert.js"],"sourcesContent":["// FIXME: Kind of a weird way to throw exceptions, consider removing\nvar assert = require('assert')\nvar BigInteger = require('./bigi')\n\n/**\n * Turns a byte array into a big integer.\n *\n * This function will interpret a byte array as a big integer in big\n * endian notation.\n */\nBigInteger.fromByteArrayUnsigned = function(byteArray) {\n  // BigInteger expects a DER integer conformant byte array\n  if (byteArray[0] & 0x80) {\n    return new BigInteger([0].concat(byteArray))\n  }\n\n  return new BigInteger(byteArray)\n}\n\n/**\n * Returns a byte array representation of the big integer.\n *\n * This returns the absolute of the contained value in big endian\n * form. A value of zero results in an empty array.\n */\nBigInteger.prototype.toByteArrayUnsigned = function() {\n  var byteArray = this.toByteArray()\n  return byteArray[0] === 0 ? byteArray.slice(1) : byteArray\n}\n\nBigInteger.fromDERInteger = function(byteArray) {\n  return new BigInteger(byteArray)\n}\n\n/*\n * Converts BigInteger to a DER integer representation.\n *\n * The format for this value uses the most significant bit as a sign\n * bit.  If the most significant bit is already set and the integer is\n * positive, a 0x00 is prepended.\n *\n * Examples:\n *\n *      0 =>     0x00\n *      1 =>     0x01\n *     -1 =>     0xff\n *    127 =>     0x7f\n *   -127 =>     0x81\n *    128 =>   0x0080\n *   -128 =>     0x80\n *    255 =>   0x00ff\n *   -255 =>   0xff01\n *  16300 =>   0x3fac\n * -16300 =>   0xc054\n *  62300 => 0x00f35c\n * -62300 => 0xff0ca4\n*/\nBigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray\n\nBigInteger.fromBuffer = function(buffer) {\n  // BigInteger expects a DER integer conformant byte array\n  if (buffer[0] & 0x80) {\n    var byteArray = Array.prototype.slice.call(buffer)\n\n    return new BigInteger([0].concat(byteArray))\n  }\n\n  return new BigInteger(buffer)\n}\n\nBigInteger.fromHex = function(hex) {\n  if (hex === '') return BigInteger.ZERO\n\n  assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string')\n  assert.equal(hex.length % 2, 0, 'Incomplete hex')\n  return new BigInteger(hex, 16)\n}\n\nBigInteger.prototype.toBuffer = function(size) {\n  var byteArray = this.toByteArrayUnsigned()\n  var zeros = []\n\n  var padding = size - byteArray.length\n  while (zeros.length < padding) zeros.push(0)\n\n  return new Buffer(zeros.concat(byteArray))\n}\n\nBigInteger.prototype.toHex = function(size) {\n  return this.toBuffer(size).toString('hex')\n}\n"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,QAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAC,UAAU,CAACC,qBAAX,GAAmC,UAASC,SAAT,EAAoB;EACrD;EACA,IAAIA,SAAS,CAAC,CAAD,CAAT,GAAe,IAAnB,EAAyB;IACvB,OAAO,IAAIF,UAAJ,CAAe,CAAC,CAAD,EAAIG,MAAJ,CAAWD,SAAX,CAAf,CAAP;EACD;;EAED,OAAO,IAAIF,UAAJ,CAAeE,SAAf,CAAP;AACD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;;;AACAF,UAAU,CAACI,SAAX,CAAqBC,mBAArB,GAA2C,YAAW;EACpD,IAAIH,SAAS,GAAG,KAAKI,WAAL,EAAhB;EACA,OAAOJ,SAAS,CAAC,CAAD,CAAT,KAAiB,CAAjB,GAAqBA,SAAS,CAACK,KAAV,CAAgB,CAAhB,CAArB,GAA0CL,SAAjD;AACD,CAHD;;AAKAF,UAAU,CAACQ,cAAX,GAA4B,UAASN,SAAT,EAAoB;EAC9C,OAAO,IAAIF,UAAJ,CAAeE,SAAf,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,UAAU,CAACI,SAAX,CAAqBK,YAArB,GAAoCT,UAAU,CAACI,SAAX,CAAqBE,WAAzD;;AAEAN,UAAU,CAACU,UAAX,GAAwB,UAASC,MAAT,EAAiB;EACvC;EACA,IAAIA,MAAM,CAAC,CAAD,CAAN,GAAY,IAAhB,EAAsB;IACpB,IAAIT,SAAS,GAAGU,KAAK,CAACR,SAAN,CAAgBG,KAAhB,CAAsBM,IAAtB,CAA2BF,MAA3B,CAAhB;IAEA,OAAO,IAAIX,UAAJ,CAAe,CAAC,CAAD,EAAIG,MAAJ,CAAWD,SAAX,CAAf,CAAP;EACD;;EAED,OAAO,IAAIF,UAAJ,CAAeW,MAAf,CAAP;AACD,CATD;;AAWAX,UAAU,CAACc,OAAX,GAAqB,UAASC,GAAT,EAAc;EACjC,IAAIA,GAAG,KAAK,EAAZ,EAAgB,OAAOf,UAAU,CAACgB,IAAlB;EAEhBlB,MAAM,CAACmB,KAAP,CAAaF,GAAb,EAAkBA,GAAG,CAACG,KAAJ,CAAU,eAAV,CAAlB,EAA8C,oBAA9C;EACApB,MAAM,CAACmB,KAAP,CAAaF,GAAG,CAACI,MAAJ,GAAa,CAA1B,EAA6B,CAA7B,EAAgC,gBAAhC;EACA,OAAO,IAAInB,UAAJ,CAAee,GAAf,EAAoB,EAApB,CAAP;AACD,CAND;;AAQAf,UAAU,CAACI,SAAX,CAAqBgB,QAArB,GAAgC,UAASC,IAAT,EAAe;EAC7C,IAAInB,SAAS,GAAG,KAAKG,mBAAL,EAAhB;EACA,IAAIiB,KAAK,GAAG,EAAZ;EAEA,IAAIC,OAAO,GAAGF,IAAI,GAAGnB,SAAS,CAACiB,MAA/B;;EACA,OAAOG,KAAK,CAACH,MAAN,GAAeI,OAAtB,EAA+BD,KAAK,CAACE,IAAN,CAAW,CAAX;;EAE/B,OAAO,IAAIC,MAAJ,CAAWH,KAAK,CAACnB,MAAN,CAAaD,SAAb,CAAX,CAAP;AACD,CARD;;AAUAF,UAAU,CAACI,SAAX,CAAqBsB,KAArB,GAA6B,UAASL,IAAT,EAAe;EAC1C,OAAO,KAAKD,QAAL,CAAcC,IAAd,EAAoBM,QAApB,CAA6B,KAA7B,CAAP;AACD,CAFD"},"metadata":{},"sourceType":"script"}