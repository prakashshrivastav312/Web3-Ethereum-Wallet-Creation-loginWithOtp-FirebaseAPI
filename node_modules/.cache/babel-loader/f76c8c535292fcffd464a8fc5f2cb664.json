{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UInt64 = void 0;\n\nvar uint_1 = require(\"./uint\");\n\nvar bigInt = require(\"big-integer\");\n\nvar big_integer_1 = require(\"big-integer\");\n\nvar buffer_1 = require(\"buffer/\");\n\nvar HEX_REGEX = /^[a-fA-F0-9]{1,16}$/;\nvar mask = bigInt(0x00000000ffffffff);\n/**\n * Derived UInt class for serializing/deserializing 64 bit UInt\n */\n\nvar UInt64 =\n/** @class */\nfunction (_super) {\n  __extends(UInt64, _super);\n\n  function UInt64(bytes) {\n    return _super.call(this, bytes !== null && bytes !== void 0 ? bytes : UInt64.defaultUInt64.bytes) || this;\n  }\n\n  UInt64.fromParser = function (parser) {\n    return new UInt64(parser.read(UInt64.width));\n  };\n  /**\n   * Construct a UInt64 object\n   *\n   * @param val A UInt64, hex-string, bigInt, or number\n   * @returns A UInt64 object\n   */\n\n\n  UInt64.from = function (val) {\n    if (val instanceof UInt64) {\n      return val;\n    }\n\n    var buf = buffer_1.Buffer.alloc(UInt64.width);\n\n    if (typeof val === 'number') {\n      if (val < 0) {\n        throw new Error('value must be an unsigned integer');\n      }\n\n      var number = bigInt(val);\n      var intBuf = [buffer_1.Buffer.alloc(4), buffer_1.Buffer.alloc(4)];\n      intBuf[0].writeUInt32BE(Number(number.shiftRight(32)), 0);\n      intBuf[1].writeUInt32BE(Number(number.and(mask)), 0);\n      return new UInt64(buffer_1.Buffer.concat(intBuf));\n    }\n\n    if (typeof val === 'string') {\n      if (!HEX_REGEX.test(val)) {\n        throw new Error(\"\".concat(val, \" is not a valid hex-string\"));\n      }\n\n      var strBuf = val.padStart(16, '0');\n      buf = buffer_1.Buffer.from(strBuf, 'hex');\n      return new UInt64(buf);\n    }\n\n    if ((0, big_integer_1.isInstance)(val)) {\n      var intBuf = [buffer_1.Buffer.alloc(4), buffer_1.Buffer.alloc(4)];\n      intBuf[0].writeUInt32BE(Number(val.shiftRight(bigInt(32))), 0);\n      intBuf[1].writeUInt32BE(Number(val.and(mask)), 0);\n      return new UInt64(buffer_1.Buffer.concat(intBuf));\n    }\n\n    throw new Error('Cannot construct UInt64 from given value');\n  };\n  /**\n   * The JSON representation of a UInt64 object\n   *\n   * @returns a hex-string\n   */\n\n\n  UInt64.prototype.toJSON = function () {\n    return this.bytes.toString('hex').toUpperCase();\n  };\n  /**\n   * Get the value of the UInt64\n   *\n   * @returns the number represented buy this.bytes\n   */\n\n\n  UInt64.prototype.valueOf = function () {\n    var msb = bigInt(this.bytes.slice(0, 4).readUInt32BE(0));\n    var lsb = bigInt(this.bytes.slice(4).readUInt32BE(0));\n    return msb.shiftLeft(bigInt(32)).or(lsb);\n  };\n  /**\n   * Get the bytes representation of the UInt64 object\n   *\n   * @returns 8 bytes representing the UInt64\n   */\n\n\n  UInt64.prototype.toBytes = function () {\n    return this.bytes;\n  };\n\n  UInt64.width = 64 / 8; // 8\n\n  UInt64.defaultUInt64 = new UInt64(buffer_1.Buffer.alloc(UInt64.width));\n  return UInt64;\n}(uint_1.UInt);\n\nexports.UInt64 = UInt64;","map":{"version":3,"mappings":"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","names":["HEX_REGEX","mask","bigInt","__extends","bytes","_super","UInt64","defaultUInt64","parser","read","width","val","buf","buffer_1","alloc","Error","number","intBuf","writeUInt32BE","Number","shiftRight","and","concat","test","strBuf","padStart","from","toString","toUpperCase","msb","slice","readUInt32BE","lsb","shiftLeft","or","uint_1","exports"],"sourceRoot":"","sources":["../../src/types/uint-64.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}