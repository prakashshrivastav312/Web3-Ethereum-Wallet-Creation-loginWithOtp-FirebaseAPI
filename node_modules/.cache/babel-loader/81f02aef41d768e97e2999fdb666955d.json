{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendXdcOffchainTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst common_1 = require(\"./common\");\n\nconst kms_1 = require(\"./kms\");\n/**\n * Send XDC transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @param provider url of the XDC Server to connect to. If not set, default public server will be used.\n * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically\n */\n\n\nconst sendXdcOffchainTransaction = async (testnet, body, provider) => {\n  if (body.signatureId) {\n    return kms_1.offchainTransferXdcKMS(body);\n  }\n\n  await tatum_1.validateBody(body, model_1.TransferEthOffchain);\n\n  const {\n    mnemonic,\n    index,\n    privateKey,\n    gasLimit,\n    gasPrice,\n    nonce\n  } = body,\n        withdrawal = __rest(body, [\"mnemonic\", \"index\", \"privateKey\", \"gasLimit\", \"gasPrice\", \"nonce\"]);\n\n  const {\n    amount,\n    address\n  } = withdrawal;\n  const fromPriv = mnemonic && index !== undefined ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.XDC, testnet, mnemonic, index) : privateKey;\n  const fee = {\n    gasLimit: gasLimit || '21000',\n    gasPrice: gasPrice || '5'\n  };\n  const txData = await transaction_1.prepareXdcOrErc20SignedTransaction({\n    amount,\n    fromPrivateKey: fromPriv,\n    fee,\n    nonce,\n    to: address\n  }, provider); // @ts-ignore\n\n  withdrawal.fee = web3_utils_1.fromWei(new bignumber_js_1.default(fee.gasLimit).multipliedBy(web3_utils_1.toWei(fee.gasPrice, 'kwei')).toString(), 'ether');\n  const {\n    id\n  } = await common_1.offchainStoreWithdrawal(withdrawal);\n\n  try {\n    return Object.assign(Object.assign({}, await common_1.offchainBroadcast({\n      txData,\n      withdrawalId: id,\n      currency: model_1.Currency.XDC\n    })), {\n      id\n    });\n  } catch (e) {\n    console.error(e);\n\n    try {\n      await common_1.offchainCancelWithdrawal(id);\n    } catch (e1) {\n      console.log(e);\n      return {\n        id\n      };\n    }\n  }\n};\n\nexports.sendXdcOffchainTransaction = sendXdcOffchainTransaction;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AAEA;;;;;;;;;;AAQO,MAAMA,0BAA0B,GAAG,OAAOC,OAAP,EAAyBC,IAAzB,EAAoDC,QAApD,KAAyE;EAC/G,IAAID,IAAI,CAACE,WAAT,EAAsB;IAClB,OAAOC,6BAAuBH,IAAvB,CAAP;EACH;;EACD,MAAMI,qBAAaJ,IAAb,EAAmBK,2BAAnB,CAAN;;EACA,MAAM;IACFC,QADE;IACQC,KADR;IACeC,UADf;IAC2BC,QAD3B;IACqCC,QADrC;IAC+CC;EAD/C,IAEFX,IAFJ;EAAA,MAC+DY,UAAU,UACrEZ,IADqE,EADnE,oEACmE,CADzE;;EAGA,MAAM;IAACa,MAAD;IAASC;EAAT,IAAoBF,UAA1B;EAEA,MAAMG,QAAQ,GAAGT,QAAQ,IAAIC,KAAK,KAAKS,SAAtB,GAAkC,MAAMC,wCAA+BZ,iBAASa,GAAxC,EAA6CnB,OAA7C,EAAsDO,QAAtD,EAAgEC,KAAhE,CAAxC,GAAiHC,UAAlI;EAEA,MAAMW,GAAG,GAAG;IACRV,QAAQ,EAAEA,QAAQ,IAAI,OADd;IAERC,QAAQ,EAAEA,QAAQ,IAAI;EAFd,CAAZ;EAIA,MAAMU,MAAM,GAAG,MAAMC,iDAAmC;IACpDR,MADoD;IAEpDS,cAAc,EAAEP,QAFoC;IAGpDI,GAHoD;IAIpDR,KAJoD;IAKpDY,EAAE,EAAET;EALgD,CAAnC,EAMlBb,QANkB,CAArB,CAhB+G,CAuB/G;;EACAW,UAAU,CAACO,GAAX,GAAiBK,qBAAQ,IAAIC,sBAAJ,CAAcN,GAAG,CAACV,QAAlB,EAA4BiB,YAA5B,CAAyCF,mBAAML,GAAG,CAACT,QAAV,EAAoB,MAApB,CAAzC,EAAsEiB,QAAtE,EAAR,EAA0F,OAA1F,CAAjB;EACA,MAAM;IAACC;EAAD,IAAO,MAAMC,iCAAwBjB,UAAxB,CAAnB;;EACA,IAAI;IACA,uCAAW,MAAMiB,2BAAkB;MAACT,MAAD;MAASU,YAAY,EAAEF,EAAvB;MAA2BG,QAAQ,EAAE1B,iBAASa;IAA9C,CAAlB,CAAjB,GAAsF;MAAEU;IAAF,CAAtF;EACH,CAFD,CAEE,OAAOI,CAAP,EAAU;IACRC,OAAO,CAACC,KAAR,CAAcF,CAAd;;IACA,IAAI;MACA,MAAMH,kCAAyBD,EAAzB,CAAN;IACH,CAFD,CAEE,OAAOO,EAAP,EAAW;MACTF,OAAO,CAACG,GAAR,CAAYJ,CAAZ;MACA,OAAO;QAACJ;MAAD,CAAP;IACH;EACJ;AACJ,CArCM;;AAAMS,qCAA0BvC,0BAA1B","names":["sendXdcOffchainTransaction","testnet","body","provider","signatureId","kms_1","tatum_1","model_1","mnemonic","index","privateKey","gasLimit","gasPrice","nonce","withdrawal","amount","address","fromPriv","undefined","wallet_1","XDC","fee","txData","transaction_1","fromPrivateKey","to","web3_utils_1","bignumber_js_1","multipliedBy","toString","id","common_1","withdrawalId","currency","e","console","error","e1","log","exports"],"sourceRoot":"","sources":["../../../src/offchain/xdc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}