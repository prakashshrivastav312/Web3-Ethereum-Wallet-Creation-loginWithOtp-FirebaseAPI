{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolAsset = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _asset = require('./asset');\n\nvar _get_liquidity_pool_id = require('./get_liquidity_pool_id');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * LiquidityPoolAsset class represents a liquidity pool trustline change.\n *\n * @constructor\n * @param {Asset} assetA – The first asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {Asset} assetB – The second asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {number} fee – The liquidity pool fee. For now the only fee supported is `30`.\n */\n\n\nvar LiquidityPoolAsset = exports.LiquidityPoolAsset = function () {\n  function LiquidityPoolAsset(assetA, assetB, fee) {\n    _classCallCheck(this, LiquidityPoolAsset);\n\n    if (!assetA || !(assetA instanceof _asset.Asset)) {\n      throw new Error('assetA is invalid');\n    }\n\n    if (!assetB || !(assetB instanceof _asset.Asset)) {\n      throw new Error('assetB is invalid');\n    }\n\n    if (_asset.Asset.compare(assetA, assetB) !== -1) {\n      throw new Error('Assets are not in lexicographic order');\n    }\n\n    if (!fee || fee !== _get_liquidity_pool_id.LiquidityPoolFeeV18) {\n      throw new Error('fee is invalid');\n    }\n\n    this.assetA = assetA;\n    this.assetB = assetB;\n    this.fee = fee;\n  }\n  /**\n   * Returns a liquidity pool asset object from its XDR ChangeTrustAsset object\n   * representation.\n   * @param {xdr.ChangeTrustAsset} ctAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolAsset}\n   */\n\n\n  _createClass(LiquidityPoolAsset, [{\n    key: 'toXDRObject',\n\n    /**\n     * Returns the `xdr.ChangeTrustAsset` object for this liquidity pool asset.\n     *\n     * Note: To convert from an {@link Asset `Asset`} to `xdr.ChangeTrustAsset`\n     * please refer to the\n     * {@link Asset.toChangeTrustXDRObject `Asset.toChangeTrustXDRObject`} method.\n     *\n     * @returns {xdr.ChangeTrustAsset} XDR ChangeTrustAsset object.\n     */\n    value: function toXDRObject() {\n      var lpConstantProductParamsXdr = new _stellarXdr_generated2.default.LiquidityPoolConstantProductParameters({\n        assetA: this.assetA.toXDRObject(),\n        assetB: this.assetB.toXDRObject(),\n        fee: this.fee\n      });\n      var lpParamsXdr = new _stellarXdr_generated2.default.LiquidityPoolParameters('liquidityPoolConstantProduct', lpConstantProductParamsXdr);\n      return new _stellarXdr_generated2.default.ChangeTrustAsset('assetTypePoolShare', lpParamsXdr);\n    }\n    /**\n     * @returns {LiquidityPoolParameters} Liquidity pool parameters.\n     */\n\n  }, {\n    key: 'getLiquidityPoolParameters',\n    value: function getLiquidityPoolParameters() {\n      return (0, _clone2.default)({\n        assetA: this.assetA,\n        assetB: this.assetB,\n        fee: this.fee\n      });\n    }\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n    /**\n     * @param {LiquidityPoolAsset} other the LiquidityPoolAsset to compare\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n\n  }, {\n    key: 'equals',\n    value: function equals(other) {\n      return this.assetA.equals(other.assetA) && this.assetB.equals(other.assetB) && this.fee === other.fee;\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      var poolId = (0, _get_liquidity_pool_id.getLiquidityPoolId)('constant_product', this.getLiquidityPoolParameters()).toString('hex');\n      return 'liquidity_pool:' + poolId;\n    }\n  }], [{\n    key: 'fromOperation',\n    value: function fromOperation(ctAssetXdr) {\n      var assetType = ctAssetXdr.switch();\n\n      if (assetType === _stellarXdr_generated2.default.AssetType.assetTypePoolShare()) {\n        var liquidityPoolParameters = ctAssetXdr.liquidityPool().constantProduct();\n        return new this(_asset.Asset.fromOperation(liquidityPoolParameters.assetA()), _asset.Asset.fromOperation(liquidityPoolParameters.assetB()), liquidityPoolParameters.fee());\n      }\n\n      throw new Error('Invalid asset type: ' + assetType.name);\n    }\n  }]);\n\n  return LiquidityPoolAsset;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","LiquidityPoolAsset","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_clone","require","_clone2","_interopRequireDefault","_stellarXdr_generated","_stellarXdr_generated2","_asset","_get_liquidity_pool_id","obj","__esModule","default","_classCallCheck","instance","TypeError","assetA","assetB","fee","Asset","Error","compare","LiquidityPoolFeeV18","toXDRObject","lpConstantProductParamsXdr","LiquidityPoolConstantProductParameters","lpParamsXdr","LiquidityPoolParameters","ChangeTrustAsset","getLiquidityPoolParameters","getAssetType","equals","other","toString","poolId","getLiquidityPoolId","fromOperation","ctAssetXdr","assetType","switch","AssetType","assetTypePoolShare","liquidityPoolParameters","liquidityPool","constantProduct","name"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/liquidity_pool_asset.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiquidityPoolAsset = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _clone = require('lodash/clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _asset = require('./asset');\n\nvar _get_liquidity_pool_id = require('./get_liquidity_pool_id');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * LiquidityPoolAsset class represents a liquidity pool trustline change.\n *\n * @constructor\n * @param {Asset} assetA – The first asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {Asset} assetB – The second asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.\n * @param {number} fee – The liquidity pool fee. For now the only fee supported is `30`.\n */\nvar LiquidityPoolAsset = exports.LiquidityPoolAsset = function () {\n  function LiquidityPoolAsset(assetA, assetB, fee) {\n    _classCallCheck(this, LiquidityPoolAsset);\n\n    if (!assetA || !(assetA instanceof _asset.Asset)) {\n      throw new Error('assetA is invalid');\n    }\n    if (!assetB || !(assetB instanceof _asset.Asset)) {\n      throw new Error('assetB is invalid');\n    }\n    if (_asset.Asset.compare(assetA, assetB) !== -1) {\n      throw new Error('Assets are not in lexicographic order');\n    }\n    if (!fee || fee !== _get_liquidity_pool_id.LiquidityPoolFeeV18) {\n      throw new Error('fee is invalid');\n    }\n\n    this.assetA = assetA;\n    this.assetB = assetB;\n    this.fee = fee;\n  }\n\n  /**\n   * Returns a liquidity pool asset object from its XDR ChangeTrustAsset object\n   * representation.\n   * @param {xdr.ChangeTrustAsset} ctAssetXdr - The asset XDR object.\n   * @returns {LiquidityPoolAsset}\n   */\n\n\n  _createClass(LiquidityPoolAsset, [{\n    key: 'toXDRObject',\n\n\n    /**\n     * Returns the `xdr.ChangeTrustAsset` object for this liquidity pool asset.\n     *\n     * Note: To convert from an {@link Asset `Asset`} to `xdr.ChangeTrustAsset`\n     * please refer to the\n     * {@link Asset.toChangeTrustXDRObject `Asset.toChangeTrustXDRObject`} method.\n     *\n     * @returns {xdr.ChangeTrustAsset} XDR ChangeTrustAsset object.\n     */\n    value: function toXDRObject() {\n      var lpConstantProductParamsXdr = new _stellarXdr_generated2.default.LiquidityPoolConstantProductParameters({\n        assetA: this.assetA.toXDRObject(),\n        assetB: this.assetB.toXDRObject(),\n        fee: this.fee\n      });\n      var lpParamsXdr = new _stellarXdr_generated2.default.LiquidityPoolParameters('liquidityPoolConstantProduct', lpConstantProductParamsXdr);\n      return new _stellarXdr_generated2.default.ChangeTrustAsset('assetTypePoolShare', lpParamsXdr);\n    }\n\n    /**\n     * @returns {LiquidityPoolParameters} Liquidity pool parameters.\n     */\n\n  }, {\n    key: 'getLiquidityPoolParameters',\n    value: function getLiquidityPoolParameters() {\n      return (0, _clone2.default)({\n        assetA: this.assetA,\n        assetB: this.assetB,\n        fee: this.fee\n      });\n    }\n\n    /**\n     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)\n     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.\n     */\n\n  }, {\n    key: 'getAssetType',\n    value: function getAssetType() {\n      return 'liquidity_pool_shares';\n    }\n\n    /**\n     * @param {LiquidityPoolAsset} other the LiquidityPoolAsset to compare\n     * @returns {boolean} `true` if this asset equals the given asset.\n     */\n\n  }, {\n    key: 'equals',\n    value: function equals(other) {\n      return this.assetA.equals(other.assetA) && this.assetB.equals(other.assetB) && this.fee === other.fee;\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      var poolId = (0, _get_liquidity_pool_id.getLiquidityPoolId)('constant_product', this.getLiquidityPoolParameters()).toString('hex');\n      return 'liquidity_pool:' + poolId;\n    }\n  }], [{\n    key: 'fromOperation',\n    value: function fromOperation(ctAssetXdr) {\n      var assetType = ctAssetXdr.switch();\n      if (assetType === _stellarXdr_generated2.default.AssetType.assetTypePoolShare()) {\n        var liquidityPoolParameters = ctAssetXdr.liquidityPool().constantProduct();\n        return new this(_asset.Asset.fromOperation(liquidityPoolParameters.assetA()), _asset.Asset.fromOperation(liquidityPoolParameters.assetB()), liquidityPoolParameters.fee());\n      }\n\n      throw new Error('Invalid asset type: ' + assetType.name);\n    }\n  }]);\n\n  return LiquidityPoolAsset;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script"}