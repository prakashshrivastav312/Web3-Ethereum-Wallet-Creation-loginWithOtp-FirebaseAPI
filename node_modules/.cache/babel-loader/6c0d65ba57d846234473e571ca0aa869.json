{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst AccountLib = require('eth-lib/lib/account');\n\nconst utils = require('../../../caver-utils/src');\n\nconst PrivateKey = require('./privateKey');\n\nconst {\n  KEY_ROLE,\n  isMultipleKeysFormat,\n  isRoleBasedKeysFormat\n} = require('./keyringHelper');\n\nconst {\n  decryptKey\n} = require('./keyringHelper');\n\nconst SingleKeyring = require('./singleKeyring');\n\nconst MultipleKeyring = require('./multipleKeyring');\n\nconst RoleBasedKeyring = require('./roleBasedKeyring');\n\nconst SignatureData = require('./signatureData');\n/**\n * representing a KeyringFactory which supports create functions for Keyring({@link SingleKeyring}/{@link MultipleKeyring}/{@link RoleBasedKeyring}).\n * @class\n * @hideconstructor\n */\n\n\nclass KeyringFactory {\n  /**\n   * Generates a {@link SingleKeyring} instance with a randomly generated private key.\n   *\n   * @example\n   * const keyring = caver.wallet.keyring.generate()\n   *\n   * @param {string} [entropy] A random string to increase entropy.\n   * @return {SingleKeyring} A randomly generated single keyring instance is returned.\n   */\n  static generate(entropy) {\n    const random = AccountLib.create(entropy || utils.randomHex(32));\n    return KeyringFactory.createWithSingleKey(random.address, random.privateKey);\n  }\n  /**\n   * generates a single private key string\n   *\n   * @example\n   * const privateKey = caver.wallet.keyring.generateSingleKey()\n   *\n   * @param {string} [entropy] A random string to increase entropy.\n   * @return {string} The private key string is returned.\n   */\n\n\n  static generateSingleKey(entropy) {\n    return AccountLib.create(entropy || utils.randomHex(32)).privateKey;\n  }\n  /**\n   * Generates an array of private key strings.\n   *\n   * @example\n   * const privateKeys = caver.wallet.keyring.generateMultipleKeys()\n   *\n   * @param {number} num The number of private key strings.\n   * @param {string} [entropy] A random string to increase entropy.\n   * @return {Array.<string>} An array that includes private key strings is returned.\n   */\n\n\n  static generateMultipleKeys(num, entropy) {\n    if (num === undefined || !_.isNumber(num) || _.isString(num)) {\n      throw new Error(`To generate random multiple private keys, the number of keys should be defined.`);\n    }\n\n    const randomKeys = [];\n\n    for (let i = 0; i < num; i++) {\n      randomKeys.push(AccountLib.create(entropy || utils.randomHex(32)).privateKey);\n    }\n\n    return randomKeys;\n  }\n  /**\n   * Generates a 2D array of which each array element contains keys defined for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\n   *\n   * @example\n   * const privateKeysByRoles = caver.wallet.keyring.generateRoleBasedKeys([2, 1, 3])\n   *\n   * @param {Array.<number>} numArr An array containing the number of keys for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\n   * @param {string} [entropy] A random string to increase entropy.\n   * @return {Array.<Array.<string>>} A 2D array of which each array element contains keys defined for each role is returned.\n   */\n\n\n  static generateRoleBasedKeys(numArr, entropy) {\n    if (numArr === undefined || !_.isArray(numArr) || _.isString(numArr)) {\n      throw new Error(`To generate random role-based private keys, an array containing the number of keys for each role should be defined.`);\n    }\n\n    if (numArr.length > KEY_ROLE.roleLast) {\n      throw new Error(`Unsupported role. The length of array should be less than ${KEY_ROLE.roleLast}.`);\n    }\n\n    const randomKeys = [[], [], []];\n\n    for (let i = 0; i < numArr.length; i++) {\n      for (let j = 0; j < numArr[i]; j++) {\n        randomKeys[i].push(AccountLib.create(entropy || utils.randomHex(32)).privateKey);\n      }\n    }\n\n    return randomKeys;\n  }\n  /**\n   * Creates a Keyring instance with parameters.\n   *\n   * If key is a private key string, a {@link SingleKeyring} instance that uses a single private key is created.\n   * If key is an array containing private key strings, a {@link MultipleKeyring} instance that use multiple private keys is created.\n   * If key is a 2D array of which each element contains the private key(s) to be used for each role, a {@link RoleBasedKeyring} instance is created.\n   *\n   * @example\n   * const singleKeyring = caver.wallet.keyring.create('0x${address in hex}', '0x{private key}')\n   * const multipleKeyring = caver.wallet.keyring.create('0x${address in hex}', ['0x{private key}', '0x{private key}'])\n   * const roleBasedKeyring = caver.wallet.keyring.create('0x${address in hex}', [['0x{private key}', '0x{private key}'], ['0x{private key}'], ['0x{private key}', '0x{private key}']])\n   *\n   * @param {string} address An address of keyring.\n   * @param {string|Array.<string>|Array.<Array.<string>>} key The private key string, an array of private keys, or a 2D array of which each element contains key(s) to be used for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\n   * @return {KeyringContainer.Keyring} The keyring instance is returned. Depending on the key parameter, it can be {@link SingleKeyring}, {@link MultipleKeyring} or {@link RoleBasedKeyring}.\n   */\n\n\n  static create(address, key) {\n    if (_.isString(key)) return KeyringFactory.createWithSingleKey(address, key);\n    if (isMultipleKeysFormat(key)) return KeyringFactory.createWithMultipleKey(address, key);\n    if (isRoleBasedKeysFormat(key)) return KeyringFactory.createWithRoleBasedKey(address, key);\n    throw new Error(`Unsupported key type: ${typeof key}`);\n  }\n  /**\n   * Creates a SingleKeyring instance from a private key string or a {@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-wallet-key-format|KlaytnWalletKey}.\n   *\n   * @example\n   * const keyring = caver.wallet.keyring.createFromPrivateKey('0x{private key}')\n   *\n   * @param {string} privateKey This parameter can be either a private key or KlaytnWalletKey.\n   * @return {SingleKeyring} The SingleKeyring instance is returned.\n   */\n\n\n  static createFromPrivateKey(privateKey) {\n    if (!_.isString(privateKey)) throw new Error(`Invalid format of parameter. 'privateKey' should be in format of string`);\n    if (utils.isKlaytnWalletKey(privateKey)) return KeyringFactory.createFromKlaytnWalletKey(privateKey);\n    const acct = AccountLib.fromPrivate(utils.addHexPrefix(privateKey));\n    return KeyringFactory.createWithSingleKey(acct.address, acct.privateKey);\n  }\n  /**\n   * Creates a SingleKeyring instance from a {@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-wallet-key-format|KlaytnWalletKey} string.\n   *\n   * @example\n   * const keyring = caver.wallet.keyring.createFromKlaytnWalletKey('0x{private key}0x{type}0x{address in hex}')\n   *\n   * @param {string} klaytnWalletKey The KlaytnWalletKey string.\n   * @return {SingleKeyring} The SingleKeyring instance is returned.\n   */\n\n\n  static createFromKlaytnWalletKey(klaytnWalletKey) {\n    if (!_.isString(klaytnWalletKey)) throw new Error(`Invalid format of parameter. 'klaytnWalletKey' should be in format of string`);\n\n    if (!utils.isKlaytnWalletKey(klaytnWalletKey)) {\n      throw new Error(`Invalid KlaytnWalletKey: ${klaytnWalletKey}`);\n    }\n\n    const parsed = utils.parsePrivateKey(klaytnWalletKey);\n    return KeyringFactory.createWithSingleKey(parsed.address, parsed.privateKey);\n  }\n  /**\n   * Creates a {@link SingleKeyring} instance from an address and a private key string.\n   *\n   * @example\n   * const keyring = caver.wallet.keyring.createWithSingleKey('0x{address in hex}', '0x{private key}')\n   *\n   * @param {string} address An address to be used for creating a keyring.\n   * @param {string} key A private key string.\n   * @return {SingleKeyring} The {@link SingleKeyring} instance is returned.\n   */\n\n\n  static createWithSingleKey(address, key) {\n    if (!_.isString(key)) throw new Error(`Invalid format of parameter. Use 'fromMultipleKey' or 'fromRoleBasedKey' for two or more keys.`);\n    if (utils.isKlaytnWalletKey(key)) throw new Error(`Invalid format of parameter. Use 'fromKlaytnWalletKey' to create Keyring from KlaytnWalletKey.`);\n    return new SingleKeyring(address, key);\n  }\n  /**\n   * Creates a {@link MultipleKeyring} instance from an address and private key strings.\n   *\n   * @example\n   * const keyring = caver.wallet.keyring.createWithMultipleKey('0x{address in hex}', ['0x{private key1}', '0x{private key2}' ])\n   *\n   * @param {string} address An address of keyring.\n   * @param {Array.<string>} keyArray An array of private key strings.\n   * @return {MultipleKeyring} The {@link MultipleKeyring} instance is returned.\n   */\n\n\n  static createWithMultipleKey(address, keyArray) {\n    if (!isMultipleKeysFormat(keyArray)) throw new Error(`Invalid format of parameter. 'keyArray' should be an array of private key strings.`);\n    return new MultipleKeyring(address, keyArray);\n  }\n  /**\n   * Creates a {@link RoleBasedKeyring} instance from an address and a 2D array of which each array element contains keys defined for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\n   *\n   * @param {string} address An address of keyring.\n   * @param {Array.<Array.<string>>} roledBasedKeyArray A two-dimensional array containing arrays of private key strings for each role.\n   * @return {RoleBasedKeyring} The {@link RoleBasedKeyring} instance is returned.\n   */\n\n\n  static createWithRoleBasedKey(address, roledBasedKeyArray) {\n    if (!isRoleBasedKeysFormat(roledBasedKeyArray)) throw new Error(`Invalid format of parameter. 'roledBasedKeyArray' should be in the form of an array defined as an array for the keys to be used for each role.`);\n    return new RoleBasedKeyring(address, roledBasedKeyArray);\n  }\n  /**\n   * An object that defines encrypted keystore.\n   *\n   * @typedef {object} KeyringFactory.Keystore\n   * @property {number} version - The version number of the keystore.\n   * @property {string} id - The id in the keystore.\n   * @property {string} address - The address in the encrypted keyring.\n   * @property {object} [crypto] - The encrypted private key for v3.\n   * @property {Array.<object>|Array.<Array.<object>>} [keyring] - The encrypted private key(s) for v4.\n   */\n\n  /**\n   * Decrypts a keystore v3 or v4 JSON and returns the decrypted Keyring instance.\n   *\n   * @example\n   * // Decrypt keystroe v4 (encrypted single keyring)\n   * const decrypted = caver.wallet.keyring.decrypt({\n   *     version: 4,\n   *     id: '9c12de05-0153-41c7-a8b7-849472eb5de7',\n   *     address: '0xc02cec4d0346bf4124deeb55c5216a4138a40a8c',\n   *     keyring: [\n   *         {\n   *             ciphertext: 'eacf496cea5e80eca291251b3743bf93cdbcf7072efc3a74efeaf518e2796b15',\n   *             cipherparams: { iv: 'd688a4319342e872cefcf51aef3ec2da' },\n   *             cipher: 'aes-128-ctr',\n   *             kdf: 'scrypt',\n   *             kdfparams: {\n   *                 dklen: 32,\n   *                 salt: 'c3cee502c7157e0faa42386c6d666116ffcdf093c345166c502e23bc34e6ba40',\n   *                 n: 4096,\n   *                 r: 8,\n   *                 p: 1\n   *             },\n   *             mac: '4b49574f3d3356fa0d04f73e07d5a2a6bbfdd185bedfa31f37f347bc98f2ef26'\n   *         }\n   *     ]\n   * }, 'password')\n   *\n   * // Decrypt keystroe v4 (encrypted multiple keyring)\n   * const decrypted = caver.wallet.keyring.decrypt({\n   *     version: 4,\n   *     id: '55da3f9c-6444-4fc1-abfa-f2eabfc57501',\n   *     address: '0x86bce8c859f5f304aa30adb89f2f7b6ee5a0d6e2',\n   *     keyring: [\n   *         {\n   *             ciphertext: '93dd2c777abd9b80a0be8e1eb9739cbf27c127621a5d3f81e7779e47d3bb22f6',\n   *             cipherparams: { iv: '84f90907f3f54f53d19cbd6ae1496b86' },\n   *             cipher: 'aes-128-ctr',\n   *             kdf: 'scrypt',\n   *             kdfparams: {\n   *                 dklen: 32,\n   *                 salt: '69bf176a136c67a39d131912fb1e0ada4be0ed9f882448e1557b5c4233006e10',\n   *                 n: 4096,\n   *                 r: 8,\n   *                 p: 1,\n   *             },\n   *             mac: '8f6d1d234f4a87162cf3de0c7fb1d4a8421cd8f5a97b86b1a8e576ffc1eb52d2',\n   *         },\n   *         {\n   *             ciphertext: '53d50b4e86b550b26919d9b8cea762cd3c637dfe4f2a0f18995d3401ead839a6',\n   *             cipherparams: { iv: 'd7a6f63558996a9f99e7daabd289aa2c' },\n   *             cipher: 'aes-128-ctr',\n   *             kdf: 'scrypt',\n   *             kdfparams: {\n   *                 dklen: 32,\n   *                 salt: '966116898d90c3e53ea09e4850a71e16df9533c1f9e1b2e1a9edec781e1ad44f',\n   *                 n: 4096,\n   *                 r: 8,\n   *                 p: 1,\n   *             },\n   *             mac: 'bca7125e17565c672a110ace9a25755847d42b81aa7df4bb8f5ce01ef7213295',\n   *         },\n   *     ],\n   * }, 'password')\n   *\n   * // Decrypt keystroe v4 (encrypted role-based keyring)\n   * const decrypted = caver.wallet.keyring.decrypt({\n   *     version: 4,\n   *     id: '55da3f9c-6444-4fc1-abfa-f2eabfc57501',\n   *     address: '0x86bce8c859f5f304aa30adb89f2f7b6ee5a0d6e2',\n   *     keyring: [\n   *         [\n   *             {\n   *                 ciphertext: '93dd2c777abd9b80a0be8e1eb9739cbf27c127621a5d3f81e7779e47d3bb22f6',\n   *                 cipherparams: { iv: '84f90907f3f54f53d19cbd6ae1496b86' },\n   *                 cipher: 'aes-128-ctr',\n   *                 kdf: 'scrypt',\n   *                 kdfparams: {\n   *                     dklen: 32,\n   *                     salt: '69bf176a136c67a39d131912fb1e0ada4be0ed9f882448e1557b5c4233006e10',\n   *                     n: 4096,\n   *                     r: 8,\n   *                     p: 1,\n   *                 },\n   *                 mac: '8f6d1d234f4a87162cf3de0c7fb1d4a8421cd8f5a97b86b1a8e576ffc1eb52d2',\n   *             },\n   *             {\n   *                 ciphertext: '53d50b4e86b550b26919d9b8cea762cd3c637dfe4f2a0f18995d3401ead839a6',\n   *                 cipherparams: { iv: 'd7a6f63558996a9f99e7daabd289aa2c' },\n   *                 cipher: 'aes-128-ctr',\n   *                 kdf: 'scrypt',\n   *                 kdfparams: {\n   *                     dklen: 32,\n   *                     salt: '966116898d90c3e53ea09e4850a71e16df9533c1f9e1b2e1a9edec781e1ad44f',\n   *                     n: 4096,\n   *                     r: 8,\n   *                     p: 1,\n   *                 },\n   *                 mac: 'bca7125e17565c672a110ace9a25755847d42b81aa7df4bb8f5ce01ef7213295',\n   *             },\n   *         ],\n   *         [\n   *             {\n   *                 ciphertext: 'f16def98a70bb2dae053f791882f3254c66d63416633b8d91c2848893e7876ce',\n   *                 cipherparams: { iv: 'f5006128a4c53bc02cada64d095c15cf' },\n   *                 cipher: 'aes-128-ctr',\n   *                 kdf: 'scrypt',\n   *                 kdfparams: {\n   *                     dklen: 32,\n   *                     salt: '0d8a2f71f79c4880e43ff0795f6841a24cb18838b3ca8ecaeb0cda72da9a72ce',\n   *                     n: 4096,\n   *                     r: 8,\n   *                     p: 1,\n   *                 },\n   *                 mac: '38b79276c3805b9d2ff5fbabf1b9d4ead295151b95401c1e54aed782502fc90a',\n   *             },\n   *         ],\n   *         [\n   *             {\n   *                 ciphertext: '544dbcc327942a6a52ad6a7d537e4459506afc700a6da4e8edebd62fb3dd55ee',\n   *                 cipherparams: { iv: '05dd5d25ad6426e026818b6fa9b25818' },\n   *                 cipher: 'aes-128-ctr',\n   *                 kdf: 'scrypt',\n   *                 kdfparams: {\n   *                     dklen: 32,\n   *                     salt: '3a9003c1527f65c772c54c6056a38b0048c2e2d58dc0e584a1d867f2039a25aa',\n   *                     n: 4096,\n   *                     r: 8,\n   *                     p: 1,\n   *                 },\n   *                 mac: '19a698b51409cc9ac22d63d329b1201af3c89a04a1faea3111eec4ca97f2e00f',\n   *             },\n   *             {\n   *                 ciphertext: 'dd6b920f02cbcf5998ed205f8867ddbd9b6b088add8dfe1774a9fda29ff3920b',\n   *                 cipherparams: { iv: 'ac04c0f4559dad80dc86c975d1ef7067' },\n   *                 cipher: 'aes-128-ctr',\n   *                 kdf: 'scrypt',\n   *                 kdfparams: {\n   *                     dklen: 32,\n   *                     salt: '22279c6dbcc706d7daa120022a236cfe149496dca8232b0f8159d1df999569d6',\n   *                     n: 4096,\n   *                     r: 8,\n   *                     p: 1,\n   *                 },\n   *                 mac: '1c54f7378fa279a49a2f790a0adb683defad8535a21bdf2f3dadc48a7bddf517',\n   *             },\n   *         ],\n   *     ],\n   * }, 'password')\n   *\n   * @param {KeyringFactory.KeystoreV4} keystore The keystore v3 or v4 to decrypt.\n   * @param {string} password The password used for encryption.\n   * @return {KeyringContainer.Keyring} The  decrypted keyring ({@link SingleKeyring}, {@link MultipleKeyring} or {@link RoleBasedKeyring}) instance is returned.\n   */\n\n\n  static decrypt(keystore, password) {\n    // To deep copy an object, using JSON.parse and JSON.stringify (object -> string -> object)\n    const json = _.isObject(keystore) ? _.cloneDeep(keystore) : JSON.parse(keystore);\n    if (json.version !== 3 && json.version !== 4) console.warn('This is not a V3 or V4 wallet.');\n\n    if (json.version === 3 && !json.crypto) {\n      throw new Error(\"Invalid keystore V3 format: 'crypto' is not defined.\");\n    } else if (json.version === 4 && !json.keyring) {\n      throw new Error(\"Invalid keystore V4 format: 'keyring' is not defined.\");\n    }\n\n    if (json.crypto) {\n      if (json.keyring) throw new Error(\"Invalid key store format: 'crypto' and 'keyring' cannot be defined together.\");\n      json.keyring = [json.crypto];\n      delete json.crypto;\n    } // AccountKeyRoleBased format\n\n\n    if (_.isArray(json.keyring[0])) {\n      const keys = [];\n      const transactionKey = decryptKey(json.keyring[KEY_ROLE.roleTransactionKey], password);\n      transactionKey ? keys.push(transactionKey) : keys.push([]);\n      const updateKey = decryptKey(json.keyring[KEY_ROLE.roleAccountUpdateKey], password);\n      updateKey ? keys.push(updateKey) : keys.push([]);\n      const feePayerKey = decryptKey(json.keyring[KEY_ROLE.roleFeePayerKey], password);\n      feePayerKey ? keys.push(feePayerKey) : keys.push([]);\n      return KeyringFactory.createWithRoleBasedKey(json.address, keys);\n    }\n\n    let decrypted = decryptKey(json.keyring, password);\n    decrypted = _.isArray(decrypted) ? decrypted : [decrypted];\n    if (decrypted.length === 1) return KeyringFactory.createWithSingleKey(json.address, decrypted[0]);\n    return KeyringFactory.createWithMultipleKey(json.address, decrypted);\n  }\n\n}\n/**\n * @type {typeof PrivateKey}\n * @example\n * caver.wallet.keyring.privateKey\n * */\n\n\nKeyringFactory.privateKey = PrivateKey;\n/**\n * @type {typeof SingleKeyring}\n * @example\n * caver.wallet.keyring.singleKeyring\n * */\n\nKeyringFactory.singleKeyring = SingleKeyring;\n/**\n * @type {typeof MultipleKeyring}\n * @example\n * caver.wallet.keyring.multipleKeyring\n * */\n\nKeyringFactory.multipleKeyring = MultipleKeyring;\n/**\n * @type {typeof RoleBasedKeyring}\n * @example\n * caver.wallet.keyring.roleBasedKeyring\n * */\n\nKeyringFactory.roleBasedKeyring = RoleBasedKeyring;\n/**\n * @type {typeof SignatureData}\n * @example\n * caver.wallet.keyring.signatureData\n */\n\nKeyringFactory.signatureData = SignatureData;\nKeyringFactory.role = KEY_ROLE;\nmodule.exports = KeyringFactory;","map":{"version":3,"names":["_","require","AccountLib","utils","PrivateKey","KEY_ROLE","isMultipleKeysFormat","isRoleBasedKeysFormat","decryptKey","SingleKeyring","MultipleKeyring","RoleBasedKeyring","SignatureData","KeyringFactory","generate","entropy","random","create","randomHex","createWithSingleKey","address","privateKey","generateSingleKey","generateMultipleKeys","num","undefined","isNumber","isString","Error","randomKeys","i","push","generateRoleBasedKeys","numArr","isArray","length","roleLast","j","key","createWithMultipleKey","createWithRoleBasedKey","createFromPrivateKey","isKlaytnWalletKey","createFromKlaytnWalletKey","acct","fromPrivate","addHexPrefix","klaytnWalletKey","parsed","parsePrivateKey","keyArray","roledBasedKeyArray","decrypt","keystore","password","json","isObject","cloneDeep","JSON","parse","version","console","warn","crypto","keyring","keys","transactionKey","roleTransactionKey","updateKey","roleAccountUpdateKey","feePayerKey","roleFeePayerKey","decrypted","singleKeyring","multipleKeyring","roleBasedKeyring","signatureData","role","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-wallet/src/keyring/keyringFactory.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst AccountLib = require('eth-lib/lib/account')\n\nconst utils = require('../../../caver-utils/src')\nconst PrivateKey = require('./privateKey')\nconst { KEY_ROLE, isMultipleKeysFormat, isRoleBasedKeysFormat } = require('./keyringHelper')\nconst { decryptKey } = require('./keyringHelper')\nconst SingleKeyring = require('./singleKeyring')\nconst MultipleKeyring = require('./multipleKeyring')\nconst RoleBasedKeyring = require('./roleBasedKeyring')\nconst SignatureData = require('./signatureData')\n\n/**\n * representing a KeyringFactory which supports create functions for Keyring({@link SingleKeyring}/{@link MultipleKeyring}/{@link RoleBasedKeyring}).\n * @class\n * @hideconstructor\n */\nclass KeyringFactory {\n    /**\n     * Generates a {@link SingleKeyring} instance with a randomly generated private key.\n     *\n     * @example\n     * const keyring = caver.wallet.keyring.generate()\n     *\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {SingleKeyring} A randomly generated single keyring instance is returned.\n     */\n    static generate(entropy) {\n        const random = AccountLib.create(entropy || utils.randomHex(32))\n        return KeyringFactory.createWithSingleKey(random.address, random.privateKey)\n    }\n\n    /**\n     * generates a single private key string\n     *\n     * @example\n     * const privateKey = caver.wallet.keyring.generateSingleKey()\n     *\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {string} The private key string is returned.\n     */\n    static generateSingleKey(entropy) {\n        return AccountLib.create(entropy || utils.randomHex(32)).privateKey\n    }\n\n    /**\n     * Generates an array of private key strings.\n     *\n     * @example\n     * const privateKeys = caver.wallet.keyring.generateMultipleKeys()\n     *\n     * @param {number} num The number of private key strings.\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {Array.<string>} An array that includes private key strings is returned.\n     */\n    static generateMultipleKeys(num, entropy) {\n        if (num === undefined || !_.isNumber(num) || _.isString(num)) {\n            throw new Error(`To generate random multiple private keys, the number of keys should be defined.`)\n        }\n\n        const randomKeys = []\n        for (let i = 0; i < num; i++) {\n            randomKeys.push(AccountLib.create(entropy || utils.randomHex(32)).privateKey)\n        }\n        return randomKeys\n    }\n\n    /**\n     * Generates a 2D array of which each array element contains keys defined for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\n     *\n     * @example\n     * const privateKeysByRoles = caver.wallet.keyring.generateRoleBasedKeys([2, 1, 3])\n     *\n     * @param {Array.<number>} numArr An array containing the number of keys for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {Array.<Array.<string>>} A 2D array of which each array element contains keys defined for each role is returned.\n     */\n    static generateRoleBasedKeys(numArr, entropy) {\n        if (numArr === undefined || !_.isArray(numArr) || _.isString(numArr)) {\n            throw new Error(\n                `To generate random role-based private keys, an array containing the number of keys for each role should be defined.`\n            )\n        }\n        if (numArr.length > KEY_ROLE.roleLast) {\n            throw new Error(`Unsupported role. The length of array should be less than ${KEY_ROLE.roleLast}.`)\n        }\n\n        const randomKeys = [[], [], []]\n        for (let i = 0; i < numArr.length; i++) {\n            for (let j = 0; j < numArr[i]; j++) {\n                randomKeys[i].push(AccountLib.create(entropy || utils.randomHex(32)).privateKey)\n            }\n        }\n        return randomKeys\n    }\n\n    /**\n     * Creates a Keyring instance with parameters.\n     *\n     * If key is a private key string, a {@link SingleKeyring} instance that uses a single private key is created.\n     * If key is an array containing private key strings, a {@link MultipleKeyring} instance that use multiple private keys is created.\n     * If key is a 2D array of which each element contains the private key(s) to be used for each role, a {@link RoleBasedKeyring} instance is created.\n     *\n     * @example\n     * const singleKeyring = caver.wallet.keyring.create('0x${address in hex}', '0x{private key}')\n     * const multipleKeyring = caver.wallet.keyring.create('0x${address in hex}', ['0x{private key}', '0x{private key}'])\n     * const roleBasedKeyring = caver.wallet.keyring.create('0x${address in hex}', [['0x{private key}', '0x{private key}'], ['0x{private key}'], ['0x{private key}', '0x{private key}']])\n     *\n     * @param {string} address An address of keyring.\n     * @param {string|Array.<string>|Array.<Array.<string>>} key The private key string, an array of private keys, or a 2D array of which each element contains key(s) to be used for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\n     * @return {KeyringContainer.Keyring} The keyring instance is returned. Depending on the key parameter, it can be {@link SingleKeyring}, {@link MultipleKeyring} or {@link RoleBasedKeyring}.\n     */\n    static create(address, key) {\n        if (_.isString(key)) return KeyringFactory.createWithSingleKey(address, key)\n        if (isMultipleKeysFormat(key)) return KeyringFactory.createWithMultipleKey(address, key)\n        if (isRoleBasedKeysFormat(key)) return KeyringFactory.createWithRoleBasedKey(address, key)\n\n        throw new Error(`Unsupported key type: ${typeof key}`)\n    }\n\n    /**\n     * Creates a SingleKeyring instance from a private key string or a {@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-wallet-key-format|KlaytnWalletKey}.\n     *\n     * @example\n     * const keyring = caver.wallet.keyring.createFromPrivateKey('0x{private key}')\n     *\n     * @param {string} privateKey This parameter can be either a private key or KlaytnWalletKey.\n     * @return {SingleKeyring} The SingleKeyring instance is returned.\n     */\n    static createFromPrivateKey(privateKey) {\n        if (!_.isString(privateKey)) throw new Error(`Invalid format of parameter. 'privateKey' should be in format of string`)\n        if (utils.isKlaytnWalletKey(privateKey)) return KeyringFactory.createFromKlaytnWalletKey(privateKey)\n\n        const acct = AccountLib.fromPrivate(utils.addHexPrefix(privateKey))\n        return KeyringFactory.createWithSingleKey(acct.address, acct.privateKey)\n    }\n\n    /**\n     * Creates a SingleKeyring instance from a {@link https://docs.klaytn.com/klaytn/design/accounts#klaytn-wallet-key-format|KlaytnWalletKey} string.\n     *\n     * @example\n     * const keyring = caver.wallet.keyring.createFromKlaytnWalletKey('0x{private key}0x{type}0x{address in hex}')\n     *\n     * @param {string} klaytnWalletKey The KlaytnWalletKey string.\n     * @return {SingleKeyring} The SingleKeyring instance is returned.\n     */\n    static createFromKlaytnWalletKey(klaytnWalletKey) {\n        if (!_.isString(klaytnWalletKey)) throw new Error(`Invalid format of parameter. 'klaytnWalletKey' should be in format of string`)\n        if (!utils.isKlaytnWalletKey(klaytnWalletKey)) {\n            throw new Error(`Invalid KlaytnWalletKey: ${klaytnWalletKey}`)\n        }\n        const parsed = utils.parsePrivateKey(klaytnWalletKey)\n        return KeyringFactory.createWithSingleKey(parsed.address, parsed.privateKey)\n    }\n\n    /**\n     * Creates a {@link SingleKeyring} instance from an address and a private key string.\n     *\n     * @example\n     * const keyring = caver.wallet.keyring.createWithSingleKey('0x{address in hex}', '0x{private key}')\n     *\n     * @param {string} address An address to be used for creating a keyring.\n     * @param {string} key A private key string.\n     * @return {SingleKeyring} The {@link SingleKeyring} instance is returned.\n     */\n    static createWithSingleKey(address, key) {\n        if (!_.isString(key))\n            throw new Error(`Invalid format of parameter. Use 'fromMultipleKey' or 'fromRoleBasedKey' for two or more keys.`)\n        if (utils.isKlaytnWalletKey(key))\n            throw new Error(`Invalid format of parameter. Use 'fromKlaytnWalletKey' to create Keyring from KlaytnWalletKey.`)\n\n        return new SingleKeyring(address, key)\n    }\n\n    /**\n     * Creates a {@link MultipleKeyring} instance from an address and private key strings.\n     *\n     * @example\n     * const keyring = caver.wallet.keyring.createWithMultipleKey('0x{address in hex}', ['0x{private key1}', '0x{private key2}' ])\n     *\n     * @param {string} address An address of keyring.\n     * @param {Array.<string>} keyArray An array of private key strings.\n     * @return {MultipleKeyring} The {@link MultipleKeyring} instance is returned.\n     */\n    static createWithMultipleKey(address, keyArray) {\n        if (!isMultipleKeysFormat(keyArray))\n            throw new Error(`Invalid format of parameter. 'keyArray' should be an array of private key strings.`)\n\n        return new MultipleKeyring(address, keyArray)\n    }\n\n    /**\n     * Creates a {@link RoleBasedKeyring} instance from an address and a 2D array of which each array element contains keys defined for each {@link https://docs.klaytn.com/klaytn/design/accounts#roles|role}.\n     *\n     * @param {string} address An address of keyring.\n     * @param {Array.<Array.<string>>} roledBasedKeyArray A two-dimensional array containing arrays of private key strings for each role.\n     * @return {RoleBasedKeyring} The {@link RoleBasedKeyring} instance is returned.\n     */\n    static createWithRoleBasedKey(address, roledBasedKeyArray) {\n        if (!isRoleBasedKeysFormat(roledBasedKeyArray))\n            throw new Error(\n                `Invalid format of parameter. 'roledBasedKeyArray' should be in the form of an array defined as an array for the keys to be used for each role.`\n            )\n\n        return new RoleBasedKeyring(address, roledBasedKeyArray)\n    }\n\n    /**\n     * An object that defines encrypted keystore.\n     *\n     * @typedef {object} KeyringFactory.Keystore\n     * @property {number} version - The version number of the keystore.\n     * @property {string} id - The id in the keystore.\n     * @property {string} address - The address in the encrypted keyring.\n     * @property {object} [crypto] - The encrypted private key for v3.\n     * @property {Array.<object>|Array.<Array.<object>>} [keyring] - The encrypted private key(s) for v4.\n     */\n    /**\n     * Decrypts a keystore v3 or v4 JSON and returns the decrypted Keyring instance.\n     *\n     * @example\n     * // Decrypt keystroe v4 (encrypted single keyring)\n     * const decrypted = caver.wallet.keyring.decrypt({\n     *     version: 4,\n     *     id: '9c12de05-0153-41c7-a8b7-849472eb5de7',\n     *     address: '0xc02cec4d0346bf4124deeb55c5216a4138a40a8c',\n     *     keyring: [\n     *         {\n     *             ciphertext: 'eacf496cea5e80eca291251b3743bf93cdbcf7072efc3a74efeaf518e2796b15',\n     *             cipherparams: { iv: 'd688a4319342e872cefcf51aef3ec2da' },\n     *             cipher: 'aes-128-ctr',\n     *             kdf: 'scrypt',\n     *             kdfparams: {\n     *                 dklen: 32,\n     *                 salt: 'c3cee502c7157e0faa42386c6d666116ffcdf093c345166c502e23bc34e6ba40',\n     *                 n: 4096,\n     *                 r: 8,\n     *                 p: 1\n     *             },\n     *             mac: '4b49574f3d3356fa0d04f73e07d5a2a6bbfdd185bedfa31f37f347bc98f2ef26'\n     *         }\n     *     ]\n     * }, 'password')\n     *\n     * // Decrypt keystroe v4 (encrypted multiple keyring)\n     * const decrypted = caver.wallet.keyring.decrypt({\n     *     version: 4,\n     *     id: '55da3f9c-6444-4fc1-abfa-f2eabfc57501',\n     *     address: '0x86bce8c859f5f304aa30adb89f2f7b6ee5a0d6e2',\n     *     keyring: [\n     *         {\n     *             ciphertext: '93dd2c777abd9b80a0be8e1eb9739cbf27c127621a5d3f81e7779e47d3bb22f6',\n     *             cipherparams: { iv: '84f90907f3f54f53d19cbd6ae1496b86' },\n     *             cipher: 'aes-128-ctr',\n     *             kdf: 'scrypt',\n     *             kdfparams: {\n     *                 dklen: 32,\n     *                 salt: '69bf176a136c67a39d131912fb1e0ada4be0ed9f882448e1557b5c4233006e10',\n     *                 n: 4096,\n     *                 r: 8,\n     *                 p: 1,\n     *             },\n     *             mac: '8f6d1d234f4a87162cf3de0c7fb1d4a8421cd8f5a97b86b1a8e576ffc1eb52d2',\n     *         },\n     *         {\n     *             ciphertext: '53d50b4e86b550b26919d9b8cea762cd3c637dfe4f2a0f18995d3401ead839a6',\n     *             cipherparams: { iv: 'd7a6f63558996a9f99e7daabd289aa2c' },\n     *             cipher: 'aes-128-ctr',\n     *             kdf: 'scrypt',\n     *             kdfparams: {\n     *                 dklen: 32,\n     *                 salt: '966116898d90c3e53ea09e4850a71e16df9533c1f9e1b2e1a9edec781e1ad44f',\n     *                 n: 4096,\n     *                 r: 8,\n     *                 p: 1,\n     *             },\n     *             mac: 'bca7125e17565c672a110ace9a25755847d42b81aa7df4bb8f5ce01ef7213295',\n     *         },\n     *     ],\n     * }, 'password')\n     *\n     * // Decrypt keystroe v4 (encrypted role-based keyring)\n     * const decrypted = caver.wallet.keyring.decrypt({\n     *     version: 4,\n     *     id: '55da3f9c-6444-4fc1-abfa-f2eabfc57501',\n     *     address: '0x86bce8c859f5f304aa30adb89f2f7b6ee5a0d6e2',\n     *     keyring: [\n     *         [\n     *             {\n     *                 ciphertext: '93dd2c777abd9b80a0be8e1eb9739cbf27c127621a5d3f81e7779e47d3bb22f6',\n     *                 cipherparams: { iv: '84f90907f3f54f53d19cbd6ae1496b86' },\n     *                 cipher: 'aes-128-ctr',\n     *                 kdf: 'scrypt',\n     *                 kdfparams: {\n     *                     dklen: 32,\n     *                     salt: '69bf176a136c67a39d131912fb1e0ada4be0ed9f882448e1557b5c4233006e10',\n     *                     n: 4096,\n     *                     r: 8,\n     *                     p: 1,\n     *                 },\n     *                 mac: '8f6d1d234f4a87162cf3de0c7fb1d4a8421cd8f5a97b86b1a8e576ffc1eb52d2',\n     *             },\n     *             {\n     *                 ciphertext: '53d50b4e86b550b26919d9b8cea762cd3c637dfe4f2a0f18995d3401ead839a6',\n     *                 cipherparams: { iv: 'd7a6f63558996a9f99e7daabd289aa2c' },\n     *                 cipher: 'aes-128-ctr',\n     *                 kdf: 'scrypt',\n     *                 kdfparams: {\n     *                     dklen: 32,\n     *                     salt: '966116898d90c3e53ea09e4850a71e16df9533c1f9e1b2e1a9edec781e1ad44f',\n     *                     n: 4096,\n     *                     r: 8,\n     *                     p: 1,\n     *                 },\n     *                 mac: 'bca7125e17565c672a110ace9a25755847d42b81aa7df4bb8f5ce01ef7213295',\n     *             },\n     *         ],\n     *         [\n     *             {\n     *                 ciphertext: 'f16def98a70bb2dae053f791882f3254c66d63416633b8d91c2848893e7876ce',\n     *                 cipherparams: { iv: 'f5006128a4c53bc02cada64d095c15cf' },\n     *                 cipher: 'aes-128-ctr',\n     *                 kdf: 'scrypt',\n     *                 kdfparams: {\n     *                     dklen: 32,\n     *                     salt: '0d8a2f71f79c4880e43ff0795f6841a24cb18838b3ca8ecaeb0cda72da9a72ce',\n     *                     n: 4096,\n     *                     r: 8,\n     *                     p: 1,\n     *                 },\n     *                 mac: '38b79276c3805b9d2ff5fbabf1b9d4ead295151b95401c1e54aed782502fc90a',\n     *             },\n     *         ],\n     *         [\n     *             {\n     *                 ciphertext: '544dbcc327942a6a52ad6a7d537e4459506afc700a6da4e8edebd62fb3dd55ee',\n     *                 cipherparams: { iv: '05dd5d25ad6426e026818b6fa9b25818' },\n     *                 cipher: 'aes-128-ctr',\n     *                 kdf: 'scrypt',\n     *                 kdfparams: {\n     *                     dklen: 32,\n     *                     salt: '3a9003c1527f65c772c54c6056a38b0048c2e2d58dc0e584a1d867f2039a25aa',\n     *                     n: 4096,\n     *                     r: 8,\n     *                     p: 1,\n     *                 },\n     *                 mac: '19a698b51409cc9ac22d63d329b1201af3c89a04a1faea3111eec4ca97f2e00f',\n     *             },\n     *             {\n     *                 ciphertext: 'dd6b920f02cbcf5998ed205f8867ddbd9b6b088add8dfe1774a9fda29ff3920b',\n     *                 cipherparams: { iv: 'ac04c0f4559dad80dc86c975d1ef7067' },\n     *                 cipher: 'aes-128-ctr',\n     *                 kdf: 'scrypt',\n     *                 kdfparams: {\n     *                     dklen: 32,\n     *                     salt: '22279c6dbcc706d7daa120022a236cfe149496dca8232b0f8159d1df999569d6',\n     *                     n: 4096,\n     *                     r: 8,\n     *                     p: 1,\n     *                 },\n     *                 mac: '1c54f7378fa279a49a2f790a0adb683defad8535a21bdf2f3dadc48a7bddf517',\n     *             },\n     *         ],\n     *     ],\n     * }, 'password')\n     *\n     * @param {KeyringFactory.KeystoreV4} keystore The keystore v3 or v4 to decrypt.\n     * @param {string} password The password used for encryption.\n     * @return {KeyringContainer.Keyring} The  decrypted keyring ({@link SingleKeyring}, {@link MultipleKeyring} or {@link RoleBasedKeyring}) instance is returned.\n     */\n    static decrypt(keystore, password) {\n        // To deep copy an object, using JSON.parse and JSON.stringify (object -> string -> object)\n        const json = _.isObject(keystore) ? _.cloneDeep(keystore) : JSON.parse(keystore)\n\n        if (json.version !== 3 && json.version !== 4) console.warn('This is not a V3 or V4 wallet.')\n\n        if (json.version === 3 && !json.crypto) {\n            throw new Error(\"Invalid keystore V3 format: 'crypto' is not defined.\")\n        } else if (json.version === 4 && !json.keyring) {\n            throw new Error(\"Invalid keystore V4 format: 'keyring' is not defined.\")\n        }\n\n        if (json.crypto) {\n            if (json.keyring) throw new Error(\"Invalid key store format: 'crypto' and 'keyring' cannot be defined together.\")\n\n            json.keyring = [json.crypto]\n            delete json.crypto\n        }\n\n        // AccountKeyRoleBased format\n        if (_.isArray(json.keyring[0])) {\n            const keys = []\n            const transactionKey = decryptKey(json.keyring[KEY_ROLE.roleTransactionKey], password)\n            transactionKey ? keys.push(transactionKey) : keys.push([])\n\n            const updateKey = decryptKey(json.keyring[KEY_ROLE.roleAccountUpdateKey], password)\n            updateKey ? keys.push(updateKey) : keys.push([])\n\n            const feePayerKey = decryptKey(json.keyring[KEY_ROLE.roleFeePayerKey], password)\n            feePayerKey ? keys.push(feePayerKey) : keys.push([])\n\n            return KeyringFactory.createWithRoleBasedKey(json.address, keys)\n        }\n\n        let decrypted = decryptKey(json.keyring, password)\n        decrypted = _.isArray(decrypted) ? decrypted : [decrypted]\n        if (decrypted.length === 1) return KeyringFactory.createWithSingleKey(json.address, decrypted[0])\n\n        return KeyringFactory.createWithMultipleKey(json.address, decrypted)\n    }\n}\n\n/**\n * @type {typeof PrivateKey}\n * @example\n * caver.wallet.keyring.privateKey\n * */\nKeyringFactory.privateKey = PrivateKey\n/**\n * @type {typeof SingleKeyring}\n * @example\n * caver.wallet.keyring.singleKeyring\n * */\nKeyringFactory.singleKeyring = SingleKeyring\n/**\n * @type {typeof MultipleKeyring}\n * @example\n * caver.wallet.keyring.multipleKeyring\n * */\nKeyringFactory.multipleKeyring = MultipleKeyring\n/**\n * @type {typeof RoleBasedKeyring}\n * @example\n * caver.wallet.keyring.roleBasedKeyring\n * */\nKeyringFactory.roleBasedKeyring = RoleBasedKeyring\n/**\n * @type {typeof SignatureData}\n * @example\n * caver.wallet.keyring.signatureData\n */\nKeyringFactory.signatureData = SignatureData\n\nKeyringFactory.role = KEY_ROLE\n\nmodule.exports = KeyringFactory\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACkB,OAAPC,OAAO,CAACC,QAAD,EAAWC,QAAX,EAAqB;IAC/B;IACA,MAAMC,IAAI,GAAGvD,CAAC,CAACwD,QAAF,CAAWH,QAAX,IAAuBrD,CAAC,CAACyD,SAAF,CAAYJ,QAAZ,CAAvB,GAA+CK,IAAI,CAACC,KAAL,CAAWN,QAAX,CAA5D;IAEA,IAAIE,IAAI,CAACK,OAAL,KAAiB,CAAjB,IAAsBL,IAAI,CAACK,OAAL,KAAiB,CAA3C,EAA8CC,OAAO,CAACC,IAAR,CAAa,gCAAb;;IAE9C,IAAIP,IAAI,CAACK,OAAL,KAAiB,CAAjB,IAAsB,CAACL,IAAI,CAACQ,MAAhC,EAAwC;MACpC,MAAM,IAAInC,KAAJ,CAAU,sDAAV,CAAN;IACH,CAFD,MAEO,IAAI2B,IAAI,CAACK,OAAL,KAAiB,CAAjB,IAAsB,CAACL,IAAI,CAACS,OAAhC,EAAyC;MAC5C,MAAM,IAAIpC,KAAJ,CAAU,uDAAV,CAAN;IACH;;IAED,IAAI2B,IAAI,CAACQ,MAAT,EAAiB;MACb,IAAIR,IAAI,CAACS,OAAT,EAAkB,MAAM,IAAIpC,KAAJ,CAAU,8EAAV,CAAN;MAElB2B,IAAI,CAACS,OAAL,GAAe,CAACT,IAAI,CAACQ,MAAN,CAAf;MACA,OAAOR,IAAI,CAACQ,MAAZ;IACH,CAjB8B,CAmB/B;;;IACA,IAAI/D,CAAC,CAACkC,OAAF,CAAUqB,IAAI,CAACS,OAAL,CAAa,CAAb,CAAV,CAAJ,EAAgC;MAC5B,MAAMC,IAAI,GAAG,EAAb;MACA,MAAMC,cAAc,GAAG1D,UAAU,CAAC+C,IAAI,CAACS,OAAL,CAAa3D,QAAQ,CAAC8D,kBAAtB,CAAD,EAA4Cb,QAA5C,CAAjC;MACAY,cAAc,GAAGD,IAAI,CAAClC,IAAL,CAAUmC,cAAV,CAAH,GAA+BD,IAAI,CAAClC,IAAL,CAAU,EAAV,CAA7C;MAEA,MAAMqC,SAAS,GAAG5D,UAAU,CAAC+C,IAAI,CAACS,OAAL,CAAa3D,QAAQ,CAACgE,oBAAtB,CAAD,EAA8Cf,QAA9C,CAA5B;MACAc,SAAS,GAAGH,IAAI,CAAClC,IAAL,CAAUqC,SAAV,CAAH,GAA0BH,IAAI,CAAClC,IAAL,CAAU,EAAV,CAAnC;MAEA,MAAMuC,WAAW,GAAG9D,UAAU,CAAC+C,IAAI,CAACS,OAAL,CAAa3D,QAAQ,CAACkE,eAAtB,CAAD,EAAyCjB,QAAzC,CAA9B;MACAgB,WAAW,GAAGL,IAAI,CAAClC,IAAL,CAAUuC,WAAV,CAAH,GAA4BL,IAAI,CAAClC,IAAL,CAAU,EAAV,CAAvC;MAEA,OAAOlB,cAAc,CAAC2B,sBAAf,CAAsCe,IAAI,CAACnC,OAA3C,EAAoD6C,IAApD,CAAP;IACH;;IAED,IAAIO,SAAS,GAAGhE,UAAU,CAAC+C,IAAI,CAACS,OAAN,EAAeV,QAAf,CAA1B;IACAkB,SAAS,GAAGxE,CAAC,CAACkC,OAAF,CAAUsC,SAAV,IAAuBA,SAAvB,GAAmC,CAACA,SAAD,CAA/C;IACA,IAAIA,SAAS,CAACrC,MAAV,KAAqB,CAAzB,EAA4B,OAAOtB,cAAc,CAACM,mBAAf,CAAmCoC,IAAI,CAACnC,OAAxC,EAAiDoD,SAAS,CAAC,CAAD,CAA1D,CAAP;IAE5B,OAAO3D,cAAc,CAAC0B,qBAAf,CAAqCgB,IAAI,CAACnC,OAA1C,EAAmDoD,SAAnD,CAAP;EACH;;AAxYgB;AA2YrB;AACA;AACA;AACA;AACA;;;AACA3D,cAAc,CAACQ,UAAf,GAA4BjB,UAA5B;AACA;AACA;AACA;AACA;AACA;;AACAS,cAAc,CAAC4D,aAAf,GAA+BhE,aAA/B;AACA;AACA;AACA;AACA;AACA;;AACAI,cAAc,CAAC6D,eAAf,GAAiChE,eAAjC;AACA;AACA;AACA;AACA;AACA;;AACAG,cAAc,CAAC8D,gBAAf,GAAkChE,gBAAlC;AACA;AACA;AACA;AACA;AACA;;AACAE,cAAc,CAAC+D,aAAf,GAA+BhE,aAA/B;AAEAC,cAAc,CAACgE,IAAf,GAAsBxE,QAAtB;AAEAyE,MAAM,CAACC,OAAP,GAAiBlE,cAAjB"},"metadata":{},"sourceType":"script"}