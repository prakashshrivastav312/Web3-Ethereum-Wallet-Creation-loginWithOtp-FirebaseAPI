{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst itPeekable = require('it-peekable');\n\nconst map = require('it-map');\n\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject,\n  mtimeToObject,\n  modeToNumber\n} = require('./utils'); // eslint-disable-next-line complexity\n\n/**\n * @typedef {import('ipfs-core-types/src/files').ToContent} ToContent\n */\n\n/**\n * @template {Blob|AsyncIterable<Uint8Array>} Content\n * @param {import('ipfs-core-types/src/files').ImportSource} input\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\n * @returns {AsyncIterable<import('ipfs-core-types/src/files').Entry<Content>>}\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports = async function* normaliseInput(input, normaliseContent) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  } // String\n\n\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  } // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n\n\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  } // Browser ReadableStream\n\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  } // Iterable<?>\n\n\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n    /** @type {any} value **/\n\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield* [];\n      return;\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n\n    if (Number.isInteger(value) || isBytes(value)) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    } // (Async)Iterable<Blob>\n    // (Async)Iterable<String>\n    // (Async)Iterable<{ path, content }>\n\n\n    if (isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String) {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    } // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n\n\n    if (value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value)) {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    }\n  } // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js streams have a\n  // `path` property that passes this check.\n\n\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n};\n/**\n * @template {Blob|AsyncIterable<Uint8Array>} Content\n * @param {import('ipfs-core-types/src/files').ToEntry} input\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\n * @returns {Promise<import('ipfs-core-types/src/files').Entry<Content>>}\n */\n\n\nasync function toFileObject(input, normaliseContent) {\n  // @ts-ignore - Those properties don't exist on most input types\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n  const file = {\n    path: path || '',\n    mode: modeToNumber(mode),\n    mtime: mtimeToObject(mtime)\n  };\n\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    // Not already a file object with path or content prop\n    // @ts-ignore - input still can be different ToContent\n    file.content = await normaliseContent(input);\n  }\n\n  return file;\n}","map":{"version":3,"names":["errCode","require","browserStreamToIt","itPeekable","map","isBytes","isBlob","isReadableStream","isFileObject","mtimeToObject","modeToNumber","module","exports","normaliseInput","input","normaliseContent","undefined","Error","String","toFileObject","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","push","Number","isInteger","path","mode","mtime","content","file"],"sources":["C:/Users/acer/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-input.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst itPeekable = require('it-peekable')\nconst map = require('it-map')\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject,\n  mtimeToObject,\n  modeToNumber\n} = require('./utils')\n\n// eslint-disable-next-line complexity\n\n/**\n * @typedef {import('ipfs-core-types/src/files').ToContent} ToContent\n */\n/**\n * @template {Blob|AsyncIterable<Uint8Array>} Content\n * @param {import('ipfs-core-types/src/files').ImportSource} input\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\n * @returns {AsyncIterable<import('ipfs-core-types/src/files').Entry<Content>>}\n */\n// eslint-disable-next-line complexity\nmodule.exports = async function * normaliseInput (input, normaliseContent) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value) || isBytes(value)) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<Blob>\n    // (Async)Iterable<String>\n    // (Async)Iterable<{ path, content }>\n    if (isFileObject(value) || isBlob(value) || typeof value === 'string' || value instanceof String) {\n      yield * map(peekable, (value) => toFileObject(value, normaliseContent))\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value)) {\n      yield * map(peekable, (value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js streams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @template {Blob|AsyncIterable<Uint8Array>} Content\n * @param {import('ipfs-core-types/src/files').ToEntry} input\n * @param {(content:ToContent) => Content|Promise<Content>} normaliseContent\n * @returns {Promise<import('ipfs-core-types/src/files').Entry<Content>>}\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-ignore - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  const file = { path: path || '', mode: modeToNumber(mode), mtime: mtimeToObject(mtime) }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-ignore - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}