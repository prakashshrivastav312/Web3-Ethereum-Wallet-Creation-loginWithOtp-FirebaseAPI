{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bcashGetTransaction = exports.bcashGetTxForAccount = exports.bcashGetBlockHash = exports.bcashGetBlock = exports.bcashGetCurrentBlock = exports.bcashBroadcast = void 0;\n\nconst tatum_1 = require(\"../connector/tatum\");\n/**\n * Broadcasts signed transaction to the Bch blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BchBroadcast\" target=\"_blank\">Tatum API documentation</a>\n */\n\n\nconst bcashBroadcast = async (txData, signatureId) => tatum_1.post(`/v3/bcash/broadcast`, {\n  txData,\n  signatureId\n});\n\nexports.bcashBroadcast = bcashBroadcast;\n/**\n * Returns information about Bch blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BchGetBlockChainInfo\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bcashGetCurrentBlock = async () => tatum_1.get(`/v3/bcash/info`);\n\nexports.bcashGetCurrentBlock = bcashGetCurrentBlock;\n/**\n * Returns block by its hash from Bch blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BchGetBlock\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bcashGetBlock = async hash => tatum_1.get(`/v3/bcash/block/${hash}`);\n\nexports.bcashGetBlock = bcashGetBlock;\n/**\n * Returns block hash by index from Bch blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BchGetBlockHash\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bcashGetBlockHash = async i => tatum_1.get(`/v3/bcash/block/hash/${i}`);\n\nexports.bcashGetBlockHash = bcashGetBlockHash;\n/**\n * Returns transactions for address from Bch blockchain. <br>\n *\n * @param address For which address will be transactions returned.\n * @param skip Offset how many transactions will be skipped.\n *\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BchGetTxByAddress\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bcashGetTxForAccount = async function (address) {\n  let skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return tatum_1.get(`/v3/bcash/transaction/address/${address}?skip=${skip}`);\n};\n\nexports.bcashGetTxForAccount = bcashGetTxForAccount;\n/**\n * Returns transaction by hash from Bch blockchain. <br>\n * For more details, see <a href=\"https://tatum.io/apidoc#operation/BchGetRawTransaction\" target=\"_blank\">Tatum API documentation</a>\n */\n\nconst bcashGetTransaction = async hash => tatum_1.get(`/v3/bcash/transaction/${hash}`);\n\nexports.bcashGetTransaction = bcashGetTransaction;","map":{"version":3,"mappings":";;;;;;;AAAA;AAGA;;;;;;AAIO,MAAMA,cAAc,GAAG,OAAOC,MAAP,EAAuBC,WAAvB,KAC5BC,aAAK,qBAAL,EAA4B;EAAEF,MAAF;EAAUC;AAAV,CAA5B,CADK;;AAAME,yBAAcJ,cAAd;AAGb;;;;;AAIO,MAAMK,oBAAoB,GAAG,YAA8BF,YAAI,gBAAJ,CAA3D;;AAAMC,+BAAoBC,oBAApB;AAEb;;;;;AAIO,MAAMC,aAAa,GAAG,MAAOC,IAAP,IAA2CJ,YAAI,mBAAmBI,IAAI,EAA3B,CAAjE;;AAAMH,wBAAaE,aAAb;AAEb;;;;;AAIO,MAAME,iBAAiB,GAAG,MAAOC,CAAP,IAAyCN,YAAI,wBAAwBM,CAAC,EAA7B,CAAnE;;AAAML,4BAAiBI,iBAAjB;AAEb;;;;;;;;;AAQO,MAAME,oBAAoB,GAAG,gBAAOC,OAAP;EAAA,IAAwBC,IAAxB,uEAA+B,CAA/B;EAAA,OAClCT,YAAI,iCAAiCQ,OAAO,SAASC,IAAI,EAAzD,CADkC;AAAA,CAA7B;;AAAMR,+BAAoBM,oBAApB;AAGb;;;;;AAIO,MAAMG,mBAAmB,GAAG,MAAON,IAAP,IAAwCJ,YAAI,yBAAyBI,IAAI,EAAjC,CAApE;;AAAMH,8BAAmBS,mBAAnB","names":["bcashBroadcast","txData","signatureId","tatum_1","exports","bcashGetCurrentBlock","bcashGetBlock","hash","bcashGetBlockHash","i","bcashGetTxForAccount","address","skip","bcashGetTransaction"],"sourceRoot":"","sources":["../../../src/blockchain/bcash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}