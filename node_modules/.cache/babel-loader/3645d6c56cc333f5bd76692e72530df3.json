{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n/**\n * Determines whether a string contains only hexadecimal values\n *\n * @name JSUtil.isHexa\n * @param {string} value\n * @return {boolean} true if the string is the hexa representation of a number\n */\n\n\nvar isHexa = function isHexa(value) {\n  if (!_.isString(value)) {\n    return false;\n  }\n\n  return /^[0-9a-fA-F]+$/.test(value);\n};\n/**\n * @namespace JSUtil\n */\n\n\nmodule.exports = {\n  /**\n   * Test if an argument is a valid JSON object. If it is, returns a truthy\n   * value (the json object decoded), so no double JSON.parse call is necessary\n   *\n   * @param {string} arg\n   * @return {Object|boolean} false if the argument is not a JSON string.\n   */\n  isValidJSON: function isValidJSON(arg) {\n    var parsed;\n\n    if (!_.isString(arg)) {\n      return false;\n    }\n\n    try {\n      parsed = JSON.parse(arg);\n    } catch (e) {\n      return false;\n    }\n\n    if (typeof parsed === 'object') {\n      return true;\n    }\n\n    return false;\n  },\n  isHexa: isHexa,\n  isHexaString: isHexa,\n\n  /**\n   * Clone an array\n   */\n  cloneArray: function (array) {\n    return [].concat(array);\n  },\n\n  /**\n   * Define immutable properties on a target object\n   *\n   * @param {Object} target - An object to be extended\n   * @param {Object} values - An object of properties\n   * @return {Object} The target object\n   */\n  defineImmutable: function defineImmutable(target, values) {\n    Object.keys(values).forEach(function (key) {\n      Object.defineProperty(target, key, {\n        configurable: false,\n        enumerable: true,\n        value: values[key]\n      });\n    });\n    return target;\n  },\n\n  /**\n   * Checks that a value is a natural number, a positive integer or zero.\n   *\n   * @param {*} value\n   * @return {Boolean}\n   */\n  isNaturalNumber: function isNaturalNumber(value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value && value >= 0;\n  }\n};","map":{"version":3,"names":["_","require","isHexa","value","isString","test","module","exports","isValidJSON","arg","parsed","JSON","parse","e","isHexaString","cloneArray","array","concat","defineImmutable","target","values","Object","keys","forEach","key","defineProperty","configurable","enumerable","isNaturalNumber","isFinite","Math","floor"],"sources":["C:/Users/acer/node_modules/bitcore-lib-doge/lib/util/js.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\n\n/**\n * Determines whether a string contains only hexadecimal values\n *\n * @name JSUtil.isHexa\n * @param {string} value\n * @return {boolean} true if the string is the hexa representation of a number\n */\nvar isHexa = function isHexa(value) {\n  if (!_.isString(value)) {\n    return false;\n  }\n  return /^[0-9a-fA-F]+$/.test(value);\n};\n\n/**\n * @namespace JSUtil\n */\nmodule.exports = {\n  /**\n   * Test if an argument is a valid JSON object. If it is, returns a truthy\n   * value (the json object decoded), so no double JSON.parse call is necessary\n   *\n   * @param {string} arg\n   * @return {Object|boolean} false if the argument is not a JSON string.\n   */\n  isValidJSON: function isValidJSON(arg) {\n    var parsed;\n    if (!_.isString(arg)) {\n      return false;\n    }\n    try {\n      parsed = JSON.parse(arg);\n    } catch (e) {\n      return false;\n    }\n    if (typeof(parsed) === 'object') {\n      return true;\n    }\n    return false;\n  },\n  isHexa: isHexa,\n  isHexaString: isHexa,\n\n  /**\n   * Clone an array\n   */\n  cloneArray: function(array) {\n    return [].concat(array);\n  },\n\n  /**\n   * Define immutable properties on a target object\n   *\n   * @param {Object} target - An object to be extended\n   * @param {Object} values - An object of properties\n   * @return {Object} The target object\n   */\n  defineImmutable: function defineImmutable(target, values) {\n    Object.keys(values).forEach(function(key){\n      Object.defineProperty(target, key, {\n        configurable: false,\n        enumerable: true,\n        value: values[key]\n      });\n    });\n    return target;\n  },\n  /**\n   * Checks that a value is a natural number, a positive integer or zero.\n   *\n   * @param {*} value\n   * @return {Boolean}\n   */\n  isNaturalNumber: function isNaturalNumber(value) {\n    return typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value &&\n      value >= 0;\n  }\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,MAAM,GAAG,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;EAClC,IAAI,CAACH,CAAC,CAACI,QAAF,CAAWD,KAAX,CAAL,EAAwB;IACtB,OAAO,KAAP;EACD;;EACD,OAAO,iBAAiBE,IAAjB,CAAsBF,KAAtB,CAAP;AACD,CALD;AAOA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB;EACf;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,SAASA,WAAT,CAAqBC,GAArB,EAA0B;IACrC,IAAIC,MAAJ;;IACA,IAAI,CAACV,CAAC,CAACI,QAAF,CAAWK,GAAX,CAAL,EAAsB;MACpB,OAAO,KAAP;IACD;;IACD,IAAI;MACFC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAT;IACD,CAFD,CAEE,OAAOI,CAAP,EAAU;MACV,OAAO,KAAP;IACD;;IACD,IAAI,OAAOH,MAAP,KAAmB,QAAvB,EAAiC;MAC/B,OAAO,IAAP;IACD;;IACD,OAAO,KAAP;EACD,CAtBc;EAuBfR,MAAM,EAAEA,MAvBO;EAwBfY,YAAY,EAAEZ,MAxBC;;EA0Bf;AACF;AACA;EACEa,UAAU,EAAE,UAASC,KAAT,EAAgB;IAC1B,OAAO,GAAGC,MAAH,CAAUD,KAAV,CAAP;EACD,CA/Bc;;EAiCf;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,eAAe,EAAE,SAASA,eAAT,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyC;IACxDC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4B,UAASC,GAAT,EAAa;MACvCH,MAAM,CAACI,cAAP,CAAsBN,MAAtB,EAA8BK,GAA9B,EAAmC;QACjCE,YAAY,EAAE,KADmB;QAEjCC,UAAU,EAAE,IAFqB;QAGjCxB,KAAK,EAAEiB,MAAM,CAACI,GAAD;MAHoB,CAAnC;IAKD,CAND;IAOA,OAAOL,MAAP;EACD,CAjDc;;EAkDf;AACF;AACA;AACA;AACA;AACA;EACES,eAAe,EAAE,SAASA,eAAT,CAAyBzB,KAAzB,EAAgC;IAC/C,OAAO,OAAOA,KAAP,KAAiB,QAAjB,IACL0B,QAAQ,CAAC1B,KAAD,CADH,IAEL2B,IAAI,CAACC,KAAL,CAAW5B,KAAX,MAAsBA,KAFjB,IAGLA,KAAK,IAAI,CAHX;EAID;AA7Dc,CAAjB"},"metadata":{},"sourceType":"script"}