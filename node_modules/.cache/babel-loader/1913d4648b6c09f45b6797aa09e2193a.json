{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Vector256 = void 0;\n\nvar serialized_type_1 = require(\"./serialized-type\");\n\nvar hash_256_1 = require(\"./hash-256\");\n\nvar binary_serializer_1 = require(\"../serdes/binary-serializer\");\n/**\n * TypeGuard for Array<string>\n */\n\n\nfunction isStrings(arg) {\n  return Array.isArray(arg) && (arg.length === 0 || typeof arg[0] === 'string');\n}\n/**\n * Class for serializing and deserializing vectors of Hash256\n */\n\n\nvar Vector256 =\n/** @class */\nfunction (_super) {\n  __extends(Vector256, _super);\n\n  function Vector256(bytes) {\n    return _super.call(this, bytes) || this;\n  }\n  /**\n   * Construct a Vector256 from a BinaryParser\n   *\n   * @param parser BinaryParser to\n   * @param hint length of the vector, in bytes, optional\n   * @returns a Vector256 object\n   */\n\n\n  Vector256.fromParser = function (parser, hint) {\n    var bytesList = new binary_serializer_1.BytesList();\n    var bytes = hint !== null && hint !== void 0 ? hint : parser.size();\n    var hashes = bytes / 32;\n\n    for (var i = 0; i < hashes; i++) {\n      hash_256_1.Hash256.fromParser(parser).toBytesSink(bytesList);\n    }\n\n    return new Vector256(bytesList.toBytes());\n  };\n  /**\n   * Construct a Vector256 object from an array of hashes\n   *\n   * @param value A Vector256 object or array of hex-strings representing Hash256's\n   * @returns a Vector256 object\n   */\n\n\n  Vector256.from = function (value) {\n    if (value instanceof Vector256) {\n      return value;\n    }\n\n    if (isStrings(value)) {\n      var bytesList_1 = new binary_serializer_1.BytesList();\n      value.forEach(function (hash) {\n        hash_256_1.Hash256.from(hash).toBytesSink(bytesList_1);\n      });\n      return new Vector256(bytesList_1.toBytes());\n    }\n\n    throw new Error('Cannot construct Vector256 from given value');\n  };\n  /**\n   * Return an Array of hex-strings represented by this.bytes\n   *\n   * @returns An Array of strings representing the Hash256 objects\n   */\n\n\n  Vector256.prototype.toJSON = function () {\n    if (this.bytes.byteLength % 32 !== 0) {\n      throw new Error('Invalid bytes for Vector256');\n    }\n\n    var result = [];\n\n    for (var i = 0; i < this.bytes.byteLength; i += 32) {\n      result.push(this.bytes.slice(i, i + 32).toString('hex').toUpperCase());\n    }\n\n    return result;\n  };\n\n  return Vector256;\n}(serialized_type_1.SerializedType);\n\nexports.Vector256 = Vector256;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;AAGA;;;;;AAGA,SAASA,SAAT,CAAmBC,GAAnB,EAAsB;EACpB,OAAOC,KAAK,CAACC,OAAN,CAAcF,GAAd,MAAuBA,GAAG,CAACG,MAAJ,KAAe,CAAf,IAAoB,OAAOH,GAAG,CAAC,CAAD,CAAV,KAAkB,QAA7D,CAAP;AACD;AAED;;;;;AAGA;AAAA;AAAA;EAAwBI;;EACtB,mBAAYC,KAAZ,EAAyB;WACvBC,kBAAMD,KAAN,KAAY;EACb;EAED;;;;;;;;;EAOOE,uBAAP,UAAkBC,MAAlB,EAAwCC,IAAxC,EAAqD;IACnD,IAAMC,SAAS,GAAG,IAAIC,6BAAJ,EAAlB;IACA,IAAMN,KAAK,GAAGI,IAAI,SAAJ,QAAI,WAAJ,UAAQD,MAAM,CAACI,IAAP,EAAtB;IACA,IAAMC,MAAM,GAAGR,KAAK,GAAG,EAAvB;;IACA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;MAC/BC,mBAAQC,UAAR,CAAmBR,MAAnB,EAA2BS,WAA3B,CAAuCP,SAAvC;IACD;;IACD,OAAO,IAAIH,SAAJ,CAAcG,SAAS,CAACQ,OAAV,EAAd,CAAP;EACD,CARM;EAUP;;;;;;;;EAMOX,iBAAP,UAAiDY,KAAjD,EAAyD;IACvD,IAAIA,KAAK,YAAYZ,SAArB,EAAgC;MAC9B,OAAOY,KAAP;IACD;;IAED,IAAIpB,SAAS,CAACoB,KAAD,CAAb,EAAsB;MACpB,IAAMC,WAAS,GAAG,IAAIT,6BAAJ,EAAlB;MACAQ,KAAK,CAACE,OAAN,CAAc,UAACC,IAAD,EAAK;QACjBP,mBAAQQ,IAAR,CAAaD,IAAb,EAAmBL,WAAnB,CAA+BG,WAA/B;MACD,CAFD;MAGA,OAAO,IAAIb,SAAJ,CAAca,WAAS,CAACF,OAAV,EAAd,CAAP;IACD;;IAED,MAAM,IAAIM,KAAJ,CAAU,6CAAV,CAAN;EACD,CAdM;EAgBP;;;;;;;EAKAjB;IACE,IAAI,KAAKF,KAAL,CAAWoB,UAAX,GAAwB,EAAxB,KAA+B,CAAnC,EAAsC;MACpC,MAAM,IAAID,KAAJ,CAAU,6BAAV,CAAN;IACD;;IAED,IAAME,MAAM,GAAkB,EAA9B;;IACA,KAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,KAAL,CAAWoB,UAA/B,EAA2CX,CAAC,IAAI,EAAhD,EAAoD;MAClDY,MAAM,CAACC,IAAP,CACE,KAAKtB,KAAL,CACGuB,KADH,CACSd,CADT,EACYA,CAAC,GAAG,EADhB,EAEGe,QAFH,CAEY,KAFZ,EAGGC,WAHH,EADF;IAMD;;IACD,OAAOJ,MAAP;EACD,CAfD;;EAgBF;AAAC,CAjED,CAAwBK,gCAAxB;;AAmESC","names":["isStrings","arg","Array","isArray","length","__extends","bytes","_super","Vector256","parser","hint","bytesList","binary_serializer_1","size","hashes","i","hash_256_1","fromParser","toBytesSink","toBytes","value","bytesList_1","forEach","hash","from","Error","byteLength","result","push","slice","toString","toUpperCase","serialized_type_1","exports"],"sourceRoot":"","sources":["../../src/types/vector-256.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}