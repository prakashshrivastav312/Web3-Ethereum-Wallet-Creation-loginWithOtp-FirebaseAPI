{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareBitcoinCashSignedTransaction = exports.signBitcoinCashKMSTransaction = exports.sendBitcoinCashTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\")); // @ts-ignore\n\n\nconst coininfo_1 = __importDefault(require(\"coininfo\"));\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n\nconst wallet_1 = require(\"../wallet\");\n\nconst {\n  ECSignature,\n  Transaction,\n  ECPair,\n  TransactionBuilder // tslint:disable-next-line:no-var-requires\n\n} = require('@tatumio/bitcoincashjs2-lib');\n\nconst getAddress = address => {\n  try {\n    return wallet_1.toLegacyAddress(address);\n  } catch (e) {\n    return address;\n  }\n};\n/**\n * Send Bitcoin Cash transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\n\nconst sendBitcoinCashTransaction = async (testnet, body) => {\n  return blockchain_1.bcashBroadcast(await exports.prepareBitcoinCashSignedTransaction(testnet, body));\n};\n\nexports.sendBitcoinCashTransaction = sendBitcoinCashTransaction;\n/**\n * Sign Bitcoin Cash pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param privateKeys private keys to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst signBitcoinCashKMSTransaction = async (tx, privateKeys, testnet) => {\n  if (tx.chain !== model_1.Currency.BCH) {\n    throw Error('Unsupported chain.');\n  }\n\n  const [data, amountsToDecode] = tx.serializedTransaction.split(':');\n  const transaction = Transaction.fromHex(data);\n  const amountsToSign = JSON.parse(amountsToDecode);\n  const network = testnet ? coininfo_1.default.bitcoincash.test.toBitcoinJS() : coininfo_1.default.bitcoincash.main.toBitcoinJS();\n  const builder = TransactionBuilder.fromTransaction(transaction, network);\n\n  for (const [i, privateKey] of privateKeys.entries()) {\n    const ecPair = ECPair.fromWIF(privateKey, network);\n    builder.sign(i, ecPair, undefined, 0x01, amountsToSign[i], undefined, ECSignature.SCHNORR);\n  }\n\n  return builder.build().toHex();\n};\n\nexports.signBitcoinCashKMSTransaction = signBitcoinCashKMSTransaction;\n/**\n * Sign Bitcoin Cash transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param testnet mainnet or testnet version\n * @param body content of the transaction to broadcast\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareBitcoinCashSignedTransaction = async (testnet, body) => {\n  await tatum_1.validateBody(body, model_1.TransferBchBlockchain);\n  const {\n    fromUTXO,\n    to\n  } = body;\n  const network = testnet ? coininfo_1.default.bitcoincash.test.toBitcoinJS() : coininfo_1.default.bitcoincash.main.toBitcoinJS();\n  const transactionBuilder = new TransactionBuilder(network);\n  const privateKeysToSign = [];\n  const amountToSign = [];\n  const txs = await getTransactions(fromUTXO.map(u => u.txHash));\n\n  for (const [i, item] of fromUTXO.entries()) {\n    transactionBuilder.addInput(item.txHash, item.index, 0xffffffff, null);\n    privateKeysToSign.push(item.privateKey);\n    amountToSign.push(Number(new bignumber_js_1.default(txs[i].vout[item.index].value).multipliedBy(100000000).toFixed(0, bignumber_js_1.default.ROUND_FLOOR)));\n  }\n\n  for (const item of to) {\n    transactionBuilder.addOutput(getAddress(item.address), Number(new bignumber_js_1.default(item.value).multipliedBy(100000000).toFixed(0, bignumber_js_1.default.ROUND_FLOOR)));\n  }\n\n  for (let i = 0; i < privateKeysToSign.length; i++) {\n    const ecPair = ECPair.fromWIF(privateKeysToSign[i], network);\n    transactionBuilder.sign(i, ecPair, undefined, 0x01, amountToSign[i], undefined, ECSignature.SCHNORR);\n  }\n\n  return transactionBuilder.build().toHex();\n};\n\nexports.prepareBitcoinCashSignedTransaction = prepareBitcoinCashSignedTransaction;\n\nconst getTransactions = async txHash => {\n  const result = [];\n\n  for (const tx of txHash) {\n    result.push(blockchain_1.bcashGetTransaction(tx));\n  }\n\n  return await Promise.all(result);\n};","map":{"version":3,"mappings":"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","names":["ECSignature","Transaction","ECPair","TransactionBuilder","require","getAddress","address","wallet_1","e","sendBitcoinCashTransaction","testnet","body","blockchain_1","exports","signBitcoinCashKMSTransaction","tx","privateKeys","chain","model_1","BCH","Error","data","amountsToDecode","serializedTransaction","split","transaction","fromHex","amountsToSign","JSON","parse","network","coininfo_1","bitcoincash","test","toBitcoinJS","main","builder","fromTransaction","i","privateKey","entries","ecPair","fromWIF","sign","undefined","SCHNORR","build","toHex","prepareBitcoinCashSignedTransaction","tatum_1","fromUTXO","to","transactionBuilder","privateKeysToSign","amountToSign","txs","getTransactions","map","u","txHash","item","addInput","index","push","Number","bignumber_js_1","vout","value","multipliedBy","toFixed","ROUND_FLOOR","addOutput","length","result","Promise","all"],"sourceRoot":"","sources":["../../../src/transaction/bcash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}