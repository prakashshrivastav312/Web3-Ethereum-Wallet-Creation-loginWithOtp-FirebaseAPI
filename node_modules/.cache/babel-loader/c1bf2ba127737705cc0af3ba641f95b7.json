{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EsdtHelpers = void 0;\n\nconst scArgumentsParser_1 = require(\"./scArgumentsParser\");\n\nconst errors_1 = require(\"./errors\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst constants_1 = require(\"./constants\");\n/**\n * This class exposes static methods that are useful for parsing ESDT transfer transactions\n */\n\n\nclass EsdtHelpers {\n  /**\n   * This function will return the token identifier and the amount from a given data field for an ESDT transfer, or\n   * an exception if something went wrong\n   * @param dataField this field represents the data filed to extract esdt transfer data from\n   * @throws ErrInvalidEsdtTransferDataField this function throws an ErrInvalidEsdtTransferDataField if the provided data field isn't meant to be an ESDT transfer\n   * @return {tokenIdentifier, amount} this function returns a pair of token identifier and amount to transfer\n   */\n  static extractFieldsFromEsdtTransferDataField(dataField) {\n    if (!dataField.startsWith(constants_1.ESDT_TRANSFER_FUNCTION_NAME + \"@\")) {\n      throw new errors_1.ErrInvalidEsdtTransferDataField();\n    }\n\n    let {\n      args\n    } = scArgumentsParser_1.ScArgumentsParser.parseSmartContractCallDataField(dataField);\n\n    if (args.length != 2) {\n      throw new errors_1.ErrInvalidEsdtTransferDataField();\n    }\n\n    let tokenIdentifier = args[0];\n    let amount = new bignumber_js_1.default(args[1], 16).toString(10);\n    return {\n      tokenIdentifier: tokenIdentifier,\n      amount: amount\n    };\n  }\n  /**\n   * This function checks if the data field represents a valid ESDT transfer call\n   * @param dataField this field represents the string to be checked if it would trigger an ESDT transfer call\n   * @return true if the provided data field is meant to be an ESDT transfer\n   */\n\n\n  static isEsdtTransferTransaction(dataField) {\n    if (!dataField.startsWith(constants_1.ESDT_TRANSFER_FUNCTION_NAME + \"@\")) {\n      return false;\n    }\n\n    let args;\n\n    try {\n      args = scArgumentsParser_1.ScArgumentsParser.parseSmartContractCallDataField(dataField).args;\n    } catch (e) {\n      return false;\n    }\n\n    return args.length === 2;\n  }\n  /**\n   * getTxFieldsForEsdtTransfer returns the needed value, gasLimit and data field (in string format) for sending an amount of ESDT token\n   * @param tokenIdentifier this field represents the identifier of the token to transfer\n   * @param amount this field represents the denominated amount of the token to send\n   * @return {value, gasLimit, data} this function returns the value, the gas limit and the data field to use\n   */\n\n\n  static getTxFieldsForEsdtTransfer(tokenIdentifier, amount) {\n    const encodedAmount = new bignumber_js_1.default(amount, 10).toString(16);\n    const txDataField = [constants_1.ESDT_TRANSFER_FUNCTION_NAME, tokenIdentifier, encodedAmount].join(\"@\");\n    return {\n      value: constants_1.ESDT_TRANSFER_VALUE,\n      gasLimit: constants_1.ESDT_TRANSFER_GAS_LIMIT,\n      data: txDataField\n    };\n  }\n\n}\n\nexports.EsdtHelpers = EsdtHelpers;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;AAEA;;;;;AAGA,MAAaA,WAAb,CAAwB;EAEpB;;;;;;;EAOoD,OAAtCC,sCAAsC,CAACC,SAAD,EAAkB;IAClE,IAAI,CAACA,SAAS,CAACC,UAAV,CAAqBC,0CAA8B,GAAnD,CAAL,EAA8D;MAC1D,MAAM,IAAIC,wCAAJ,EAAN;IACH;;IAED,IAAI;MAACC;IAAD,IAASC,sCAAkBC,+BAAlB,CAAkDN,SAAlD,CAAb;;IAEA,IAAII,IAAI,CAACG,MAAL,IAAe,CAAnB,EAAsB;MAClB,MAAM,IAAIJ,wCAAJ,EAAN;IACH;;IAED,IAAIK,eAAe,GAAGJ,IAAI,CAAC,CAAD,CAA1B;IACA,IAAIK,MAAM,GAAG,IAAIC,sBAAJ,CAAcN,IAAI,CAAC,CAAD,CAAlB,EAAuB,EAAvB,EAA2BO,QAA3B,CAAoC,EAApC,CAAb;IAEA,OAAO;MACHH,eAAe,EAAEA,eADd;MAEHC,MAAM,EAAEA;IAFL,CAAP;EAIH;EAED;;;;;;;EAKuC,OAAzBG,yBAAyB,CAACZ,SAAD,EAAkB;IACrD,IAAI,CAACA,SAAS,CAACC,UAAV,CAAqBC,0CAA8B,GAAnD,CAAL,EAA8D;MAC1D,OAAO,KAAP;IACH;;IAED,IAAIE,IAAJ;;IACA,IAAI;MACAA,IAAI,GAAGC,sCAAkBC,+BAAlB,CAAkDN,SAAlD,EAA6DI,IAApE;IACH,CAFD,CAEE,OAAOS,CAAP,EAAU;MACR,OAAO,KAAP;IACH;;IAED,OAAOT,IAAI,CAACG,MAAL,KAAgB,CAAvB;EACH;EAED;;;;;;;;EAMwC,OAA1BO,0BAA0B,CAACN,eAAD,EAA0BC,MAA1B,EAAwC;IAC5E,MAAMM,aAAa,GAAG,IAAIL,sBAAJ,CAAcD,MAAd,EAAsB,EAAtB,EAA0BE,QAA1B,CAAmC,EAAnC,CAAtB;IACA,MAAMK,WAAW,GAAG,CAACd,uCAAD,EAA8BM,eAA9B,EAA+CO,aAA/C,EAA8DE,IAA9D,CAAmE,GAAnE,CAApB;IAEA,OAAO;MACHC,KAAK,EAAEhB,+BADJ;MAEHiB,QAAQ,EAAEjB,mCAFP;MAGHkB,IAAI,EAAEJ;IAHH,CAAP;EAKH;;AAhEmB;;AAAxBK","names":["EsdtHelpers","extractFieldsFromEsdtTransferDataField","dataField","startsWith","constants_1","errors_1","args","scArgumentsParser_1","parseSmartContractCallDataField","length","tokenIdentifier","amount","bignumber_js_1","toString","isEsdtTransferTransaction","e","getTxFieldsForEsdtTransfer","encodedAmount","txDataField","join","value","gasLimit","data","exports"],"sourceRoot":"","sources":["../src/esdtHelpers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}