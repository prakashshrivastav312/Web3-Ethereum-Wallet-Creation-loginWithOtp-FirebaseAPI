{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar BigNumber = require('bignumber.js'); // drops is a bignumber.js BigNumber\n\n\nfunction dropsToXRP(drops) {\n  return drops.dividedBy(1000000);\n}\n\nfunction normalizeNode(affectedNode) {\n  var diffType = Object.keys(affectedNode)[0];\n  var node = affectedNode[diffType];\n  return Object.assign({}, node, {\n    diffType: diffType,\n    entryType: node.LedgerEntryType,\n    ledgerIndex: node.LedgerIndex,\n    newFields: node.NewFields || {},\n    finalFields: node.FinalFields || {},\n    previousFields: node.PreviousFields || {}\n  });\n}\n\nfunction normalizeNodes(metadata) {\n  if (!metadata.AffectedNodes) {\n    return [];\n  }\n\n  return metadata.AffectedNodes.map(normalizeNode);\n}\n\nfunction parseCurrencyAmount(currencyAmount) {\n  if (currencyAmount === undefined) {\n    return undefined;\n  }\n\n  if (typeof currencyAmount === 'string') {\n    return {\n      currency: 'XRP',\n      value: dropsToXRP(new BigNumber(currencyAmount)).toString()\n    };\n  }\n\n  return {\n    currency: currencyAmount.currency,\n    counterparty: currencyAmount.issuer,\n    value: currencyAmount.value\n  };\n}\n\nfunction isAccountField(fieldName) {\n  var fieldNames = ['Account', 'Owner', 'Destination', 'Issuer', 'Target'];\n  return _.includes(fieldNames, fieldName);\n}\n\nfunction isAmountFieldAffectingIssuer(fieldName) {\n  var fieldNames = ['LowLimit', 'HighLimit', 'TakerPays', 'TakerGets'];\n  return _.includes(fieldNames, fieldName);\n}\n\nfunction getAffectedAccounts(metadata) {\n  var accounts = [];\n\n  _.forEach(normalizeNodes(metadata), function (node) {\n    var fields = node.diffType === 'CreatedNode' ? node.newFields : node.finalFields;\n\n    _.forEach(fields, function (fieldValue, fieldName) {\n      if (isAccountField(fieldName)) {\n        accounts.push(fieldValue);\n      } else if (isAmountFieldAffectingIssuer(fieldName) && fieldValue.issuer) {\n        accounts.push(fieldValue.issuer);\n      }\n    });\n  });\n\n  return _.uniq(accounts);\n}\n\nmodule.exports = {\n  dropsToXRP: dropsToXRP,\n  normalizeNodes: normalizeNodes,\n  parseCurrencyAmount: parseCurrencyAmount,\n  getAffectedAccounts: getAffectedAccounts\n};","map":{"version":3,"names":["_","require","BigNumber","dropsToXRP","drops","dividedBy","normalizeNode","affectedNode","diffType","Object","keys","node","assign","entryType","LedgerEntryType","ledgerIndex","LedgerIndex","newFields","NewFields","finalFields","FinalFields","previousFields","PreviousFields","normalizeNodes","metadata","AffectedNodes","map","parseCurrencyAmount","currencyAmount","undefined","currency","value","toString","counterparty","issuer","isAccountField","fieldName","fieldNames","includes","isAmountFieldAffectingIssuer","getAffectedAccounts","accounts","forEach","fields","fieldValue","push","uniq","module","exports"],"sources":["C:/Users/acer/node_modules/ripple-lib-transactionparser/src/utils.js"],"sourcesContent":["'use strict'\nvar _ = require('lodash')\nvar BigNumber = require('bignumber.js')\n\n// drops is a bignumber.js BigNumber\nfunction dropsToXRP(drops) {\n  return drops.dividedBy(1000000)\n}\n\nfunction normalizeNode(affectedNode) {\n  var diffType = Object.keys(affectedNode)[0]\n  var node = affectedNode[diffType]\n  return Object.assign({}, node, {\n    diffType: diffType,\n    entryType: node.LedgerEntryType,\n    ledgerIndex: node.LedgerIndex,\n    newFields: node.NewFields || {},\n    finalFields: node.FinalFields || {},\n    previousFields: node.PreviousFields || {}\n  })\n}\n\nfunction normalizeNodes(metadata) {\n  if (!metadata.AffectedNodes) {\n    return []\n  }\n  return metadata.AffectedNodes.map(normalizeNode)\n}\n\nfunction parseCurrencyAmount(currencyAmount) {\n  if (currencyAmount === undefined) {\n    return undefined\n  }\n  if (typeof currencyAmount === 'string') {\n    return {\n      currency: 'XRP',\n      value: dropsToXRP(new BigNumber(currencyAmount)).toString()\n    }\n  }\n\n  return {\n    currency: currencyAmount.currency,\n    counterparty: currencyAmount.issuer,\n    value: currencyAmount.value\n  }\n}\n\nfunction isAccountField(fieldName) {\n  var fieldNames = ['Account', 'Owner', 'Destination', 'Issuer', 'Target']\n  return _.includes(fieldNames, fieldName)\n}\n\nfunction isAmountFieldAffectingIssuer(fieldName) {\n  var fieldNames = ['LowLimit', 'HighLimit', 'TakerPays', 'TakerGets']\n  return _.includes(fieldNames, fieldName)\n}\n\nfunction getAffectedAccounts(metadata) {\n  var accounts = []\n  _.forEach(normalizeNodes(metadata), function(node) {\n    var fields = node.diffType === 'CreatedNode' ?\n      node.newFields : node.finalFields\n    _.forEach(fields, function(fieldValue, fieldName) {\n      if (isAccountField(fieldName)) {\n        accounts.push(fieldValue)\n      } else if (isAmountFieldAffectingIssuer(fieldName) && fieldValue.issuer) {\n        accounts.push(fieldValue.issuer)\n      }\n    })\n  })\n  return _.uniq(accounts)\n}\n\n\nmodule.exports = {\n  dropsToXRP: dropsToXRP,\n  normalizeNodes: normalizeNodes,\n  parseCurrencyAmount: parseCurrencyAmount,\n  getAffectedAccounts: getAffectedAccounts\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}