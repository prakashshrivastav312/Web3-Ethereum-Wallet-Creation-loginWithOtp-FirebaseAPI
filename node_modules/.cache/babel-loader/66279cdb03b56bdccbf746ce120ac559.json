{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar TransformOperationExecutor_1 = require(\"./TransformOperationExecutor\");\n\nvar ClassTransformer =\n/** @class */\nfunction () {\n  function ClassTransformer() {}\n\n  ClassTransformer.prototype.classToPlain = function (object, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.CLASS_TO_PLAIN, options || {});\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.classToPlainFromExist = function (object, plainObject, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.CLASS_TO_PLAIN, options || {});\n    return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.plainToClass = function (cls, plain, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.PLAIN_TO_CLASS, options || {});\n    return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.plainToClassFromExist = function (clsObject, plain, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.PLAIN_TO_CLASS, options || {});\n    return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.classToClass = function (object, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.CLASS_TO_CLASS, options || {});\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.classToClassFromExist = function (object, fromObject, options) {\n    var executor = new TransformOperationExecutor_1.TransformOperationExecutor(TransformOperationExecutor_1.TransformationType.CLASS_TO_CLASS, options || {});\n    return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n  };\n\n  ClassTransformer.prototype.serialize = function (object, options) {\n    return JSON.stringify(this.classToPlain(object, options));\n  };\n  /**\n   * Deserializes given JSON string to a object of the given class.\n   */\n\n\n  ClassTransformer.prototype.deserialize = function (cls, json, options) {\n    var jsonObject = JSON.parse(json);\n    return this.plainToClass(cls, jsonObject, options);\n  };\n  /**\n   * Deserializes given JSON string to an array of objects of the given class.\n   */\n\n\n  ClassTransformer.prototype.deserializeArray = function (cls, json, options) {\n    var jsonObject = JSON.parse(json);\n    return this.plainToClass(cls, jsonObject, options);\n  };\n\n  return ClassTransformer;\n}();\n\nexports.ClassTransformer = ClassTransformer;","map":{"version":3,"mappings":";;;;;;AACA;;AAMA;AAAA;AAAA;EAAA,6BAiGC;;EAtFGA,oDAA+BC,MAA/B,EAA8CC,OAA9C,EAA6E;IACzE,IAAMC,QAAQ,GAAG,IAAIC,uDAAJ,CAA+BA,gDAAmBC,cAAlD,EAAkEH,OAAO,IAAI,EAA7E,CAAjB;IACA,OAAOC,QAAQ,CAACG,SAAT,CAAmBC,SAAnB,EAA8BN,MAA9B,EAAsCM,SAAtC,EAAiDA,SAAjD,EAA4DA,SAA5D,EAAuEA,SAAvE,CAAP;EACH,CAHD;;EAYAP,6DAA2CC,MAA3C,EAAsDO,WAAtD,EAA0EN,OAA1E,EAAyG;IACrG,IAAMC,QAAQ,GAAG,IAAIC,uDAAJ,CAA+BA,gDAAmBC,cAAlD,EAAkEH,OAAO,IAAI,EAA7E,CAAjB;IACA,OAAOC,QAAQ,CAACG,SAAT,CAAmBE,WAAnB,EAAgCP,MAAhC,EAAwCM,SAAxC,EAAmDA,SAAnD,EAA8DA,SAA9D,EAAyEA,SAAzE,CAAP;EACH,CAHD;;EAUAP,oDAAkCS,GAAlC,EAAqDC,KAArD,EAAmER,OAAnE,EAAkG;IAC9F,IAAMC,QAAQ,GAAG,IAAIC,uDAAJ,CAA+BA,gDAAmBO,cAAlD,EAAkET,OAAO,IAAI,EAA7E,CAAjB;IACA,OAAOC,QAAQ,CAACG,SAAT,CAAmBC,SAAnB,EAA8BG,KAA9B,EAAqCD,GAArC,EAA0CF,SAA1C,EAAqDA,SAArD,EAAgEA,SAAhE,CAAP;EACH,CAHD;;EAYAP,6DAA2CY,SAA3C,EAAyDF,KAAzD,EAAuER,OAAvE,EAAsG;IAClG,IAAMC,QAAQ,GAAG,IAAIC,uDAAJ,CAA+BA,gDAAmBO,cAAlD,EAAkET,OAAO,IAAI,EAA7E,CAAjB;IACA,OAAOC,QAAQ,CAACG,SAAT,CAAmBM,SAAnB,EAA8BF,KAA9B,EAAqCH,SAArC,EAAgDA,SAAhD,EAA2DA,SAA3D,EAAsEA,SAAtE,CAAP;EACH,CAHD;;EAUAP,oDAAgBC,MAAhB,EAA+BC,OAA/B,EAA8D;IAC1D,IAAMC,QAAQ,GAAG,IAAIC,uDAAJ,CAA+BA,gDAAmBS,cAAlD,EAAkEX,OAAO,IAAI,EAA7E,CAAjB;IACA,OAAOC,QAAQ,CAACG,SAAT,CAAmBC,SAAnB,EAA8BN,MAA9B,EAAsCM,SAAtC,EAAiDA,SAAjD,EAA4DA,SAA5D,EAAuEA,SAAvE,CAAP;EACH,CAHD;;EAYAP,6DAAyBC,MAAzB,EAAoCa,UAApC,EAAuDZ,OAAvD,EAAsF;IAClF,IAAMC,QAAQ,GAAG,IAAIC,uDAAJ,CAA+BA,gDAAmBS,cAAlD,EAAkEX,OAAO,IAAI,EAA7E,CAAjB;IACA,OAAOC,QAAQ,CAACG,SAAT,CAAmBQ,UAAnB,EAA+Bb,MAA/B,EAAuCM,SAAvC,EAAkDA,SAAlD,EAA6DA,SAA7D,EAAwEA,SAAxE,CAAP;EACH,CAHD;;EAUAP,iDAAaC,MAAb,EAA4BC,OAA5B,EAA2D;IACvD,OAAOa,IAAI,CAACC,SAAL,CAAe,KAAKC,YAAL,CAAkBhB,MAAlB,EAA0BC,OAA1B,CAAf,CAAP;EACH,CAFD;EAIA;;;;;EAGAF,mDAAeS,GAAf,EAAkCS,IAAlC,EAAgDhB,OAAhD,EAA+E;IAC3E,IAAMiB,UAAU,GAAMJ,IAAI,CAACK,KAAL,CAAWF,IAAX,CAAtB;IACA,OAAO,KAAKG,YAAL,CAAkBZ,GAAlB,EAAuBU,UAAvB,EAAmCjB,OAAnC,CAAP;EACH,CAHD;EAKA;;;;;EAGAF,wDAAoBS,GAApB,EAAuCS,IAAvC,EAAqDhB,OAArD,EAAoF;IAChF,IAAMiB,UAAU,GAAUJ,IAAI,CAACK,KAAL,CAAWF,IAAX,CAA1B;IACA,OAAO,KAAKG,YAAL,CAAkBZ,GAAlB,EAAuBU,UAAvB,EAAmCjB,OAAnC,CAAP;EACH,CAHD;;EAKJ;AAjGA;;AAAaoB","names":["ClassTransformer","object","options","executor","TransformOperationExecutor_1","CLASS_TO_PLAIN","transform","undefined","plainObject","cls","plain","PLAIN_TO_CLASS","clsObject","CLASS_TO_CLASS","fromObject","JSON","stringify","classToPlain","json","jsonObject","parse","plainToClass","exports"],"sourceRoot":".","sources":["../../src/ClassTransformer.ts"],"sourcesContent":["import {ClassTransformOptions} from \"./ClassTransformOptions\";\nimport {TransformOperationExecutor, TransformationType} from \"./TransformOperationExecutor\";\n\nexport type ClassType<T> = {\n    new (...args: any[]): T;\n};\n\nexport class ClassTransformer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n     */\n    classToPlain<T extends Object>(object: T, options?: ClassTransformOptions): Object;\n    classToPlain<T extends Object>(object: T[], options?: ClassTransformOptions): Object[];\n    classToPlain<T extends Object>(object: T|T[], options?: ClassTransformOptions): Object|Object[] {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, options || {});\n        return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n    }\n\n    /**\n     * Converts class (constructor) object to plain (literal) object.\n     * Uses given plain object as source object (it means fills given plain object with data from class object).\n     * Also works with arrays.\n     */\n    classToPlainFromExist<T extends Object, P>(object: T, plainObject: P, options?: ClassTransformOptions): T;\n    classToPlainFromExist<T extends Object, P>(object: T, plainObjects: P[], options?: ClassTransformOptions): T[];\n    classToPlainFromExist<T extends Object, P>(object: T, plainObject: P|P[], options?: ClassTransformOptions): T|T[] {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, options || {});\n        return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n    }\n\n    /**\n     * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n     */\n    plainToClass<T extends Object, V extends Array<any>>(cls: ClassType<T>, plain: V, options?: ClassTransformOptions): T[];\n    plainToClass<T extends Object, V>(cls: ClassType<T>, plain: V, options?: ClassTransformOptions): T;\n    plainToClass<T extends Object, V>(cls: ClassType<T>, plain: V|V[], options?: ClassTransformOptions): T|T[] {\n        const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, options || {});\n        return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n    }\n\n    /**\n     * Converts plain (literal) object to class (constructor) object.\n     * Uses given object as source object (it means fills given object with data from plain object).\n     * Also works with arrays.\n     */\n    plainToClassFromExist<T extends Object, V extends Array<any>>(clsObject: T, plain: V, options?: ClassTransformOptions): T;\n    plainToClassFromExist<T extends Object, V>(clsObject: T, plain: V, options?: ClassTransformOptions): T[];\n    plainToClassFromExist<T extends Object, V>(clsObject: T, plain: V|V[], options?: ClassTransformOptions): T|T[] {\n        const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, options || {});\n        return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n    }\n\n    /**\n     * Converts class (constructor) object to new class (constructor) object. Also works with arrays.\n     */\n    classToClass<T>(object: T, options?: ClassTransformOptions): T;\n    classToClass<T>(object: T[], options?: ClassTransformOptions): T[];\n    classToClass<T>(object: T|T[], options?: ClassTransformOptions): T|T[] {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, options || {});\n        return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n    }\n\n    /**\n     * Converts class (constructor) object to plain (literal) object.\n     * Uses given plain object as source object (it means fills given plain object with data from class object).\n     * Also works with arrays.\n     */\n    classToClassFromExist<T>(object: T, fromObject: T, options?: ClassTransformOptions): T;\n    classToClassFromExist<T>(object: T, fromObjects: T[], options?: ClassTransformOptions): T[];\n    classToClassFromExist<T>(object: T, fromObject: T|T[], options?: ClassTransformOptions): T|T[] {\n        const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, options || {});\n        return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n    }\n\n    /**\n     * Serializes given object to a JSON string.\n     */\n    serialize<T>(object: T, options?: ClassTransformOptions): string;\n    serialize<T>(object: T[], options?: ClassTransformOptions): string;\n    serialize<T>(object: T|T[], options?: ClassTransformOptions): string {\n        return JSON.stringify(this.classToPlain(object, options));\n    }\n\n    /**\n     * Deserializes given JSON string to a object of the given class.\n     */\n    deserialize<T>(cls: ClassType<T>, json: string, options?: ClassTransformOptions): T {\n        const jsonObject: T = JSON.parse(json);\n        return this.plainToClass(cls, jsonObject, options);\n    }\n\n    /**\n     * Deserializes given JSON string to an array of objects of the given class.\n     */\n    deserializeArray<T>(cls: ClassType<T>, json: string, options?: ClassTransformOptions): T[] {\n        const jsonObject: any[] = JSON.parse(json);\n        return this.plainToClass(cls, jsonObject, options);\n    }\n\n}\n"]},"metadata":{},"sourceType":"script"}