{"ast":null,"code":"import { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isAlphaValidator from 'validator/lib/isAlpha';\nexport var IS_ALPHA = 'isAlpha';\n/**\n * Checks if the string contains only letters (a-zA-Z).\n * If given value is not a string, then it returns false.\n */\n\nexport function isAlpha(value, locale) {\n  return typeof value === 'string' && isAlphaValidator(value, locale);\n}\n/**\n * Checks if the string contains only letters (a-zA-Z).\n * If given value is not a string, then it returns false.\n */\n\nexport function IsAlpha(locale, validationOptions) {\n  return ValidateBy({\n    name: IS_ALPHA,\n    constraints: [locale],\n    validator: {\n      validate: function (value, args) {\n        return isAlpha(value, args.constraints[0]);\n      },\n      defaultMessage: buildMessage(function (eachPrefix) {\n        return eachPrefix + '$property must contain only letters (a-zA-Z)';\n      }, validationOptions)\n    }\n  }, validationOptions);\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAT,EAAuBC,UAAvB,QAAyC,sBAAzC;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AAGA,OAAO,IAAMC,QAAQ,GAAG,SAAjB;AAEP;;;;;AAIA,OAAM,SAAUC,OAAV,CAAkBC,KAAlB,EAAkCC,MAAlC,EAAkE;EACtE,OAAO,OAAOD,KAAP,KAAiB,QAAjB,IAA6BH,gBAAgB,CAACG,KAAD,EAAQC,MAAR,CAApD;AACD;AAED;;;;;AAIA,OAAM,SAAUC,OAAV,CAAkBD,MAAlB,EAAmCE,iBAAnC,EAAwE;EAC5E,OAAOP,UAAU,CACf;IACEQ,IAAI,EAAEN,QADR;IAEEO,WAAW,EAAE,CAACJ,MAAD,CAFf;IAGEK,SAAS,EAAE;MACTC,QAAQ,EAAE,UAACP,KAAD,EAAQQ,IAAR,EAAY;QAAc,cAAO,CAACR,KAAD,EAAQQ,IAAI,CAACH,WAAL,CAAiB,CAAjB,CAAR,CAAP;MAAmC,CAD9D;MAETI,cAAc,EAAEd,YAAY,CAC1B,sBAAU;QAAI,iBAAU,GAAG,8CAAb;MAA2D,CAD/C,EAE1BQ,iBAF0B;IAFnB;EAHb,CADe,EAYfA,iBAZe,CAAjB;AAcD","names":["buildMessage","ValidateBy","isAlphaValidator","IS_ALPHA","isAlpha","value","locale","IsAlpha","validationOptions","name","constraints","validator","validate","args","defaultMessage"],"sourceRoot":"","sources":["../../../../src/decorator/string/IsAlpha.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}