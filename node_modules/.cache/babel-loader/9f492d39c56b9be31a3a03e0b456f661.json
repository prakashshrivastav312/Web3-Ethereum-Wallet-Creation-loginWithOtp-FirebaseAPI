{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Amount = void 0;\n\nvar decimal_js_1 = require(\"decimal.js\");\n\nvar binary_parser_1 = require(\"../serdes/binary-parser\");\n\nvar account_id_1 = require(\"./account-id\");\n\nvar currency_1 = require(\"./currency\");\n\nvar serialized_type_1 = require(\"./serialized-type\");\n\nvar bigInt = require(\"big-integer\");\n\nvar buffer_1 = require(\"buffer/\");\n/**\n * Constants for validating amounts\n */\n\n\nvar MIN_IOU_EXPONENT = -96;\nvar MAX_IOU_EXPONENT = 80;\nvar MAX_IOU_PRECISION = 16;\nvar MAX_DROPS = new decimal_js_1.Decimal('1e17');\nvar MIN_XRP = new decimal_js_1.Decimal('1e-6');\nvar mask = bigInt(0x00000000ffffffff);\n/**\n * decimal.js configuration for Amount IOUs\n */\n\ndecimal_js_1.Decimal.config({\n  toExpPos: MAX_IOU_EXPONENT + MAX_IOU_PRECISION,\n  toExpNeg: MIN_IOU_EXPONENT - MAX_IOU_PRECISION\n});\n/**\n * Type guard for AmountObject\n */\n\nfunction isAmountObject(arg) {\n  var keys = Object.keys(arg).sort();\n  return keys.length === 3 && keys[0] === 'currency' && keys[1] === 'issuer' && keys[2] === 'value';\n}\n/**\n * Class for serializing/Deserializing Amounts\n */\n\n\nvar Amount =\n/** @class */\nfunction (_super) {\n  __extends(Amount, _super);\n\n  function Amount(bytes) {\n    return _super.call(this, bytes !== null && bytes !== void 0 ? bytes : Amount.defaultAmount.bytes) || this;\n  }\n  /**\n   * Construct an amount from an IOU or string amount\n   *\n   * @param value An Amount, object representing an IOU, or a string\n   *     representing an integer amount\n   * @returns An Amount object\n   */\n\n\n  Amount.from = function (value) {\n    if (value instanceof Amount) {\n      return value;\n    }\n\n    var amount = buffer_1.Buffer.alloc(8);\n\n    if (typeof value === 'string') {\n      Amount.assertXrpIsValid(value);\n      var number = bigInt(value);\n      var intBuf = [buffer_1.Buffer.alloc(4), buffer_1.Buffer.alloc(4)];\n      intBuf[0].writeUInt32BE(Number(number.shiftRight(32)), 0);\n      intBuf[1].writeUInt32BE(Number(number.and(mask)), 0);\n      amount = buffer_1.Buffer.concat(intBuf);\n      amount[0] |= 0x40;\n      return new Amount(amount);\n    }\n\n    if (isAmountObject(value)) {\n      var number = new decimal_js_1.Decimal(value.value);\n      Amount.assertIouIsValid(number);\n\n      if (number.isZero()) {\n        amount[0] |= 0x80;\n      } else {\n        var integerNumberString = number.times(\"1e\".concat(-(number.e - 15))).abs().toString();\n        var num = bigInt(integerNumberString);\n        var intBuf = [buffer_1.Buffer.alloc(4), buffer_1.Buffer.alloc(4)];\n        intBuf[0].writeUInt32BE(Number(num.shiftRight(32)), 0);\n        intBuf[1].writeUInt32BE(Number(num.and(mask)), 0);\n        amount = buffer_1.Buffer.concat(intBuf);\n        amount[0] |= 0x80;\n\n        if (number.gt(new decimal_js_1.Decimal(0))) {\n          amount[0] |= 0x40;\n        }\n\n        var exponent = number.e - 15;\n        var exponentByte = 97 + exponent;\n        amount[0] |= exponentByte >>> 2;\n        amount[1] |= (exponentByte & 0x03) << 6;\n      }\n\n      var currency = currency_1.Currency.from(value.currency).toBytes();\n      var issuer = account_id_1.AccountID.from(value.issuer).toBytes();\n      return new Amount(buffer_1.Buffer.concat([amount, currency, issuer]));\n    }\n\n    throw new Error('Invalid type to construct an Amount');\n  };\n  /**\n   * Read an amount from a BinaryParser\n   *\n   * @param parser BinaryParser to read the Amount from\n   * @returns An Amount object\n   */\n\n\n  Amount.fromParser = function (parser) {\n    var isXRP = parser.peek() & 0x80;\n    var numBytes = isXRP ? 48 : 8;\n    return new Amount(parser.read(numBytes));\n  };\n  /**\n   * Get the JSON representation of this Amount\n   *\n   * @returns the JSON interpretation of this.bytes\n   */\n\n\n  Amount.prototype.toJSON = function () {\n    if (this.isNative()) {\n      var bytes = this.bytes;\n      var isPositive = bytes[0] & 0x40;\n      var sign = isPositive ? '' : '-';\n      bytes[0] &= 0x3f;\n      var msb = bigInt(bytes.slice(0, 4).readUInt32BE(0));\n      var lsb = bigInt(bytes.slice(4).readUInt32BE(0));\n      var num = msb.shiftLeft(32).or(lsb);\n      return \"\".concat(sign).concat(num.toString());\n    } else {\n      var parser = new binary_parser_1.BinaryParser(this.toString());\n      var mantissa = parser.read(8);\n      var currency = currency_1.Currency.fromParser(parser);\n      var issuer = account_id_1.AccountID.fromParser(parser);\n      var b1 = mantissa[0];\n      var b2 = mantissa[1];\n      var isPositive = b1 & 0x40;\n      var sign = isPositive ? '' : '-';\n      var exponent = ((b1 & 0x3f) << 2) + ((b2 & 0xff) >> 6) - 97;\n      mantissa[0] = 0;\n      mantissa[1] &= 0x3f;\n      var value = new decimal_js_1.Decimal(\"\".concat(sign, \"0x\").concat(mantissa.toString('hex'))).times(\"1e\".concat(exponent));\n      Amount.assertIouIsValid(value);\n      return {\n        value: value.toString(),\n        currency: currency.toJSON(),\n        issuer: issuer.toJSON()\n      };\n    }\n  };\n  /**\n   * Validate XRP amount\n   *\n   * @param amount String representing XRP amount\n   * @returns void, but will throw if invalid amount\n   */\n\n\n  Amount.assertXrpIsValid = function (amount) {\n    if (amount.indexOf('.') !== -1) {\n      throw new Error(\"\".concat(amount.toString(), \" is an illegal amount\"));\n    }\n\n    var decimal = new decimal_js_1.Decimal(amount);\n\n    if (!decimal.isZero()) {\n      if (decimal.lt(MIN_XRP) || decimal.gt(MAX_DROPS)) {\n        throw new Error(\"\".concat(amount.toString(), \" is an illegal amount\"));\n      }\n    }\n  };\n  /**\n   * Validate IOU.value amount\n   *\n   * @param decimal Decimal.js object representing IOU.value\n   * @returns void, but will throw if invalid amount\n   */\n\n\n  Amount.assertIouIsValid = function (decimal) {\n    if (!decimal.isZero()) {\n      var p = decimal.precision();\n      var e = decimal.e - 15;\n\n      if (p > MAX_IOU_PRECISION || e > MAX_IOU_EXPONENT || e < MIN_IOU_EXPONENT) {\n        throw new Error('Decimal precision out of range');\n      }\n\n      this.verifyNoDecimal(decimal);\n    }\n  };\n  /**\n   * Ensure that the value after being multiplied by the exponent does not\n   * contain a decimal.\n   *\n   * @param decimal a Decimal object\n   * @returns a string of the object without a decimal\n   */\n\n\n  Amount.verifyNoDecimal = function (decimal) {\n    var integerNumberString = decimal.times(\"1e\".concat(-(decimal.e - 15))).abs().toString();\n\n    if (integerNumberString.indexOf('.') !== -1) {\n      throw new Error('Decimal place found in integerNumberString');\n    }\n  };\n  /**\n   * Test if this amount is in units of Native Currency(XRP)\n   *\n   * @returns true if Native (XRP)\n   */\n\n\n  Amount.prototype.isNative = function () {\n    return (this.bytes[0] & 0x80) === 0;\n  };\n\n  Amount.defaultAmount = new Amount(buffer_1.Buffer.from('4000000000000000', 'hex'));\n  return Amount;\n}(serialized_type_1.SerializedType);\n\nexports.Amount = Amount;","map":{"version":3,"mappings":"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","names":["MIN_IOU_EXPONENT","MAX_IOU_EXPONENT","MAX_IOU_PRECISION","MAX_DROPS","decimal_js_1","MIN_XRP","mask","bigInt","config","toExpPos","toExpNeg","isAmountObject","arg","keys","Object","sort","length","__extends","bytes","_super","Amount","defaultAmount","value","amount","buffer_1","alloc","assertXrpIsValid","number","intBuf","writeUInt32BE","Number","shiftRight","and","concat","assertIouIsValid","isZero","integerNumberString","times","e","abs","toString","num","gt","exponent","exponentByte","currency","currency_1","from","toBytes","issuer","account_id_1","Error","parser","isXRP","peek","numBytes","read","isNative","isPositive","sign","msb","slice","readUInt32BE","lsb","shiftLeft","or","binary_parser_1","mantissa","fromParser","b1","b2","toJSON","indexOf","decimal","lt","p","precision","verifyNoDecimal","serialized_type_1","exports"],"sourceRoot":"","sources":["../../src/types/amount.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}