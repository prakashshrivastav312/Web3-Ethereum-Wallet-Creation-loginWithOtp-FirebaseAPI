{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/rm')>}\n   */\n  async function* rm(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!Array.isArray(cid)) {\n      cid = [cid];\n    }\n\n    const res = await api.post('block/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => new CID(cid).toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed);\n    }\n  }\n\n  return rm;\n});\n\nfunction toCoreInterface(removed) {\n  const out = {\n    cid: new CID(removed.Hash)\n  };\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n\n  return out;\n}","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","rm","cid","options","Array","isArray","res","post","timeout","signal","searchParams","arg","map","toString","headers","removed","ndjson","toCoreInterface","out","Hash","Error","error"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/block/rm.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/rm')>}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => new CID(cid).toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\nfunction toCoreInterface (removed) {\n  const out = {\n    cid: new CID(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,EAAjB,CAAqBC,GAArB,EAAwC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACtC,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAL,EAAyB;MACvBA,GAAG,GAAG,CAACA,GAAD,CAAN;IACD;;IAED,MAAMI,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,UAAT,EAAqB;MACrCC,OAAO,EAAEL,OAAO,CAACK,OADoB;MAErCC,MAAM,EAAEN,OAAO,CAACM,MAFqB;MAGrCC,YAAY,EAAEb,iBAAiB,CAAC;QAC9Bc,GAAG,EAAET,GAAG,CAACU,GAAJ,CAAQV,GAAG,IAAI,IAAIR,GAAJ,CAAQQ,GAAR,EAAaW,QAAb,EAAf,CADyB;QAE9B,mBAAmB,IAFW;QAG9B,GAAGV;MAH2B,CAAD,CAHM;MAQrCW,OAAO,EAAEX,OAAO,CAACW;IARoB,CAArB,CAAlB;;IAWA,WAAW,MAAMC,OAAjB,IAA4BT,GAAG,CAACU,MAAJ,EAA5B,EAA0C;MACxC,MAAMC,eAAe,CAACF,OAAD,CAArB;IACD;EACF;;EAED,OAAOd,EAAP;AACD,CA1ByB,CAA1B;;AA4BA,SAASgB,eAAT,CAA0BF,OAA1B,EAAmC;EACjC,MAAMG,GAAG,GAAG;IACVhB,GAAG,EAAE,IAAIR,GAAJ,CAAQqB,OAAO,CAACI,IAAhB;EADK,CAAZ;;EAIA,IAAIJ,OAAO,CAACK,KAAZ,EAAmB;IACjBF,GAAG,CAACG,KAAJ,GAAY,IAAID,KAAJ,CAAUL,OAAO,CAACK,KAAlB,CAAZ;EACD;;EAED,OAAOF,GAAP;AACD"},"metadata":{},"sourceType":"script"}