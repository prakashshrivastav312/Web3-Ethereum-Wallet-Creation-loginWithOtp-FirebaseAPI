{"ast":null,"code":"var decompile = require('../script').decompile;\n\nvar multisig = require('./multisig');\n\nvar nullData = require('./nulldata');\n\nvar pubKey = require('./pubkey');\n\nvar pubKeyHash = require('./pubkeyhash');\n\nvar scriptHash = require('./scripthash');\n\nvar witnessPubKeyHash = require('./witnesspubkeyhash');\n\nvar witnessScriptHash = require('./witnessscripthash');\n\nvar witnessCommitment = require('./witnesscommitment');\n\nvar types = {\n  MULTISIG: 'multisig',\n  NONSTANDARD: 'nonstandard',\n  NULLDATA: 'nulldata',\n  P2PK: 'pubkey',\n  P2PKH: 'pubkeyhash',\n  P2SH: 'scripthash',\n  P2WPKH: 'witnesspubkeyhash',\n  P2WSH: 'witnessscripthash',\n  WITNESS_COMMITMENT: 'witnesscommitment'\n};\n\nfunction classifyOutput(script) {\n  if (witnessPubKeyHash.output.check(script)) return types.P2WPKH;\n  if (witnessScriptHash.output.check(script)) return types.P2WSH;\n  if (pubKeyHash.output.check(script)) return types.P2PKH;\n  if (scriptHash.output.check(script)) return types.P2SH; // XXX: optimization, below functions .decompile before use\n\n  var chunks = decompile(script);\n  if (multisig.output.check(chunks)) return types.MULTISIG;\n  if (pubKey.output.check(chunks)) return types.P2PK;\n  if (witnessCommitment.output.check(chunks)) return types.WITNESS_COMMITMENT;\n  if (nullData.output.check(chunks)) return types.NULLDATA;\n  return types.NONSTANDARD;\n}\n\nfunction classifyInput(script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  var chunks = decompile(script);\n  if (pubKeyHash.input.check(chunks)) return types.P2PKH;\n  if (scriptHash.input.check(chunks, allowIncomplete)) return types.P2SH;\n  if (multisig.input.check(chunks, allowIncomplete)) return types.MULTISIG;\n  if (pubKey.input.check(chunks)) return types.P2PK;\n  return types.NONSTANDARD;\n}\n\nfunction classifyWitness(script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  var chunks = decompile(script);\n  if (witnessPubKeyHash.input.check(chunks)) return types.P2WPKH;\n  if (witnessScriptHash.input.check(chunks, allowIncomplete)) return types.P2WSH;\n  return types.NONSTANDARD;\n}\n\nmodule.exports = {\n  classifyInput: classifyInput,\n  classifyOutput: classifyOutput,\n  classifyWitness: classifyWitness,\n  multisig: multisig,\n  nullData: nullData,\n  pubKey: pubKey,\n  pubKeyHash: pubKeyHash,\n  scriptHash: scriptHash,\n  witnessPubKeyHash: witnessPubKeyHash,\n  witnessScriptHash: witnessScriptHash,\n  witnessCommitment: witnessCommitment,\n  types: types\n};","map":{"version":3,"names":["decompile","require","multisig","nullData","pubKey","pubKeyHash","scriptHash","witnessPubKeyHash","witnessScriptHash","witnessCommitment","types","MULTISIG","NONSTANDARD","NULLDATA","P2PK","P2PKH","P2SH","P2WPKH","P2WSH","WITNESS_COMMITMENT","classifyOutput","script","output","check","chunks","classifyInput","allowIncomplete","input","classifyWitness","module","exports"],"sources":["C:/Users/acer/node_modules/@tatumio/bitcoincashjs2-lib/src/templates/index.js"],"sourcesContent":["var decompile = require('../script').decompile\nvar multisig = require('./multisig')\nvar nullData = require('./nulldata')\nvar pubKey = require('./pubkey')\nvar pubKeyHash = require('./pubkeyhash')\nvar scriptHash = require('./scripthash')\nvar witnessPubKeyHash = require('./witnesspubkeyhash')\nvar witnessScriptHash = require('./witnessscripthash')\nvar witnessCommitment = require('./witnesscommitment')\n\nvar types = {\n  MULTISIG: 'multisig',\n  NONSTANDARD: 'nonstandard',\n  NULLDATA: 'nulldata',\n  P2PK: 'pubkey',\n  P2PKH: 'pubkeyhash',\n  P2SH: 'scripthash',\n  P2WPKH: 'witnesspubkeyhash',\n  P2WSH: 'witnessscripthash',\n  WITNESS_COMMITMENT: 'witnesscommitment'\n}\n\nfunction classifyOutput (script) {\n  if (witnessPubKeyHash.output.check(script)) return types.P2WPKH\n  if (witnessScriptHash.output.check(script)) return types.P2WSH\n  if (pubKeyHash.output.check(script)) return types.P2PKH\n  if (scriptHash.output.check(script)) return types.P2SH\n\n  // XXX: optimization, below functions .decompile before use\n  var chunks = decompile(script)\n  if (multisig.output.check(chunks)) return types.MULTISIG\n  if (pubKey.output.check(chunks)) return types.P2PK\n  if (witnessCommitment.output.check(chunks)) return types.WITNESS_COMMITMENT\n  if (nullData.output.check(chunks)) return types.NULLDATA\n\n  return types.NONSTANDARD\n}\n\nfunction classifyInput (script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  var chunks = decompile(script)\n\n  if (pubKeyHash.input.check(chunks)) return types.P2PKH\n  if (scriptHash.input.check(chunks, allowIncomplete)) return types.P2SH\n  if (multisig.input.check(chunks, allowIncomplete)) return types.MULTISIG\n  if (pubKey.input.check(chunks)) return types.P2PK\n\n  return types.NONSTANDARD\n}\n\nfunction classifyWitness (script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  var chunks = decompile(script)\n\n  if (witnessPubKeyHash.input.check(chunks)) return types.P2WPKH\n  if (witnessScriptHash.input.check(chunks, allowIncomplete)) return types.P2WSH\n\n  return types.NONSTANDARD\n}\n\nmodule.exports = {\n  classifyInput: classifyInput,\n  classifyOutput: classifyOutput,\n  classifyWitness: classifyWitness,\n  multisig: multisig,\n  nullData: nullData,\n  pubKey: pubKey,\n  pubKeyHash: pubKeyHash,\n  scriptHash: scriptHash,\n  witnessPubKeyHash: witnessPubKeyHash,\n  witnessScriptHash: witnessScriptHash,\n  witnessCommitment: witnessCommitment,\n  types: types\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}