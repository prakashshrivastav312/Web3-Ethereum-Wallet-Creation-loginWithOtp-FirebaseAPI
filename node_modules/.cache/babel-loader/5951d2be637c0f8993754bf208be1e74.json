{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  FinalPeer\n} = require('./response-types');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'findPeer', import('ipfs-core/src/components/dht')>}\n   */\n  async function findPeer(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/findpeer', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId instanceof Uint8Array ? new CID(peerId) : peerId}`,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const {\n          ID,\n          Addrs\n        } = data.Responses[0];\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        };\n      }\n    }\n\n    throw new Error('not found');\n  }\n\n  return findPeer;\n});","map":{"version":3,"names":["CID","require","multiaddr","configure","toUrlSearchParams","FinalPeer","module","exports","api","findPeer","peerId","options","res","post","timeout","signal","searchParams","arg","Uint8Array","headers","data","ndjson","Type","Responses","ID","Addrs","id","addrs","map","a","Error"],"sources":["C:/Users/acer/node_modules/ipfs-http-client/src/dht/find-peer.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { FinalPeer } = require('./response-types')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'findPeer', import('ipfs-core/src/components/dht')>}\n   */\n  async function findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId instanceof Uint8Array ? new CID(peerId) : peerId}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const { ID, Addrs } = data.Responses[0]\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return findPeer\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;EAAEI;AAAF,IAAgBJ,OAAO,CAAC,kBAAD,CAA7B;;AAEAK,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,QAAf,CAAyBC,MAAzB,EAA+C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC7C,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,cAAT,EAAyB;MACzCC,OAAO,EAAEH,OAAO,CAACG,OADwB;MAEzCC,MAAM,EAAEJ,OAAO,CAACI,MAFyB;MAGzCC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAG,GAAEP,MAAM,YAAYQ,UAAlB,GAA+B,IAAIlB,GAAJ,CAAQU,MAAR,CAA/B,GAAiDA,MAAO,EADlC;QAE9B,GAAGC;MAF2B,CAAD,CAHU;MAOzCQ,OAAO,EAAER,OAAO,CAACQ;IAPwB,CAAzB,CAAlB;;IAUA,WAAW,MAAMC,IAAjB,IAAyBR,GAAG,CAACS,MAAJ,EAAzB,EAAuC;MACrC,IAAID,IAAI,CAACE,IAAL,KAAcjB,SAAd,IAA2Be,IAAI,CAACG,SAApC,EAA+C;QAC7C,MAAM;UAAEC,EAAF;UAAMC;QAAN,IAAgBL,IAAI,CAACG,SAAL,CAAe,CAAf,CAAtB;QACA,OAAO;UACLG,EAAE,EAAEF,EADC;UAELG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkBC,CAAC,IAAI3B,SAAS,CAAC2B,CAAD,CAAhC;QAFF,CAAP;MAID;IACF;;IAED,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;EACD;;EAED,OAAOrB,QAAP;AACD,CA7ByB,CAA1B"},"metadata":{},"sourceType":"script"}