{"ast":null,"code":"import { publicKeyToAddress } from './cry/address';\nimport { blake2b256 } from './cry/blake2b';\nimport { secp256k1 } from './cry/secp256k1';\n\nconst fastJsonStableStringify = require('fast-json-stable-stringify');\n\nexport var Certificate;\n\n(function (Certificate) {\n  function safeToLowerCase(str) {\n    return typeof str === 'string' ? str.toLowerCase() : str;\n  }\n  /**\n   * deterministically encode cert into JSON\n   * @param cert cert object\n   */\n\n\n  function encode(cert) {\n    return fastJsonStableStringify(Object.assign(Object.assign({}, cert), {\n      signer: safeToLowerCase(cert.signer),\n      signature: cert.signature ? safeToLowerCase(cert.signature) : cert.signature\n    }));\n  }\n\n  Certificate.encode = encode;\n  /**\n   * verify the cert\n   * @param cert cert object with signature\n   */\n\n  function verify(cert) {\n    if (!cert.signature) {\n      throw new Error('signature missing');\n    }\n\n    const signature = cert.signature;\n\n    if (!/^0x[0-9a-f]+$/i.test(signature) || signature.length % 2 !== 0) {\n      throw new Error('invalid signature');\n    }\n\n    const encoded = encode(Object.assign(Object.assign({}, cert), {\n      signature: undefined\n    }));\n    const signingHash = blake2b256(encoded);\n    const pubKey = secp256k1.recover(signingHash, Buffer.from(signature.slice(2), 'hex'));\n\n    if ('0x' + publicKeyToAddress(pubKey).toString('hex') !== safeToLowerCase(cert.signer)) {\n      throw new Error('signature does not match with signer');\n    }\n  }\n\n  Certificate.verify = verify;\n})(Certificate || (Certificate = {}));","map":{"version":3,"mappings":"AAAA,SAASA,kBAAT,QAAmC,eAAnC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,SAAT,QAA0B,iBAA1B;;AAEA,MAAMC,uBAAuB,GAAGC,OAAO,CAAC,4BAAD,CAAvC;;AAmBA,OAAM,IAAWC,WAAX;;AAAN,WAAiBA,WAAjB,EAA4B;EACxB,SAASC,eAAT,CAAyBC,GAAzB,EAAoC;IAChC,OAAO,OAAOA,GAAP,KAAe,QAAf,GAA0BA,GAAG,CAACC,WAAJ,EAA1B,GAA8CD,GAArD;EACH;EACD;;;;;;EAIA,SAAgBE,MAAhB,CAAuBC,IAAvB,EAAwC;IACpC,OAAOP,uBAAuB,iCACvBO,IADuB,GACnB;MACPC,MAAM,EAAEL,eAAe,CAACI,IAAI,CAACC,MAAN,CADhB;MAEPC,SAAS,EAAEF,IAAI,CAACE,SAAL,GAAiBN,eAAe,CAACI,IAAI,CAACE,SAAN,CAAhC,GAAmDF,IAAI,CAACE;IAF5D,CADmB,EAA9B;EAKH;;EANeP,qBAAMI,MAAN;EAQhB;;;;;EAIA,SAAgBI,MAAhB,CAAuBH,IAAvB,EAAwC;IACpC,IAAI,CAACA,IAAI,CAACE,SAAV,EAAqB;MACjB,MAAM,IAAIE,KAAJ,CAAU,mBAAV,CAAN;IACH;;IACD,MAAMF,SAAS,GAAGF,IAAI,CAACE,SAAvB;;IACA,IAAI,CAAC,iBAAiBG,IAAjB,CAAsBH,SAAtB,CAAD,IAAqCA,SAAS,CAACI,MAAV,GAAmB,CAAnB,KAAyB,CAAlE,EAAqE;MACjE,MAAM,IAAIF,KAAJ,CAAU,mBAAV,CAAN;IACH;;IAED,MAAMG,OAAO,GAAGR,MAAM,iCAAMC,IAAN,GAAU;MAAEE,SAAS,EAAEM;IAAb,CAAV,EAAtB;IACA,MAAMC,WAAW,GAAGlB,UAAU,CAACgB,OAAD,CAA9B;IAEA,MAAMG,MAAM,GAAGlB,SAAS,CAACmB,OAAV,CAAkBF,WAAlB,EAA+BG,MAAM,CAACC,IAAP,CAAYX,SAAS,CAACY,KAAV,CAAgB,CAAhB,CAAZ,EAAgC,KAAhC,CAA/B,CAAf;;IAEA,IAAI,OAAOxB,kBAAkB,CAACoB,MAAD,CAAlB,CAA2BK,QAA3B,CAAoC,KAApC,CAAP,KAAsDnB,eAAe,CAACI,IAAI,CAACC,MAAN,CAAzE,EAAwF;MACpF,MAAM,IAAIG,KAAJ,CAAU,sCAAV,CAAN;IACH;EACJ;;EAjBeT,qBAAMQ,MAAN;AAkBnB,CAtCD,EAAiBR,WAAW,KAAXA,WAAW,MAA5B","names":["publicKeyToAddress","blake2b256","secp256k1","fastJsonStableStringify","require","Certificate","safeToLowerCase","str","toLowerCase","encode","cert","signer","signature","verify","Error","test","length","encoded","undefined","signingHash","pubKey","recover","Buffer","from","slice","toString"],"sourceRoot":"","sources":["../src/certificate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}