{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGasFromValue = exports.SystemWrapper = exports.SystemConstants = void 0;\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst __1 = require(\"..\");\n\nconst __2 = require(\"../..\");\n\nconst testutils_1 = require(\"../../testutils\");\n\nconst nativeSerializer_1 = require(\"../nativeSerializer\");\n\nconst argumentErrorContext_1 = require(\"../argumentErrorContext\");\n\nconst chainSendContext_1 = require(\"./chainSendContext\");\n\nvar SystemConstants;\n\n(function (SystemConstants) {\n  SystemConstants.SYSTEM_ABI_PATH = path_1.default.join(__dirname, \"../../../abi\");\n  SystemConstants.ESDT_CONTRACT_ADDRESS = new __2.Address(\"erd1qqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzllls8a5w6u\");\n  SystemConstants.MIN_TRANSACTION_GAS = 50000;\n  SystemConstants.ESDT_ISSUE_GAS_LIMIT = 60000000;\n  SystemConstants.ESDT_TRANSFER_GAS_LIMIT = 500000;\n  SystemConstants.ESDT_NFT_TRANSFER_GAS_LIMIT = 1000000;\n  SystemConstants.ESDT_BASE_GAS_LIMIT = 6000000;\n})(SystemConstants = exports.SystemConstants || (exports.SystemConstants = {}));\n\nclass SystemWrapper extends chainSendContext_1.ChainSendContext {\n  constructor(provider, context, sendContract, esdtSystemContract, issueCost, builtinFunctions) {\n    super(context);\n    this.provider = provider;\n    this.sendWrapper = sendContract;\n    this.esdtSystemContract = esdtSystemContract;\n    this.issueCost = issueCost;\n    this.builtinFunctions = builtinFunctions;\n  }\n\n  loadWrapper(projectPath, filenameHint, context) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield __1.ContractWrapper.loadProject(this.provider, this.builtinFunctions, projectPath, filenameHint, context);\n    });\n  }\n\n  static getEsdtContractConfig(esdtSystemContract) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let [ownerAddress, baseIssuingCost, minTokenNameLength, maxTokenNameLength] = yield esdtSystemContract.query.getContractConfig();\n      return {\n        ownerAddress,\n        baseIssuingCost: __2.Egld.raw(baseIssuingCost),\n        minTokenNameLength,\n        maxTokenNameLength\n      };\n    });\n  }\n\n  static load(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let context = new __1.SendContext(provider).logger(new __1.ContractLogger());\n      let builtinFunctions = yield __1.ContractWrapper.loadProject(provider, null, SystemConstants.SYSTEM_ABI_PATH, \"builtinFunctions\", context);\n      let sendWrapper = yield __1.ContractWrapper.loadProject(provider, builtinFunctions, SystemConstants.SYSTEM_ABI_PATH, \"sendWrapper\", context);\n      let esdtSystemContract = yield __1.ContractWrapper.loadProject(provider, builtinFunctions, SystemConstants.SYSTEM_ABI_PATH, \"esdtSystemContract\", context);\n      esdtSystemContract.address(SystemConstants.ESDT_CONTRACT_ADDRESS);\n      let issueCost;\n\n      if (provider instanceof testutils_1.MockProvider) {\n        issueCost = __2.Balance.Zero();\n      } else {\n        let contractConfig = yield this.getEsdtContractConfig(esdtSystemContract);\n        issueCost = contractConfig.baseIssuingCost;\n      }\n\n      return new SystemWrapper(provider, context, sendWrapper, esdtSystemContract, issueCost, builtinFunctions);\n    });\n  }\n\n  send(receiver) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let address = nativeSerializer_1.NativeSerializer.convertNativeToAddress(receiver, new argumentErrorContext_1.ArgumentErrorContext(\"send\", \"0\", new __1.EndpointParameterDefinition(\"receiver\", \"\", new __1.AddressType())));\n      yield this.sendWrapper.address(address).autoGas(0).call[\"\"]();\n    });\n  }\n\n  issueFungible() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let {\n        resultingCalls: [issueResult]\n      } = yield this.esdtSystemContract.gas(SystemConstants.ESDT_ISSUE_GAS_LIMIT).value(this.issueCost).results.issue(...args);\n\n      let {\n        tokenIdentifier\n      } = __2.EsdtHelpers.extractFieldsFromEsdtTransferDataField(issueResult.data);\n\n      tokenIdentifier = Buffer.from(tokenIdentifier, \"hex\").toString();\n      return this.recallToken(tokenIdentifier);\n    });\n  }\n\n  issueSemiFungible() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let tokenIdentifier = (yield this.esdtSystemContract.gas(SystemConstants.ESDT_ISSUE_GAS_LIMIT).value(this.issueCost).call.issueSemiFungible(...args)).toString();\n      return this.recallToken(tokenIdentifier);\n    });\n  }\n\n  issueNonFungible() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let tokenIdentifier = (yield this.esdtSystemContract.gas(SystemConstants.ESDT_ISSUE_GAS_LIMIT).value(this.issueCost).call.issueNonFungible(...args)).toString();\n      return this.recallToken(tokenIdentifier);\n    });\n  }\n\n  esdtNftCreate(balanceBuilder) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let nonce = yield this.builtinFunctions.address(this.context.getSender()).gas(SystemConstants.ESDT_BASE_GAS_LIMIT).call.ESDTNFTCreate(balanceBuilder, ...args);\n      return balanceBuilder.nonce(nonce);\n    });\n  }\n\n  recallToken(tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let tokenProperties = yield this.esdtSystemContract.query.getTokenProperties(tokenIdentifier);\n\n      let token = __2.Token.fromTokenProperties(tokenIdentifier, tokenProperties);\n\n      return __2.createBalanceBuilder(token);\n    });\n  }\n\n  getBalance(address, balanceBuilder) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let typedAddress = nativeSerializer_1.NativeSerializer.convertNativeToAddress(address, new argumentErrorContext_1.ArgumentErrorContext(\"getBalance\", \"0\", new __1.EndpointParameterDefinition(\"account\", \"\", new __1.AddressType())));\n\n      if (balanceBuilder.getToken().isEgld()) {\n        return yield this.provider.getAccount(typedAddress).then(account => account.balance);\n      }\n\n      let tokenData = yield this.getTokenData(typedAddress, balanceBuilder);\n      return balanceBuilder.raw(tokenData.balance);\n    });\n  }\n\n  getBalanceList(address, balanceBuilder) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let typedAddress = nativeSerializer_1.NativeSerializer.convertNativeToAddress(address, new argumentErrorContext_1.ArgumentErrorContext(\"getBalanceList\", \"0\", new __1.EndpointParameterDefinition(\"account\", \"\", new __1.AddressType())));\n\n      if (balanceBuilder.getToken().isNft() && balanceBuilder.hasNonce()) {\n        return [yield this.getBalance(typedAddress, balanceBuilder)];\n      }\n\n      return yield this.provider.getAddressEsdtList(typedAddress).then(esdtList => {\n        let tokenBalances = [];\n        let filterIdentifier = balanceBuilder.getTokenIdentifier() + '-';\n\n        for (let [identifier, details] of Object.entries(esdtList)) {\n          if (identifier.startsWith(filterIdentifier)) {\n            tokenBalances.push(balanceBuilder.nonce(details.nonce).raw(details.balance));\n          }\n        }\n\n        return tokenBalances;\n      });\n    });\n  }\n\n  getTokenData(address, balanceBuilder) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let tokenIdentifier = balanceBuilder.getTokenIdentifier();\n\n      if (balanceBuilder.getToken().isFungible()) {\n        return yield this.provider.getAddressEsdt(address, tokenIdentifier);\n      } else {\n        return yield this.provider.getAddressNft(address, tokenIdentifier, balanceBuilder.getNonce());\n      }\n    });\n  }\n\n  currentNonce() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let networkStatus = yield this.provider.getNetworkStatus();\n      return networkStatus.Nonce;\n    });\n  }\n\n}\n\nexports.SystemWrapper = SystemWrapper;\n\nfunction getGasFromValue(baseGas, value) {\n  if (!value || value.isEgld()) {\n    return Math.max(baseGas, SystemConstants.MIN_TRANSACTION_GAS);\n  }\n\n  if (value.token.isFungible()) {\n    return baseGas + SystemConstants.ESDT_TRANSFER_GAS_LIMIT;\n  } else {\n    return baseGas + SystemConstants.ESDT_NFT_TRANSFER_GAS_LIMIT;\n  }\n}\n\nexports.getGasFromValue = getGasFromValue;","map":{"version":3,"mappings":"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","names":["SystemConstants","path_1","join","__dirname","__2","exports","SystemWrapper","chainSendContext_1","constructor","provider","context","sendContract","esdtSystemContract","issueCost","builtinFunctions","sendWrapper","loadWrapper","projectPath","filenameHint","__1","loadProject","getEsdtContractConfig","ownerAddress","baseIssuingCost","minTokenNameLength","maxTokenNameLength","query","getContractConfig","raw","load","logger","SYSTEM_ABI_PATH","address","ESDT_CONTRACT_ADDRESS","testutils_1","Zero","contractConfig","send","receiver","nativeSerializer_1","convertNativeToAddress","argumentErrorContext_1","autoGas","call","issueFungible","args","resultingCalls","issueResult","gas","ESDT_ISSUE_GAS_LIMIT","value","results","issue","tokenIdentifier","extractFieldsFromEsdtTransferDataField","data","Buffer","from","toString","recallToken","issueSemiFungible","issueNonFungible","esdtNftCreate","balanceBuilder","nonce","getSender","ESDT_BASE_GAS_LIMIT","ESDTNFTCreate","tokenProperties","getTokenProperties","token","fromTokenProperties","getBalance","typedAddress","getToken","isEgld","getAccount","then","account","balance","tokenData","getTokenData","getBalanceList","isNft","hasNonce","getAddressEsdtList","esdtList","tokenBalances","filterIdentifier","getTokenIdentifier","identifier","details","Object","entries","startsWith","push","isFungible","getAddressEsdt","getAddressNft","getNonce","currentNonce","networkStatus","getNetworkStatus","Nonce","getGasFromValue","baseGas","Math","max","MIN_TRANSACTION_GAS","ESDT_TRANSFER_GAS_LIMIT","ESDT_NFT_TRANSFER_GAS_LIMIT"],"sourceRoot":"","sources":["../../../src/smartcontracts/wrapper/systemWrapper.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}