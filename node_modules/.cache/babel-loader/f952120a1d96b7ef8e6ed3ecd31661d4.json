{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendDogecoinTransaction = exports.prepareDogecoinSignedTransaction = exports.signDogecoinKMSTransaction = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\")); // @ts-ignore\n\n\nconst bitcore_lib_doge_1 = require(\"bitcore-lib-doge\");\n\nconst blockchain_1 = require(\"../blockchain\");\n\nconst tatum_1 = require(\"../connector/tatum\");\n\nconst model_1 = require(\"../model\");\n/**\n * Prepare a signed Doge transaction with the private key locally. Nothing is broadcasted to the blockchain.\n * @returns raw transaction data in hex, to be broadcasted to blockchain.\n */\n\n\nconst prepareSignedTransaction = async body => {\n  await tatum_1.validateBody(body, model_1.TransferDogeBlockchain);\n  const {\n    fromUTXO,\n    to,\n    fee,\n    changeAddress\n  } = body;\n  const tx = new bitcore_lib_doge_1.Transaction().fee(Number(new bignumber_js_1.default(fee).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR))).change(changeAddress);\n  const privateKeysToSign = [];\n\n  for (const item of fromUTXO) {\n    tx.from({\n      txId: item.txHash,\n      outputIndex: item.index,\n      script: bitcore_lib_doge_1.Script.fromAddress(item.address).toString(),\n      satoshis: Number(new bignumber_js_1.default(item.value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR))\n    });\n    privateKeysToSign.push(item.signatureId || item.privateKey);\n  }\n\n  for (const item of to) {\n    tx.to(item.address, Number(new bignumber_js_1.default(item.value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)));\n  }\n\n  if (fromUTXO[0].signatureId) {\n    return JSON.stringify({\n      txData: JSON.stringify(tx),\n      privateKeysToSign\n    });\n  }\n\n  for (const pk of privateKeysToSign) {\n    tx.sign(bitcore_lib_doge_1.PrivateKey.fromWIF(pk));\n  }\n\n  return tx.serialize();\n};\n/**\n * Sign Dogecoin pending transaction from Tatum KMS\n * @param tx pending transaction from KMS\n * @param privateKeys private keys to sign transaction with.\n * @param testnet mainnet or testnet version\n * @returns transaction data to be broadcast to blockchain.\n */\n\n\nconst signDogecoinKMSTransaction = async (tx, privateKeys, testnet) => {\n  if (tx.chain !== model_1.Currency.DOGE) {\n    throw Error('Unsupported chain.');\n  }\n\n  const builder = new bitcore_lib_doge_1.Transaction(JSON.parse(tx.serializedTransaction));\n\n  for (const privateKey of privateKeys) {\n    builder.sign(bitcore_lib_doge_1.PrivateKey.fromWIF(privateKey));\n  }\n\n  return builder.serialize();\n};\n\nexports.signDogecoinKMSTransaction = signDogecoinKMSTransaction;\n/**\n * Sign Dogecoin transaction with private keys locally. Nothing is broadcast to the blockchain.\n * @param body content of the transaction to broadcast\n * @returns transaction data to be broadcast to blockchain.\n */\n\nconst prepareDogecoinSignedTransaction = async body => {\n  return prepareSignedTransaction(body);\n};\n\nexports.prepareDogecoinSignedTransaction = prepareDogecoinSignedTransaction;\n/**\n * Send Dogecoin transaction to the blockchain. This method broadcasts signed transaction to the blockchain.\n * This operation is irreversible.\n * @param body content of the transaction to broadcast\n * @returns transaction id of the transaction in the blockchain\n */\n\nconst sendDogecoinTransaction = async body => {\n  return blockchain_1.dogeBroadcast(await exports.prepareDogecoinSignedTransaction(body));\n};\n\nexports.sendDogecoinTransaction = sendDogecoinTransaction;","map":{"version":3,"mappings":"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","names":["prepareSignedTransaction","body","tatum_1","model_1","fromUTXO","to","fee","changeAddress","tx","bitcore_lib_doge_1","Number","bignumber_js_1","multipliedBy","toFixed","ROUND_FLOOR","change","privateKeysToSign","item","from","txId","txHash","outputIndex","index","script","fromAddress","address","toString","satoshis","value","push","signatureId","privateKey","JSON","stringify","txData","pk","sign","fromWIF","serialize","signDogecoinKMSTransaction","privateKeys","testnet","chain","DOGE","Error","builder","parse","serializedTransaction","exports","prepareDogecoinSignedTransaction","sendDogecoinTransaction","blockchain_1"],"sourceRoot":"","sources":["../../../src/transaction/dogecoin.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}