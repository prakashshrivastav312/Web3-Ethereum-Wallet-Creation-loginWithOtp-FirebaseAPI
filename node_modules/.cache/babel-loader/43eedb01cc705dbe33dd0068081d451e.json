{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Utils = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar clone_1 = tslib_1.__importDefault(require(\"lodash/clone\"));\n\nvar randombytes_1 = tslib_1.__importDefault(require(\"randombytes\"));\n\nvar stellar_base_1 = require(\"stellar-base\");\n\nvar errors_1 = require(\"./errors\");\n\nvar Utils;\n\n(function (Utils) {\n  function buildChallengeTx(serverKeypair, clientAccountID, homeDomain, timeout, networkPassphrase, webAuthDomain, memo) {\n    if (timeout === void 0) {\n      timeout = 300;\n    }\n\n    if (memo === void 0) {\n      memo = null;\n    }\n\n    if (clientAccountID.startsWith(\"M\") && memo) {\n      throw Error(\"memo cannot be used if clientAccountID is a muxed account\");\n    }\n\n    var account = new stellar_base_1.Account(serverKeypair.publicKey(), \"-1\");\n    var now = Math.floor(Date.now() / 1000);\n    var value = randombytes_1.default(48).toString(\"base64\");\n    var builder = new stellar_base_1.TransactionBuilder(account, {\n      fee: stellar_base_1.BASE_FEE,\n      networkPassphrase: networkPassphrase,\n      timebounds: {\n        minTime: now,\n        maxTime: now + timeout\n      }\n    }).addOperation(stellar_base_1.Operation.manageData({\n      name: homeDomain + \" auth\",\n      value: value,\n      source: clientAccountID,\n      withMuxing: true\n    })).addOperation(stellar_base_1.Operation.manageData({\n      name: \"web_auth_domain\",\n      value: webAuthDomain,\n      source: account.accountId()\n    }));\n\n    if (memo) {\n      builder.addMemo(stellar_base_1.Memo.id(memo));\n    }\n\n    var transaction = builder.build();\n    transaction.sign(serverKeypair);\n    return transaction.toEnvelope().toXDR(\"base64\").toString();\n  }\n\n  Utils.buildChallengeTx = buildChallengeTx;\n\n  function readChallengeTx(challengeTx, serverAccountID, networkPassphrase, homeDomains, webAuthDomain) {\n    var _a;\n\n    if (serverAccountID.startsWith(\"M\")) {\n      throw Error(\"Invalid serverAccountID: multiplexed accounts are not supported.\");\n    }\n\n    var transaction;\n\n    try {\n      transaction = new stellar_base_1.Transaction(challengeTx, networkPassphrase, true);\n    } catch (_b) {\n      try {\n        transaction = new stellar_base_1.FeeBumpTransaction(challengeTx, networkPassphrase, true);\n      } catch (_c) {\n        throw new errors_1.InvalidSep10ChallengeError(\"Invalid challenge: unable to deserialize challengeTx transaction string\");\n      }\n\n      throw new errors_1.InvalidSep10ChallengeError(\"Invalid challenge: expected a Transaction but received a FeeBumpTransaction\");\n    }\n\n    var sequence = Number.parseInt(transaction.sequence, 10);\n\n    if (sequence !== 0) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction sequence number should be zero\");\n    }\n\n    if (transaction.source !== serverAccountID) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction source account is not equal to the server's account\");\n    }\n\n    if (transaction.operations.length < 1) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction should contain at least one operation\");\n    }\n\n    var _d = transaction.operations,\n        operation = _d[0],\n        subsequentOperations = _d.slice(1);\n\n    if (!operation.source) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction's operation should contain a source account\");\n    }\n\n    var clientAccountID = operation.source;\n    var memo = null;\n\n    if (transaction.memo.type !== stellar_base_1.MemoNone) {\n      if (clientAccountID.startsWith(\"M\")) {\n        throw new errors_1.InvalidSep10ChallengeError(\"The transaction has a memo but the client account ID is a muxed account\");\n      }\n\n      if (transaction.memo.type !== stellar_base_1.MemoID) {\n        throw new errors_1.InvalidSep10ChallengeError(\"The transaction's memo must be of type `id`\");\n      }\n\n      memo = transaction.memo.value;\n    }\n\n    if (operation.type !== \"manageData\") {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction's operation type should be 'manageData'\");\n    }\n\n    if (transaction.timeBounds && Number.parseInt((_a = transaction.timeBounds) === null || _a === void 0 ? void 0 : _a.maxTime, 10) === stellar_base_1.TimeoutInfinite) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction requires non-infinite timebounds\");\n    }\n\n    if (!validateTimebounds(transaction, 60 * 5)) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction has expired\");\n    }\n\n    if (operation.value === undefined) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction's operation values should not be null\");\n    }\n\n    if (!operation.value) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction's operation value should not be null\");\n    }\n\n    if (Buffer.from(operation.value.toString(), \"base64\").length !== 48) {\n      throw new errors_1.InvalidSep10ChallengeError(\"The transaction's operation value should be a 64 bytes base64 random string\");\n    }\n\n    if (!homeDomains) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Invalid homeDomains: a home domain must be provided for verification\");\n    }\n\n    var matchedHomeDomain;\n\n    if (typeof homeDomains === \"string\") {\n      if (homeDomains + \" auth\" === operation.name) {\n        matchedHomeDomain = homeDomains;\n      }\n    } else if (Array.isArray(homeDomains)) {\n      matchedHomeDomain = homeDomains.find(function (domain) {\n        return domain + \" auth\" === operation.name;\n      });\n    } else {\n      throw new errors_1.InvalidSep10ChallengeError(\"Invalid homeDomains: homeDomains type is \" + typeof homeDomains + \" but should be a string or an array\");\n    }\n\n    if (!matchedHomeDomain) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Invalid homeDomains: the transaction's operation key name does not match the expected home domain\");\n    }\n\n    for (var _i = 0, subsequentOperations_1 = subsequentOperations; _i < subsequentOperations_1.length; _i++) {\n      var op = subsequentOperations_1[_i];\n\n      if (op.type !== \"manageData\") {\n        throw new errors_1.InvalidSep10ChallengeError(\"The transaction has operations that are not of type 'manageData'\");\n      }\n\n      if (op.source !== serverAccountID) {\n        throw new errors_1.InvalidSep10ChallengeError(\"The transaction has operations that are unrecognized\");\n      }\n\n      if (op.name === \"web_auth_domain\") {\n        if (op.value === undefined) {\n          throw new errors_1.InvalidSep10ChallengeError(\"'web_auth_domain' operation value should not be null\");\n        }\n\n        if (op.value.compare(Buffer.from(webAuthDomain))) {\n          throw new errors_1.InvalidSep10ChallengeError(\"'web_auth_domain' operation value does not match \" + webAuthDomain);\n        }\n      }\n    }\n\n    if (!verifyTxSignedBy(transaction, serverAccountID)) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Transaction not signed by server: '\" + serverAccountID + \"'\");\n    }\n\n    return {\n      tx: transaction,\n      clientAccountID: clientAccountID,\n      matchedHomeDomain: matchedHomeDomain,\n      memo: memo\n    };\n  }\n\n  Utils.readChallengeTx = readChallengeTx;\n\n  function verifyChallengeTxThreshold(challengeTx, serverAccountID, networkPassphrase, threshold, signerSummary, homeDomains, webAuthDomain) {\n    var _a;\n\n    var signers = signerSummary.map(function (signer) {\n      return signer.key;\n    });\n    var signersFound = verifyChallengeTxSigners(challengeTx, serverAccountID, networkPassphrase, signers, homeDomains, webAuthDomain);\n    var weight = 0;\n\n    var _loop_1 = function (signer) {\n      var sigWeight = ((_a = signerSummary.find(function (s) {\n        return s.key === signer;\n      })) === null || _a === void 0 ? void 0 : _a.weight) || 0;\n      weight += sigWeight;\n    };\n\n    for (var _i = 0, signersFound_1 = signersFound; _i < signersFound_1.length; _i++) {\n      var signer = signersFound_1[_i];\n\n      _loop_1(signer);\n    }\n\n    if (weight < threshold) {\n      throw new errors_1.InvalidSep10ChallengeError(\"signers with weight \" + weight + \" do not meet threshold \" + threshold + \"\\\"\");\n    }\n\n    return signersFound;\n  }\n\n  Utils.verifyChallengeTxThreshold = verifyChallengeTxThreshold;\n\n  function verifyChallengeTxSigners(challengeTx, serverAccountID, networkPassphrase, signers, homeDomains, webAuthDomain) {\n    var tx = readChallengeTx(challengeTx, serverAccountID, networkPassphrase, homeDomains, webAuthDomain).tx;\n    var serverKP;\n\n    try {\n      serverKP = stellar_base_1.Keypair.fromPublicKey(serverAccountID);\n    } catch (err) {\n      throw new Error(\"Couldn't infer keypair from the provided 'serverAccountID': \" + err.message);\n    }\n\n    var clientSigners = new Set();\n\n    for (var _i = 0, signers_1 = signers; _i < signers_1.length; _i++) {\n      var signer = signers_1[_i];\n\n      if (signer === serverKP.publicKey()) {\n        continue;\n      }\n\n      if (signer.charAt(0) !== \"G\") {\n        continue;\n      }\n\n      clientSigners.add(signer);\n    }\n\n    if (clientSigners.size === 0) {\n      throw new errors_1.InvalidSep10ChallengeError(\"No verifiable client signers provided, at least one G... address must be provided\");\n    }\n\n    var allSigners = tslib_1.__spreadArrays([serverKP.publicKey()], Array.from(clientSigners));\n\n    var signersFound = gatherTxSigners(tx, allSigners);\n\n    if (signersFound.indexOf(serverKP.publicKey()) === -1) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Transaction not signed by server: '\" + serverKP.publicKey() + \"'\");\n    }\n\n    if (signersFound.length === 1) {\n      throw new errors_1.InvalidSep10ChallengeError(\"None of the given signers match the transaction signatures\");\n    }\n\n    if (signersFound.length !== tx.signatures.length) {\n      throw new errors_1.InvalidSep10ChallengeError(\"Transaction has unrecognized signatures\");\n    }\n\n    signersFound.splice(signersFound.indexOf(serverKP.publicKey()), 1);\n    return signersFound;\n  }\n\n  Utils.verifyChallengeTxSigners = verifyChallengeTxSigners;\n\n  function verifyTxSignedBy(transaction, accountID) {\n    return gatherTxSigners(transaction, [accountID]).length !== 0;\n  }\n\n  Utils.verifyTxSignedBy = verifyTxSignedBy;\n\n  function gatherTxSigners(transaction, signers) {\n    var hashedSignatureBase = transaction.hash();\n    var txSignatures = clone_1.default(transaction.signatures);\n    var signersFound = new Set();\n\n    for (var _i = 0, signers_2 = signers; _i < signers_2.length; _i++) {\n      var signer = signers_2[_i];\n\n      if (txSignatures.length === 0) {\n        break;\n      }\n\n      var keypair = void 0;\n\n      try {\n        keypair = stellar_base_1.Keypair.fromPublicKey(signer);\n      } catch (err) {\n        throw new errors_1.InvalidSep10ChallengeError(\"Signer is not a valid address: \" + err.message);\n      }\n\n      for (var i = 0; i < txSignatures.length; i++) {\n        var decSig = txSignatures[i];\n\n        if (!decSig.hint().equals(keypair.signatureHint())) {\n          continue;\n        }\n\n        if (keypair.verify(hashedSignatureBase, decSig.signature())) {\n          signersFound.add(signer);\n          txSignatures.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    return Array.from(signersFound);\n  }\n\n  Utils.gatherTxSigners = gatherTxSigners;\n\n  function validateTimebounds(transaction, gracePeriod) {\n    if (gracePeriod === void 0) {\n      gracePeriod = 0;\n    }\n\n    if (!transaction.timeBounds) {\n      return false;\n    }\n\n    var now = Math.floor(Date.now() / 1000);\n    var _a = transaction.timeBounds,\n        minTime = _a.minTime,\n        maxTime = _a.maxTime;\n    return now >= Number.parseInt(minTime, 10) - gracePeriod && now <= Number.parseInt(maxTime, 10) + gracePeriod;\n  }\n})(Utils = exports.Utils || (exports.Utils = {}));","map":{"version":3,"mappings":"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","names":["Utils","buildChallengeTx","serverKeypair","clientAccountID","homeDomain","timeout","networkPassphrase","webAuthDomain","memo","startsWith","Error","account","stellar_base_1","publicKey","now","Math","floor","Date","value","randombytes_1","toString","builder","fee","timebounds","minTime","maxTime","addOperation","manageData","name","source","withMuxing","accountId","addMemo","id","transaction","build","sign","toEnvelope","toXDR","readChallengeTx","challengeTx","serverAccountID","homeDomains","errors_1","sequence","Number","parseInt","operations","length","operation","subsequentOperations","type","timeBounds","_a","validateTimebounds","undefined","Buffer","from","matchedHomeDomain","Array","isArray","find","domain","_i","op","compare","verifyTxSignedBy","tx","verifyChallengeTxThreshold","threshold","signerSummary","signers","map","signer","key","signersFound","verifyChallengeTxSigners","weight","sigWeight","s","serverKP","fromPublicKey","err","message","clientSigners","Set","charAt","add","size","allSigners","gatherTxSigners","indexOf","signatures","splice","accountID","hashedSignatureBase","hash","txSignatures","clone_1","keypair","i","decSig","hint","equals","signatureHint","verify","signature","gracePeriod","exports"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}