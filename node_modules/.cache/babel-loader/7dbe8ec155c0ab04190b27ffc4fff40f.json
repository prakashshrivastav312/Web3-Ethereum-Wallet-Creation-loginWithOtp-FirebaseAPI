{"ast":null,"code":"// m [pubKeys ...] n OP_CHECKMULTISIG\nvar bscript = require('../../script');\n\nvar types = require('../../types');\n\nvar typeforce = require('typeforce');\n\nvar OPS = require('@tatumio/bitcoincash-ops');\n\nvar OP_INT_BASE = OPS.OP_RESERVED; // OP_1 - 1\n\nfunction check(script, allowIncomplete) {\n  var chunks = bscript.decompile(script);\n  if (chunks.length < 4) return false;\n  if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG) return false;\n  if (!types.Number(chunks[0])) return false;\n  if (!types.Number(chunks[chunks.length - 2])) return false;\n  var m = chunks[0] - OP_INT_BASE;\n  var n = chunks[chunks.length - 2] - OP_INT_BASE;\n  if (m <= 0) return false;\n  if (n > 16) return false;\n  if (m > n) return false;\n  if (n !== chunks.length - 3) return false;\n  if (allowIncomplete) return true;\n  var keys = chunks.slice(1, -2);\n  return keys.every(bscript.isCanonicalPubKey);\n}\n\ncheck.toJSON = function () {\n  return 'multi-sig output';\n};\n\nfunction encode(m, pubKeys) {\n  typeforce({\n    m: types.Number,\n    pubKeys: [bscript.isCanonicalPubKey]\n  }, {\n    m: m,\n    pubKeys: pubKeys\n  });\n  var n = pubKeys.length;\n  if (n < m) throw new TypeError('Not enough pubKeys provided');\n  return bscript.compile([].concat(OP_INT_BASE + m, pubKeys, OP_INT_BASE + n, OPS.OP_CHECKMULTISIG));\n}\n\nfunction decode(buffer, allowIncomplete) {\n  var chunks = bscript.decompile(buffer);\n  typeforce(check, chunks, allowIncomplete);\n  return {\n    m: chunks[0] - OP_INT_BASE,\n    pubKeys: chunks.slice(1, -2)\n  };\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  encode: encode\n};","map":{"version":3,"names":["bscript","require","types","typeforce","OPS","OP_INT_BASE","OP_RESERVED","check","script","allowIncomplete","chunks","decompile","length","OP_CHECKMULTISIG","Number","m","n","keys","slice","every","isCanonicalPubKey","toJSON","encode","pubKeys","TypeError","compile","concat","decode","buffer","module","exports"],"sources":["C:/Users/acer/node_modules/@tatumio/bitcoincashjs2-lib/src/templates/multisig/output.js"],"sourcesContent":["// m [pubKeys ...] n OP_CHECKMULTISIG\n\nvar bscript = require('../../script')\nvar types = require('../../types')\nvar typeforce = require('typeforce')\nvar OPS = require('@tatumio/bitcoincash-ops')\nvar OP_INT_BASE = OPS.OP_RESERVED // OP_1 - 1\n\nfunction check (script, allowIncomplete) {\n  var chunks = bscript.decompile(script)\n\n  if (chunks.length < 4) return false\n  if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG) return false\n  if (!types.Number(chunks[0])) return false\n  if (!types.Number(chunks[chunks.length - 2])) return false\n  var m = chunks[0] - OP_INT_BASE\n  var n = chunks[chunks.length - 2] - OP_INT_BASE\n\n  if (m <= 0) return false\n  if (n > 16) return false\n  if (m > n) return false\n  if (n !== chunks.length - 3) return false\n  if (allowIncomplete) return true\n\n  var keys = chunks.slice(1, -2)\n  return keys.every(bscript.isCanonicalPubKey)\n}\ncheck.toJSON = function () { return 'multi-sig output' }\n\nfunction encode (m, pubKeys) {\n  typeforce({\n    m: types.Number,\n    pubKeys: [bscript.isCanonicalPubKey]\n  }, {\n    m: m,\n    pubKeys: pubKeys\n  })\n\n  var n = pubKeys.length\n  if (n < m) throw new TypeError('Not enough pubKeys provided')\n\n  return bscript.compile([].concat(\n    OP_INT_BASE + m,\n    pubKeys,\n    OP_INT_BASE + n,\n    OPS.OP_CHECKMULTISIG\n  ))\n}\n\nfunction decode (buffer, allowIncomplete) {\n  var chunks = bscript.decompile(buffer)\n  typeforce(check, chunks, allowIncomplete)\n\n  return {\n    m: chunks[0] - OP_INT_BASE,\n    pubKeys: chunks.slice(1, -2)\n  }\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  encode: encode\n}\n"],"mappings":"AAAA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAAnB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,0BAAD,CAAjB;;AACA,IAAII,WAAW,GAAGD,GAAG,CAACE,WAAtB,C,CAAkC;;AAElC,SAASC,KAAT,CAAgBC,MAAhB,EAAwBC,eAAxB,EAAyC;EACvC,IAAIC,MAAM,GAAGV,OAAO,CAACW,SAAR,CAAkBH,MAAlB,CAAb;EAEA,IAAIE,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuB,OAAO,KAAP;EACvB,IAAIF,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAN,KAA8BR,GAAG,CAACS,gBAAtC,EAAwD,OAAO,KAAP;EACxD,IAAI,CAACX,KAAK,CAACY,MAAN,CAAaJ,MAAM,CAAC,CAAD,CAAnB,CAAL,EAA8B,OAAO,KAAP;EAC9B,IAAI,CAACR,KAAK,CAACY,MAAN,CAAaJ,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAnB,CAAL,EAA8C,OAAO,KAAP;EAC9C,IAAIG,CAAC,GAAGL,MAAM,CAAC,CAAD,CAAN,GAAYL,WAApB;EACA,IAAIW,CAAC,GAAGN,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAN,GAA4BP,WAApC;EAEA,IAAIU,CAAC,IAAI,CAAT,EAAY,OAAO,KAAP;EACZ,IAAIC,CAAC,GAAG,EAAR,EAAY,OAAO,KAAP;EACZ,IAAID,CAAC,GAAGC,CAAR,EAAW,OAAO,KAAP;EACX,IAAIA,CAAC,KAAKN,MAAM,CAACE,MAAP,GAAgB,CAA1B,EAA6B,OAAO,KAAP;EAC7B,IAAIH,eAAJ,EAAqB,OAAO,IAAP;EAErB,IAAIQ,IAAI,GAAGP,MAAM,CAACQ,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAX;EACA,OAAOD,IAAI,CAACE,KAAL,CAAWnB,OAAO,CAACoB,iBAAnB,CAAP;AACD;;AACDb,KAAK,CAACc,MAAN,GAAe,YAAY;EAAE,OAAO,kBAAP;AAA2B,CAAxD;;AAEA,SAASC,MAAT,CAAiBP,CAAjB,EAAoBQ,OAApB,EAA6B;EAC3BpB,SAAS,CAAC;IACRY,CAAC,EAAEb,KAAK,CAACY,MADD;IAERS,OAAO,EAAE,CAACvB,OAAO,CAACoB,iBAAT;EAFD,CAAD,EAGN;IACDL,CAAC,EAAEA,CADF;IAEDQ,OAAO,EAAEA;EAFR,CAHM,CAAT;EAQA,IAAIP,CAAC,GAAGO,OAAO,CAACX,MAAhB;EACA,IAAII,CAAC,GAAGD,CAAR,EAAW,MAAM,IAAIS,SAAJ,CAAc,6BAAd,CAAN;EAEX,OAAOxB,OAAO,CAACyB,OAAR,CAAgB,GAAGC,MAAH,CACrBrB,WAAW,GAAGU,CADO,EAErBQ,OAFqB,EAGrBlB,WAAW,GAAGW,CAHO,EAIrBZ,GAAG,CAACS,gBAJiB,CAAhB,CAAP;AAMD;;AAED,SAASc,MAAT,CAAiBC,MAAjB,EAAyBnB,eAAzB,EAA0C;EACxC,IAAIC,MAAM,GAAGV,OAAO,CAACW,SAAR,CAAkBiB,MAAlB,CAAb;EACAzB,SAAS,CAACI,KAAD,EAAQG,MAAR,EAAgBD,eAAhB,CAAT;EAEA,OAAO;IACLM,CAAC,EAAEL,MAAM,CAAC,CAAD,CAAN,GAAYL,WADV;IAELkB,OAAO,EAAEb,MAAM,CAACQ,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB;EAFJ,CAAP;AAID;;AAEDW,MAAM,CAACC,OAAP,GAAiB;EACfvB,KAAK,EAAEA,KADQ;EAEfoB,MAAM,EAAEA,MAFO;EAGfL,MAAM,EAAEA;AAHO,CAAjB"},"metadata":{},"sourceType":"script"}