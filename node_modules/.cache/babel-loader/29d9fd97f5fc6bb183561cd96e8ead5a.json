{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.liquidityPoolWithdraw = liquidityPoolWithdraw;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Creates a liquidity pool withdraw operation.\n *\n * @function\n * @alias Operation.liquidityPoolWithdraw\n * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-withdraw\n *\n * @param {object} opts - Options object\n * @param {string} opts.liquidityPoolId - The liquidity pool ID.\n * @param {string} opts.amount - Amount of pool shares to withdraw.\n * @param {string} opts.minAmountA - Minimum amount of first asset to withdraw.\n * @param {string} opts.minAmountB - Minimum amount of second asset to withdraw.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting operation (xdr.LiquidityPoolWithdrawOp).\n */\n\n\nfunction liquidityPoolWithdraw() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var attributes = {};\n\n  if (!opts.liquidityPoolId) {\n    throw new TypeError('liquidityPoolId argument is required');\n  }\n\n  attributes.liquidityPoolId = _stellarXdr_generated2.default.PoolId.fromXDR(opts.liquidityPoolId, 'hex');\n\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError('amount argument is required');\n  }\n\n  attributes.amount = this._toXDRAmount(opts.amount);\n\n  if (!this.isValidAmount(opts.minAmountA, true)) {\n    throw new TypeError('minAmountA argument is required');\n  }\n\n  attributes.minAmountA = this._toXDRAmount(opts.minAmountA);\n\n  if (!this.isValidAmount(opts.minAmountB, true)) {\n    throw new TypeError('minAmountB argument is required');\n  }\n\n  attributes.minAmountB = this._toXDRAmount(opts.minAmountB);\n  var liquidityPoolWithdrawOp = new _stellarXdr_generated2.default.LiquidityPoolWithdrawOp(attributes);\n  var opAttributes = {\n    body: _stellarXdr_generated2.default.OperationBody.liquidityPoolWithdraw(liquidityPoolWithdrawOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","liquidityPoolWithdraw","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","obj","__esModule","default","opts","arguments","length","undefined","attributes","liquidityPoolId","TypeError","PoolId","fromXDR","isValidAmount","amount","_toXDRAmount","minAmountA","minAmountB","liquidityPoolWithdrawOp","LiquidityPoolWithdrawOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"sources":["C:/Users/acer/node_modules/stellar-base/lib/operations/liquidity_pool_withdraw.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.liquidityPoolWithdraw = liquidityPoolWithdraw;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a liquidity pool withdraw operation.\n *\n * @function\n * @alias Operation.liquidityPoolWithdraw\n * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-withdraw\n *\n * @param {object} opts - Options object\n * @param {string} opts.liquidityPoolId - The liquidity pool ID.\n * @param {string} opts.amount - Amount of pool shares to withdraw.\n * @param {string} opts.minAmountA - Minimum amount of first asset to withdraw.\n * @param {string} opts.minAmountB - Minimum amount of second asset to withdraw.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n *\n * @returns {xdr.Operation}   The resulting operation (xdr.LiquidityPoolWithdrawOp).\n */\nfunction liquidityPoolWithdraw() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var attributes = {};\n  if (!opts.liquidityPoolId) {\n    throw new TypeError('liquidityPoolId argument is required');\n  }\n  attributes.liquidityPoolId = _stellarXdr_generated2.default.PoolId.fromXDR(opts.liquidityPoolId, 'hex');\n\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError('amount argument is required');\n  }\n  attributes.amount = this._toXDRAmount(opts.amount);\n\n  if (!this.isValidAmount(opts.minAmountA, true)) {\n    throw new TypeError('minAmountA argument is required');\n  }\n  attributes.minAmountA = this._toXDRAmount(opts.minAmountA);\n\n  if (!this.isValidAmount(opts.minAmountB, true)) {\n    throw new TypeError('minAmountB argument is required');\n  }\n  attributes.minAmountB = this._toXDRAmount(opts.minAmountB);\n\n  var liquidityPoolWithdrawOp = new _stellarXdr_generated2.default.LiquidityPoolWithdrawOp(attributes);\n  var opAttributes = {\n    body: _stellarXdr_generated2.default.OperationBody.liquidityPoolWithdraw(liquidityPoolWithdrawOp)\n  };\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,oCAAD,CAAnC;;AAEA,IAAIC,sBAAsB,GAAGC,sBAAsB,CAACH,qBAAD,CAAnD;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEE,OAAO,EAAEF;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASL,qBAAT,GAAiC;EAC/B,IAAIQ,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;EAEA,IAAIG,UAAU,GAAG,EAAjB;;EACA,IAAI,CAACJ,IAAI,CAACK,eAAV,EAA2B;IACzB,MAAM,IAAIC,SAAJ,CAAc,sCAAd,CAAN;EACD;;EACDF,UAAU,CAACC,eAAX,GAA6BV,sBAAsB,CAACI,OAAvB,CAA+BQ,MAA/B,CAAsCC,OAAtC,CAA8CR,IAAI,CAACK,eAAnD,EAAoE,KAApE,CAA7B;;EAEA,IAAI,CAAC,KAAKI,aAAL,CAAmBT,IAAI,CAACU,MAAxB,CAAL,EAAsC;IACpC,MAAM,IAAIJ,SAAJ,CAAc,6BAAd,CAAN;EACD;;EACDF,UAAU,CAACM,MAAX,GAAoB,KAAKC,YAAL,CAAkBX,IAAI,CAACU,MAAvB,CAApB;;EAEA,IAAI,CAAC,KAAKD,aAAL,CAAmBT,IAAI,CAACY,UAAxB,EAAoC,IAApC,CAAL,EAAgD;IAC9C,MAAM,IAAIN,SAAJ,CAAc,iCAAd,CAAN;EACD;;EACDF,UAAU,CAACQ,UAAX,GAAwB,KAAKD,YAAL,CAAkBX,IAAI,CAACY,UAAvB,CAAxB;;EAEA,IAAI,CAAC,KAAKH,aAAL,CAAmBT,IAAI,CAACa,UAAxB,EAAoC,IAApC,CAAL,EAAgD;IAC9C,MAAM,IAAIP,SAAJ,CAAc,iCAAd,CAAN;EACD;;EACDF,UAAU,CAACS,UAAX,GAAwB,KAAKF,YAAL,CAAkBX,IAAI,CAACa,UAAvB,CAAxB;EAEA,IAAIC,uBAAuB,GAAG,IAAInB,sBAAsB,CAACI,OAAvB,CAA+BgB,uBAAnC,CAA2DX,UAA3D,CAA9B;EACA,IAAIY,YAAY,GAAG;IACjBC,IAAI,EAAEtB,sBAAsB,CAACI,OAAvB,CAA+BmB,aAA/B,CAA6C1B,qBAA7C,CAAmEsB,uBAAnE;EADW,CAAnB;EAGA,KAAKK,gBAAL,CAAsBH,YAAtB,EAAoChB,IAApC;EAEA,OAAO,IAAIL,sBAAsB,CAACI,OAAvB,CAA+BqB,SAAnC,CAA6CJ,YAA7C,CAAP;AACD"},"metadata":{},"sourceType":"script"}