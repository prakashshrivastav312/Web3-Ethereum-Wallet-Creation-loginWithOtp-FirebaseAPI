{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransferBtcOffchainValidator = void 0;\n\nconst class_validator_1 = require(\"class-validator\");\n\nlet TransferBtcOffchainValidator = class TransferBtcOffchainValidator {\n  defaultMessage(validationArguments) {\n    return 'Either mnemonic, keyPair or signatureId must be present.';\n  }\n\n  validate(value, validationArguments) {\n    const {\n      mnemonic,\n      keyPair,\n      signatureId,\n      xpub\n    } = validationArguments === null || validationArguments === void 0 ? void 0 : validationArguments.object;\n\n    if (mnemonic && keyPair) {\n      return false;\n    }\n\n    if (mnemonic && signatureId) {\n      return false;\n    }\n\n    if (signatureId && keyPair) {\n      return false;\n    }\n\n    if (xpub && keyPair) {\n      return false;\n    }\n\n    return true;\n  }\n\n};\nTransferBtcOffchainValidator = __decorate([class_validator_1.ValidatorConstraint({\n  name: 'mnemonicKeypair',\n  async: false\n})], TransferBtcOffchainValidator);\nexports.TransferBtcOffchainValidator = TransferBtcOffchainValidator;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;;AAIA,IAAaA,4BAA4B,GAAzC,MAAaA,4BAAb,CAAyC;EAC9BC,cAAc,CAACC,mBAAD,EAA0C;IAC3D,OAAO,0DAAP;EACH;;EAEMC,QAAQ,CAACC,KAAD,EAAaF,mBAAb,EAAsD;IACjE,MAAM;MAACG,QAAD;MAAWC,OAAX;MAAoBC,WAApB;MAAiCC;IAAjC,IAAyCN,mBAAmB,SAAnB,uBAAmB,WAAnB,GAAmB,MAAnB,sBAAmB,CAAEO,MAApE;;IACA,IAAIJ,QAAQ,IAAIC,OAAhB,EAAyB;MACrB,OAAO,KAAP;IACH;;IACD,IAAID,QAAQ,IAAIE,WAAhB,EAA6B;MACzB,OAAO,KAAP;IACH;;IACD,IAAIA,WAAW,IAAID,OAAnB,EAA4B;MACxB,OAAO,KAAP;IACH;;IACD,IAAIE,IAAI,IAAIF,OAAZ,EAAqB;MACjB,OAAO,KAAP;IACH;;IACD,OAAO,IAAP;EACH;;AApBoC,CAAzC;AAAaN,4BAA4B,eADxCU,sCAAoB;EAACC,IAAI,EAAE,iBAAP;EAA0BC,KAAK,EAAE;AAAjC,CAApB,CACwC,GAA5BZ,4BAA4B,CAA5B;AAAAa","names":["TransferBtcOffchainValidator","defaultMessage","validationArguments","validate","value","mnemonic","keyPair","signatureId","xpub","object","class_validator_1","name","async","exports"],"sourceRoot":"","sources":["../../../../src/model/validation/TransferBtcOffchainValidator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}