{"ast":null,"code":"'use strict';\n\nconst varint = require('varint');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst encoder = require('./encoder');\n\nfunction stringEncodingLength(val) {\n  const len = uint8ArrayFromString(val).byteLength;\n  return varint.encodingLength(len) + len;\n}\n\nfunction stringEncode(val, buffer, dataView, offset) {\n  const oldOffset = offset;\n  const len = uint8ArrayFromString(val).byteLength;\n  varint.encode(len, buffer, offset, 'utf-8');\n  offset += varint.encode.bytes;\n  const arr = uint8ArrayFromString(val);\n  buffer.set(arr, offset);\n  offset += arr.length;\n  stringEncode.bytes = offset - oldOffset;\n}\n\nfunction stringDecode(buffer, dataView, offset) {\n  const oldOffset = offset;\n  const len = varint.decode(buffer, offset);\n  offset += varint.decode.bytes;\n  const val = uint8ArrayToString(buffer.subarray(offset, offset + len));\n  offset += len;\n  stringDecode.bytes = offset - oldOffset;\n  return val;\n}\n\nmodule.exports = encoder(2, stringEncode, stringDecode, stringEncodingLength);","map":{"version":3,"names":["varint","require","fromString","uint8ArrayFromString","toString","uint8ArrayToString","encoder","stringEncodingLength","val","len","byteLength","encodingLength","stringEncode","buffer","dataView","offset","oldOffset","encode","bytes","arr","set","length","stringDecode","decode","subarray","module","exports"],"sources":["C:/Users/acer/node_modules/protons/src/compile/encodings/string.js"],"sourcesContent":["'use strict'\n\nconst varint = require('varint')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst encoder = require('./encoder')\n\nfunction stringEncodingLength (val) {\n  const len = uint8ArrayFromString(val).byteLength\n  return varint.encodingLength(len) + len\n}\n\nfunction stringEncode (val, buffer, dataView, offset) {\n  const oldOffset = offset\n  const len = uint8ArrayFromString(val).byteLength\n\n  varint.encode(len, buffer, offset, 'utf-8')\n  offset += varint.encode.bytes\n\n  const arr = uint8ArrayFromString(val)\n  buffer.set(arr, offset)\n  offset += arr.length\n\n  stringEncode.bytes = offset - oldOffset\n}\n\nfunction stringDecode (buffer, dataView, offset) {\n  const oldOffset = offset\n\n  const len = varint.decode(buffer, offset)\n  offset += varint.decode.bytes\n\n  const val = uint8ArrayToString(buffer.subarray(offset, offset + len))\n  offset += len\n\n  stringDecode.bytes = offset - oldOffset\n\n  return val\n}\n\nmodule.exports = encoder(2, stringEncode, stringDecode, stringEncodingLength)\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAM;EAAEC,UAAU,EAAEC;AAAd,IAAuCF,OAAO,CAAC,yBAAD,CAApD;;AACA,MAAM;EAAEG,QAAQ,EAAEC;AAAZ,IAAmCJ,OAAO,CAAC,uBAAD,CAAhD;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASM,oBAAT,CAA+BC,GAA/B,EAAoC;EAClC,MAAMC,GAAG,GAAGN,oBAAoB,CAACK,GAAD,CAApB,CAA0BE,UAAtC;EACA,OAAOV,MAAM,CAACW,cAAP,CAAsBF,GAAtB,IAA6BA,GAApC;AACD;;AAED,SAASG,YAAT,CAAuBJ,GAAvB,EAA4BK,MAA5B,EAAoCC,QAApC,EAA8CC,MAA9C,EAAsD;EACpD,MAAMC,SAAS,GAAGD,MAAlB;EACA,MAAMN,GAAG,GAAGN,oBAAoB,CAACK,GAAD,CAApB,CAA0BE,UAAtC;EAEAV,MAAM,CAACiB,MAAP,CAAcR,GAAd,EAAmBI,MAAnB,EAA2BE,MAA3B,EAAmC,OAAnC;EACAA,MAAM,IAAIf,MAAM,CAACiB,MAAP,CAAcC,KAAxB;EAEA,MAAMC,GAAG,GAAGhB,oBAAoB,CAACK,GAAD,CAAhC;EACAK,MAAM,CAACO,GAAP,CAAWD,GAAX,EAAgBJ,MAAhB;EACAA,MAAM,IAAII,GAAG,CAACE,MAAd;EAEAT,YAAY,CAACM,KAAb,GAAqBH,MAAM,GAAGC,SAA9B;AACD;;AAED,SAASM,YAAT,CAAuBT,MAAvB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiD;EAC/C,MAAMC,SAAS,GAAGD,MAAlB;EAEA,MAAMN,GAAG,GAAGT,MAAM,CAACuB,MAAP,CAAcV,MAAd,EAAsBE,MAAtB,CAAZ;EACAA,MAAM,IAAIf,MAAM,CAACuB,MAAP,CAAcL,KAAxB;EAEA,MAAMV,GAAG,GAAGH,kBAAkB,CAACQ,MAAM,CAACW,QAAP,CAAgBT,MAAhB,EAAwBA,MAAM,GAAGN,GAAjC,CAAD,CAA9B;EACAM,MAAM,IAAIN,GAAV;EAEAa,YAAY,CAACJ,KAAb,GAAqBH,MAAM,GAAGC,SAA9B;EAEA,OAAOR,GAAP;AACD;;AAEDiB,MAAM,CAACC,OAAP,GAAiBpB,OAAO,CAAC,CAAD,EAAIM,YAAJ,EAAkBU,YAAlB,EAAgCf,oBAAhC,CAAxB"},"metadata":{},"sourceType":"script"}