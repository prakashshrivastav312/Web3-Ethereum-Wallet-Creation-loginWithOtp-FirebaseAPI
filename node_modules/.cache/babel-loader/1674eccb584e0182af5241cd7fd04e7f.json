{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst {\n  bech32,\n  derivePrivate,\n  derivePublic,\n  getPubKeyBlake2b224Hash,\n  mnemonicToRootKeypair,\n  packBaseAddress // tslint:disable-next-line:no-var-requires\n\n} = require('cardano-crypto.js');\n\nconst constants_1 = require(\"../constants\");\n/**\n * Generate an Ada key for the standard derivation path\n * @param mnemonic mnemonic seed to use\n * @returns the key buffer\n */\n\n\nconst generateKey = async mnemonic => {\n  const walletSecret = await mnemonicToRootKeypair(mnemonic, constants_1.ADA_DERIVATION_SCHEME);\n  return constants_1.ADA_DERIVATION_PATH.split('/').slice(1).map(index => index.slice(-1) === '\\'' ? constants_1.HARDENED_THRESHOLD + parseInt(index.slice(0, -1)) : parseInt(index)).reduce((secret, index) => derivePrivate(secret, index, constants_1.ADA_DERIVATION_SCHEME), walletSecret);\n};\n/**\n * Generate an Ada private key for the standard derivation path\n * @param mnemonic mnemonic seed to use\n * @param i derivation index of private key to generate\n * @returns the (extended) private key string\n */\n\n\nconst generatePrivateKey = async (mnemonic, i) => {\n  // /0/i\n  return derivePrivate(derivePrivate(await generateKey(mnemonic), 0, constants_1.ADA_DERIVATION_SCHEME), i, constants_1.ADA_DERIVATION_SCHEME).toString('hex');\n};\n/**\n * Generate an Ada public key for the standard derivation path\n * @param mnemonic mnemonic seed to use\n * @returns the extended public key string (spend + stake)\n */\n\n\nconst generateXPublicKey = async mnemonic => {\n  const root = await generateKey(mnemonic); // /0\n\n  const spendXPub = derivePrivate(root, 0, constants_1.ADA_DERIVATION_SCHEME).slice(64, 128).toString('hex'); // /2/0\n\n  const stakeXPub = derivePrivate(derivePrivate(root, 2, constants_1.ADA_DERIVATION_SCHEME), 0, constants_1.ADA_DERIVATION_SCHEME).slice(64, 128).toString('hex');\n  return spendXPub + stakeXPub;\n};\n\nfunction xpub2blake2b224Hash(xpub) {\n  return getPubKeyBlake2b224Hash(Buffer.from(xpub, 'hex').slice(0, 32));\n}\n/**\n * Generate Carnado address\n * @param testnet extended public key to generate address from\n * @param xpub extended public key to generate address from\n * @param i derivation index of address to generate. Up to 2^31 addresses can be generated.\n * @returns blockchain address\n */\n\n\nconst generateAddress = async (testnet, xpub, i) => {\n  const spendXPub = derivePublic(Buffer.from(xpub.substr(0, 128), 'hex'), i, constants_1.ADA_DERIVATION_SCHEME);\n  const stakeXPub = xpub.substr(128, 128);\n  return bech32.encode(testnet ? 'addr_test' : 'addr', packBaseAddress(xpub2blake2b224Hash(spendXPub), xpub2blake2b224Hash(stakeXPub), testnet ? 0 : 1));\n};\n\nexports.default = {\n  generatePrivateKey,\n  generateXPublicKey,\n  generateAddress\n};","map":{"version":3,"mappings":";;;;;;AAAA,MAAM;EACJA,MADI;EAEJC,aAFI;EAGJC,YAHI;EAIJC,uBAJI;EAKJC,qBALI;EAMJC,eANI,CAON;;AAPM,IAQFC,OAAO,CAAC,mBAAD,CARX;;AAUA;AAEA;;;;;;;AAKA,MAAMC,WAAW,GAAG,MAAOC,QAAP,IAA4C;EAC9D,MAAMC,YAAY,GAAG,MAAML,qBAAqB,CAACI,QAAD,EAAWE,iCAAX,CAAhD;EACA,OAAOA,gCACJC,KADI,CACE,GADF,EAEJC,KAFI,CAEE,CAFF,EAGJC,GAHI,CAGAC,KAAK,IAAIA,KAAK,CAACF,KAAN,CAAY,CAAC,CAAb,MAAoB,IAApB,GAA2BF,iCAAqBK,QAAQ,CAACD,KAAK,CAACF,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAD,CAAxD,GAA+EG,QAAQ,CAACD,KAAD,CAHhG,EAIJE,MAJI,CAIG,CAACC,MAAD,EAASH,KAAT,KAAmBb,aAAa,CAACgB,MAAD,EAASH,KAAT,EAAgBJ,iCAAhB,CAJnC,EAI2ED,YAJ3E,CAAP;AAKD,CAPD;AASA;;;;;;;;AAMA,MAAMS,kBAAkB,GAAG,OAAOV,QAAP,EAAyBW,CAAzB,KAAuD;EAChF;EACA,OAAOlB,aAAa,CAClBA,aAAa,CAAC,MAAMM,WAAW,CAACC,QAAD,CAAlB,EAA8B,CAA9B,EAAiCE,iCAAjC,CADK,EAElBS,CAFkB,EAGlBT,iCAHkB,CAAb,CAILU,QAJK,CAII,KAJJ,CAAP;AAKD,CAPD;AASA;;;;;;;AAKA,MAAMC,kBAAkB,GAAG,MAAOb,QAAP,IAA4C;EACrE,MAAMc,IAAI,GAAG,MAAMf,WAAW,CAACC,QAAD,CAA9B,CADqE,CAErE;;EACA,MAAMe,SAAS,GAAGtB,aAAa,CAACqB,IAAD,EAAO,CAAP,EAAUZ,iCAAV,CAAb,CAA8CE,KAA9C,CAAoD,EAApD,EAAwD,GAAxD,EAA6DQ,QAA7D,CAAsE,KAAtE,CAAlB,CAHqE,CAIrE;;EACA,MAAMI,SAAS,GAAGvB,aAAa,CAC7BA,aAAa,CAACqB,IAAD,EAAO,CAAP,EAAUZ,iCAAV,CADgB,EACkB,CADlB,EACqBA,iCADrB,CAAb,CAEhBE,KAFgB,CAEV,EAFU,EAEN,GAFM,EAEDQ,QAFC,CAEQ,KAFR,CAAlB;EAGA,OAAOG,SAAS,GAAGC,SAAnB;AACD,CATD;;AAWA,SAASC,mBAAT,CAA6BC,IAA7B,EAAyC;EACvC,OAAOvB,uBAAuB,CAACwB,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkB,KAAlB,EAAyBd,KAAzB,CAA+B,CAA/B,EAAkC,EAAlC,CAAD,CAA9B;AACD;AAED;;;;;;;;;AAOA,MAAMiB,eAAe,GAAG,OAAOC,OAAP,EAAyBJ,IAAzB,EAAuCP,CAAvC,KAAqE;EAC3F,MAAMI,SAAS,GAAGrB,YAAY,CAACyB,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAe,GAAf,CAAZ,EAAiC,KAAjC,CAAD,EAA0CZ,CAA1C,EAA6CT,iCAA7C,CAA9B;EACA,MAAMc,SAAS,GAAGE,IAAI,CAACK,MAAL,CAAY,GAAZ,EAAiB,GAAjB,CAAlB;EACA,OAAO/B,MAAM,CAACgC,MAAP,CACLF,OAAO,GAAG,WAAH,GAAiB,MADnB,EAELzB,eAAe,CACboB,mBAAmB,CAACF,SAAD,CADN,EAEbE,mBAAmB,CAACD,SAAD,CAFN,EAGbM,OAAO,GAAG,CAAH,GAAO,CAHD,CAFV,CAAP;AAQD,CAXD;;AAaAG,kBAAe;EACbf,kBADa;EAEbG,kBAFa;EAGbQ;AAHa,CAAf","names":["bech32","derivePrivate","derivePublic","getPubKeyBlake2b224Hash","mnemonicToRootKeypair","packBaseAddress","require","generateKey","mnemonic","walletSecret","constants_1","split","slice","map","index","parseInt","reduce","secret","generatePrivateKey","i","toString","generateXPublicKey","root","spendXPub","stakeXPub","xpub2blake2b224Hash","xpub","Buffer","from","generateAddress","testnet","substr","encode","exports"],"sourceRoot":"","sources":["../../../src/wallet/cardano.crypto.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}