{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils = __importStar(require(\"./utils\"));\n\nconst ValidationError = utils.common.errors.ValidationError;\nconst toRippledAmount = utils.common.toRippledAmount;\n\nconst common_1 = require(\"../common\");\n\nfunction createCheckCashTransaction(account, checkCash) {\n  if (checkCash.amount && checkCash.deliverMin) {\n    throw new ValidationError('\"amount\" and \"deliverMin\" properties on ' + 'CheckCash are mutually exclusive');\n  }\n\n  const txJSON = {\n    Account: account,\n    TransactionType: 'CheckCash',\n    CheckID: checkCash.checkID\n  };\n\n  if (checkCash.amount != null) {\n    txJSON.Amount = toRippledAmount(checkCash.amount);\n  }\n\n  if (checkCash.deliverMin != null) {\n    txJSON.DeliverMin = toRippledAmount(checkCash.deliverMin);\n  }\n\n  return txJSON;\n}\n\nfunction prepareCheckCash(address, checkCash) {\n  let instructions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  try {\n    common_1.validate.prepareCheckCash({\n      address,\n      checkCash,\n      instructions\n    });\n    const txJSON = createCheckCashTransaction(address, checkCash);\n    return utils.prepareTransaction(txJSON, this, instructions);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\nexports.default = prepareCheckCash;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA,MAAMA,eAAe,GAAGC,KAAK,CAACC,MAAN,CAAaC,MAAb,CAAoBH,eAA5C;AACA,MAAMI,eAAe,GAAGH,KAAK,CAACC,MAAN,CAAaE,eAArC;;AACA;;AAWA,SAASC,0BAAT,CACEC,OADF,EAEEC,SAFF,EAEgC;EAE9B,IAAIA,SAAS,CAACC,MAAV,IAAoBD,SAAS,CAACE,UAAlC,EAA8C;IAC5C,MAAM,IAAIT,eAAJ,CACJ,6CACE,kCAFE,CAAN;EAID;;EAED,MAAMU,MAAM,GAAQ;IAClBC,OAAO,EAAEL,OADS;IAElBM,eAAe,EAAE,WAFC;IAGlBC,OAAO,EAAEN,SAAS,CAACO;EAHD,CAApB;;EAMA,IAAIP,SAAS,CAACC,MAAV,IAAoB,IAAxB,EAA8B;IAC5BE,MAAM,CAACK,MAAP,GAAgBX,eAAe,CAACG,SAAS,CAACC,MAAX,CAA/B;EACD;;EAED,IAAID,SAAS,CAACE,UAAV,IAAwB,IAA5B,EAAkC;IAChCC,MAAM,CAACM,UAAP,GAAoBZ,eAAe,CAACG,SAAS,CAACE,UAAX,CAAnC;EACD;;EAED,OAAOC,MAAP;AACD;;AAED,SAASO,gBAAT,CAEEC,OAFF,EAGEX,SAHF,EAIiC;EAAA,IAA/BY,YAA+B,uEAAF,EAAE;;EAE/B,IAAI;IACFC,kBAASH,gBAAT,CAA0B;MAACC,OAAD;MAAUX,SAAV;MAAqBY;IAArB,CAA1B;IACA,MAAMT,MAAM,GAAGL,0BAA0B,CAACa,OAAD,EAAUX,SAAV,CAAzC;IACA,OAAON,KAAK,CAACoB,kBAAN,CAAyBX,MAAzB,EAAiC,IAAjC,EAAuCS,YAAvC,CAAP;EACD,CAJD,CAIE,OAAOG,CAAP,EAAU;IACV,OAAOC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAAP;EACD;AACF;;AAEDG,kBAAeR,gBAAf","names":["ValidationError","utils","common","errors","toRippledAmount","createCheckCashTransaction","account","checkCash","amount","deliverMin","txJSON","Account","TransactionType","CheckID","checkID","Amount","DeliverMin","prepareCheckCash","address","instructions","common_1","prepareTransaction","e","Promise","reject","exports"],"sourceRoot":"","sources":["../../../src/transaction/check-cash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}