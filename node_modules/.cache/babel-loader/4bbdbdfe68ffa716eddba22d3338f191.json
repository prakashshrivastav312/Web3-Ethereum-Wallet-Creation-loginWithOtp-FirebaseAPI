{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrInvalidTxSignReturnValue = exports.ErrNotImplemented = exports.ErrInvalidEsdtTransferDataField = exports.ErrInvalidScCallDataField = exports.ErrBadPEM = exports.ErrContractInteraction = exports.ErrWrongMnemonic = exports.ErrWallet = exports.ErrCodec = exports.ErrStructTyping = exports.ErrTypingSystem = exports.ErrSerialization = exports.ErrTest = exports.ErrMock = exports.ErrContractQuery = exports.ErrContract = exports.ErrExpectedTransactionStatusNotReached = exports.ErrTransactionWatcherTimeout = exports.ErrAsyncTimerAborted = exports.ErrAsyncTimerAlreadyRunning = exports.ErrApiProviderPost = exports.ErrApiProviderGet = exports.ErrInvalidFunctionName = exports.ErrSignatureEmpty = exports.ErrSignatureCannotCreate = exports.ErrTransactionNotSigned = exports.ErrTransactionHashUnknown = exports.ErrGasPriceModifierInvalid = exports.ErrTransactionOptionsInvalid = exports.ErrTransactionVersionInvalid = exports.ErrChainIDInvalid = exports.ErrNonceInvalid = exports.ErrNotEnoughGas = exports.ErrGasLimitInvalid = exports.ErrGasPriceInvalid = exports.ErrBalanceInvalid = exports.ErrSignerCannotSign = exports.ErrAddressEmpty = exports.ErrAddressBadHrp = exports.ErrAddressCannotCreate = exports.ErrInvariantFailed = exports.ErrBadType = exports.ErrUnsupportedOperation = exports.ErrInvalidArgument = exports.Err = void 0;\n\nclass Err extends Error {\n  constructor(message, inner) {\n    super(message);\n    this.inner = undefined;\n    this.inner = inner;\n  }\n  /**\n   * Returns a pretty, friendly summary for the error or for the chain of errros (if appropriate).\n   */\n\n\n  summary() {\n    let result = [];\n    result.push({\n      name: this.name,\n      message: this.message\n    });\n    let inner = this.inner;\n\n    while (inner) {\n      result.push({\n        name: inner.name,\n        message: inner.message\n      });\n      inner = inner.inner;\n    }\n\n    return result;\n  }\n  /**\n   * Returns a HTML-friendly summary for the error or for the chain of errros (if appropriate).\n   */\n\n\n  html() {\n    let summary = this.summary();\n    let error = summary[0];\n    let causedBy = summary.slice(1);\n    let html = `\n            An error of type <strong>${error.name}</strong> occurred: ${error.message}.\n        `;\n    causedBy.forEach(cause => {\n      html += `<br /> ... <strong>${cause.name}</strong>: ${cause.message}`;\n    });\n    return html;\n  }\n  /**\n   * Returns a HTML-friendly summary for the error or for the chain of errros (if appropriate).\n   */\n\n\n  static html(error) {\n    if (error instanceof Err) {\n      return error.html();\n    } else {\n      return `Unexpected error of type <strong>${error.name}</strong> occurred: ${error.message}.`;\n    }\n  }\n\n}\n\nexports.Err = Err;\n/**\n * Signals invalid arguments for a function, for an operation.\n */\n\nclass ErrInvalidArgument extends Err {\n  constructor(name, value) {\n    let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"not specified\";\n    let inner = arguments.length > 3 ? arguments[3] : undefined;\n    super(ErrInvalidArgument.getMessage(name, value, reason), inner);\n  }\n\n  static getMessage(name, value, reason) {\n    if (value) {\n      return `Invalid argument \"${name}\": ${value}. Reason: ${reason}`;\n    }\n\n    return `Invalid argument \"${name}\"`;\n  }\n\n}\n\nexports.ErrInvalidArgument = ErrInvalidArgument;\n/**\n * Signals an unsupported operation.\n */\n\nclass ErrUnsupportedOperation extends Err {\n  constructor(operation) {\n    let reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"not specified\";\n    super(`Operation \"${operation}\" not supported. Reason: ${reason}`);\n  }\n\n}\n\nexports.ErrUnsupportedOperation = ErrUnsupportedOperation;\n/**\n * Signals the provisioning of objects of unexpected (bad) types.\n */\n\nclass ErrBadType extends Err {\n  constructor(name, type, value) {\n    super(`Bad type of \"${name}\": ${value}. Expected type: ${type}`);\n  }\n\n}\n\nexports.ErrBadType = ErrBadType;\n/**\n * Signals that an invariant failed.\n */\n\nclass ErrInvariantFailed extends Err {\n  constructor(message) {\n    super(`\"Invariant failed: ${message}`);\n  }\n\n}\n\nexports.ErrInvariantFailed = ErrInvariantFailed;\n/**\n * Signals issues with {@link Address} instantiation.\n */\n\nclass ErrAddressCannotCreate extends Err {\n  constructor(input, inner) {\n    let message = `Cannot create address from: ${input}`;\n    super(message, inner);\n  }\n\n}\n\nexports.ErrAddressCannotCreate = ErrAddressCannotCreate;\n/**\n * Signals issues with the HRP of an {@link Address}.\n */\n\nclass ErrAddressBadHrp extends Err {\n  constructor(expected, got) {\n    super(`Wrong address HRP. Expected: ${expected}, got ${got}`);\n  }\n\n}\n\nexports.ErrAddressBadHrp = ErrAddressBadHrp;\n/**\n * Signals the presence of an empty / invalid address.\n */\n\nclass ErrAddressEmpty extends Err {\n  constructor() {\n    super(`Address is empty`);\n  }\n\n}\n\nexports.ErrAddressEmpty = ErrAddressEmpty;\n/**\n * Signals an error related to signing a message (a transaction).\n */\n\nclass ErrSignerCannotSign extends Err {\n  constructor(inner) {\n    super(`Cannot sign`, inner);\n  }\n\n}\n\nexports.ErrSignerCannotSign = ErrSignerCannotSign;\n/**\n * Signals an invalid value for {@link Balance} objects.\n */\n\nclass ErrBalanceInvalid extends Err {\n  constructor(value) {\n    super(`Invalid balance: ${value.toString()}`);\n  }\n\n}\n\nexports.ErrBalanceInvalid = ErrBalanceInvalid;\n/**\n * Signals an invalid value for {@link GasPrice} objects.\n */\n\nclass ErrGasPriceInvalid extends Err {\n  constructor(value) {\n    super(`Invalid gas price: ${value}`);\n  }\n\n}\n\nexports.ErrGasPriceInvalid = ErrGasPriceInvalid;\n/**\n * Signals an invalid value for {@link GasLimit} objects.\n */\n\nclass ErrGasLimitInvalid extends Err {\n  constructor(value) {\n    super(`Invalid gas limit: ${value}`);\n  }\n\n}\n\nexports.ErrGasLimitInvalid = ErrGasLimitInvalid;\n/**\n * Signals an invalid value for {@link GasLimit} objects.\n */\n\nclass ErrNotEnoughGas extends Err {\n  constructor(value) {\n    super(`Not enough gas provided: ${value}`);\n  }\n\n}\n\nexports.ErrNotEnoughGas = ErrNotEnoughGas;\n/**\n * Signals an invalid value for {@link Nonce} objects.\n */\n\nclass ErrNonceInvalid extends Err {\n  constructor(value) {\n    super(`Invalid nonce: ${value}`);\n  }\n\n}\n\nexports.ErrNonceInvalid = ErrNonceInvalid;\n/**\n * Signals an invalid value for {@link ChainID} objects.\n */\n\nclass ErrChainIDInvalid extends Err {\n  constructor(value) {\n    super(`Invalid chain ID: ${value}`);\n  }\n\n}\n\nexports.ErrChainIDInvalid = ErrChainIDInvalid;\n/**\n * Signals an invalid value for {@link TransactionVersion} objects.\n */\n\nclass ErrTransactionVersionInvalid extends Err {\n  constructor(value) {\n    super(`Invalid transaction version: ${value}`);\n  }\n\n}\n\nexports.ErrTransactionVersionInvalid = ErrTransactionVersionInvalid;\n/**\n * Signals an invalid value for {@link TransactionOptions} objects.\n */\n\nclass ErrTransactionOptionsInvalid extends Err {\n  constructor(value) {\n    super(`Invalid transaction options: ${value}`);\n  }\n\n}\n\nexports.ErrTransactionOptionsInvalid = ErrTransactionOptionsInvalid;\n/**\n * Signals an invalid value for {@link GasPriceModifier} objects.\n */\n\nclass ErrGasPriceModifierInvalid extends Err {\n  constructor(value) {\n    super(`Invalid gas price modifier: ${value}`);\n  }\n\n}\n\nexports.ErrGasPriceModifierInvalid = ErrGasPriceModifierInvalid;\n/**\n * Signals that the hash of the {@link Transaction} is not known (not set).\n */\n\nclass ErrTransactionHashUnknown extends Err {\n  constructor() {\n    super(`Transaction hash isn't known`);\n  }\n\n}\n\nexports.ErrTransactionHashUnknown = ErrTransactionHashUnknown;\n/**\n * Signals that a {@link Transaction} cannot be used within an operation, since it isn't signed.\n */\n\nclass ErrTransactionNotSigned extends Err {\n  constructor() {\n    super(`Transaction isn't signed`);\n  }\n\n}\n\nexports.ErrTransactionNotSigned = ErrTransactionNotSigned;\n/**\n * Signals an error related to signing a message (a transaction).\n */\n\nclass ErrSignatureCannotCreate extends Err {\n  constructor(input, inner) {\n    let message = `Cannot create signature from: ${input}`;\n    super(message, inner);\n  }\n\n}\n\nexports.ErrSignatureCannotCreate = ErrSignatureCannotCreate;\n/**\n * Signals the usage of an empty signature.\n */\n\nclass ErrSignatureEmpty extends Err {\n  constructor() {\n    super(`Signature is empty`);\n  }\n\n}\n\nexports.ErrSignatureEmpty = ErrSignatureEmpty;\n/**\n * Signals an invalid value for the name of a {@link ContractFunction}.\n */\n\nclass ErrInvalidFunctionName extends Err {\n  constructor() {\n    super(`Invalid function name`);\n  }\n\n}\n\nexports.ErrInvalidFunctionName = ErrInvalidFunctionName;\n/**\n * Signals an error that happened during a HTTP GET request.\n */\n\nclass ErrApiProviderGet extends Err {\n  constructor(url, error, inner) {\n    let message = `Cannot GET ${url}: [${error}]`;\n    super(message, inner);\n  }\n\n}\n\nexports.ErrApiProviderGet = ErrApiProviderGet;\n/**\n * Signals an error that happened during a HTTP POST request.\n */\n\nclass ErrApiProviderPost extends Err {\n  constructor(url, error, inner) {\n    let message = `Cannot POST ${url}: [${error}]`;\n    super(message, inner);\n    this.originalErrorMessage = error || \"\";\n  }\n\n}\n\nexports.ErrApiProviderPost = ErrApiProviderPost;\n/**\n * Signals a failed operation, since the Timer is already running.\n */\n\nclass ErrAsyncTimerAlreadyRunning extends Err {\n  constructor() {\n    super(\"Async timer already running\");\n  }\n\n}\n\nexports.ErrAsyncTimerAlreadyRunning = ErrAsyncTimerAlreadyRunning;\n/**\n * Signals a failed operation, since the Timer has been aborted.\n */\n\nclass ErrAsyncTimerAborted extends Err {\n  constructor() {\n    super(\"Async timer aborted\");\n  }\n\n}\n\nexports.ErrAsyncTimerAborted = ErrAsyncTimerAborted;\n/**\n * Signals a timout for a {@link TransactionWatcher}.\n */\n\nclass ErrTransactionWatcherTimeout extends Err {\n  constructor() {\n    super(`TransactionWatcher has timed out`);\n  }\n\n}\n\nexports.ErrTransactionWatcherTimeout = ErrTransactionWatcherTimeout;\n/**\n * Signals an issue related to waiting for a specific {@link TransactionStatus}.\n */\n\nclass ErrExpectedTransactionStatusNotReached extends Err {\n  constructor() {\n    super(`Expected transaction status not reached`);\n  }\n\n}\n\nexports.ErrExpectedTransactionStatusNotReached = ErrExpectedTransactionStatusNotReached;\n/**\n * Signals a generic error in the context of Smart Contracts.\n */\n\nclass ErrContract extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrContract = ErrContract;\n/**\n * Signals a generic error in the context of querying Smart Contracts.\n */\n\nclass ErrContractQuery extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n  static increaseSpecificity(err) {\n    if (err instanceof ErrApiProviderPost) {\n      if (err.originalErrorMessage.indexOf(\"error running vm func\")) {\n        let newErrorMessage = err.originalErrorMessage.replace(new RegExp(\"executeQuery:\", \"g\"), \"\").trim();\n        return new ErrContractQuery(newErrorMessage);\n      }\n    }\n\n    return err;\n  }\n\n}\n\nexports.ErrContractQuery = ErrContractQuery;\n/**\n * Signals an error thrown by the mock-like test objects.\n */\n\nclass ErrMock extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrMock = ErrMock;\n/**\n * Signals an error thrown when setting up a test.\n */\n\nclass ErrTest extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrTest = ErrTest;\n/**\n * Signals a generic serialization error.\n */\n\nclass ErrSerialization extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrSerialization = ErrSerialization;\n/**\n * Signals a generic type error.\n */\n\nclass ErrTypingSystem extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrTypingSystem = ErrTypingSystem;\n/**\n * Signals a generic struct typing error.\n */\n\nclass ErrStructTyping extends Err {\n  constructor(reason) {\n    super(`Incorrect struct typing: ${reason}`);\n  }\n\n}\n\nexports.ErrStructTyping = ErrStructTyping;\n/**\n * Signals a generic codec (encode / decode) error.\n */\n\nclass ErrCodec extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrCodec = ErrCodec;\n/**\n * Signals a generic wallet error.\n */\n\nclass ErrWallet extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrWallet = ErrWallet;\n/**\n * Signals a wrong mnemonic format.\n */\n\nclass ErrWrongMnemonic extends ErrWallet {\n  constructor() {\n    super(\"Wrong mnemonic format\");\n  }\n\n}\n\nexports.ErrWrongMnemonic = ErrWrongMnemonic;\n/**\n * Signals a generic contract interaction error.\n */\n\nclass ErrContractInteraction extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrContractInteraction = ErrContractInteraction;\n/**\n * Signals a bad PEM file.\n */\n\nclass ErrBadPEM extends ErrWallet {\n  constructor(message) {\n    super(message ? `Bad PEM: ${message}` : `Bad PEM`);\n  }\n\n}\n\nexports.ErrBadPEM = ErrBadPEM;\n/**\n * Signals an invalid smart contract call data field\n */\n\nclass ErrInvalidScCallDataField extends Err {\n  constructor(message) {\n    message = \" \" + message ? message : \".\";\n    super(\"Invalid smart contract call data field\" + message);\n  }\n\n}\n\nexports.ErrInvalidScCallDataField = ErrInvalidScCallDataField;\n/**\n * Signals an invalid ESDT transfer data field\n */\n\nclass ErrInvalidEsdtTransferDataField extends Err {\n  constructor() {\n    super(\"Invalid ESDT transfer call data field\");\n  }\n\n}\n\nexports.ErrInvalidEsdtTransferDataField = ErrInvalidEsdtTransferDataField;\n/**\n * Signals that a method is not yet implemented\n */\n\nclass ErrNotImplemented extends Err {\n  constructor() {\n    super(\"Method not yet implemented\");\n  }\n\n}\n\nexports.ErrNotImplemented = ErrNotImplemented;\n/**\n * Signals that the data inside the url is not a valid one for a transaction sign response\n */\n\nclass ErrInvalidTxSignReturnValue extends Err {\n  constructor() {\n    super(\"Invalid response in transaction sign return url\");\n  }\n\n}\n\nexports.ErrInvalidTxSignReturnValue = ErrInvalidTxSignReturnValue;","map":{"version":3,"mappings":"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","names":["Err","Error","constructor","message","inner","undefined","summary","result","push","name","html","error","causedBy","slice","forEach","cause","exports","ErrInvalidArgument","value","reason","getMessage","ErrUnsupportedOperation","operation","ErrBadType","type","ErrInvariantFailed","ErrAddressCannotCreate","input","ErrAddressBadHrp","expected","got","ErrAddressEmpty","ErrSignerCannotSign","ErrBalanceInvalid","toString","ErrGasPriceInvalid","ErrGasLimitInvalid","ErrNotEnoughGas","ErrNonceInvalid","ErrChainIDInvalid","ErrTransactionVersionInvalid","ErrTransactionOptionsInvalid","ErrGasPriceModifierInvalid","ErrTransactionHashUnknown","ErrTransactionNotSigned","ErrSignatureCannotCreate","ErrSignatureEmpty","ErrInvalidFunctionName","ErrApiProviderGet","url","ErrApiProviderPost","originalErrorMessage","ErrAsyncTimerAlreadyRunning","ErrAsyncTimerAborted","ErrTransactionWatcherTimeout","ErrExpectedTransactionStatusNotReached","ErrContract","ErrContractQuery","increaseSpecificity","err","indexOf","newErrorMessage","replace","RegExp","trim","ErrMock","ErrTest","ErrSerialization","ErrTypingSystem","ErrStructTyping","ErrCodec","ErrWallet","ErrWrongMnemonic","ErrContractInteraction","ErrBadPEM","ErrInvalidScCallDataField","ErrInvalidEsdtTransferDataField","ErrNotImplemented","ErrInvalidTxSignReturnValue"],"sourceRoot":"","sources":["../src/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}