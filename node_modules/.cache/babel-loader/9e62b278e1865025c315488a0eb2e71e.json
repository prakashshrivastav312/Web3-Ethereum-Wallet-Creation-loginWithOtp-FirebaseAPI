{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst assert = __importStar(require(\"assert\"));\n\nconst utils_1 = require(\"./utils\");\n\nconst common_1 = require(\"../../common\");\n\nconst flags = common_1.txFlags.TrustSet;\n\nfunction parseFlag(flagsValue, trueValue, falseValue) {\n  if (flagsValue & trueValue) {\n    return true;\n  }\n\n  if (flagsValue & falseValue) {\n    return false;\n  }\n\n  return undefined;\n}\n\nfunction parseTrustline(tx) {\n  assert.ok(tx.TransactionType === 'TrustSet');\n  return common_1.removeUndefined({\n    limit: tx.LimitAmount.value,\n    currency: tx.LimitAmount.currency,\n    counterparty: tx.LimitAmount.issuer,\n    memos: utils_1.parseMemos(tx),\n    qualityIn: utils_1.parseQuality(tx.QualityIn),\n    qualityOut: utils_1.parseQuality(tx.QualityOut),\n    ripplingDisabled: parseFlag(tx.Flags, flags.SetNoRipple, flags.ClearNoRipple),\n    frozen: parseFlag(tx.Flags, flags.SetFreeze, flags.ClearFreeze),\n    authorized: parseFlag(tx.Flags, flags.SetAuth, 0)\n  });\n}\n\nexports.default = parseTrustline;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA,MAAMA,KAAK,GAAGC,iBAAQC,QAAtB;;AAEA,SAASC,SAAT,CAAmBC,UAAnB,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAoD;EAClD,IAAIF,UAAU,GAAGC,SAAjB,EAA4B;IAC1B,OAAO,IAAP;EACD;;EACD,IAAID,UAAU,GAAGE,UAAjB,EAA6B;IAC3B,OAAO,KAAP;EACD;;EACD,OAAOC,SAAP;AACD;;AAED,SAASC,cAAT,CAAwBC,EAAxB,EAA+B;EAC7BC,MAAM,CAACC,EAAP,CAAUF,EAAE,CAACG,eAAH,KAAuB,UAAjC;EAEA,OAAOX,yBAAgB;IACrBY,KAAK,EAAEJ,EAAE,CAACK,WAAH,CAAeC,KADD;IAErBC,QAAQ,EAAEP,EAAE,CAACK,WAAH,CAAeE,QAFJ;IAGrBC,YAAY,EAAER,EAAE,CAACK,WAAH,CAAeI,MAHR;IAIrBC,KAAK,EAAEC,mBAAWX,EAAX,CAJc;IAKrBY,SAAS,EAAED,qBAAaX,EAAE,CAACa,SAAhB,CALU;IAMrBC,UAAU,EAAEH,qBAAaX,EAAE,CAACe,UAAhB,CANS;IAOrBC,gBAAgB,EAAEtB,SAAS,CACzBM,EAAE,CAACiB,KADsB,EAEzB1B,KAAK,CAAC2B,WAFmB,EAGzB3B,KAAK,CAAC4B,aAHmB,CAPN;IAYrBC,MAAM,EAAE1B,SAAS,CAACM,EAAE,CAACiB,KAAJ,EAAW1B,KAAK,CAAC8B,SAAjB,EAA4B9B,KAAK,CAAC+B,WAAlC,CAZI;IAarBC,UAAU,EAAE7B,SAAS,CAACM,EAAE,CAACiB,KAAJ,EAAW1B,KAAK,CAACiC,OAAjB,EAA0B,CAA1B;EAbA,CAAhB,CAAP;AAeD;;AAEDC,kBAAe1B,cAAf","names":["flags","common_1","TrustSet","parseFlag","flagsValue","trueValue","falseValue","undefined","parseTrustline","tx","assert","ok","TransactionType","limit","LimitAmount","value","currency","counterparty","issuer","memos","utils_1","qualityIn","QualityIn","qualityOut","QualityOut","ripplingDisabled","Flags","SetNoRipple","ClearNoRipple","frozen","SetFreeze","ClearFreeze","authorized","SetAuth","exports"],"sourceRoot":"","sources":["../../../../src/ledger/parse/trustline.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}