{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst scrypt = require('scrypt-js');\n\nconst uuid = require('uuid');\n\nconst cryp = typeof global === 'undefined' ? require('crypto-browserify') : require('crypto');\n\nconst utils = require('../../../caver-utils');\n\nconst PrivateKey = require('./privateKey');\n/**\n * The key role string.\n *\n * @example\n * caver.wallet.keyring.role.roleTransactionKey // caver.wallet.keyring.role[0]\n * caver.wallet.keyring.role.roleAccountUpdateKey // // caver.wallet.keyring.role[1]\n * caver.wallet.keyring.role.roleFeePayerKey // // caver.wallet.keyring.role[2]\n *\n * @alias KeyringFactory.role\n * @type {Map<string|number:string>}\n */\n\n\nconst KEY_ROLE = {\n  roleTransactionKey: 0,\n  0: 'roleTransactionKey',\n  roleAccountUpdateKey: 1,\n  1: 'roleAccountUpdateKey',\n  roleFeePayerKey: 2,\n  2: 'roleFeePayerKey',\n  roleLast: 3\n};\nconst MAXIMUM_KEY_NUM = 10;\n\nconst isMultipleKeysFormat = keys => {\n  if (!_.isArray(keys)) return false;\n  return keys.every(key => {\n    return _.isString(key);\n  });\n};\n\nconst isRoleBasedKeysFormat = roledBasedKeyArray => {\n  if (!_.isArray(roledBasedKeyArray)) return false;\n  if (roledBasedKeyArray.length > KEY_ROLE.roleLast) return false;\n  return roledBasedKeyArray.every(arr => {\n    return _.isArray(arr);\n  });\n};\n\nconst validateForSigning = (hash, chainId) => {\n  if (!utils.isValidHashStrict(hash)) throw new Error(`Invalid transaction hash: ${hash}`);\n\n  if (chainId === undefined) {\n    throw new Error(`chainId should be defined to sign.`);\n  }\n};\n\nconst validateIndexWithKeys = (index, keyLength) => {\n  if (!_.isNumber(index)) throw new Error(`Invalid type of index(${index}): index should be number type.`);\n  if (index < 0) throw new Error(`Invalid index(${index}): index cannot be negative.`);\n  if (index >= keyLength) throw new Error(`Invalid index(${index}): index must be less than the length of keys(${keyLength}).`);\n};\n\nconst decryptKey = (encryptedArray, password) => {\n  if (!encryptedArray || encryptedArray.length === 0) return undefined;\n  const decryptedArray = [];\n\n  for (const encrypted of encryptedArray) {\n    let derivedKey;\n    let kdfparams;\n    /**\n     * Supported kdf modules are the following:\n     * 1) pbkdf2\n     * 2) scrypt\n     */\n\n    if (encrypted.kdf === 'scrypt') {\n      kdfparams = encrypted.kdfparams; // FIXME: support progress reporting callback\n\n      derivedKey = scrypt.syncScrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else if (encrypted.kdf === 'pbkdf2') {\n      kdfparams = encrypted.kdfparams;\n\n      if (kdfparams.prf !== 'hmac-sha256') {\n        throw new Error('Unsupported parameters to PBKDF2');\n      }\n\n      derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n    } else {\n      throw new Error('Unsupported key derivation scheme');\n    }\n\n    const ciphertext = Buffer.from(encrypted.ciphertext, 'hex');\n    const mac = utils.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '');\n\n    if (mac !== encrypted.mac) {\n      throw new Error('Key derivation failed - possibly wrong password');\n    }\n\n    const decipher = cryp.createDecipheriv(encrypted.cipher, derivedKey.slice(0, 16), Buffer.from(encrypted.cipherparams.iv, 'hex'));\n    decryptedArray.push(`0x${Buffer.from([...decipher.update(ciphertext), ...decipher.final()]).toString('hex')}`);\n  }\n\n  return decryptedArray;\n};\n\nconst encryptKey = (privateKey, password, options) => {\n  const encryptedArray = [];\n  if (!privateKey) return encryptedArray;\n  const privateKeyArray = _.isArray(privateKey) ? privateKey : [privateKey];\n\n  for (let i = 0; i < privateKeyArray.length; i++) {\n    const salt = options.salt || cryp.randomBytes(32);\n    const iv = options.iv || cryp.randomBytes(16);\n    let derivedKey;\n    const kdf = options.kdf || 'scrypt';\n    const kdfparams = {\n      dklen: options.dklen || 32,\n      salt: salt.toString('hex')\n    };\n    /**\n     * Supported kdf modules are the following:\n     * 1) pbkdf2\n     * 2) scrypt - default\n     */\n\n    if (kdf === 'pbkdf2') {\n      kdfparams.c = options.c || 262144;\n      kdfparams.prf = 'hmac-sha256';\n      derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n    } else if (kdf === 'scrypt') {\n      // FIXME: support progress reporting callback\n      kdfparams.n = options.n || 4096; // 2048 4096 8192 16384\n\n      kdfparams.r = options.r || 8;\n      kdfparams.p = options.p || 1;\n      derivedKey = scrypt.syncScrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else {\n      throw new Error('Unsupported kdf');\n    }\n\n    const cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n\n    if (!cipher) {\n      throw new Error('Unsupported cipher');\n    }\n\n    let prv = privateKeyArray[i];\n    if (privateKeyArray[i] instanceof PrivateKey) prv = privateKeyArray[i].privateKey;\n    const ciphertext = Buffer.from([...cipher.update(Buffer.from(prv.replace('0x', ''), 'hex')), ...cipher.final()]);\n    const mac = utils.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '');\n    encryptedArray.push({\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex')\n      },\n      cipher: options.cipher || 'aes-128-ctr',\n      kdf,\n      kdfparams,\n      mac: mac.toString('hex')\n    });\n  }\n\n  return encryptedArray;\n};\n\nconst formatEncrypted = (version, address, keyringOrCrypto, options) => {\n  const keystore = {\n    version,\n    id: uuid.v4({\n      random: options.uuid || cryp.randomBytes(16)\n    }),\n    address: address.toLowerCase()\n  };\n\n  if (version === 3) {\n    keystore.crypto = keyringOrCrypto;\n  } else if (version === 4) {\n    keystore.keyring = keyringOrCrypto;\n  } else {\n    throw new Error(`Unsupported version of keystore`);\n  }\n\n  return keystore;\n};\n\nmodule.exports = {\n  KEY_ROLE,\n  MAXIMUM_KEY_NUM,\n  isMultipleKeysFormat,\n  isRoleBasedKeysFormat,\n  validateForSigning,\n  validateIndexWithKeys,\n  decryptKey,\n  encryptKey,\n  formatEncrypted\n};","map":{"version":3,"names":["_","require","scrypt","uuid","cryp","global","utils","PrivateKey","KEY_ROLE","roleTransactionKey","roleAccountUpdateKey","roleFeePayerKey","roleLast","MAXIMUM_KEY_NUM","isMultipleKeysFormat","keys","isArray","every","key","isString","isRoleBasedKeysFormat","roledBasedKeyArray","length","arr","validateForSigning","hash","chainId","isValidHashStrict","Error","undefined","validateIndexWithKeys","index","keyLength","isNumber","decryptKey","encryptedArray","password","decryptedArray","encrypted","derivedKey","kdfparams","kdf","syncScrypt","Buffer","from","salt","n","r","p","dklen","prf","pbkdf2Sync","c","ciphertext","mac","sha3","slice","replace","decipher","createDecipheriv","cipher","cipherparams","iv","push","update","final","toString","encryptKey","privateKey","options","privateKeyArray","i","randomBytes","createCipheriv","prv","formatEncrypted","version","address","keyringOrCrypto","keystore","id","v4","random","toLowerCase","crypto","keyring","module","exports"],"sources":["C:/Users/acer/node_modules/caver-js/packages/caver-wallet/src/keyring/keyringHelper.js"],"sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst scrypt = require('scrypt-js')\nconst uuid = require('uuid')\nconst cryp = typeof global === 'undefined' ? require('crypto-browserify') : require('crypto')\nconst utils = require('../../../caver-utils')\nconst PrivateKey = require('./privateKey')\n\n/**\n * The key role string.\n *\n * @example\n * caver.wallet.keyring.role.roleTransactionKey // caver.wallet.keyring.role[0]\n * caver.wallet.keyring.role.roleAccountUpdateKey // // caver.wallet.keyring.role[1]\n * caver.wallet.keyring.role.roleFeePayerKey // // caver.wallet.keyring.role[2]\n *\n * @alias KeyringFactory.role\n * @type {Map<string|number:string>}\n */\nconst KEY_ROLE = {\n    roleTransactionKey: 0,\n    0: 'roleTransactionKey',\n    roleAccountUpdateKey: 1,\n    1: 'roleAccountUpdateKey',\n    roleFeePayerKey: 2,\n    2: 'roleFeePayerKey',\n    roleLast: 3,\n}\n\nconst MAXIMUM_KEY_NUM = 10\n\nconst isMultipleKeysFormat = keys => {\n    if (!_.isArray(keys)) return false\n    return keys.every(key => {\n        return _.isString(key)\n    })\n}\n\nconst isRoleBasedKeysFormat = roledBasedKeyArray => {\n    if (!_.isArray(roledBasedKeyArray)) return false\n    if (roledBasedKeyArray.length > KEY_ROLE.roleLast) return false\n\n    return roledBasedKeyArray.every(arr => {\n        return _.isArray(arr)\n    })\n}\n\nconst validateForSigning = (hash, chainId) => {\n    if (!utils.isValidHashStrict(hash)) throw new Error(`Invalid transaction hash: ${hash}`)\n\n    if (chainId === undefined) {\n        throw new Error(`chainId should be defined to sign.`)\n    }\n}\n\nconst validateIndexWithKeys = (index, keyLength) => {\n    if (!_.isNumber(index)) throw new Error(`Invalid type of index(${index}): index should be number type.`)\n    if (index < 0) throw new Error(`Invalid index(${index}): index cannot be negative.`)\n    if (index >= keyLength) throw new Error(`Invalid index(${index}): index must be less than the length of keys(${keyLength}).`)\n}\n\nconst decryptKey = (encryptedArray, password) => {\n    if (!encryptedArray || encryptedArray.length === 0) return undefined\n\n    const decryptedArray = []\n    for (const encrypted of encryptedArray) {\n        let derivedKey\n        let kdfparams\n        /**\n         * Supported kdf modules are the following:\n         * 1) pbkdf2\n         * 2) scrypt\n         */\n        if (encrypted.kdf === 'scrypt') {\n            kdfparams = encrypted.kdfparams\n\n            // FIXME: support progress reporting callback\n            derivedKey = scrypt.syncScrypt(\n                Buffer.from(password),\n                Buffer.from(kdfparams.salt, 'hex'),\n                kdfparams.n,\n                kdfparams.r,\n                kdfparams.p,\n                kdfparams.dklen\n            )\n        } else if (encrypted.kdf === 'pbkdf2') {\n            kdfparams = encrypted.kdfparams\n\n            if (kdfparams.prf !== 'hmac-sha256') {\n                throw new Error('Unsupported parameters to PBKDF2')\n            }\n\n            derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256')\n        } else {\n            throw new Error('Unsupported key derivation scheme')\n        }\n\n        const ciphertext = Buffer.from(encrypted.ciphertext, 'hex')\n\n        const mac = utils.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '')\n        if (mac !== encrypted.mac) {\n            throw new Error('Key derivation failed - possibly wrong password')\n        }\n\n        const decipher = cryp.createDecipheriv(encrypted.cipher, derivedKey.slice(0, 16), Buffer.from(encrypted.cipherparams.iv, 'hex'))\n        decryptedArray.push(`0x${Buffer.from([...decipher.update(ciphertext), ...decipher.final()]).toString('hex')}`)\n    }\n    return decryptedArray\n}\n\nconst encryptKey = (privateKey, password, options) => {\n    const encryptedArray = []\n\n    if (!privateKey) return encryptedArray\n\n    const privateKeyArray = _.isArray(privateKey) ? privateKey : [privateKey]\n\n    for (let i = 0; i < privateKeyArray.length; i++) {\n        const salt = options.salt || cryp.randomBytes(32)\n        const iv = options.iv || cryp.randomBytes(16)\n\n        let derivedKey\n        const kdf = options.kdf || 'scrypt'\n        const kdfparams = {\n            dklen: options.dklen || 32,\n            salt: salt.toString('hex'),\n        }\n\n        /**\n         * Supported kdf modules are the following:\n         * 1) pbkdf2\n         * 2) scrypt - default\n         */\n        if (kdf === 'pbkdf2') {\n            kdfparams.c = options.c || 262144\n            kdfparams.prf = 'hmac-sha256'\n            derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256')\n        } else if (kdf === 'scrypt') {\n            // FIXME: support progress reporting callback\n            kdfparams.n = options.n || 4096 // 2048 4096 8192 16384\n            kdfparams.r = options.r || 8\n            kdfparams.p = options.p || 1\n            derivedKey = scrypt.syncScrypt(\n                Buffer.from(password),\n                Buffer.from(kdfparams.salt, 'hex'),\n                kdfparams.n,\n                kdfparams.r,\n                kdfparams.p,\n                kdfparams.dklen\n            )\n        } else {\n            throw new Error('Unsupported kdf')\n        }\n\n        const cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv)\n        if (!cipher) {\n            throw new Error('Unsupported cipher')\n        }\n\n        let prv = privateKeyArray[i]\n        if (privateKeyArray[i] instanceof PrivateKey) prv = privateKeyArray[i].privateKey\n        const ciphertext = Buffer.from([...cipher.update(Buffer.from(prv.replace('0x', ''), 'hex')), ...cipher.final()])\n\n        const mac = utils.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '')\n\n        encryptedArray.push({\n            ciphertext: ciphertext.toString('hex'),\n            cipherparams: {\n                iv: iv.toString('hex'),\n            },\n            cipher: options.cipher || 'aes-128-ctr',\n            kdf,\n            kdfparams,\n            mac: mac.toString('hex'),\n        })\n    }\n\n    return encryptedArray\n}\n\nconst formatEncrypted = (version, address, keyringOrCrypto, options) => {\n    const keystore = {\n        version,\n        id: uuid.v4({ random: options.uuid || cryp.randomBytes(16) }),\n        address: address.toLowerCase(),\n    }\n\n    if (version === 3) {\n        keystore.crypto = keyringOrCrypto\n    } else if (version === 4) {\n        keystore.keyring = keyringOrCrypto\n    } else {\n        throw new Error(`Unsupported version of keystore`)\n    }\n\n    return keystore\n}\n\nmodule.exports = {\n    KEY_ROLE,\n    MAXIMUM_KEY_NUM,\n    isMultipleKeysFormat,\n    isRoleBasedKeysFormat,\n    validateForSigning,\n    validateIndexWithKeys,\n    decryptKey,\n    encryptKey,\n    formatEncrypted,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}