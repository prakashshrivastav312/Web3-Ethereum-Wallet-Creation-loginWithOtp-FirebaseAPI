{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkStatus = void 0;\n/**\n * An object holding network status configuration parameters.\n */\n\nclass NetworkStatus {\n  constructor() {\n    this.CurrentRound = 0;\n    this.EpochNumber = 0;\n    this.HighestFinalNonce = 0;\n    this.Nonce = 0;\n    this.NonceAtEpochStart = 0;\n    this.NoncesPassedInCurrentEpoch = 0;\n    this.RoundAtEpochStart = 0;\n    this.RoundsPassedInCurrentEpoch = 0;\n    this.RoundsPerEpoch = 0;\n  }\n  /**\n   * Gets the default network status object (think of the Singleton pattern).\n   */\n\n\n  static getDefault() {\n    if (!NetworkStatus.default) {\n      NetworkStatus.default = new NetworkStatus();\n    }\n\n    return NetworkStatus.default;\n  }\n  /**\n   * Synchronizes a configuration object by querying the node, through a {@link IProvider}.\n   * @param provider The provider to use\n   */\n\n\n  sync(provider) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let fresh = yield provider.getNetworkStatus();\n      Object.assign(this, fresh);\n    });\n  }\n  /**\n   * Constructs a configuration object from a HTTP response (as returned by the provider).\n   */\n\n\n  static fromHttpResponse(payload) {\n    let networkStatus = new NetworkStatus();\n    networkStatus.CurrentRound = Number(payload[\"erd_current_round\"]);\n    networkStatus.EpochNumber = Number(payload[\"erd_epoch_number\"]);\n    networkStatus.HighestFinalNonce = Number(payload[\"erd_highest_final_nonce\"]);\n    networkStatus.Nonce = Number(payload[\"erd_nonce\"]);\n    networkStatus.NonceAtEpochStart = Number(payload[\"erd_nonce_at_epoch_start\"]);\n    networkStatus.NoncesPassedInCurrentEpoch = Number(payload[\"erd_nonces_passed_in_current_epoch\"]);\n    networkStatus.RoundAtEpochStart = Number(payload[\"erd_round_at_epoch_start\"]);\n    networkStatus.RoundsPassedInCurrentEpoch = Number(payload[\"erd_rounds_passed_in_current_epoch\"]);\n    networkStatus.RoundsPerEpoch = Number(payload[\"erd_rounds_per_epoch\"]);\n    return networkStatus;\n  }\n\n}\n\nexports.NetworkStatus = NetworkStatus;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AAGA,MAAaA,aAAb,CAA0B;EAgDtBC;IACI,KAAKC,YAAL,GAAoB,CAApB;IACA,KAAKC,WAAL,GAAmB,CAAnB;IACA,KAAKC,iBAAL,GAAyB,CAAzB;IACA,KAAKC,KAAL,GAAa,CAAb;IACA,KAAKC,iBAAL,GAAyB,CAAzB;IACA,KAAKC,0BAAL,GAAkC,CAAlC;IACA,KAAKC,iBAAL,GAAyB,CAAzB;IACA,KAAKC,0BAAL,GAAkC,CAAlC;IACA,KAAKC,cAAL,GAAsB,CAAtB;EACH;EAED;;;;;EAGiB,OAAVC,UAAU;IACb,IAAI,CAACX,aAAa,CAACY,OAAnB,EAA4B;MACxBZ,aAAa,CAACY,OAAd,GAAwB,IAAIZ,aAAJ,EAAxB;IACH;;IAED,OAAOA,aAAa,CAACY,OAArB;EACH;EAED;;;;;;EAIMC,IAAI,CAACC,QAAD,EAAoB;;MAC1B,IAAIC,KAAK,GAAkB,MAAMD,QAAQ,CAACE,gBAAT,EAAjC;MACAC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBH,KAApB;IACH;EAAA;EAED;;;;;EAGuB,OAAhBI,gBAAgB,CAACC,OAAD,EAAa;IAChC,IAAIC,aAAa,GAAG,IAAIrB,aAAJ,EAApB;IAEAqB,aAAa,CAACnB,YAAd,GAA6BoB,MAAM,CAACF,OAAO,CAAC,mBAAD,CAAR,CAAnC;IACAC,aAAa,CAAClB,WAAd,GAA4BmB,MAAM,CAACF,OAAO,CAAC,kBAAD,CAAR,CAAlC;IACAC,aAAa,CAACjB,iBAAd,GAAkCkB,MAAM,CAACF,OAAO,CAAC,yBAAD,CAAR,CAAxC;IACAC,aAAa,CAAChB,KAAd,GAAsBiB,MAAM,CAACF,OAAO,CAAC,WAAD,CAAR,CAA5B;IACAC,aAAa,CAACf,iBAAd,GAAkCgB,MAAM,CAACF,OAAO,CAAC,0BAAD,CAAR,CAAxC;IACAC,aAAa,CAACd,0BAAd,GAA2Ce,MAAM,CAACF,OAAO,CAAC,oCAAD,CAAR,CAAjD;IACAC,aAAa,CAACb,iBAAd,GAAkCc,MAAM,CAACF,OAAO,CAAC,0BAAD,CAAR,CAAxC;IACAC,aAAa,CAACZ,0BAAd,GAA2Ca,MAAM,CAACF,OAAO,CAAC,oCAAD,CAAR,CAAjD;IACAC,aAAa,CAACX,cAAd,GAA+BY,MAAM,CAACF,OAAO,CAAC,sBAAD,CAAR,CAArC;IAEA,OAAOC,aAAP;EACH;;AAjGqB;;AAA1BE","names":["NetworkStatus","constructor","CurrentRound","EpochNumber","HighestFinalNonce","Nonce","NonceAtEpochStart","NoncesPassedInCurrentEpoch","RoundAtEpochStart","RoundsPassedInCurrentEpoch","RoundsPerEpoch","getDefault","default","sync","provider","fresh","getNetworkStatus","Object","assign","fromHttpResponse","payload","networkStatus","Number","exports"],"sourceRoot":"","sources":["../src/networkStatus.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}