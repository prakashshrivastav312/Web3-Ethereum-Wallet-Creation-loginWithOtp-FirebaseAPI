{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Interaction = void 0;\n\nconst balance_1 = require(\"../balance\");\n\nconst networkParams_1 = require(\"../networkParams\");\n\nconst query_1 = require(\"./query\");\n\nconst address_1 = require(\"../address\");\n\nconst nonce_1 = require(\"../nonce\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\n\n\nclass Interaction {\n  constructor(contract, executingFunction, interpretingFunction, args, receiver) {\n    this.nonce = new nonce_1.Nonce(0);\n    this.value = balance_1.Balance.Zero();\n    this.gasLimit = networkParams_1.GasLimit.min();\n    this.contract = contract;\n    this.executingFunction = executingFunction;\n    this.interpretingFunction = interpretingFunction;\n    this.args = args;\n    this.receiver = receiver;\n  }\n\n  getContract() {\n    return this.contract;\n  }\n\n  getInterpretingFunction() {\n    return this.interpretingFunction;\n  }\n\n  getExecutingFunction() {\n    return this.executingFunction;\n  }\n\n  getArguments() {\n    return this.args;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  getGasLimit() {\n    return this.gasLimit;\n  }\n\n  buildTransaction() {\n    // TODO: create as \"deploy\" transaction if the function is \"init\" (or find a better pattern for deployments).\n    let transaction = this.contract.call({\n      func: this.executingFunction,\n      // GasLimit will be set using \"withGasLimit()\".\n      gasLimit: this.gasLimit,\n      args: this.args,\n      // Value will be set using \"withValue()\".\n      value: this.value,\n      receiver: this.receiver\n    });\n    transaction.setNonce(this.nonce);\n    return transaction;\n  }\n\n  buildQuery() {\n    return new query_1.Query({\n      address: this.contract.getAddress(),\n      func: this.executingFunction,\n      args: this.args,\n      // Value will be set using \"withValue()\".\n      value: this.value,\n      // Caller will be set by the InteractionRunner.\n      caller: new address_1.Address()\n    });\n  }\n  /**\n   * Interprets the results of a previously broadcasted (and fully executed) smart contract transaction.\n   * The outcome is structured such that it allows quick access to each level of detail.\n   */\n\n\n  interpretExecutionResults(transactionOnNetwork) {\n    return interpretExecutionResults(this.getEndpoint(), transactionOnNetwork);\n  }\n  /**\n   * Interprets the raw outcome of a Smart Contract query.\n   * The outcome is structured such that it allows quick access to each level of detail.\n   */\n\n\n  interpretQueryResponse(queryResponse) {\n    let endpoint = this.getEndpoint();\n    queryResponse.setEndpointDefinition(endpoint);\n    let values = queryResponse.outputTyped();\n    let returnCode = queryResponse.returnCode;\n    return {\n      queryResponse: queryResponse,\n      values: values,\n      firstValue: values[0],\n      returnCode: returnCode\n    };\n  }\n\n  withValue(value) {\n    this.value = value;\n    return this;\n  }\n\n  withGasLimit(gasLimit) {\n    this.gasLimit = gasLimit;\n    return this;\n  }\n\n  withNonce(nonce) {\n    this.nonce = nonce;\n    return this;\n  }\n\n  getEndpoint() {\n    return this.getContract().getAbi().getEndpoint(this.getInterpretingFunction());\n  }\n\n}\n\nexports.Interaction = Interaction;\n\nfunction interpretExecutionResults(endpoint, transactionOnNetwork) {\n  let smartContractResults = transactionOnNetwork.getSmartContractResults();\n  let immediateResult = smartContractResults.getImmediate();\n  let resultingCalls = smartContractResults.getResultingCalls();\n  immediateResult.setEndpointDefinition(endpoint);\n  let values = immediateResult.outputTyped();\n  let returnCode = immediateResult.getReturnCode();\n  return {\n    transactionOnNetwork: transactionOnNetwork,\n    smartContractResults: smartContractResults,\n    immediateResult,\n    resultingCalls,\n    values,\n    firstValue: values[0],\n    returnCode: returnCode\n  };\n}","map":{"version":3,"mappings":"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","names":["Interaction","constructor","contract","executingFunction","interpretingFunction","args","receiver","nonce_1","balance_1","Zero","networkParams_1","min","getContract","getInterpretingFunction","getExecutingFunction","getArguments","getValue","value","getGasLimit","gasLimit","buildTransaction","transaction","call","func","setNonce","nonce","buildQuery","query_1","address","getAddress","caller","address_1","interpretExecutionResults","transactionOnNetwork","getEndpoint","interpretQueryResponse","queryResponse","endpoint","setEndpointDefinition","values","outputTyped","returnCode","firstValue","withValue","withGasLimit","withNonce","getAbi","exports","smartContractResults","getSmartContractResults","immediateResult","getImmediate","resultingCalls","getResultingCalls","getReturnCode"],"sourceRoot":"","sources":["../../src/smartcontracts/interaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}