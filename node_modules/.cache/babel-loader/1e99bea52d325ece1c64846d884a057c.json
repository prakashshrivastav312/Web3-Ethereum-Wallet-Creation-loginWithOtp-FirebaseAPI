{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar BN = require('../crypto/bn');\n\nvar BufferUtil = require('../util/buffer');\n\nvar BufferReader = require('../encoding/bufferreader');\n\nvar BufferWriter = require('../encoding/bufferwriter');\n\nvar Hash = require('../crypto/hash');\n\nvar JSUtil = require('../util/js');\n\nvar $ = require('../util/preconditions');\n\nconst Network = require('../networks');\n\nvar GENESIS_BITS = 0x1e0ffff0; // Regtest: 0x207fffff\n\n/**\n * Instantiate a BlockHeader from a Buffer, JSON object, or Object with\n * the properties of the BlockHeader\n *\n * @param {*} - A Buffer, JSON string, or Object\n * @returns {BlockHeader} - An instance of block header\n * @constructor\n */\n\nvar BlockHeader = function BlockHeader(arg) {\n  if (!(this instanceof BlockHeader)) {\n    return new BlockHeader(arg);\n  }\n\n  var info = BlockHeader._from(arg);\n\n  this.version = info.version;\n  this.prevHash = info.prevHash;\n  this.merkleRoot = info.merkleRoot;\n  this.time = info.time;\n  this.timestamp = info.time;\n  this.bits = info.bits;\n  this.nonce = info.nonce;\n\n  if (info.hash) {\n    $.checkState(this.hash === info.hash, 'Argument object hash property does not match block hash.');\n  }\n\n  return this;\n};\n/**\n * @param {*} - A Buffer, JSON string or Object\n * @returns {Object} - An object representing block header data\n * @throws {TypeError} - If the argument was not recognized\n * @private\n */\n\n\nBlockHeader._from = function _from(arg) {\n  var info = {};\n\n  if (BufferUtil.isBuffer(arg)) {\n    info = BlockHeader._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    info = BlockHeader._fromObject(arg);\n  } else {\n    throw new TypeError('Unrecognized argument for BlockHeader');\n  }\n\n  return info;\n};\n/**\n * @param {Object} - A JSON string\n * @returns {Object} - An object representing block header data\n * @private\n */\n\n\nBlockHeader._fromObject = function _fromObject(data) {\n  $.checkArgument(data, 'data is required');\n  var prevHash = data.prevHash;\n  var merkleRoot = data.merkleRoot;\n\n  if (_.isString(data.prevHash)) {\n    prevHash = BufferUtil.reverse(Buffer.from(data.prevHash, 'hex'));\n  }\n\n  if (_.isString(data.merkleRoot)) {\n    merkleRoot = BufferUtil.reverse(Buffer.from(data.merkleRoot, 'hex'));\n  }\n\n  var info = {\n    hash: data.hash,\n    version: data.version,\n    prevHash: prevHash,\n    merkleRoot: merkleRoot,\n    time: data.time,\n    timestamp: data.time,\n    bits: data.bits,\n    nonce: data.nonce\n  };\n  return info;\n};\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromObject = function fromObject(obj) {\n  var info = BlockHeader._fromObject(obj);\n\n  return new BlockHeader(info);\n};\n/**\n * Method to decode blockheader read directly from the .dat block files\n * @param {Binary} - Raw block binary data or buffer\n * @param {Boolean} - (optional. Default = false) Verify block decoding\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromRawBlock = function fromRawBlock(data) {\n  let verify = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (!BufferUtil.isBuffer(data)) {\n    data = Buffer.from(data, 'binary');\n  }\n\n  const br = BufferReader(data);\n  let magic, size;\n\n  if (!verify) {\n    br.pos = BlockHeader.Constants.START_OF_HEADER;\n  } else {\n    magic = br.readUInt32BE();\n    size = br.readUInt32LE();\n    magic = new BN(magic).toString('hex');\n    $.checkState(Network.get(magic), 'Block network is invalid');\n  }\n\n  const info = BlockHeader._fromBufferReader(br);\n\n  return new BlockHeader(info); // Don't verify size b/c we didn't decode the whole block.\n};\n/**\n * @param {Buffer} - A buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromBuffer = function fromBuffer(buf) {\n  var info = BlockHeader._fromBufferReader(BufferReader(buf));\n\n  return new BlockHeader(info);\n};\n/**\n * @param {string} - A hex encoded buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromString = function fromString(str) {\n  var buf = Buffer.from(str, 'hex');\n  return BlockHeader.fromBuffer(buf);\n};\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {Object} - An object representing block header data\n * @private\n */\n\n\nBlockHeader._fromBufferReader = function _fromBufferReader(br) {\n  var info = {};\n  info.version = br.readInt32LE();\n  info.prevHash = br.read(32);\n  info.merkleRoot = br.read(32);\n  info.time = br.readUInt32LE();\n  info.bits = br.readUInt32LE();\n  info.nonce = br.readUInt32LE();\n  return info;\n};\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {BlockHeader} - An instance of block header\n */\n\n\nBlockHeader.fromBufferReader = function fromBufferReader(br) {\n  var info = BlockHeader._fromBufferReader(br);\n\n  return new BlockHeader(info);\n};\n/**\n * @returns {Object} - A plain object of the BlockHeader\n */\n\n\nBlockHeader.prototype.toObject = BlockHeader.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hash,\n    version: this.version,\n    prevHash: BufferUtil.reverse(this.prevHash).toString('hex'),\n    merkleRoot: BufferUtil.reverse(this.merkleRoot).toString('hex'),\n    time: this.time,\n    bits: this.bits,\n    nonce: this.nonce\n  };\n};\n/**\n * @returns {Buffer} - A Buffer of the BlockHeader\n */\n\n\nBlockHeader.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n/**\n * @returns {string} - A hex encoded string of the BlockHeader\n */\n\n\nBlockHeader.prototype.toString = function toString() {\n  return this.toBuffer().toString('hex');\n};\n/**\n * @param {BufferWriter} - An existing instance BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the BlockHeader\n */\n\n\nBlockHeader.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n\n  bw.writeInt32LE(this.version);\n  bw.write(this.prevHash);\n  bw.write(this.merkleRoot);\n  bw.writeUInt32LE(this.time);\n  bw.writeUInt32LE(this.bits);\n  bw.writeUInt32LE(this.nonce);\n  return bw;\n};\n/**\n * Returns the target difficulty for this block\n * @param {Number} bits\n * @returns {BN} An instance of BN with the decoded difficulty bits\n */\n\n\nBlockHeader.prototype.getTargetDifficulty = function getTargetDifficulty(bits) {\n  bits = bits || this.bits;\n  var target = new BN(bits & 0xffffff);\n  var mov = 8 * ((bits >>> 24) - 3);\n\n  while (mov-- > 0) {\n    target = target.mul(new BN(2));\n  }\n\n  return target;\n};\n/**\n * @link https://github.com/litecoin-project/litecoin/blob/81c4f2d80fbd33d127ff9b31bf588e4925599d79/src/rpc/blockchain.cpp#L60\n * @return {Number}\n */\n\n\nBlockHeader.prototype.getDifficulty = function getDifficulty() {\n  let nShift = this.bits >> 24 & 0xff;\n  let dDiff = 0x0000ffff / (this.bits & 0x00ffffff);\n\n  while (nShift < 29) {\n    dDiff *= 256.0;\n    nShift++;\n  }\n\n  while (nShift > 29) {\n    dDiff /= 256.0;\n    nShift--;\n  }\n\n  return parseFloat(dDiff.toFixed(19));\n};\n/**\n * @returns {Buffer} - The little endian hash buffer of the header\n */\n\n\nBlockHeader.prototype._getHash = function hash() {\n  var buf = this.toBuffer();\n  return Hash.sha256sha256(buf);\n};\n\nvar idProperty = {\n  configurable: false,\n  enumerable: true,\n\n  /**\n   * @returns {string} - The big endian hash buffer of the header\n   */\n  get: function () {\n    if (!this._id) {\n      this._id = BufferReader(this._getHash()).readReverse().toString('hex');\n    }\n\n    return this._id;\n  },\n  set: _.noop\n};\nObject.defineProperty(BlockHeader.prototype, 'id', idProperty);\nObject.defineProperty(BlockHeader.prototype, 'hash', idProperty);\n/**\n * @returns {Boolean} - If timestamp is not too far in the future\n */\n\nBlockHeader.prototype.validTimestamp = function validTimestamp() {\n  var currentTime = Math.round(new Date().getTime() / 1000);\n\n  if (this.time > currentTime + BlockHeader.Constants.MAX_TIME_OFFSET) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * @returns {Boolean} - If the proof-of-work hash satisfies the target difficulty\n */\n\n\nBlockHeader.prototype.validProofOfWork = function validProofOfWork() {\n  // For Litecoin, we use the scrypt hash to calculate proof of work\n  var pow = new BN(Hash.scrypt(this.toBuffer()));\n  var target = this.getTargetDifficulty();\n\n  if (pow.cmp(target) > 0) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * @returns {string} - A string formatted for the console\n */\n\n\nBlockHeader.prototype.inspect = function inspect() {\n  return '<BlockHeader ' + this.id + '>';\n};\n\nBlockHeader.Constants = {\n  START_OF_HEADER: 8,\n  // Start buffer position in raw block data. (network magic (4 bytes BE) + block size (4 bytes LE))\n  MAX_TIME_OFFSET: 2 * 60 * 60,\n  // The max a timestamp can be in the future\n  LARGEST_HASH: new BN('10000000000000000000000000000000000000000000000000000000000000000', 'hex')\n};\nmodule.exports = BlockHeader;","map":{"version":3,"names":["_","require","BN","BufferUtil","BufferReader","BufferWriter","Hash","JSUtil","$","Network","GENESIS_BITS","BlockHeader","arg","info","_from","version","prevHash","merkleRoot","time","timestamp","bits","nonce","hash","checkState","isBuffer","_fromBufferReader","isObject","_fromObject","TypeError","data","checkArgument","isString","reverse","Buffer","from","fromObject","obj","fromRawBlock","verify","br","magic","size","pos","Constants","START_OF_HEADER","readUInt32BE","readUInt32LE","toString","get","fromBuffer","buf","fromString","str","readInt32LE","read","fromBufferReader","prototype","toObject","toJSON","toBuffer","toBufferWriter","concat","bw","writeInt32LE","write","writeUInt32LE","getTargetDifficulty","target","mov","mul","getDifficulty","nShift","dDiff","parseFloat","toFixed","_getHash","sha256sha256","idProperty","configurable","enumerable","_id","readReverse","set","noop","Object","defineProperty","validTimestamp","currentTime","Math","round","Date","getTime","MAX_TIME_OFFSET","validProofOfWork","pow","scrypt","cmp","inspect","id","LARGEST_HASH","module","exports"],"sources":["C:/Users/acer/node_modules/bitcore-lib-ltc/lib/block/blockheader.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar BN = require('../crypto/bn');\nvar BufferUtil = require('../util/buffer');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar JSUtil = require('../util/js');\nvar $ = require('../util/preconditions');\nconst Network = require('../networks');\n\nvar GENESIS_BITS = 0x1e0ffff0; // Regtest: 0x207fffff\n\n/**\n * Instantiate a BlockHeader from a Buffer, JSON object, or Object with\n * the properties of the BlockHeader\n *\n * @param {*} - A Buffer, JSON string, or Object\n * @returns {BlockHeader} - An instance of block header\n * @constructor\n */\nvar BlockHeader = function BlockHeader(arg) {\n  if (!(this instanceof BlockHeader)) {\n    return new BlockHeader(arg);\n  }\n  var info = BlockHeader._from(arg);\n  this.version = info.version;\n  this.prevHash = info.prevHash;\n  this.merkleRoot = info.merkleRoot;\n  this.time = info.time;\n  this.timestamp = info.time;\n  this.bits = info.bits;\n  this.nonce = info.nonce;\n\n  if (info.hash) {\n    $.checkState(\n      this.hash === info.hash,\n      'Argument object hash property does not match block hash.'\n    );\n  }\n\n  return this;\n};\n\n/**\n * @param {*} - A Buffer, JSON string or Object\n * @returns {Object} - An object representing block header data\n * @throws {TypeError} - If the argument was not recognized\n * @private\n */\nBlockHeader._from = function _from(arg) {\n  var info = {};\n  if (BufferUtil.isBuffer(arg)) {\n    info = BlockHeader._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    info = BlockHeader._fromObject(arg);\n  } else {\n    throw new TypeError('Unrecognized argument for BlockHeader');\n  }\n  return info;\n};\n\n/**\n * @param {Object} - A JSON string\n * @returns {Object} - An object representing block header data\n * @private\n */\nBlockHeader._fromObject = function _fromObject(data) {\n  $.checkArgument(data, 'data is required');\n  var prevHash = data.prevHash;\n  var merkleRoot = data.merkleRoot;\n  if (_.isString(data.prevHash)) {\n    prevHash = BufferUtil.reverse(Buffer.from(data.prevHash, 'hex'));\n  }\n  if (_.isString(data.merkleRoot)) {\n    merkleRoot = BufferUtil.reverse(Buffer.from(data.merkleRoot, 'hex'));\n  }\n  var info = {\n    hash: data.hash,\n    version: data.version,\n    prevHash: prevHash,\n    merkleRoot: merkleRoot,\n    time: data.time,\n    timestamp: data.time,\n    bits: data.bits,\n    nonce: data.nonce\n  };\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromObject = function fromObject(obj) {\n  var info = BlockHeader._fromObject(obj);\n  return new BlockHeader(info);\n};\n\n/**\n * Method to decode blockheader read directly from the .dat block files\n * @param {Binary} - Raw block binary data or buffer\n * @param {Boolean} - (optional. Default = false) Verify block decoding\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromRawBlock = function fromRawBlock(data, verify = false) {\n  if (!BufferUtil.isBuffer(data)) {\n    data = Buffer.from(data, 'binary');\n  }\n  const br = BufferReader(data);\n  let magic, size;\n\n  if (!verify) {\n    br.pos = BlockHeader.Constants.START_OF_HEADER;\n  } else {\n    magic = br.readUInt32BE();\n    size = br.readUInt32LE();\n\n    magic = new BN(magic).toString('hex');\n    $.checkState(Network.get(magic), 'Block network is invalid');\n  }\n\n  const info = BlockHeader._fromBufferReader(br);\n  return new BlockHeader(info); // Don't verify size b/c we didn't decode the whole block.\n};\n\n/**\n * @param {Buffer} - A buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromBuffer = function fromBuffer(buf) {\n  var info = BlockHeader._fromBufferReader(BufferReader(buf));\n  return new BlockHeader(info);\n};\n\n/**\n * @param {string} - A hex encoded buffer of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromString = function fromString(str) {\n  var buf = Buffer.from(str, 'hex');\n  return BlockHeader.fromBuffer(buf);\n};\n\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {Object} - An object representing block header data\n * @private\n */\nBlockHeader._fromBufferReader = function _fromBufferReader(br) {\n  var info = {};\n  info.version = br.readInt32LE();\n  info.prevHash = br.read(32);\n  info.merkleRoot = br.read(32);\n  info.time = br.readUInt32LE();\n  info.bits = br.readUInt32LE();\n  info.nonce = br.readUInt32LE();\n  return info;\n};\n\n/**\n * @param {BufferReader} - A BufferReader of the block header\n * @returns {BlockHeader} - An instance of block header\n */\nBlockHeader.fromBufferReader = function fromBufferReader(br) {\n  var info = BlockHeader._fromBufferReader(br);\n  return new BlockHeader(info);\n};\n\n/**\n * @returns {Object} - A plain object of the BlockHeader\n */\nBlockHeader.prototype.toObject = BlockHeader.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hash,\n    version: this.version,\n    prevHash: BufferUtil.reverse(this.prevHash).toString('hex'),\n    merkleRoot: BufferUtil.reverse(this.merkleRoot).toString('hex'),\n    time: this.time,\n    bits: this.bits,\n    nonce: this.nonce\n  };\n};\n\n/**\n * @returns {Buffer} - A Buffer of the BlockHeader\n */\nBlockHeader.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n\n/**\n * @returns {string} - A hex encoded string of the BlockHeader\n */\nBlockHeader.prototype.toString = function toString() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * @param {BufferWriter} - An existing instance BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the BlockHeader\n */\nBlockHeader.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n  bw.writeInt32LE(this.version);\n  bw.write(this.prevHash);\n  bw.write(this.merkleRoot);\n  bw.writeUInt32LE(this.time);\n  bw.writeUInt32LE(this.bits);\n  bw.writeUInt32LE(this.nonce);\n  return bw;\n};\n\n/**\n * Returns the target difficulty for this block\n * @param {Number} bits\n * @returns {BN} An instance of BN with the decoded difficulty bits\n */\nBlockHeader.prototype.getTargetDifficulty = function getTargetDifficulty(bits) {\n  bits = bits || this.bits;\n\n  var target = new BN(bits & 0xffffff);\n  var mov = 8 * ((bits >>> 24) - 3);\n  while (mov-- > 0) {\n    target = target.mul(new BN(2));\n  }\n  return target;\n};\n\n/**\n * @link https://github.com/litecoin-project/litecoin/blob/81c4f2d80fbd33d127ff9b31bf588e4925599d79/src/rpc/blockchain.cpp#L60\n * @return {Number}\n */\nBlockHeader.prototype.getDifficulty = function getDifficulty() {\n  let nShift = (this.bits >> 24) & 0xff;\n  let dDiff = 0x0000ffff / (this.bits & 0x00ffffff);\n\n  while (nShift < 29)\n  {\n      dDiff *= 256.0;\n      nShift++;\n  }\n  while (nShift > 29)\n  {\n      dDiff /= 256.0;\n      nShift--;\n  }\n\n  return parseFloat(dDiff.toFixed(19));\n}\n\n/**\n * @returns {Buffer} - The little endian hash buffer of the header\n */\nBlockHeader.prototype._getHash = function hash() {\n  var buf = this.toBuffer();\n  return Hash.sha256sha256(buf);\n};\n\nvar idProperty = {\n  configurable: false,\n  enumerable: true,\n  /**\n   * @returns {string} - The big endian hash buffer of the header\n   */\n  get: function() {\n    if (!this._id) {\n      this._id = BufferReader(this._getHash()).readReverse().toString('hex');\n    }\n    return this._id;\n  },\n  set: _.noop\n};\nObject.defineProperty(BlockHeader.prototype, 'id', idProperty);\nObject.defineProperty(BlockHeader.prototype, 'hash', idProperty);\n\n/**\n * @returns {Boolean} - If timestamp is not too far in the future\n */\nBlockHeader.prototype.validTimestamp = function validTimestamp() {\n  var currentTime = Math.round(new Date().getTime() / 1000);\n  if (this.time > currentTime + BlockHeader.Constants.MAX_TIME_OFFSET) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @returns {Boolean} - If the proof-of-work hash satisfies the target difficulty\n */\nBlockHeader.prototype.validProofOfWork = function validProofOfWork() {\n  // For Litecoin, we use the scrypt hash to calculate proof of work\n  var pow = new BN(Hash.scrypt(this.toBuffer()));\n  var target = this.getTargetDifficulty();\n\n  if (pow.cmp(target) > 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @returns {string} - A string formatted for the console\n */\nBlockHeader.prototype.inspect = function inspect() {\n  return '<BlockHeader ' + this.id + '>';\n};\n\nBlockHeader.Constants = {\n  START_OF_HEADER: 8, // Start buffer position in raw block data. (network magic (4 bytes BE) + block size (4 bytes LE))\n  MAX_TIME_OFFSET: 2 * 60 * 60, // The max a timestamp can be in the future\n  LARGEST_HASH: new BN('10000000000000000000000000000000000000000000000000000000000000000', 'hex')\n};\n\nmodule.exports = BlockHeader;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}